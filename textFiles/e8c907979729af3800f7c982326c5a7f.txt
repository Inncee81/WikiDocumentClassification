













Open source software - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Open_source_software";
		var wgTitle = "Open source software";
		var wgAction = "view";
		var wgArticleId = "277663";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281941559;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Open source software

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





It has been suggested that this article or section be merged into Free and open source software. (Discuss)







This article is in need of attention from an expert on the subject. WikiProject Free Software or the Free Software Portal may be able to help recruit one. (September 2008)






The logo of the Open Source Initiative


For the idea of "open source" in general, see Open source.
Open source software (OSS) is defined as computer software for which the source code and certain other rights normally reserved for copyright holders are provided under a software license that meets the Open Source Definition or that is in the public domain. This permits users to use, change, and improve the software, and to redistribute it in modified or unmodified forms. It is very often developed in a public, collaborative manner. Open source software is the most prominent example of open source development and often compared to user-generated content.[1] The term open source software originated as part of a marketing campaign for free software.[2] A report by Standish Group states that adoption of open source software models has resulted in savings of about $60 billion per year to consumers.[3][4]




Contents


1 Open Source Definition
2 History
3 Philosophy
4 Licensing
5 Funding
6 Open source vs. closed source
7 Open source software vs. free software
8 Open source vs. source-available
9 Pros and cons
10 Development tools
11 Projects and organizations
12 See also
13 References
14 Further reading

14.1 Legal and economic aspects


15 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Open Source Definition
The Open Source Definition is used by the Open Source Initiative to determine whether or not a software license can be considered open source.
The definition was based on the Debian Free Software Guidelines, written and adapted primarily by Bruce Perens.

Introduction

Open source doesn't just mean access to the source code.


The distribution terms of open-source software must comply with the following criteria:

1. Free Redistribution

The license shall not restrict any party from selling or giving away the software as a component of an aggregate software distribution containing programs from several different sources. The license shall not require a royalty or other fee for such sale.

2. Source Code

The program must include source code, and must allow distribution in source code as well as compiled form. Where some form of a product is not distributed with source code, there must be a well-publicized means of obtaining the source code for no more than a reasonable reproduction cost preferably, downloading via the Internet without charge. The source code must be the preferred form in which a programmer would modify the program. Deliberately obfuscated source code is not allowed. Intermediate forms such as the output of a preprocessor or translator are not allowed.

3. Derived Works

The license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software.

4. Integrity of The Author's Source Code

The license may restrict source-code from being distributed in modified form only if the license allows the distribution of "patch files" with the source code for the purpose of modifying the program at build time. The license must explicitly permit distribution of software built from modified source code. The license may require derived works to carry a different name or version number from the original software.

5. No Discrimination Against Persons or Groups

The license must not discriminate against any person or group of persons.

6. No Discrimination Against Fields of Endeavor

The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.

7. Distribution of License

The rights attached to the program must apply to all to whom the program is redistributed without the need for execution of an additional license by those parties.

8. License Must Not Be Specific to a Product

The rights attached to the program must not depend on the program's being part of a particular software distribution. If the program is extracted from that distribution and used or distributed within the terms of the program's license, all parties to whom the program is redistributed should have the same rights as those that are granted in conjunction with the original software distribution.

9. License Must Not Restrict Other Software

The license must not place restrictions on other software that is distributed along with the licensed software. For example, the license must not insist that all other programs distributed on the same medium must be open-source software.

10. License Must Be Technology-Neutral

No provision of the license may be predicated on any individual technology or style of interface.

– Open Source Initiative, http://opensource.org/docs/osd


[edit] History





This section needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (November 2007)


Main article: Open source movement
The free software movement was launched in 1983. In 1998, a group of individuals advocated that the term free software should be replaced by open source software (OSS) as an expression which is less ambiguous and more comfortable for the corporate world[5]. Software developers may want to publish their software with an open source license, so that anybody may also develop the same software or understand its internal functioning. Open source software generally allows anyone to create modifications of the software, port it to new operating systems and processor architectures, share it with others or market it.
The Open Source Definition, notably, presents an open source philosophy, and further defines the terms of usage, modification and redistribution of open source software. Software licenses grant rights to users which would otherwise be reserved by copyright law to the copyright holder. Several open source software licenses have qualified within the boundaries of the Open Source Definition. The most prominent and popular example is the GNU General Public License (GPL). While open source distribution presents a way to make the source codes of a product publicly accessible, the open source licenses allow the authors to fine tune such access.
The open source label came out of a strategy session held in Palo Alto in reaction to Netscape's January 1998 announcement of a source code release for Navigator (as Mozilla). A group of individuals at the session included Todd Anderson, Larry Augustin, John Hall, Sam Ockman, Christine Peterson and Eric S. Raymond. They used the opportunity before the release of Navigator's source code to clarify a potential confusion caused by the ambiguity of the word "free" in English. The 'open source' movement is generally thought to have begun with this strategy session.[citation needed] Many people, nevertheless, claimed that the birth of the Internet, since 1969, started the open source movement, while others do not distinguish between open source and free software movements.[6]
The Free Software Foundation (FSF), started in 1985, intended the word 'free' to mean "free as in free speech" and not "free as in free beer" with emphasis on the positive freedom to distribute rather than a negative freedom from cost. Since a great deal of free software already was (and still is) free of charge, such free software became associated with zero cost, which seemed anti-commercial.
The Open Source Initiative (OSI) was formed in February 1998 by Eric S. Raymond and Bruce Perens. With at least 20 years of evidence from case histories of closed software development versus open development already provided by the Internet developer community, the OSI presented the 'open source' case to commercial businesses, like Netscape. The OSI hoped that the usage of the label "open source," a term suggested by Peterson of the Foresight Institute at the strategy session, would eliminate ambiguity, particularly for individuals who perceive "free software" as anti-commercial. They sought to bring a higher profile to the practical benefits of freely available source code, and they wanted to bring major software businesses and other high-tech industries into open source. Perens attempted to register "open source" as a service mark for the OSI, but that attempt was impractical by trademark standards. Meanwhile, due to the presentation of Raymond's paper to the upper management at Netscape--Raymond only discovered when he read the Press Release, and was called by Netscape CEO Jim Barksdale's PA later in the day--Netscape released its Navigator source code as open source, with favorable results.

[edit] Philosophy
In his 1997 essay The Cathedral and the Bazaar[7], open source evangelist Eric S. Raymond suggests a model for developing OSS known as the Bazaar model. Raymond likens the development of software by traditional methodologies to building a cathedral, "carefully crafted by individual wizards or small bands of mages working in splendid isolation".[7] He suggests that all software should be developed using the bazaar style, which he described as "a great babbling bazaar of differing agendas and approaches."
In the Cathedral model, development takes place in a centralized way. Roles are clearly defined. Roles include people dedicated to designing (the architects), people responsible for managing the project, and people responsible for implementation. Traditional software engineering follows the Cathedral model. Fred P. Brooks in his book The Mythical Man-Month advocates this sort of model. He goes further to say that in order to preserve the architectural integrity of a system, the system design should be done by as few architects as possible.
The Bazaar model, however, is different. In this model, roles are not clearly defined. Gregorio Robles[8] suggests that software developed using the Bazaar model should exhibit the following patterns:

Users should be treated as co-developers
The users are treated like co-developers and so they should have access to the source code of the software. Furthermore users are encouraged to submit additions to the software, code fixes for the software, bug reports, documentation etc. Having more co-developers increases the rate at which the software evolves. Linus's law states that, "Given enough eyeballs all bugs are shallow." This means that if many users view the source code they will eventually find all bugs and suggest how to fix them. Note that some users have advanced programming skills, and furthermore, each user's machine provides an additional testing environment. This new testing environment offers that ability to find and fix a new bug.
Early releases
The first version of the software should be released as early as possible so as to increase one's chances of finding co-developers early.
Frequent integration
New code should be integrated as often as possible so as to avoid the overhead of fixing a large number of bugs at the end of the project life cycle. Some open source projects have nightly builds where integration is done automatically on a daily basis.
Several versions
There should be at least two versions of the software. There should be a buggier version with more features and a more stable version with fewer features. The buggy version (also called the development version) is for users who want the immediate use of the latest features, and are willing to accept the risk of using code that is not yet thoroughly tested. The users can then act as co-developers, reporting bugs and providing bug fixes.
High modularization
The general structure of the software should be modular allowing for parallel development.
Dynamic decision making structure
There is a need for a decision making structure, whether formal or informal, that makes strategic decisions depending on changing user requirements and other factors. Cf. Extreme programming.

Most well known OSS products follow the Bazaar model as suggested by Eric Raymond. These include projects such as the Linux kernel, Firefox, Apache, the GNU Compiler Collection, and Perl to mention a few.

[edit] Licensing





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (November 2007)


Main article: Open source license
A license defines the rights and obligations that a licensor grants to a licensee. Open Source licenses grant licensees the right to copy, modify and redistribute source code (or content). These licenses may also impose obligations (e.g., modifications to the code that are distributed must be made available in source code form, an author attribution must be placed in a program/ documentation using that Open Source, etc.).
Authors initially derive a right to grant a license to their work based on the legal theory that upon creation of a work the author owns the copyright in that work. What the author/licensor is granting when they grant a license to copy, modify and redistribute their work is the right to use the author’s copyrights. The author still retains ownership of those copyrights, the licensee simply is allowed to use those rights, as granted in the license, so long as they maintain the obligations of the license. The author does have the option to sell/assign, versus license, their exclusive right to the copyrights to their work; where upon the new owner/assignee controls the copyrights. The ownership of the copyright (the “rights”) is separate and distinct from the ownership of the work (the “thing”) - a person can own a copy of a piece of code (or a copy of a book) without the rights to copy, modify or redistribute copies of it.
When an author contributes code to an Open Source project (e.g., Apache.org) they do so under an explicit license (e.g., the Apache Contributor License Agreement) or an implicit license (e.g., the Open Source license under which the project is already licensing code). Some Open Source projects do not take contributed code under a license, but actually require (joint) assignment of the author’s copyright in order to accept code contributions into the project (e.g., OpenOffice.org and its Joint Copyright Assignment agreement).
Placing code (or content) in the public domain is a way of waiving an author’s (or owner’s) copyrights in that work. No license is granted, and none is needed, to copy, modify or redistribute a work in the public domain.
Examples of free software license / open source licenses include Apache License, BSD license, GNU General Public License, GNU Lesser General Public License, MIT License, Eclipse Public License and Mozilla Public License.
The proliferation of open source licenses is one of the few negative aspects of the open source movement because it is often difficult to understand the legal implications of the differences between licenses.
An important legal milestone for the open source / free software movement was passed in 2008, when the US federal appeals court ruled that free software licences definitely do set legally binding conditions on the use of copyrighted work, and they are therefore enforceable under existing copyright law. As a result, if end-users do violate the licensing conditions, their license disappears, meaning they are infringing copyright[9].

[edit] Funding
See also: Commercial open source applications
Given the basic fact that OSS can be given away free, a number of alternative models for funding its development other than from the basic profit from selling a software license, have emerged. Independent developers or companies may benefit from consultancy fees or charging for services related to the end use of the software, such as training. Several free OSS packages may have 'professional' versions which have enhanced capabilities and are sold commercially. Several governments and public authorities have chosen to fund open source development companies for their software needs, rather than pay for commercial licenses. Many commercial open source applications are developed and distributed by companies as a combination of both open and closed source components. In this case, the company benefits from the availability of OSS, and thus in turn may end up funding OSS maintenance and upgrades when it benefits their application as a whole.

[edit] Open source vs. closed source





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (November 2007)


Main article: Comparison of open source and closed source
The debate over open source vs. closed source (alternatively called proprietary software) is sometimes heated.
One source of conflict is related to economics: Making money through traditional methods, such as sale of the use of individual copies and patent royalty payment (generally called licensing), is more difficult and in many ways against the very concept of open source software.
Some closed-source advocates see open source software as damaging to the market of commercial software. This is one of the many reasons, as mentioned above, that the term free software was replaced with open source — because many company executives could not believe in a product that did not participate economically in a free-market or mixed-market economy.
The counter to this argument is the use of open source software to fuel the market for a separate product or service. For example:

Providing support and installation services; similar to IT Security groups, Linux Distributions, and Systems companies.
Using the software as a stepping stone to sell a higher-end product or service; e.g., OpenOffice.org vs. StarOffice.
Cost avoidance / cost sharing: many developers need a product, so it makes sense to share development costs (X Window System and the Apache web server)

Since Open Source software is open, all of the defects and security flaws are easily found. Closed-source advocates argue that this makes it easier for a malicious person to discover security flaws. Further, that there is no incentive for an open-source product to be patched. Open-source advocates argue that this makes it easier also for a patch to be found and that the closed-source argument is security through obscurity, which this form of security will eventually fail, often without anyone knowing of the failure. Further, that just because there is not an immediate financial incentive to patch a product, does not mean there is not any incentive to patch a product. Further, if the patch is that significant to the user, having the source code, the user can technically patch the problem themselves. These arguments are hard to prove. However, most studies show that open-source software does have a higher flaw discovery, quicker flaw discovery, and quicker turn around on patches.

[edit] Open source software vs. free software
Main article: Alternative terms for free software
Critics have said that the term “open source” fosters an ambiguity of a different kind such that it confuses the mere availability of the source with the freedom to use, modify, and redistribute it. Developers have used the alternative terms Free/open source Software (FOSS), or Free/Libre/open source Software (FLOSS), consequently, to describe open source software which is also free software.
The term “Open Source” was originally intended to be trademarkable; however, the term was deemed too descriptive, so no trademark exists[10]. The OSI would prefer that people treat Open Source as if it were a trademark, and use it only to describe software licensed under an OSI approved license.[11].
There have been instances where software vendors have labeled proprietary software as “open source” because it interfaces with popular OSS (such as Linux).[citation needed] Open source advocates consider this to be both confusing and incorrect. OSI Certified is a trademark licensed only to people who are distributing software licensed under a license listed on the Open Source Initiative's list[12].
Open source software and free software are different terms for software which comes with certain rights, or freedoms, for the user. They describe two approaches and philosophies towards free software. Open source and free software (or software libre) both describe software which is free from onerous licensing restrictions. It may be used, copied, studied, modified and redistributed without restriction. Free software is not the same as freeware, software available at zero price.
The definition of open source software was written to be almost identical to the free software definition[13]. There are very few cases of software that is free software but is not open source software, and vice versa. The difference in the terms is where they place the emphasis. “Free software” is defined in terms of giving the user freedom. This reflects the goal of the free software movement. “Open source” highlights that the source code is viewable to all and proponents of the term usually emphasize the quality of the software and how this is caused by the development models which are possible and popular among free and open source software projects.
Free software licenses are not written exclusively by the FSF. The FSF and the OSI both list licenses which meet their respective definitions of free software. open source software and free software share an almost identical set of licenses.[citation needed] One exception is an early version of the Apple Public Source License, which was accepted by the OSI but rejected by the FSF because it did not allow private modified versions; this restriction was removed in later version of the license.[citation needed] There are now new versions that are approved by both the OSI and the FSF.
The Open Source Initiative believes that more people will be convinced by the experience of freedom.[citation needed] The FSF believes that more people will be convinced by the concept of freedom. The FSF believes that knowledge of the concept is an essential requirement[14][13], insists on the use of the term free[14][13], and separates itself from the open source movement[14][13]. The Open Source Initiative believes that free has three meanings: free as in beer, free as in freedom, and free as in unsellable.[citation needed] The problem with the term “open source” is it says nothing about the freedom to modify and redistribute, so it is used by people who think that source access without freedom is a sufficient definition. This possibility for misuse is the case for most of the licences that make up Microsoft's “shared source” initiative.

[edit] Open source vs. source-available
Although the OSI definition of "open source software" is widely accepted, a small number of people and organizations use the term to refer to software where the source is available for viewing, but which may not legally be modified or redistributed. Such software is more often referred to as source-available, or as shared source, a term coined by Microsoft.
Michael Tiemann, president of OSI, had criticized[15] companies such as SugarCRM for promoting their software as "open source" when in fact it did not have an OSI-approved license. In SugarCRM's case, it was because the software is so-called "badgeware"[16] since it specified a "badge" that must be displayed in the user interface (SugarCRM has since switched to GPLv3[17]). Another example is Scilab, which calls itself "the open source platform for numerical computation"[18] but has a license[19] that forbids commercial redistribution of modified versions. Because OSI does not have a registered trademark for the term "open source", its legal ability to prevent such usage of the term is limited, but Tiemann advocates using public opinion from OSI, customers, and community members to pressure such organizations to change their license or to use a different term.

[edit] Pros and cons
Software experts and researchers on open source software have identified several advantages and disadvantages. The main advantage for business is that open source is a good way for business to achieve greater penetration of the market. Companies that offer open source software are able to establish an industry standard and, thus, gain competitive advantage. It has also helped build developer loyalty as developers feel empowered and have a sense of ownership of the end product[20]. Moreover less costs of marketing and logistical services are needed for OSS. It also helps companies to keep abreast of all technology developments. It is a good tool to promote a companies’ image, including its commercial products[21]. The OSS development approach has helped produce reliable, high quality software quickly and inexpensively. Besides, it offers the potential for a more flexible technology and quicker innovation. It is said to be more reliable since it typically has thousands of independent programmers testing and fixing bugs of the software. It is flexible because modular systems allow programmers to build custom interfaces, or add new abilities to it and it is innovative since open source programs are the product of collaboration among a large number of different programmers. The mix of divergent perspectives, corporate objectives, and personal goals speeds up innovation[22]. Moreover free software can be developed in accord with purely technical requirements. It does not require to think about commercial pressure that often degrades the quality of the software. Commercial pressures make traditional software developers pay more attention to customers' requirements than to security requirements, since such features are somewhat invisible to the customer[23].
It is sometimes said that the open source development process may not be well defined and the stages in the development process, such as system testing and documentation may be ignored. However this is only true for small (mostly single programmer) projects. Larger, successful projects do define and enforce at least some rules as they need them to make the teamwork possible[24][25]. In the most complex projects these rules may be as strict as reviewing even minor change by two independent developers[26].
Not all OSS initiatives have been successful, for example, SourceXchange and Eazel[20]. Software experts and researchers who are not convinced by open source’s ability to produce quality systems identify the unclear process, the late defect discovery and the lack of any empirical evidence as the most important problems (collected data concerning productivity and quality)[27]. It is also difficult to design a commercially sound business model around the open source paradigm. Consequently, only technical requirements may be satisfied and not the ones of the market[27]. In terms of security, open source may allow hackers to know about the weaknesses or loopholes of the software more easily than closed-source software. It is depended of control mechanisms in order to create effective performance of autonomous agents who participate in virtual organizations[28].

[edit] Development tools





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (January 2008)


In OSS development the participants, who are mostly volunteers, are distributed amongst different geographic regions so there is need for tools to aid participants to collaborate in source code development. Often these tools are also available as OSS.
Revision control systems such as Concurrent Versions System (CVS) and later Subversion (svn) are examples of tools that help centrally manage the source code files and the changes to those files for a software project.
Utilities that automate testing, compiling and bug reporting help preserve stability and support of software projects that have numerous developers but no managers, quality controller or technical support. Building systems that report compilation errors among different platforms include Tinderbox. Commonly used bugtrackers include Bugzilla and GNATS.
Tools such as mailing lists, IRC, and instant messaging provide means of Internet communications between developers. The Web is also a core feature of all of the above systems. Some sites centralize all the features of these tools as a software development management system, including GNU Savannah, SourceForge, and BountySource.

[edit] Projects and organizations
Some of the more prominent organizations involved in OSS development include the Apache Software Foundation, creators of the Apache web server; a loose affiliation of developers headed by Linus Torvalds, creators of the Linux operating system kernel; the Eclipse Foundation, home of the Eclipse software development platform; the Debian Project, creators of the influential Debian GNU/Linux distribution; and the Mozilla Foundation, home of the Firefox web browser.
Several Open Source programs have become defining entries in their space, including the GIMP image editing system; Sun's Java programming language and environment; the MySQL database system; the FreeBSD Unix operating system; Sun's 2 OpenOffice.org office productivity suite; and the Wireshark network packet sniffer and protocol analyser
Open Source development is often performed "live and in public", using services provided for free on the Internet, such as the Launchpad and SourceForge web sites, and using tools that are themselves Open Source, including the CVS and Subversion source control systems, and the GNU Compiler Collection.

[edit] See also



Wikimedia Commons has media related to: Free software 






Free software portal






Wikibooks has a book on the topic of
Open Source




Free software
Free alternatives to proprietary softwares
List of open source software packages
Open source advocacy
Open Source Initiative
Open source software security
Open source video games
Business models for open source software


[edit] References


^ Verts, William T. (2008-01-13). "Open source software". World Book Online Reference Center. http://www.worldbookonline.com/wb/Article?id=ar751706. 
^ "Frequently Asked Questions". Open Source Initiative. Archived from the original on 2006-04-23. http://web.archive.org/web/20060423094434/www.opensource.org/advocacy/faq.html. Retrieved on 2008-09-08. 
^ Rothwell, Richard (2008-08-05). "Creating wealth with free software". Free Software Magazine. http://www.freesoftwaremagazine.com/community_posts/creating_wealth_free_software. Retrieved on 2008-09-08. 
^ Standish Newsroom - Open Source. Press release. 2008-04-16. http://standishgroup.com/newsroom/open_source.php. Retrieved on 2008-09-08. 
^ Raymond, Eric S. (1998-02-08). "Goodbye, "free software"; hello, "open source"". http://www.catb.org/~esr/open-source.html. Retrieved on 2008-08-13. 
^ Muffatto, Moreno (2006). Open Source: A Multidisciplinary Approach. Imperial College Press. ISBN 1860946658. 
^ a b Raymond, Eric S. (2000-09-11). "The Cathedral and the Bazaar". http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/index.html. Retrieved on 2004-09-19. 
^ Robles, Gregorio (2004). "A Software Engineering Approach to Libre Software". in Robert A. Gehring, Bernd Lutterbeck (PDF). Open Source Jahrbuch 2004. Berlin: Technical University of Berlin. http://www.opensourcejahrbuch.de/2004/pdfs/III-3-Robles.pdf. Retrieved on 2005-04-20. 
^ Shiels, Maggie (2008-08-14). "Legal milestone for open source". BBC News. http://news.bbc.co.uk/1/hi/technology/7561943.stm. Retrieved on 2008-08-15. 
^ Nelson, Russell (2007-03-26). "Certification Mark". Open Source Initiative. Archived from the original on 2008-02-06. http://web.archive.org/web/20080206050627/http://www.opensource.org/docs/certification_mark.html. Retrieved on 2007-07-22. 
^ Raymond, Eric S. (1998-11-22). "OSI Launch Announcement". Open Source Initiative. http://www.opensource.org/pressreleases/osi-launch.php. Retrieved on 2007-07-22. 
^ Nelson, Russell (2006-09-19). "Open Source Licenses by Category". Open Source Initiative. http://opensource.org/licenses. Retrieved on 2007-07-22. 
^ a b c d Stallman, Richard (2007-06-16). "Why "Open Source" misses the point of Free Software". Philosophy of the GNU Project. GNU Project. http://www.gnu.org/philosophy/open-source-misses-the-point.html. Retrieved on 2007-07-23. 
^ a b c Stallman, Richard (2007-06-19). "Why "Free Software" is better than "Open Source"". Philosophy of the GNU Project. GNU Project. http://www.gnu.org/philosophy/free-software-for-freedom.html. Retrieved on 2007-07-23. 
^ Tiemann, Michael (2007-06-21). "Will The Real Open Source CRM Please Stand Up?". Open Source Initiative. http://www.opensource.org/node/163. Retrieved on 2008-01-04. 
^ Berlind, David (2006-11-21). "Are SugarCRM, Socialtext, Zimbra, Scalix and others abusing the term "open source?"". ZDNet. http://blogs.zdnet.com/BTL/index.php?p=3430. Retrieved on 2008-01-04. 
^ Vance, Ashlee (2007-07-25). "SugarCRM trades badgeware for GPL 3". http://www.regdeveloper.co.uk/2007/07/25/sugarcrm_gpl3/. Retrieved on 2008-09-08. 
^ "The open source platform for numerical computation". INRIA. http://www.scilab.org. Retrieved on 2008-01-04. 
^ "SCILAB License". INRIA. http://www.scilab.org/legal/license.html. Retrieved on 2008-01-04. 
^ a b Sharma, Srinarayan; Vijayan Sugumaran and Balaji Rajagopalan (2002). "A framework for creating hybrid-open source software communities" (PDF). Info Systems Journal 12: 7–25. doi:10.1046/j.1365-2575.2002.00116.x. http://www.cin.ufpe.br/~in953/lectures/papers/ISJAFrameworkForCreatingHybrid-OpenSourceSoftwareCommunities.pdf. 
^ Landry, John; Rajiv Gupta (September 2000). "Profiting from Open Source". Harvard Business Review. doi:10.1225/F00503. 
^ Plotkin, Hal (December 1998). "What (and Why) you should know about open-source software". Harvard Management Update: 8–9. doi:10.1225/U9812D. 
^ Payne, Christian (February 2002). "On the Security of Open Source Software". Info Systems Journal 12 (1): 61–78. doi:10.1046/j.1365-2575.2002.00118.x. 
^ http://www.gnu.org/software/classpath/docs/hacking.html
^ Meffert, Klaus; Neil Rotstan (2007). "Brief summary of coding style and practice used in JGAP". Java Genetic Algorithms Package. http://jgap.sourceforge.net/doc/codestyle.html. Retrieved on 2008-09-08. 
^ Tripp, Andy (2007-07-16). "Classpath hackers frustrated with slow OpenJDK process". Javalobby. http://www.javalobby.org/java/forums/t98834.html. 
^ a b Stamelos, Ioannis; Lefteris Angelis, Apostolos Oikonomou and Georgios L. Bleris (2002). "Code Quality Analysis in Open Source Software Development" (PDF). Info Systems Journal 12: 43–60. doi:10.1109/MS.2007.2. http://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/mags/so/&toc=comp/mags/so/2007/01/s1toc.xml&DOI=10.1109/MS.2007.2. Retrieved on 2008-09-08. 
^ Gallivan, Michael J. (2001). "Striking a Balance Between Trust and Control in a Virtual Organization: A Content Analysis of Open Source Software Case Studies". Info Systems Journal 11 (4): 277–304. doi:10.1111/j.1365-2575.2001.00108.x. 



[edit] Further reading

Lui, K.M.; Chan, K.C.C. (2008). Software Development Rhythms: Harmonizing Agile Practices for Synergy. John Wiley and Sons. ISBN 978-0-470-07386-5. 


[edit] Legal and economic aspects

Benkler, Yochai (2002), “Coase's Penguin, or, Linux and The Nature of the Firm." Yale Law Journal 112.3 (Dec 2002): p367(78) (in Adobe pdf format)
v. Engelhardt, Sebastian (2008) (PDF). "The Economic Properties of Software", Jena Economic Research Papers, Volume 2 (2008), Number 2008-045. http://ideas.repec.org/p/jrp/jrpwrp/2008-045.html. 
Lerner, J. & Tirole, J. (2002): ‘Some simple economics on open source’, Journal Of Industrial Economics 50(2), p 197–234
Välimäki, Mikko (2005) (PDF). The Rise of Open Source Licensing: A Challenge to the Use of Intellectual Property in the Software Industry. Turre Publishing. http://pub.turre.com/openbook_valimaki.pdf. 
Polley, Barry (2007-12-11) (PDF). Open Source Discussion Paper – version 1.0. New Zealand Ministry of Justice. http://nzoss.org.nz/system/files/moj_oss_strategy_1.0.pdf. Retrieved on 2007-12-12. 
Rossi, M. A. (2006): Decoding the free/open source software puzzle: A survey of theoretical and empirical contributions, in J. Bitzer P. Schröder, eds, ‘The Economics of Open Source Software Development’, p 15–55.


[edit] External links

Computerworld article: Does the open-source development model work for business users?
The Open Source Initiative's definition of open source
Open Sources: Voices from the Open Source Revolution — an online book containing essays from prominent members of the open source community
Free / Open Source Research Community — Many online research papers about Open Source
FreeOpenSourceSoftware.org - Wiki on Free Open Source history, organizations, licenses, people, software.
KDE developer Aaron Siego's presentation "How OSS Improves Society" at the 2nd Trans-Pacific Open Source Software Conference in Honolulu, Hawaii, January 2006.
Whence The Source: Untangling the Open Source/Free Software Debate, essay on the differences between Free Software and Open Source, by Thomas Scoville
Berry, D M (2004). The Contestation of Code: A Preliminary Investigation into the Discourse of the Free Software and Open Software Movement, Critical Discourse Studies, Volume 1(1).
EU study on adopting FLOSS
Open Source Software at Intel
Open Source Observatory and Repository
Calls for open source government
Open Source Competency Centre (Malaysian Public Sector Open Source Software Program)








v • d • e

Forms of software distribution






Abandonware · Adware · Careware · Crippleware · Demoware · Donationware · Foistware · Freely redistributable software · Free software · Freeware · Malware · Nagware · Open source · Otherware · Postcardware · Registerware · Shareware · Spyware













v • d • e

Free and open source software





General

Copyleft · Events and Awards · Free software · Free Software Definition · Gratis versus Libre · Open source software






Free software
portal









Notable packages

Apache · CUPS · Firefox · GNOME · KDE · OpenOffice.org · Thunderbird · X Window System






Operating systems

AROS · BSD · Darwin · FreeDOS · GNU · Haiku · Inferno · Linux · Mach · MINIX · OpenSolaris · Plan 9 · ReactOS · Syllable






Development

GCC · LLVM · Java · Open64 · Perl · PHP · Python · Lua · Ruby · Tcl · libJIT






History

GNU · Linux · Mozilla (Application Suite · Firefox · Thunderbird)






Organizations

Apache Software Foundation · Blender Foundation · Eclipse Foundation · FLOSS Manuals · freedesktop.org · Free Software Foundation · GNOME Foundation · GNU Project · Google Code · Linux Foundation · Mozilla Foundation · Open Source Geospatial Foundation · Open Source Initiative · SourceForge · Xiph.Org Foundation · X.Org Foundation






Licences

Apache · BSD · GNU GPL · LGPL · MIT · MPL · Permissive · Microsoft Public License · Microsoft Reciprocal License · FSF approved licenses






Challenges

Binary blob · Digital rights management · License proliferation · Mozilla software rebranding · Proprietary software · SCO-Linux controversies · Security · Software patents · Tivoization · Trusted Computing






Other topics

Alternative terms · Community · Linux distribution · Forking · Movement · Microsoft Open Specification Promise · Revolution OS · Comparison with closed source






List of open source software packages








Retrieved from "http://en.wikipedia.org/wiki/Open_source_software"
Categories: Free software culture and documents | Free software | Software licenses | LibreHidden categories: All articles to be merged | Articles to be merged since September 2008 | Free Software articles needing expert attention | Articles needing expert attention since September 2008 | Articles needing additional references from November 2007 | All articles with unsourced statements | Articles with unsourced statements since March 2009 | Articles with unsourced statements since July 2007 | Articles needing additional references from January 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
Bosanski
Български
Česky
Ελληνικά
فارسی
हिन्दी
Bahasa Indonesia
Lietuvių
Nederlands
Русский
Slovenščina
Српски / Srpski
தமிழ்
Українська
Tiếng Việt









 This page was last modified on 5 April 2009, at 18:49.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
