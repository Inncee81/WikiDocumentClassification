













Modular exponentiation - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Modular_exponentiation";
		var wgTitle = "Modular exponentiation";
		var wgAction = "view";
		var wgArticleId = "903032";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279214239;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Modular exponentiation

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Modular exponentiation is a type of exponentiation performed over a modulus. It is particularly useful in computer science, especially in the field of cryptography.
Doing a "modular exponentiation" means calculating the remainder when dividing by a positive integer m (called the modulus) a positive integer b (called the base) raised to the e-th power (e is called the exponent). In other words, problems take the form where given base b, exponent e, and modulus m, one wishes to calculate c such that:



For example, given b = 5, e = 3, and m = 13, the solution c is the remainder of dividing 53 by 13, namely the rest of the division 125 / 13, which works out to be 8.
If b, e, and m are non-negative and b < m, then a unique solution c exists and has the property 0 ≤ c < m.
Modular exponentiation can be performed with a negative exponent e by finding the multiplicative inverse d of b modulo m using the extended Euclidean algorithm. That is:

 where e < 0 and 

Modular exponentiation problems similar to the one described above are considered easy to do, even if the numbers involved are enormous. On the other hand, computing the discrete logarithm (finding e given b, c, and m) is believed to be difficult. This one way function behavior makes modular exponentiation a good candidate for use in cryptographic algorithms.




Contents


1 Straightforward method
2 Memory-efficient method
3 Right-to-left binary method
4 See also
5 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Straightforward method
The most straightforward method of calculating a modular exponent is to calculate be directly, then to take this number modulo m. Consider trying to compute c, given b = 4, e = 13, and m = 497:



One could use a calculator to compute 413; this comes out to 67,108,864. Taking this value modulo 497, the answer c is determined to be 445.
Note that b is only one digit in length and that e is only two digits in length, but the value be is 10 digits in length.
In strong cryptography, b is often at least 256 binary digits (77 decimal digits). Consider b = 5 × 1076 and e = 17, both of which are perfectly reasonable values. In this example, b is 77 digits in length and e is 2 digits in length, but the value be is 1309 decimal digits in length. Such calculations are possible on modern computers, but the sheer magnitude of such numbers causes the speed of calculations to slow considerably. As b and e increase even further to provide better security, the value be becomes unwieldy.
The time required to perform the exponentiation depends on the operating environment and the processor. The method described above requires O(e) multiplications to complete.

[edit] Memory-efficient method
A second method to compute modular exponentiation requires more operations than the first method. Because the required memory footprint is substantially less, however, operations take less time than before. The end result is that the algorithm is faster.
This algorithm makes use of the fact that, given two integers a and b, the following two equations are equivalent:




The algorithm is as follows:

Set c = 1, e' = 0.
Increase e' by 1.
Set .
If e' < e, goto step 2. Else, c contains the correct solution to .

Note that in every pass through step 3, the equation  holds true. When step 3 has been executed e times, then, c contains the answer that was sought. In summary, this algorithm basically counts up e' by ones until e' reaches e, doing a multiply by b and the modulo operation each time it adds one (to ensure the results stay small).
The example b = 4, e = 13, and m = 497 is presented again. The algorithm passes through step 3 thirteen times:

e' = 1. c = (1 * 4) mod 497 = 4 mod 497 = 4.
e' = 2. c = (4 * 4) mod 497 = 16 mod 497 = 16.
e' = 3. c = (16 * 4) mod 497 = 64 mod 497 = 64.
e' = 4. c = (64 * 4) mod 497 = 256 mod 497 = 256.
e' = 5. c = (256 * 4) mod 497 = 1024 mod 497 = 30.
e' = 6. c = (30 * 4) mod 497 = 120 mod 497 = 120.
e' = 7. c = (120 * 4) mod 497 = 480 mod 497 = 480.
e' = 8. c = (480 * 4) mod 497 = 1920 mod 497 = 429.
e' = 9. c = (429 * 4) mod 497 = 1716 mod 497 = 225.
e' = 10. c = (225 * 4) mod 497 = 900 mod 497 = 403.
e' = 11. c = (403 * 4) mod 497 = 1612 mod 497 = 121.
e' = 12. c = (121 * 4) mod 497 = 484 mod 497 = 484.
e' = 13. c = (484 * 4) mod 497 = 1936 mod 497 = 445.

The final answer for c is therefore 445, as in the first method.
Like the first method, this requires O(e) multiplications to complete. However, since the numbers used in these calculations are much smaller than the numbers used in the first algorithm's calculations, the computation time decreases by a factor of at least O(e) in this method.

[edit] Right-to-left binary method
A third method drastically reduces both the number of operations and the memory footprint required to perform modular exponentiation. It is a combination of the previous method and a more general principle called exponentiation by squaring (also known as binary exponentiation).
First, it is required that the exponent e be converted to binary notation. That is, e can be written as:



In such notation, the length of e is n bits. ai can take the value 0 or 1 for any i such that 0 ≤ i < n - 1. By definition, an - 1 = 1.
The value be can then be written as:



The solution c is therefore:



The following example is in C# or C++ languages. Let the class Bignum represent an arbitrarily large positive integer. The inputs base, exponent, and modulus correspond to b, e, and m in the equations given above.


Bignum modpow(Bignum base, Bignum exponent, Bignum modulus) {
 
    Bignum result = 1;
 
    while (exponent > 0) {
        if ((exponent & 1) == 1) {
            // multiply in this bit's contribution while using modulus to keep result small
            result = (result * base) % modulus;
        }
        // move to the next bit of the exponent, square (and mod) the base accordingly
        exponent >>= 1;
        base = (base * base) % modulus;
    }
 
    return result;
}

This code, based on that on page 244 of Bruce Schneier's Applied Cryptography, 2e, ISBN 0-471-11709-9, uses a single while loop to perform all work necessary to compute the modular exponentiation.
Note that upon entering the loop for the first time, the code variable base is equivalent to . However, the repeated squaring in the third line of code ensures that at the completion of every loop, the variable base is equivalent to , where i is the number of times the loop has been iterated. (This makes i the next working bit of the binary exponent exponent, where the least-significant bit is exponent0).
The first line of code simply carries out the multiplication in . If ai is zero, no code executes since this effectively multiplies the running total by one. If ai instead is one, the variable base (containing the value  of the original base) is simply multiplied in.
Example: base = 4, exponent = 13, and modulus = 497. Note that exponent is 1101 in binary notation. Because exponent is four binary digits in length, the loop executes only four times:

Upon entering the loop for the first time, variables base = 4, exponent = 1101 (binary), and result = 1. Because the right-most bit of exponent is 1, result is changed to be (1 * 4) % 497, or 4. exponent is right-shifted to become 110 (binary), and base is squared to be (4 * 4) % 497, or 16.
The second time through the loop, the right-most bit of exponent is 0, causing result to retain its present value of 4. exponent is right-shifted to become 11 (binary), and base is squared to be (16 * 16) % 497, or 256.
The third time through the loop, the right-most bit of e is 1. result is changed to be (4 * 256) % 497, or 30. exponent is right-shifted to become 1, and base is squared to be (256 * 256) % 497, or 429.
The fourth time through the loop, the right-most bit of exponent is 1. result is changed to be (30 * 429) % 497, or 445. exponent is right-shifted to become 0, and base is squared to be (429 * 429) % 497, or 151.

The loop then terminates since exponent is zero, and the result 445 is returned. This agrees with the previous two algorithms.
The running time of this algorithm is O(log exponent). When working with large values of exponent, this offers a substantial speed benefit over both of the previous two algorithms.

[edit] See also
Montgomery reduction, for calculating the modulo when the numbers involved are very large.

[edit] External links

Fast Modular Exponentiation Java Applet - University of Minnesota Math Department









v • d • e

Number-theoretic algorithms





Primality tests

AKS · APR · Ballie-PSW · ECPP · Fermat · Lucas–Lehmer · Lucas–Lehmer (Mersenne numbers) · Lucas–Lehmer–Riesel · Proth's theorem · Pépin's · Solovay–Strassen · Miller–Rabin · Trial division






Sieving algorithms

Sieve of Atkin · Sieve of Eratosthenes · Sieve of Sundaram · Wheel factorization






Integer factorization algorithms

CFRAC · Dixon's · ECM · Euler's · Pollard's rho · P − 1 · P + 1 · QS · GNFS · SNFS · rational sieve · Fermat's · Shanks' square forms · Trial division · Shor's






Other algorithms

Ancient Egyptian multiplication · Aryabhata · Binary GCD · Chakravala · Euclidean · Extended Euclidean · integer relation algorithm · integer square root · Modular exponentiation · Schoof's · Shanks-Tonelli






Italics indicate that algorithm is for numbers of special forms; bold indicates deterministic algorithm for primality tests.








Retrieved from "http://en.wikipedia.org/wiki/Modular_exponentiation"
Categories: Cryptographic algorithms | Number theoretic algorithms | Modular arithmetic 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Français
日本語









 This page was last modified on 23 March 2009, at 19:47.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
