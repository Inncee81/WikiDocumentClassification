













Multi-paradigm programming language - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Multi-paradigm_programming_language";
		var wgTitle = "Multi-paradigm programming language";
		var wgAction = "view";
		var wgArticleId = "226843";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280683758;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Multi-paradigm programming language

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





It has been suggested that this article or section be merged into Programming paradigm. (Discuss)







This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (July 2007)


A multi-paradigm programming language is a programming language that supports more than one programming paradigm. As Lead designer Tim Budd holds it: The idea of a multiparadigm language is to provide a framework in which programmers can work in a variety of styles, freely intermixing constructs from different paradigms. The design goal of such languages is to allow programmers to use the best tool for a job, admitting that no one paradigm solves all problems in the easiest or most efficient way.
An example is Oz, which has subsets that are a logic language (Oz descends from logic programming), a functional language, an object-oriented language, a dataflow concurrent language, and more. Oz was designed over a ten-year period to combine in a harmonious way concepts that are traditionally associated with different programming paradigms.




Contents


1 Multiparadigm languages

1.1 Paradigm summaries
1.2 Two paradigms
1.3 Three paradigms
1.4 Four paradigms
1.5 Five paradigms
1.6 Eight paradigms


2 See also
3 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Multiparadigm languages
Languages can be grouped by the number and types of paradigms supported.

[edit] Paradigm summaries
A concise reference for the programming paradigms listed in this article.

Dataflow - forced recalculation of formulas when data values change (e.g. Spreadsheets)
Visual programming language - manipulating program elements graphically rather than by specifying them textually (e.g. Simulink)
Declarative programming - describes actions (e.g. HTML describe a page but not how to actually display it)
Imperative programming - explicit statements that change a program state
Functional programming - uses evaluation of mathematical functions and avoids state and mutable data
Object-Oriented programming - uses classes and instances, inheritance, encapsulation and polymorphism
Prototype-based programming - object-oriented programming that avoids classes and implements inheritance via the cloning of instances
Parallel computing - simultaneous execution with the necessary communication and synchronization between processes/threads
Actor model - concurrent computation with "actors" that makes local decisions in response to the environment (capable of selfish or competitive behavior)
Pipeline programming - no nested function calls, but a simple flow structures with easy to visualize/understand data flow through the program
Constraint programming - relations between variables are expressed as constraints (or constraint networks), directing allowable solutions (uses constraint satisfaction or simplex algorithm)
Rule-based programming - a network of rules of thumb that comprise a knowledge base and can be used for expert systems and problem deduction & resolution
Logic programming - uses logical facts to create a model that can prove consistency, deduce further truths or answer questions about the model (e.g. Dogs are animals! Dogs are red! Are some animals red?)
Reflective programming - special case of metaprogramming (modification of programs as data by another program or ability to do part of the work in runtime instead of compile time) in which the program modifies or extends itself


[edit] Two paradigms

dataflow, visual

LabVIEW


functional, imperative

APL


functional, logic

ALF


functional, object-oriented (class-based)

Dylan[citation needed]
Sather[citation needed]
Claire


functional, visual

Spreadsheets


imperative, object-oriented (class-based)

AmigaE[citation needed]
PHP[1][2]
Simula[citation needed]


object-oriented (class-based), (prototype-based)

Metaobject protocols


object-oriented (class-based), visual

Lava




[edit] Three paradigms

imperative,visual,object-oriented

PointDragon


concurrent, dataflow, functional

SISAL


concurrent, functional, distributed

Erlang


concurrent, functional, logic

Curry


concurrent, imperative, object-oriented (class-based)

ChucK[citation needed]


dataflow, object-oriented (class-based), visual

Prograph


functional, imperative, logic

Poplog


functional, imperative, object-oriented (class-based)

BETA[citation needed]
F#[citation needed]
J[citation needed]
Perl[citation needed]
Pliant[citation needed]
Python [3]
Ruby
Tcl with itcl or XOTcl extensions[citation needed]


functional, imperative, object-oriented (prototype-based)

ECMAScript [4][5]

ActionScript
DMDScript
E4X
JavaScript
JScript


Lua[citation needed]
Tcl with Snit extension[citation needed]


generic (template metaprogramming), imperative, object-oriented (class-based)

C++
D




[edit] Four paradigms

imperative, generic, reflective, object-oriented (class-based)

Java


functional, imperative, generic (template metaprogramming), object-oriented (class-based)

Objective Caml


functional, imperative, concurrent (Actor model), object-oriented (class-based)

Scala[6]


functional, imperative, concurrent (Actor model), object-oriented (prototype-based)

Io


functional, imperative, logic, object-oriented (class-based)

Leda


functional, imperative, object-oriented (prototype-based), dialected

REBOL


imperative, logic, object-oriented (class-based), rule-based

ROOP


functional, imperative, object-oriented (class-based), reflective

Common Lisp[citation needed] (although there are other paradigms implemented as libraries)




[edit] Five paradigms

functional (only lambda support), imperative, generic, reflective, object-oriented (class-based)

C#
Visual Basic .NET


functional, imperative, generic, object-oriented (class-based), metaprogramming

Nemerle


functional, imperative, object-oriented (class-based), metaprogramming, reflective

Falcon programming language


concurrent (rendezvous and monitor-like based), distributed, generic, imperative, object-oriented (class-based)

Ada[7][8][9][10][11]


functional, imperative, pipeline, object-oriented (class-based), reflective

Windows PowerShell


functional, generic (template metaprogramming), imperative, object-oriented (class-based), reflective

Curl




[edit] Eight paradigms

concurrent, constraint, dataflow, distributed, functional (evaluation: eager, lazy), imperative, logic, object-oriented (class-based)

Oz[citation needed]

Mozart Programming System (a multiplatform Oz)






[edit] See also

Programming paradigm
Categorical list of programming languages
Domain-specific programming language
Domain-specific multimodeling


[edit] References

^ PHP Manual, Chapter 17. Functions
^ PHP Manual, Chapter 19. Classes and Objects (PHP 5)
^ Charming Python: Functional programming in Python, Part 1
^ The Little JavaScripter demonstrates fundamental commonality with Scheme, a functional language.
^ Object Oriented Programming in JavaScript gives an overview of object-oriented programming techniques in JavaScript.
^ Martin Odersky et al, An Overview of the Scala Programming Language, 2nd Edition
^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3, Section 9: Tasks and Synchronization
^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3 Annex E: Distributed Systems
^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3, Section 12: Generic Units
^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3, Section 6: Subprograms
^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3, 3.9 Tagged Types and Type Extensions


Multiparadigm Design for C++, by Jim Coplien, 1998.
Concepts, Techniques, and Models of Computer Programming, by Peter Van Roy and Seif Haridi, 2004.








v • d • e

Types of programming languages






Array · Aspect-oriented · Assembly · Class-based · Compiled · Concurrent · Curly bracket · Data-oriented · Data-structured · Dataflow · Declarative · Domain-specific · Dynamic · Esoteric · Event-driven · Extensible · Functional · High-level · Imperative · Interpreted · Logic · Low-level · Machine · Macro · Metaprogramming · Multi-paradigm · Non-English-based · Object-oriented · Off-side rule · Pipeline · Procedural · Prototype-based · Reflective · Rule-based · Scripting · Synchronous · Visual









Retrieved from "http://en.wikipedia.org/wiki/Multi-paradigm_programming_language"
Categories: Programming paradigmsHidden categories: All articles to be merged | Articles to be merged since July 2008 | Articles needing additional references from July 2007 | All articles with unsourced statements | Articles with unsourced statements since March 2007 | Articles with unsourced statements since January 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Español
한국어
Magyar
Nederlands
日本語
Русский
中文









 This page was last modified on 30 March 2009, at 17:25 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
