













String searching algorithm - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "String_searching_algorithm";
		var wgTitle = "String searching algorithm";
		var wgAction = "view";
		var wgArticleId = "28648";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281464857;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); String searching algorithm

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
String searching algorithms, sometimes called string matching algorithms, are an important class of string algorithms that try to find a place where one or several strings (also called patterns) are found within a larger string or text.
Let Σ be an alphabet (finite set). Formally, both the pattern and searched text are concatenations of elements of Σ. The Σ may be a usual human alphabet (for example, the letters A through Z in English). Other applications may use binary alphabet (Σ = {0,1}) or DNA alphabet (Σ = {A,C,G,T}) in bioinformatics.
In practice how the string is encoded can affect the feasible string search algorithms. In particular if a variable width encoding is in use then it is slow (time proportional to N) to find the Nth character. This will significantly slow down many of the more advanced search algorithms. A possible solution is to search for the sequence of code units instead, but doing so may produce false matches unless the encoding is specifically designed to avoid it.




Contents


1 Basic classification

1.1 Single pattern algorithms
1.2 Algorithms using finite set of patterns
1.3 Algorithms using infinite number of patterns


2 Other classification

2.1 Naïve string search
2.2 Finite state automaton based search
2.3 Stubs
2.4 Index methods
2.5 Other variants


3 See also
4 References
5 External links
6 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Basic classification
The various algorithms can be classified by the number of patterns each uses.

[edit] Single pattern algorithms
Let m be the length of the pattern and let n be the length of the searchable text.


Algorithm
Preprocessing time
Matching time1


Naïve string search algorithm
0 (no preprocessing)
Θ((n-m+1) m)


Rabin-Karp string search algorithm
Θ(m)
average Θ(n+m),
worst Θ((n-m+1) m)


Finite state automaton based search
Θ(m |Σ|)
Θ(n)


Knuth-Morris-Pratt algorithm
Θ(m)
Θ(n)


Boyer-Moore string search algorithm
Θ(m + |Σ|)
Ω(n/m), O(n)


Bitap algorithm (shift-or, shift-and, Baeza-Yates-Gonnet)
Θ(m + |Σ|)
O(mn)


1Asymptotic times are expressed using O, Ω, and Θ notation
The Boyer–Moore string search algorithm has been the standard benchmark for the practical string search literature.[1]

[edit] Algorithms using finite set of patterns

Aho-Corasick algorithm
Commentz-Walter algorithm
Rabin-Karp string search algorithm


[edit] Algorithms using infinite number of patterns
Naturally, the patterns can not be enumerated in this case. They are represented usually by a regular grammar or regular expression.

[edit] Other classification
Other classification approaches are possible. One of the most common uses preprocessing as main criteria.

Classes of string searching algorithms


Text not preprocessed
Text preprocessed


Patterns not preprocessed
Elementary algorithms
Index methods


Patterns preprocessed
Constructed search engines
Signature methods



[edit] Naïve string search
The simplest and least efficient way to see where one string occurs inside another is to check each place it could be, one by one, to see if it's there. So first we see if there's a copy of the needle in the first character of the haystack; if not, we look to see if there's a copy of the needle starting at the second character of the haystack; if not, we look starting at the third character, and so forth. In the normal case, we only have to look at one or two characters for each wrong position to see that it is a wrong position, so in the average case, this takes O(n + m) steps, where n is the length of the haystack and m is the length of the needle; but in the worst case, searching for a string like "aaaab" in a string like "aaaaaaaaab", it takes O(nm) steps.

[edit] Finite state automaton based search

In this approach, we avoid backtracking by constructing a deterministic finite automaton that recognizes strings containing the desired search string. These are expensive to construct—they are usually created using the powerset construction—but very quick to use. For example, the DFA shown to the right recognizes the word "MOMMY". This approach is frequently generalized in practice to search for arbitrary regular expressions.

[edit] Stubs
Knuth-Morris-Pratt computes a deterministic finite automaton that recognizes inputs with the string to search for as a suffix, Boyer-Moore starts searching from the end of the needle, so it can usually jump ahead a whole needle-length at each step. Baeza-Yates keeps track of whether the previous j characters were a prefix of the search string, and is therefore adaptable to fuzzy string searching. The bitap algorithm is an application of Baeza-Yates' approach.

[edit] Index methods
Faster search algorithms are based on preprocessing of the text. After building a substring index, for example a suffix tree or suffix array, the occurrences of a pattern can be found quickly. As an example, a suffix tree can be built in Θ(m) time, and all z occurrences of a pattern can be found in O(m + z) time (if the alphabet size is viewed as a constant).

[edit] Other variants
Some search methods, for instance trigram search, are intended to find a "closeness" score between the search string and the text rather than a "match/non-match". These are sometimes called "fuzzy" searches.

[edit] See also

Algorithm


[edit] References

^ Hume and Sunday (1991) [Fast String Searching] SOFTWARE—PRACTICE AND EXPERIENCE, VOL. 21(11), 1221–1248 (NOVEMBER 1991 )


R. S. Boyer and J. S. Moore, A fast string searching algorithm, Carom. ACM 20, (10), 262–272(1977).
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Chapter 32: String Matching, pp.906–932.
Jehad Q. Odeh & Rami H. Mansi, http://www.RJStringMatching.webs.com.


[edit] External links

Huge (maintained) list of pattern matching links
StringSearch – high-performance pattern matching algorithms in Java – Implementations of many String-Matching-Algorithms in Java (BNDM, Boyer-Moore-Horspool, Boyer-Moore-Horspool-Raita, Shift-Or)
Exact String Matching Algorithms — Animation in Java, Detailed description and C implementation of many algorithms.
String similarity metrics
Boyer-Moore-Raita-Thomas


[edit] References



Retrieved from "http://en.wikipedia.org/wiki/String_searching_algorithm"
Categories: Algorithms on strings | Search algorithms 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
فارسی
Français
Bahasa Indonesia
Basa Jawa
日本語
Русский
Suomi
Українська
中文









 This page was last modified on 3 April 2009, at 08:42.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
