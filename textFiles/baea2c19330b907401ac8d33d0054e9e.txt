













Constraint programming - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Constraint_programming";
		var wgTitle = "Constraint programming";
		var wgAction = "view";
		var wgArticleId = "189899";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282518238;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Constraint programming

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


Programming paradigms




Agent-oriented
Component-based

Flow-based
Pipeline


Concatenative
Concurrent computing
Context-oriented
Declarative (Contrast: Imperative)

Functional

Dataflow

Cell-oriented (spreadsheets)
Reactive




Goal-directed

Constraint
Constraint logic
Logic

Abductive logic
Inductive logic






Event-driven
Feature-oriented
Function-level (Contrast: Value-level)
Imperative (Contrast: Declarative)

Advanced separation of concerns

Aspect-oriented
Subject-oriented


Array (Contrast: Scalar)
Automata-based
Object-oriented

Class-based
Prototype-based


Procedural

Structured


Role-oriented
Scalar (Contrast: Array)


Iterative (Contrast: Recursive)
Metaprogramming

Attribute-oriented
Automatic

Generic

Template

Policy-based




Language-oriented

Grammar-oriented

Dialecting


Intentional




Reflective


Modular
Nondeterministic
Parallel computing

Process-oriented


Programming in the large and programming in the small
Recursive (Contrast: Iterative)
Tree
Value-level (Contrast: Function-level)


This box: view • talk • edit



Constraint programming is a programming paradigm where relations between variables are stated in the form of constraints. Constraints differ from the common primitives of imperative programming languages in that they do not specify a step or sequence of steps to execute, but rather the properties of a solution to be found. This makes constraint programming a form of declarative programming. The constraints used in constraint programming are of various kinds: those used in constraint satisfaction problems (e.g. "A or B is true"), those solved by the simplex algorithm (e.g. "x < 5"), and others. Constraints are usually embedded within a programming language or provided via separate software libraries.
Constraint programming began with constraint logic programming, which embeds constraints into a logic program. This variant of logic programming is due to Jaffar and Lassez, who extended in 1987 a specific class of constraints that were introduced in Prolog II. The first implementations of constraint logic programming were Prolog III, CLP(R), and CHIP. Several constraint logic programming interpreters exist today, for example GNU Prolog.
Other than logic programming, constraints can be mixed with functional programming, term rewriting, and imperative languages. Programming languages with built-in support for constraints include Oz (functional programming) and Kaleidoscope (imperative programming). Mostly, constraints are implemented in imperative languages via constraint solving toolkits, which are separate libraries for an existing imperative language.




Contents


1 Constraint logic programming
2 Domains
3 Imperative constraint programming
4 Some languages that support constraint programming
5 See also
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Constraint logic programming
Main article: Constraint logic programming
Constraint programming is an embedding of constraints in a host language. The first host languages used were logic programming languages, so the field was initially called constraint logic programming. The two paradigms share many important features, like logical variables and backtracking. Today most Prolog implementations include one or more libraries for constraint logic programming.
The difference between the two is largely in their styles and approaches to modeling the world. Some problems are more natural (and thus, simpler) to write as logic programs, while some are more natural to write as constraint programs.
The constraint programming approach is to search for a state of the world in which a large number of constraints are satisfied at the same time. A problem is typically stated as a state of the world containing a number of unknown variables. The constraint program searches for values for all the variables.
Temporal concurrent constraint programming (TCC) and non-deterministic temporal concurrent constraint programming (NTCC) are variants of constraint programming that can deal with time.
Some popular constraint logic languages are:

B-Prolog (Prolog based, proprietary)
CHIP V5 (Prolog based, also includes C++ and C libraries, proprietary)
Ciao Prolog (Prolog based, Free software: GPL/LGPL)
ECLiPSe (Prolog based, open source)
SICStus (Prolog based, proprietary)
GNU Prolog
YAP Prolog
SWI Prolog a free Prolog system containing several libraries for constraint solving
Claire


[edit] Domains
The constraints used in constraint programming are typically over some specific domains. Some popular domains for constraint programming are:

boolean domains, where only true/false constraints apply (SAT problem)
integer domains, rational domains
linear domains, where only linear functions are described and analyzed (although approaches to non-linear problems do exist)
finite domains, where constraints are defined over finite sets
mixed domains, involving two or more of the above

Finite domains is one of the most successful domains of constraint programming. In some areas (like operations research) constraint programming is often identified with constraint programming over finite domains.
Finite domain solvers are useful for solving constraint satisfaction problems, and are often based on arc consistency or one of its approximations.
The syntax for expressing constraints over finite domains depends on the host language. The following is a Prolog program that solves the classical alphametic puzzle SEND+MORE=MONEY in constraint logic programming:

sendmore(Digits) :-
   Digits = [S,E,N,D,M,O,R,Y],     % Create variables
   Digits :: [0..9],               % Associate domains to variables
   S #\= 0,                        % Constraint: S must be different from 0
   M #\= 0,
   alldifferent(Digits),           % all the elements must take different values
                1000*S + 100*E + 10*N + D     % Other constraints
              + 1000*M + 100*O + 10*R + E
   #= 10000*M + 1000*O + 100*N + 10*E + Y,
   labeling(Digits).               % Start the search

The interpreter creates a variable for each letter in the puzzle. The symbol :: is used to specify the domains of these variables, so that they range over the set of values {0,1,2,3, ..., 9}. The constraints S#\=0 and M#\=0 means that these two variables cannot take the value zero. When the interpreter evaluates these constraints, it reduces the domains of these two variables by removing the value 0 from them. Then, the constraint alldifferent(Digits) is considered; it does not reduce any domain, so it is simply stored. The last constraint specifies that the digits assigned to the letters must be such that "SEND+MORE=MONEY" holds when each letter is replaced by its corresponding digit. From this constraint, the solver infers that M=1. All stored constraints involving variable M are awakened: in this case, constraint propagation on the alldifferent constraint removes value 1 from the domain of all the remaining variables. Constraint propagation may solve the problem by reducing all domains to a single value, it may prove that the problem has no solution by reducing a domain to the empty set, but may also terminate without proving satisfiability or unsatisfiability. The labeling literals are used to actually perform search for a solution.

[edit] Imperative constraint programming
Constraint programming is often realized in imperative programming via a separate library. Some popular libraries for constraint programming are:

Choco (Java library, free software: X11 style)
Comet (C style language for constraint programming, constraint-based local search and mathematical programming, free binaries available for academic use)
Disolver (C++ library, proprietary)
Gecode (C++ library, free software: X11 style)
ILOG CP Optimizer (C++, Java, .NET libraries, proprietary)
ILOG CP (C++ library, proprietary)
JaCoP (Java library, open source)
JOpt (Java library, free software)
Koalog Constraint Solver (Java library, proprietary)
Minion (C++ program, GPL)
python-constraint (Python library, GPL)
Cream (Java library, free software: LGPL)


[edit] Some languages that support constraint programming

Common Lisp via Screamer (a free software library which provides backtracking and CLP(R), CHiP features)
Bertrand (programming_language) a language for building constraint programming systems.


[edit] See also

Combinatorial optimization
Constraint satisfaction
Constraint logic programming
Heuristic algorithms
Mathematical programming (Optimization theory)


[edit] External links

Information on the annual CP conference
On-Line Guide to Constraint Programming
Program Does Not Equal Program: Constraint Programming and its Relationship to Mathematical Programming
Mozart (Oz based, Free software: X11 style)
Cork Constraint Computation Centre (4C)




Retrieved from "http://en.wikipedia.org/wiki/Constraint_programming"
Categories: Constraint satisfaction | Programming paradigms 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Galego
Italiano
日本語
Português









 This page was last modified on 8 April 2009, at 08:48 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
