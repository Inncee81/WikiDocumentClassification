













SQL - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "SQL";
		var wgTitle = "SQL";
		var wgAction = "view";
		var wgArticleId = "29004";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282566022;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-sql {line-height: normal;}
.source-sql li, .source-sql pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for sql
 * CSS class: source-sql, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-sql .de1, .source-sql .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-sql  {}
.source-sql .head {}
.source-sql .foot {}
.source-sql .imp {font-weight: bold; color: red;}
.source-sql .ln-xtra {color: #cc0; background-color: #ffc;}
.source-sql li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-sql li.li2 {font-weight: bold;}
.source-sql .kw1 {color: #993333; font-weight: bold;}
.source-sql .co1 {color: #808080; font-style: italic;}
.source-sql .co2 {color: #808080; font-style: italic;}
.source-sql .coMULTI {color: #808080; font-style: italic;}
.source-sql .es0 {color: #000099; font-weight: bold;}
.source-sql .br0 {color: #66cc66;}
.source-sql .st0 {color: #ff0000;}
.source-sql .nu0 {color: #cc66cc;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); SQL

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
This article is about the database language.  For the airport with IATA code SQL, see San Carlos Airport.

SQL

Paradigm
Multi-paradigm


Appeared in
1974


Designed by
Donald D. Chamberlin and Raymond F. Boyce


Developer
IBM


Latest release
SQL:2008/ 2008


Typing discipline
static, strong


Major implementations
Many


Dialects
SQL-86, SQL-89, SQL-92, SQL:1999, SQL:2003, SQL:2006, SQL:2008


Influenced by
Datalog


Influenced
CQL, LINQ, Windows PowerShell


OS
Cross-platform


SQL (Structured Query Language) (pronounced /ɛsk'juːˈɛl /)[1] is a database computer language designed for the retrieval and management of data in relational database management systems (RDBMS), database schema creation and modification, and database object access control management.[2][3]
SQL is a programming language for querying and modifying data and managing databases. SQL was standardized first by the ANSI and later by the ISO. Most database management systems implement a majority of one of these standards and add their proprietary extensions. SQL allows the retrieval, insertion, updating, and deletion of data. A database management system also includes management and administrative functions. Most – if not all – implementations also include a command-line interface (SQL/CLI) that allows for the entry and execution of the language commands, as opposed to only providing an application programming interface (API) intended for access from a graphical user interface (GUI).
The first version of SQL was developed at IBM by Andrew Richardson, Donald C. Messerly and Raymond F. Boyce in the early 1970s. This version, initially called SEQUEL, was designed to manipulate and retrieve data stored in IBM's original relational database product, System R. IBM patented their version of SQL in 1985,[4] while the SQL language was not formally standardized until 1986 by the American National Standards Institute (ANSI) as SQL-86. Subsequent versions of the SQL standard have been released by ANSI and as International Organization for Standardization (ISO) standards.
Originally designed as a declarative query and data manipulation language, variations of SQL have been created by SQL database management system (DBMS) vendors that add procedural constructs, flow-of-control statements, user-defined data types, and various other language extensions. With the release of the SQL:1999 standard, many such extensions were formally adopted as part of the SQL language via the SQL Persistent Stored Modules (SQL/PSM) portion of the standard.
Common criticisms of SQL include a perceived lack of cross-platform portability between vendors, inappropriate handling of missing data (see Null (SQL)), and unnecessarily complex and occasionally ambiguous language grammar and semantics.




Contents


1 History

1.1 Standardization


2 Scope and extensions

2.1 Procedural extensions
2.2 Standard structure


3 Language elements

3.1 Queries
3.2 Data manipulation
3.3 Transaction controls
3.4 Data definition
3.5 Data control
3.6 Other


4 Criticisms of SQL

4.1 Reasons for lack of portability


5 Alternatives to SQL
6 See also
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
During the 1970s, a group at IBM San Jose Research Laboratory developed the System R relational database management system, based on the model introduced by Edgar F. Codd in his influential paper, "A Relational Model of Data for Large Shared Data Banks".[5] Donald D. Chamberlin and Raymond F. Boyce of IBM subsequently created the Structured English Query Language (SEQUEL) to manipulate and manage data stored in System R.[6] The acronym SEQUEL was later changed to SQL because "SEQUEL" was a trademark of the UK-based Hawker Siddeley aircraft company.[7]
The first non-commercial non-SQL RDBMSs were RDMS, developed at MIT in the early 1970s and Ingres, developed in 1974 at U.C. Berkeley. Ingres implemented a query language known as QUEL, which was later supplanted in the marketplace by SQL.[7]
In the late 1970s, Relational Software, Inc. (now Oracle Corporation) saw the potential of the concepts described by Codd, Chamberlin, and Boyce and developed their own SQL-based RDBMS with aspirations of selling it to the U.S. Navy, Central Intelligence Agency, and other U.S. government agencies. In the summer of 1979, Relational Software, Inc. introduced the first commercially available implementation of SQL, Oracle V2 (Version2) for VAX computers. Oracle V2 beat IBM's release of the System/38 RDBMS to market by a few weeks.[citation needed]
After testing SQL at customer test sites to determine the usefulness and practicality of the system, IBM began developing commercial products based on their System R prototype including System/38, SQL/DS, and DB2, which were commercially available in 1979, 1981, and 1983, respectively.[8]

[edit] Standardization
SQL was adopted as a standard by ANSI in 1986 and ISO in 1987.[9] In the original SQL standard, ANSI declared that the official pronunciation for SQL is "es queue el".[1] However, many English-speaking database professionals still use the nonstandard[10] pronunciation /ˈsiːkwəl/ (like the word "sequel"). As mentioned above, SEQUEL was an earlier IBM database language, a predecessor to the SQL language.[11]
Until 1996, the National Institute of Standards and Technology (NIST) data management standards program was tasked with certifying SQL DBMS compliance with the SQL standard. In 1996, however, the NIST data management standards program was dissolved, and vendors are now relied upon to self-certify their products for compliance.[12]
The SQL standard has gone through a number of revisions, as shown below:


Year
Name
Alias
Comments


1986
SQL-86
SQL-87
First published by ANSI. Ratified by ISO in 1987.


1989
SQL-89
FIPS 127-1
Minor revision, adopted as FIPS 127-1.


1992
SQL-92
SQL2, FIPS 127-2
Major revision (ISO 9075), Entry Level SQL-92 adopted as FIPS 127-2.


1999
SQL:1999
SQL3
Added regular expression matching, recursive queries, triggers, support for procedural and control-of-flow statements, non-scalar types, and some object-oriented features.


2003
SQL:2003
 
Introduced XML-related features, window functions, standardized sequences, and columns with auto-generated values (including identity-columns).


2006
SQL:2006
 
ISO/IEC 9075-14:2006 defines ways in which SQL can be used in conjunction with XML. It defines ways of importing and storing XML data in an SQL database, manipulating it within the database and publishing both XML and conventional SQL-data in XML form. In addition, it provides facilities that permit applications to integrate into their SQL code the use of XQuery, the XML Query Language published by the World Wide Web Consortium (W3C), to concurrently access ordinary SQL-data and XML documents.


2008
SQL:2008
 
Legalizes ORDER BY outside cursor definitions. Adds INSTEAD OF triggers. Adds the TRUNCATE statement.[13]


The SQL standard is not freely available, but it may be purchased from ISO or ANSI. A draft of SQL:2008 is freely available as a zip archive, however.[14] The zip archive contains a number of PDF files that define the parts of the SQL:2008 specification.

[edit] Scope and extensions

[edit] Procedural extensions
SQL is designed for a specific purpose: to query data contained in a relational database. SQL is a set-based, declarative query language, not an imperative language such as C or BASIC. However, there are extensions to Standard SQL which add procedural programming language functionality, such as control-of-flow constructs. These are:


Source
Common
Name
Full Name


ANSI/ISO Standard
SQL/PSM
SQL/Persistent Stored Modules


Interbase/
Firebird
PSQL
Procedural SQL


IBM
SQL PL
SQL Procedural Language (implements SQL/PSM)


Microsoft/
Sybase
T-SQL
Transact-SQL


MySQL
SQL/PSM
SQL/Persistent Stored Module (implements SQL/PSM)


Oracle
PL/SQL
Procedural Language/SQL (based on Ada)


PostgreSQL
PL/pgSQL
Procedural Language/PostgreSQL Structured Query Language (based on Oracle PL/SQL)


PostgreSQL
PL/PSM
Procedural Language/Persistent Stored Modules (implements SQL/PSM)


In addition to the standard SQL/PSM extensions and proprietary SQL extensions, procedural and object-oriented programmability is available on many SQL platforms via DBMS integration with other languages. The SQL standard defines SQL/JRT extensions (SQL Routines and Types for the Java Programming Language) to support Java code in SQL databases. SQL Server 2005 uses the SQLCLR (SQL Server Common Language Runtime) to host managed .NET assemblies in the database, while prior versions of SQL Server were restricted to using unmanaged extended stored procedures which were primarily written in C. Other database platforms, like MySQL and Postgres, allow functions to be written in a wide variety of languages including Perl, Python, Tcl, and C.

[edit] Standard structure
The SQL standard is divided into several parts, including:
SQL/Foundation, defined in ISO/IEC 9075, Part 2. This part of the standard contains the most central elements of the language. It consists of both mandatory and optional features.
The SQL/CLI, or Call-Level Interface, part is defined in ISO/IEC 9075, Part 3. SQL/CLI defines common interfacing components (structures and procedures) that can be used to execute SQL statements from applications written in other programming languages. SQL/CLI is defined in such a way that SQL statements and SQL/CLI procedure calls are treated as separate from the calling application's source code. Open Database Connectivity is a well-known superset of SQL/CLI. This part of the standard consists solely of mandatory features.
The SQL/PSM, or Persistent Stored Modules, part is defined by ISO/IEC 9075, Part 4. SQL/PSM standardizes procedural extensions for SQL, including flow of control, condition handling, statement condition signals and resignals, cursors and local variables, and assignment of expressions to variables and parameters. In addition, SQL/PSM formalizes declaration and maintenance of persistent database language routines (e.g., "stored procedures"). This part of the standard consists solely of optional features.
The SQL/MED, or Management of External Data, part is defined by ISO/IEC 9075, Part 9. SQL/MED provides extensions to SQL that define foreign-data wrappers and datalink types to allow SQL to manage external data. External data is data that is accessible to, but not managed by, an SQL-based DBMS. This part of the standard consists solely of optional features.
The SQL/OLB, or Object Language Bindings, part is defined by ISO/IEC 9075, Part 10. SQL/OLB defines the syntax and symantics of SQLJ, which is SQL embedded in Java. The standard also describes mechanisms to ensure binary portability of SQLJ applications, and specifies various Java packages and their contained classes. This part of the standard consists solely of optional features.
The SQL/Schemata, or Information and Definition Schemas, part is defined by ISO/IEC 9075, Part 11. SQL/Schemata defines the Information Schema and Definition Schema, providing a common set of tools to make SQL databases and objects self-describing. These tools include the SQL object identifier, structure and integrity constraints, security and authorization specifications, features and packages of ISO/IEC 9075, support of features provided by SQL-based DBMS implementations, SQL-based DBMS implementation information and sizing items, and the values supported by the DBMS implementations.[15]. This part of the standard contains both mandatory and optional features.
The SQL/JRT, or SQL Routines and Types for the Java Programming Language, part is defined by ISO/IEC 9075, Part 13. SQL/JRT specifies the ability to invoke static Java methods as routines from within SQL applications. It also calls for the ability to use Java classes as SQL structured user-defined types. This part of the standard consists solely of optional features.
The SQL/XML, or XML-Related Specifications, part is defined by ISO/IEC 9075, Part 14. SQL/XML specifies SQL-based extensions for using XML in conjunction with SQL. The XML data type is introduced, as well as several routines, functions, and XML-to-SQL data type mappings to support manipulation and storage of XML in an SQL database. This part of the standard consists solely of optional features.

[edit] Language elements




This chart shows several of the SQL language elements that compose a single statement.


The SQL language is sub-divided into several language elements, including:

Clauses, which are in some cases optional, constituent components of statements and queries.[16]
Expressions which can produce either scalar values or tables consisting of columns and rows of data.
Predicates which specify conditions that can be evaluated to SQL three-valued logic (3VL) Boolean truth values and which are used to limit the effects of statements and queries, or to change program flow.
Queries which retrieve data based on specific criteria.
Statements which may have a persistent effect on schemas and data, or which may control transactions, program flow, connections, sessions, or diagnostics.

SQL statements also include the semicolon (";") statement terminator. Though not required on every platform, it is defined as a standard part of the SQL grammar.


Whitespace is generally ignored in SQL statements and queries, making it easier to format SQL code for readability.


[edit] Queries
The most common operation in SQL databases is the query, which is performed with the declarative SELECT keyword. SELECT retrieves data from a specified table, multiple related tables in a database or the result of an expression. While often grouped with Data Manipulation Language (DML) statements, the standard SELECT query is considered separate from SQL DML, as it has no persistent effects on the data stored in a database. Note that there are some platform-specific variations of SELECT that can persist their effects in a database, such as the SELECT INTO syntax that exists in some databases.[17]
SQL queries allow the user to specify a description of the desired result set, but it is left to the devices of the database management system (DBMS) to plan, optimize, and perform the physical operations necessary to produce that result set in as efficient a manner as possible. An SQL query includes a list of columns to be included in the final result immediately following the SELECT keyword. An asterisk ("*") can also be used as a "wildcard" indicator to specify that all available columns of a table (or multiple tables) are to be returned. SELECT is the most complex statement in SQL, with several optional keywords and clauses, including:

The FROM clause which indicates the source table or tables from which the data is to be retrieved. The FROM clause can include optional JOIN clauses to join related tables to one another based on user-specified criteria.
The WHERE clause includes a comparison predicate, which is used to restrict the number of rows returned by the query. The WHERE clause is applied before the GROUP BY clause. The WHERE clause eliminates all rows from the result set where the comparison predicate does not evaluate to True.
The GROUP BY clause is used to combine, or group, rows with related values into elements of a smaller set of rows. GROUP BY is often used in conjunction with SQL aggregate functions or to eliminate duplicate rows from a result set.
The HAVING clause includes a comparison predicate used to eliminate rows after the GROUP BY clause is applied to the result set. Because it acts on the results of the GROUP BY clause, aggregate functions can be used in the HAVING clause predicate.
The ORDER BY clause is used to identify which columns are used to sort the resulting data, and in which order they should be sorted (options are ascending or descending). The order of rows returned by an SQL query is never guaranteed unless an ORDER BY clause is specified.

The following is an example of a SELECT query that returns a list of expensive books. The query retrieves all rows from the Book table in which the price column contains a value greater than 100.00. The result is sorted in ascending order by title. The asterisk (*) in the select list indicates that all columns of the Book table should be included in the result set.


SELECT * 
    FROM Book
    WHERE price > 100.00
    ORDER BY title

The example below demonstrates the use of multiple tables in a join, grouping, and aggregation in an SQL query, by returning a list of books and the number of authors associated with each book.


SELECT Book.title,
        count(*) AS Authors
    FROM Book
        JOIN Book_author ON Book.isbn = Book_author.isbn
    GROUP BY Book.title

Example output might resemble the following:

Title                   Authors
----------------------  -------
SQL Examples and Guide     3
The Joy of SQL             1
How to use Wikipedia       2
Pitfalls of SQL            1


Under the precondition that isbn is the only common column name of the two tables and that a column named title only exists in the Books table, the above query could be rewritten in the following form:


SELECT title,
        count(*) AS Authors
    FROM Book 
        NATURAL JOIN Book_author 
    GROUP BY title

However, many vendors either do not support this approach, or it requires certain column naming conventions. Thus, it is less common in practice.
Data retrieval is very often combined with data projection when the user is looking for calculated values and not just the verbatim data stored in primitive data types, or when the data needs to be expressed in a form that is different from how it's stored. SQL allows the use of expressions in the select list to project data, as in the following example which returns a list of books that cost more than 100.00 with an additional sales_tax column containing a sales tax figure calculated at 6% of the price.


SELECT isbn,
        title,
        price, 
        price * 0.06 AS sales_tax
    FROM Book
    WHERE price > 100.00
    ORDER BY title

Universal quantification is not explicitly supported by sql, and must be worked out as a negated existential quantification.[18][19][20]

[edit] Data manipulation
First, there are the standard Data Manipulation Language (DML) elements. DML is the subset of the language used to add, update and delete data:

INSERT is used to add rows (formally tuples) to an existing table, e.g.,:



INSERT INTO My_table 
        (field1, field2, field3) 
    VALUES 
        ('test', 'N', NULL);


UPDATE is used to modify the values of a set of existing table rows, e.g.,:



UPDATE My_table 
    SET field1 = 'updated value' 
    WHERE field2 = 'N';


DELETE removes zero or more existing rows from a table, e.g.,:



DELETE FROM My_table 
    WHERE field2 = 'N';


MERGE is used to combine the data of multiple tables. It is something of a combination of the INSERT and UPDATE elements. It is defined in the SQL:2003 standard; prior to that, some databases provided similar functionality via different syntax, sometimes called an "upsert".


[edit] Transaction controls
Transactions, if available, can be used to wrap around the DML operations:

START TRANSACTION (or BEGIN WORK, or BEGIN TRANSACTION, depending on SQL dialect) can be used to mark the start of a database transaction, which either completes entirely or not at all.
COMMIT causes all data changes in a transaction to be made permanent.
ROLLBACK causes all data changes since the last COMMIT or ROLLBACK to be discarded, so that the state of the data is "rolled back" to the way it was prior to those changes being requested.

Once the COMMIT statement has been executed, the changes cannot be rolled back. In other words, its meaningless to have ROLLBACK executed after COMMIT statement and vice versa.
COMMIT and ROLLBACK interact with areas such as transaction control and locking. Strictly, both terminate any open transaction and release any locks held on data. In the absence of a START TRANSACTION or similar statement, the semantics of SQL are implementation-dependent. Example: A classic bank transfer of funds transaction.


START TRANSACTION;
  UPDATE Account SET amount=amount-200 WHERE account_number=1234;
  UPDATE Account SET amount=amount+200 WHERE account_number=2345;
IF ERRORS=0 COMMIT;
IF ERRORS<>0 ROLLBACK;


[edit] Data definition
The second group of keywords is the Data Definition Language (DDL). DDL allows the user to define new tables and associated elements. Most commercial SQL databases have proprietary extensions in their DDL, which allow control over nonstandard features of the database system. The most basic items of DDL are the CREATE, ALTER, RENAME, TRUNCATE and DROP statements:

CREATE causes an object (a table, for example) to be created within the database.
DROP causes an existing object within the database to be deleted, usually irretrievably.
TRUNCATE deletes all data from a table in a very fast way. It usually implies a subsequent COMMIT operation.
ALTER statement permits the user to modify an existing object in various ways -- for example, adding a column to an existing table.

Example:


CREATE TABLE My_table
(
    my_field1   INT,
    my_field2   VARCHAR(50),
    my_field3   DATE         NOT NULL,
    PRIMARY KEY (my_field1, my_field2) 
);


[edit] Data control
The third group of SQL keywords is the Data Control Language (DCL). DCL handles the authorization aspects of data and permits the user to control who has access to see or manipulate data within the database. Its two main keywords are:

GRANT authorizes one or more users to perform an operation or a set of operations on an object.
REVOKE removes or restricts the capability of a user to perform an operation or a set of operations.

Example:


GRANT SELECT, UPDATE 
    ON My_table 
    TO some_user, another_user;
 
REVOKE SELECT, UPDATE 
    ON My_table 
    FROM some_user, another_user;


[edit] Other

The ISO-standard SQL specifies double dash, --, as a single line comment identifier. Example:



SELECT * 
    FROM Inventory 
    WHERE category = 2 -- Category 2 is electronics

Additionally, the database system may allow for C-style /* ... */ multi-line comments, as well.

Some database systems allow user-defined functions and stored procedures (collectively called user defined routines). Some allow control of the query's execution with hints.


[edit] Criticisms of SQL
Technically, SQL is a declarative computer language for use with "SQL databases". Theorists and some practitioners note that many of the original SQL features were inspired by, but violated, the relational model for database management and its tuple calculus realization. Recent extensions to SQL achieved relational completeness, but have worsened the violations, as documented in The Third Manifesto.
In addition, there are also some criticisms about the practical use of SQL:

Implementations are inconsistent and, usually, incompatible between vendors. In particular date and time syntax, string concatenation, nulls, and comparison case sensitivity often vary from vendor to vendor.
The language makes it too easy to do a Cartesian join (joining all possible combinations), which results in "run-away" result sets when WHERE clauses are mistyped. Cartesian joins are so rarely used in practice that requiring an explicit CARTESIAN keyword may be warranted. (SQL 1992 introduced the CROSS JOIN keyword that allows the user to make clear that a cartesian join is intended, but the shorthand "comma-join" with no predicate is still acceptable syntax, which still invites the same mistake.)
It is also possible to misconstruct a WHERE on an update or delete, thereby affecting more rows in a table than desired.
The grammar of SQL is perhaps unnecessarily complex, borrowing a COBOL-like keyword approach, when a function-influenced syntax could result in more re-use of fewer grammar and syntax rules.


[edit] Reasons for lack of portability
Popular implementations of SQL commonly omit support for basic features of Standard SQL, such as the DATE or TIME data types, preferring variations of their own. As a result, SQL code can rarely be ported between database systems without modifications.
There are several reasons for this lack of portability between database systems:

The complexity and size of the SQL standard means that most databases do not implement the entire standard.
The standard does not specify database behavior in several important areas (e.g., indexes, file storage...), leaving it up to implementations of the database to decide how to behave.
The SQL standard precisely specifies the syntax that a conforming database system must implement. However, the standard's specification of the semantics of language constructs is less well-defined, leading to areas of ambiguity.
Many database vendors have large existing customer bases; where the SQL standard conflicts with the prior behavior of the vendor's database, the vendor may be unwilling to break backward compatibility.
Vendors of closed-source software often desire to create incompatibility with other products, as it provides a strong incentive for their existing customers to remain loyal (see vendor lock-in).


[edit] Alternatives to SQL
A distinction should be made between alternatives to relational query languages and alternatives to SQL. The list below are proposed alternatives to SQL, but are still (nominally) relational. See navigational database for alternatives to relational:

.QL - object-oriented Datalog
4D Query Language (4D QL)
Aldat Relational Algebra and Domain algebra
Datalog
Hibernate Query Language (HQL) - A Java-based tool that uses modified SQL
IBM Business System 12 (IBM BS12)
ISBL
Java Persistence Query Language (JPQL) - The query language used by the Java Persistence API in Java EE5
LINQ
Object Query Language
QBE (Query By Example) created by Moshè Zloof, IBM 1977
QLC - Query Interface to Mnesia, ETS, Dets, etc (Erlang programming language)
Quel introduced in 1974 by the U.C. Berkeley Ingres project.
Tutorial D
XQuery


[edit] See also

Alphabetical list of programming languages
Comparison of object-relational database management systems
Comparison of relational database management systems
D (data language specification)
D4 (programming language) (an implementation of D)
Interlingual SQL
Hierarchical model
List of relational database management systems
MUMPS


[edit] References





This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (October 2008)





Wikibooks has a book on the topic of
SQL






Wikibooks has a book on the topic of
SQL dialects reference






Wikiversity has learning materials about Topic:Computer Science




^ a b Chapple, Mike. "SQL Fundamentals" (HTML). About.com: Databases. About.com. http://databases.about.com/od/sql/a/sqlfundamentals.htm. Retrieved on 2009-01-28. 
^ Chapple, Mike. "SQL Fundamentals" (HTML). About.com: Databases. About.com. http://databases.about.com/od/sql/a/sqlfundamentals.htm?terms=SQL. Retrieved on 2007-06-10. 
^ "Structured Query Language (SQL)" (HTML). International Business Machines. October 27, 2006. http://publib.boulder.ibm.com/infocenter/db2luw/v9/index.jsp?topic=/com.ibm.db2.udb.admin.doc/doc/c0004100.htm. Retrieved on 2007-06-10. 
^ Shaw et al. (1985-03-19). "US Patent 4,506,326". http://www.google.com/patents?id=eKI-AAAAEBAJ. Retrieved on 2008-11-04. 
^ Codd, E.F. (June 1970). "A Relational Model of Data for Large Shared Data Banks". Communications of the ACM (Association for Computing Machinery) 13 (No. 6): 377–387. doi:10.1145/362384.362685. http://www.acm.org/classics/nov95/toc.html. Retrieved on 2007-06-09. 
^ Chamberlin, Donald D.; Boyce, Raymond F. (1974). "SEQUEL: A Structured English Query Language" (PDF). Proceedings of the 1974 ACM SIGFIDET Workshop on Data Description, Access and Control (Association for Computing Machinery): 249–264. http://www.almaden.ibm.com/cs/people/chamberlin/sequel-1974.pdf. Retrieved on 2007-06-09. 
^ a b Oppel, Andy (March 1, 2004). Databases Demystified. San Francisco, CA: McGraw-Hill Osborne Media. pp. 90–91. ISBN 0-07-225364-9. http://www.mhprofessional.com/product.php?cat=112&isbn=0072253649. 
^ "History of IBM, 1978" (HTML). IBM Archives. IBM. http://www-03.ibm.com/ibm/history/history/year_1978.html. Retrieved on 2007-06-09. 
^ American National Standards Institute. X3H2 Records, 1978-1995. Finding Aid.
^ Melton, Jim; Alan R Simon (1993). Understanding the New SQL: A Complete Guide. Morgan Kaufmann. pp. 536. ISBN 1558602453.  "chapter 1.2 What is SQL? SQL (correctly pronounced "ess cue ell," instead of the somewhat common "sequel"), is a..." 
^ "Understand SQL". www.faqs.org/docs/. http://www.faqs.org/docs/ppbook/c1164.htm. 
^ Doll, Shelley (June 19, 2002). "Is SQL a Standard Anymore?" (HTML). TechRepublic's Builder.com. TechRepublic. http://builder.com.com/5100-6388-1046268.html. Retrieved on 2007-06-09. 
^ http://iablog.sybase.com/paulley/2008/07/sql2008-now-an-approved-iso-international-standard/
^ Zip archive of the SQL:2008 draft from Whitemarsh Information Systems Corporation
^ ISO/IEC 9075-11:2008: Information and Definition Schemas (SQL/Schemata), 2008, pp. 1 
^ ANSI/ISO/IEC International Standard (IS). Database Language SQL—Part 2: Foundation (SQL/Foundation). 1999
^ "INTO Clause (Transact-SQL)" (HTML). SQL Server 2005 Books Online. Microsoft. 2007. http://msdn2.microsoft.com/en-us/library/ms188029(SQL.90).aspx. Retrieved on 2007-06-17. 
^ M. Negri, G. Pelagatti, L. Sbattella (1989) Semantics and problems of universal quantification in SQL
^ Claudio Fratarcangeli (1991) Technique for universal quantification in SQL
^ Jalal Kawash Complex quantification in Structured Query Language (SQL): a tutorial using relational calculus - Journal of Computers in Mathematics and Science Teaching ISSN 0731-9258 Volume 23, Issue 2, 2004 AACE Norfolk, VA




"A Relational Model of Data for Large Shared Data Banks" E. F. Codd, Communications of the ACM, Vol. 13, No. 6, June 1970, pp. 377–387.
Discussion on alleged SQL flaws (C2 wiki)



[edit] External links

1995 SQL Reunion: People, Projects, and Politics, by Paul McJones (ed.): transcript of a reunion meeting devoted to the personal history of relational databases and SQL
American National Standards Institute. X3H2 Records, 1978-1995 Charles Babbage Institute Collection documents the H2 committee’s development of the NDL and SQL standards.
Oral history interview with Donald D. Chamberlin Charles Babbage Institute In this oral history Chamberlin recounts his early life, his education at Harvey Mudd College and Stanford University, and his work on relational database technology. Chamberlin was a member of the System R research team and, with Raymond F. Boyce, developed the SQL database language. Chamberlin also briefly discusses his more recent research on XML query languages.








v • d • e

Database management systems





Database models · Database normalization · Database storage · Distributed DBMS · Referential integrity · Relational algebra · Relational calculus · Relational database · Relational DBMS · Relational model · Object-relational database · Transaction processing





Concepts

Database · ACID · CRUD · Null · Candidate key · Foreign key · Primary key · Superkey · Surrogate key






Objects

Trigger · View · Table · Cursor · Log · Transaction · Index · Stored procedure · Partition






SQL

Select · Insert · Update · Merge · Delete · Join · Union · Create · Drop · Begin work · Commit · Rollback · Truncate · Alter






Components

Concurrency control · Data dictionary · JDBC · ODBC · Query language · Query optimizer · Query plan






Database products: Object-oriented (comparison) · Relational (comparison) · Document-oriented








Retrieved from "http://en.wikipedia.org/wiki/SQL"
Categories: Database management systems | Declarative programming languages | Query languages | SQL | Databases | IBM software | Data modeling languages | Articles with example SQL code | Cross-platform softwareHidden categories: All articles with unsourced statements | Articles with unsourced statements since June 2007 | Articles needing additional references from October 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
বাংলা
Беларуская
Bosanski
Brezhoneg
Български
Català
Česky
Dansk
Deutsch
Español
Esperanto
Euskara
فارسی
Français
Gaeilge
한국어
Hrvatski
Bahasa Indonesia
Interlingua
Íslenska
Italiano
עברית
Kurdî / كوردی
Latviešu
Lietuvių
Magyar
മലയാളം
Bahasa Melayu
Mìng-dĕ̤ng-ngṳ̄
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Slovenčina
Slovenščina
Српски / Srpski
Suomi
Svenska
தமிழ்
ไทย
Tiếng Việt
Тоҷикӣ
Türkçe
Українська
中文









 This page was last modified on 8 April 2009, at 15:14 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
