













Git (software) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Git_(software)";
		var wgTitle = "Git (software)";
		var wgAction = "view";
		var wgArticleId = "1771747";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281502396;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [""];
		var wgRestrictionMove = [""];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Git (software)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Git




Design by
Linus Torvalds


Developed by
Junio Hamano, Linus Torvalds


Latest release
1.6.2.2 / 2009-04-02; 2 days ago


Written in
C, Bourne Shell, Perl[1]


Operating system
POSIX


Type
Revision control


License
GNU General Public License v2


Website
git-scm.com


Git is a free distributed revision control, or software source code management project with an emphasis on being fast. Git was initially created by Linus Torvalds for Linux kernel development.
Every Git working directory is a full-fledged repository with complete history and full revision tracking capabilities, not dependent on network access or a central server.
Several high-profile software projects now use Git for revision control,[2] most notably the Linux kernel, Perl,[3] GNOME,[4] Samba, X.org Server, Qt, One Laptop per Child (OLPC) core development[5], VLC, Wine, SWI Prolog, GStreamer and the Android mobile platform.
Git's current software maintenance is overseen by Junio Hamano.




Contents


1 Name
2 Characteristics
3 Early history
4 Implementation
5 Portability
6 Other popular projects using Git
7 See also
8 References
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Name
Linus Torvalds has quipped about the name "git", which is British English slang for a stupid or unpleasant person:[6] "I'm an egotistical bastard, and I name all my projects after myself. First Linux, now git." This self-deprecating humor is tongue-in-cheek, as Torvalds was actually pressured into naming Linux after himself (see History of Linux).
The official Git wiki also gives a number of alternative explanations for the name, including "Global Information Tracker".[7]

[edit] Characteristics
Git's design was inspired by BitKeeper and Monotone.[8][9] Git was originally designed only as a low-level engine that others could use to write front ends such as Cogito or StGIT.[10] However, the core Git project has since become a complete revision control system that is usable directly.[11]
Git's design is a synthesis of Torvalds's experience maintaining a large distributed development project, his intimate knowledge of file system performance, and an urgent need to produce a working system in short order. (See the history section for details.) These influences led to the following implementation choices:

Strong support for non-linear development. Git supports rapid branching and merging, and includes specific tools for visualizing and navigating a non-linear development history. A core assumption in Git is that a change will be merged more often than it is written, as it is passed around various reviewers.
Distributed development. Like Darcs, BitKeeper, Mercurial, SVK, Bazaar and Monotone, Git gives each developer a local copy of the entire development history, and changes are copied from one such repository to another. These changes are imported as additional development branches, and can be merged in the same way as a locally developed branch.
Repositories can be published via HTTP, FTP, rsync, or a Git protocol over either a plain socket or ssh. Git also has a CVS server emulation, which enables the use of existing CVS clients and IDE plugins to access Git repositories.
Subversion and svk repositories can be used directly with git-svn.
Efficient handling of large projects. Torvalds has described Git as being very fast and scalable,[12] and performance tests done by Mozilla showed it was an order of magnitude faster than other revision control systems, and two orders of magnitude faster on some operations.[13][14]
Cryptographic authentication of history. The Git history is stored in such a way that the name of a particular revision (a "commit" in Git terms) depends upon the complete development history leading up to that commit. Once it is published, it is not possible to change the old versions without it being noticed.[citation needed] (Mercurial and Monotone also have this property.)
Toolkit design. Git was designed as a set of programs written in C, and a number of shell scripts that provide wrappers around those programs.[15] Although most of those scripts have been rewritten in C as part of an ongoing effort to port it to Microsoft Windows, the design remains, and it is easy to chain the components together to do other clever things.[16]
Pluggable merge strategies. As part of its toolkit design, Git has a well-defined model of an incomplete merge, and it has multiple algorithms for completing it, culminating in telling the user that it is unable to complete the merge automatically and manual editing is required.
Garbage accumulates unless collected. Aborting operations or backing out changes will leave useless dangling objects in the database. These are generally a small fraction of the continuously growing history of wanted objects, but reclaiming the space using git-gc --prune can be slow.[17]

One property of Git is that it snapshots directory trees of files. The earliest systems for tracking versions of source code, SCCS and RCS, worked on individual files and emphasized the space savings to be gained from delta encoding the (mostly similar) versions. Later revision control systems maintained this notion of a file having an identity across multiple revisions of a project.
Torvalds rejected this concept;[18] consequently, Git does not explicitly record file revision relationships at any level below the source code tree. This has some significant consequences:

It is slightly more expensive to examine the change history of a single file than the whole project.[19] To obtain a history of changes affecting a given file, Git must walk the global history and then determine whether each change modified that file. This method of examining history does, however, let Git produce with equal efficiency a single history showing the changes to an arbitrary set of files. For example, a subdirectory of the source tree plus an associated global header file is a very common case.
Renames are handled implicitly rather than explicitly. A common complaint with CVS is that it uses the name of a file to identify its revision history, so moving or renaming a file is not possible without either interrupting its history, or renaming the history and thereby making the history inaccurate. Most post-CVS revision control systems solve this by giving a file a unique long-lived name (a sort of inode number) that survives renaming. Git does not record such an identifier, and this is claimed as an advantage.[20][21] Source code files are sometimes split or merged as well as simply renamed,[22] and recording this as a simple rename would freeze an inaccurate description of what happened in the (immutable) history. Git addresses the issue by detecting renames while browsing the history of snapshots rather than recording it when making the snapshot.[23] (Briefly, given a file in revision N, a file of the same name in revision N−1 is its default ancestor. However, when there is no like-named file in revision N−1, Git searches for a file that existed only in revision N−1 and is very similar to the new file.) However, it does require more CPU-intensive work every time history is reviewed, and a number of options to adjust the heuristics.

Additionally, people are sometimes upset by the storage model:

Periodic explicit object packing. Git stores each newly created object as a separate file. Although individually compressed, this takes a great deal of space and is inefficient. This is solved by the use of "packs" that store a large number of objects in a single file (or network byte stream), delta-compressed among themselves. Packs are compressed using the heuristic that files with the same name are probably similar, but do not depend on it for correctness. Newly created objects (newly added history) are still stored singly, and periodic repacking is required to maintain space efficiency. Git does periodic repacking automatically but manual repacking is also possible with the git gc command.

Git implements several merging strategies; a non-default can be selected at merge time:[24]

resolve
the traditional 3-way merge algorithm.
recursive
This is the default when pulling or merging one branch, and is a variant of the 3-way merge algorithm. "When there are more than one common ancestors that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mis-merges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames."[25]
octopus
This is the default when merging more than two heads.


[edit] Early history
Git development began after many Linux kernel developers were forced to give up access to the proprietary BitKeeper system (see BitKeeper - Pricing change). The ability to use BitKeeper free of charge had been withdrawn by the copyright holder Larry McVoy after he claimed Andrew Tridgell had reverse engineered the BitKeeper protocols in violation of the BitKeeper license. At Linux.Conf.Au 2005, Tridgell demonstrated during his keynote that the reverse engineering process he had used was simply to telnet to the appropriate port of a BitKeeper server and type "help".[26]
Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs, particularly his performance needs. From an e-mail he wrote on April 7, 2005 while writing the first prototype:[27]


However, the SCMs I've looked at make this hard. One of the things (the main thing, in fact) I've been working at is to make that process really efficient. If it takes half a minute to apply a patch and remember the changeset boundary etc. (and quite frankly, that's fast for most SCMs around for a project the size of Linux), then a series of 250 emails (which is not unheard of at all when I sync with Andrew, for example) takes two hours. If one of the patches in the middle doesn't apply, things are bad bad bad.
Now, BK wasn't a speed demon either (actually, compared to everything else, BK is a speed deamon [sic], often by one or two orders of magnitude), and took about 10–15 seconds per email when I merged with Andrew. HOWEVER, with BK that wasn't as big of an issue, since the BK<->BK merges were so easy, so I never had the slow email merges with any of the other main developers. So a patch-application-based SCM “merger” actually would need to be faster than BK is. Which is really really really hard.
So I'm writing some scripts to try to track things a whole lot faster. Initial indications are that I should be able to do it almost as quickly as I can just apply the patch, but quite frankly, I'm at most half done, and if I hit a snag maybe that's not true at all. Anyway, the reason I can do it quickly is that my scripts will not be an SCM, they'll be a very specific “log Linus' state” kind of thing. That will make the linear patch merge a lot more time-efficient, and thus possible.
(If a patch apply takes three seconds, even a big series of patches is not a problem: if I get notified within a minute or two that it failed half-way, that's fine, I can then just fix it up manually. That's why latency is critical—if I'd have to do things effectively “offline”, I'd by definition not be able to fix it up when problems happen).


Torvalds had several design criteria:

Take CVS as an example of what not to do; if in doubt, make the exact opposite decision. To quote Torvalds, speaking somewhat tongue-in-cheek:

“For the first 10 years of kernel maintenance, we literally used tarballs and patches, which is a much superior source control management system than CVS is, but I did end up using CVS for 7 years at a commercial company [ Transmeta[28]] and I hate it with a passion. When I say I hate CVS with a passion, I have to also say that if there are any SVN (Subversion) users in the audience, you might want to leave. Because my hatred of CVS has meant that I see Subversion as being the most pointless project ever started. The slogan of Subversion for a while was "CVS done right", or something like that, and if you start with that kind of slogan, there's nowhere you can go. There is no way to do CVS right.”[29]


Support a distributed, BitKeeper-like workflow

"BitKeeper was not only the first source control system that I ever felt was worth using at all, it was also the source control system that taught me why there's a point to them, and how you actually can do things. So Git in many ways, even though from a technical angle it is very very different from BitKeeper (which was another design goal, because I wanted to make it clear that it wasn't a BitKeeper clone), a lot of the flows we use with Git come directly from the flows we learned from BitKeeper."[29]


Very strong safeguards against corruption, either accidental or malicious[30][29]
Very high performance

The first three criteria eliminated every pre-existing version control system except for Monotone, and the fourth excluded everything.[29] So, immediately after the 2.6.12-rc2 Linux kernel development release,[29] he set out to write his own.[29]
The development of Git began on April 3, 2005.[31] The project was announced on April 6,[32] and became self-hosting as of April 7.[31] The first merge of multiple branches was done on April 18.[33] Torvalds achieved his performance goals; on April 29, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 per second.[34] On June 16, the kernel 2.6.12 release was managed by Git.[35]
While strongly influenced by BitKeeper, Torvalds deliberately attempted to avoid conventional approaches, leading to a unique design.[36] He developed the system until it was usable by technical users, then turned over maintenance on July 26, 2005 to Junio Hamano, a major contributor to the project.[37] Hamano was responsible for the 1.0 release on December 21, 2005,[38] and remains the maintainer as of February 2009[update].

[edit] Implementation
Like BitKeeper, Git does not use a centralized server. However, Git's primitives are not inherently a SCM system. Torvalds explains,[39]


In many ways you can just see git as a filesystem — it's content-addressable, and it has a notion of versioning, but I really really designed it coming at the problem from the viewpoint of a filesystem person (hey, kernels is what I do), and I actually have absolutely zero interest in creating a traditional SCM system.



(Note: although not Torvalds' original intent, git now has the full set of features expected of a traditional SCM.)[40]

Git has two data structures, a mutable index that caches information about the working directory and the next revision to be committed, and an immutable, append-only object database containing four types of objects:

A blob object is the content of a file. Blob objects have no names, timestamps, or other metadata.
A tree object is the equivalent of a directory: it contains a list of filenames, each with some type bits and the name of a blob or tree object that is that file, symbolic link, or directory's contents. This object describes a snapshot of the source tree.
A commit object links tree objects together into a history. It contains the name of a tree object (of the top-level source directory), a timestamp, a log message, and the names of zero or more parent commit objects.
A tag object is a container that contains reference to another object and can hold additional meta-data related to another object. Most commonly it is used to store a digital signature of a commit object corresponding to a particular release of the data being tracked by Git.

The object database can hold any kind of object. An intermediate layer, the index, serves as connection point between the object database and the working tree.
Each object is identified by a SHA-1 hash of its contents. Git computes the hash, and uses this value for the object's name. The object is put into a directory matching the first two characters of its hash. The rest of the hash is used as the file name for that object.
Git stores each revision of a file as a unique blob object. The relationships between the blobs can be found through examining the tree and commit objects. Newly added objects are stored in their entirety using zlib compression. This can consume a large amount of hard disk space quickly, so objects can be combined into packs, which use delta compression to save space, storing blobs as their changes relative to other blobs.

[edit] Portability
Git is primarily developed on Linux, but can be used on other Unix-like operating systems including BSD, Solaris and Darwin. Git is extremely fast on POSIX-based systems such as Linux.[41]
Git also runs on Windows. There are two variants:

A native Microsoft Windows port, called msysgit (using MSYS from MinGW), is approaching completion.[42] There are downloadable installers ready for testing (under the names "Git" and "msysgit", where "Git" is aimed for users).[43] While somewhat slower than the Linux version,[44] it is acceptably fast[45] and is reported to be usable in production, with only minor awkwardness.[46] In particular, some commands are not yet available from the GUIs, and must be invoked from the command line.


Git also runs on top of Cygwin (a POSIX emulation layer),[47] although it is noticeably slower, especially for commands written as shell scripts.[48] This is primarily due to the high cost of the fork emulation performed by Cygwin. However, the recent rewriting of many Git commands implemented as shell scripts in C has resulted in significant speed improvements on Windows.[49] Regardless, many people find a Cygwin installation too large and invasive for typical Windows use.[50]

Other alternatives for running Git include:

git-cvsserver (which emulates a CVS server, allowing use of Windows CVS clients): [1]
Eclipse IDE-based Git client, based on a pure Java implementation of Git's internals: egit
NetBeans IDE support for Git is under development. [2]
A Windows Explorer extension (a TortoiseCVS/TortoiseSVN-lookalike) was started at TortoiseGit and Git Extensions which is an explorer extension as well as a standalone GUI and a Visual Studio 2008 Plug-in
Intellij Version 8.1 now supports Git through a bundled plugin: Intellij Version Control Systems Integration

"Libifying" the lowest-level Git operations would in theory enable re-implementation of the higher-level components for Windows without rewriting the rest.[51]

[edit] Other popular projects using Git

FFmpeg [52]
Ruby on Rails web framework[53]
YUI[54]
Merb
DragonFly BSD
GPM
BlueZ


[edit] See also




Free software portal




Distributed revision control
List of revision control software
Comparison of revision control software
Comparison of open source software hosting facilities
Mercurial
Repo (Script)


[edit] References


^ git.kernel.org - git/git.git/tree
^ "Projects that use Git for their source code management". http://git.or.cz/gitwiki/GitProjects. Retrieved on 2008-02-20. 
^ Léon Brocard. "Mailing List Announcement". http://www.nntp.perl.org/group/perl.perl5.porters/2008/12/msg142823.html. Retrieved on 2008-12-22.  "The Perl Foundation has migrated Perl 5 to the Git version control system…" 
^ Lucas Rocha. "Mailing List Announcement". http://mail.gnome.org/archives/gnome-infrastructure/2009-March/msg00064.html. Retrieved on 2009-03-19.  "GNOME to migrate to git version control system…" 
^ OLPC wiki. "Project hosting". http://wiki.laptop.org/go/Project_hosting. Retrieved on 2008-02-20. 
^ "After controversy, Torvalds begins work on git". InfoWorld. 2005-04-19. ISSN 0199-6649. http://www.infoworld.com/article/05/04/19/HNtorvaldswork_1.html. Retrieved on 2008-02-20. 
^ GitFaq: Why the 'git' name?
^ Linus Torvalds (2006-05-05). "Re: [ANNOUNCE] Git wiki". linux-kernel mailing list. http://marc.info/?l=git&m=114685143200012.  "Some historical background" on git's predecessors
^ Linus Torvalds (2005-04-07). "Re: Kernel SCM saga". linux-kernel mailing list. http://lkml.org/lkml/2005/4/8/9. 
^ Linus Torvalds (2005-04-08). "Re: Kernel SCM saga". linux-kernel mailing list. http://marc.info/?l=linux-kernel&m=111293537202443. Retrieved on 2008-02-20. 
^ Linus Torvalds (2006-03-23). "Re: Errors GITtifying GCC and Binutils". git mailing list. http://marc.info/?l=git&m=114314642000462. 
^ Linus Torvalds (2006-10-19). "Re: VCS comparison table". git mailing list. http://marc.info/?l=git&m=116128307511686. 
^ Stenback, Johnny (2006-11-30), "bzr/hg/git performance", Jst's Blog, http://weblogs.mozillazine.org/jst/archives/2006/11/vcs_performance.html, retrieved on 2008-02-20 , benchmarking "git diff" against "bzr diff", and finding the former 100x faster in some cases.
^ Roland Dreier (2006-11-13). "Oh what a relief it is". http://digitalvampire.org/blog/index.php/2006/11/16/oh-what-a-relief-it-is/. , observing that "git log" is 100x faster than "svn log" because the latter has to contact a remote server.
^ Linus Torvalds (2006-10-18). "Re: VCS comparison table". git mailing list. http://marc.info/?l=git&m=116118369005954. , describing Git's script-oriented design
^ iabervon (2005-12-22). "Git rocks!". http://lwn.net/Articles/165202/. , praising Git's scriptability
^ "Git User's Manual". 2007-08-05. http://www.kernel.org/pub/software/scm/git/docs/user-manual.html#ensuring-reliability. 
^ Linus Torvalds (2005-04-10). "Re: more git updates..". linux-kernel mailing list. http://marc.info/?l=linux-kernel&m=111314792424707. 
^ Bruno Haible (2007-02-11). "how to speed up "git log"?". git mailing list. http://marc.info/?l=git&m=117119479505638. 
^ Linus Torvalds (2006-03-01). "Re: impure renames / history tracking". git mailing list. http://marc.info/?l=git&m=114123702826251. 
^ Junio C Hamano (2006-03-24). "Re: Errors GITtifying GCC and Binutils". git mailing list. http://marc.info/?l=git&m=114316047119262. 
^ Junio C Hamano (2006-03-23). "Re: Errors GITtifying GCC and Binutils". git mailing list. http://marc.info/?l=git&m=114315795227271. 
^ Linus Torvalds (2006-11-28). "Re: git and bzr". git mailing list. http://marc.info/?l=git&m=116473016012824. , on using git-blame to show code moved between source files
^ Linus Torvalds (2007-07-18). "git-merge(1)". http://www.kernel.org/pub/software/scm/git/docs/git-merge.html. 
^ Linus Torvalds (2007-07-18). "CrissCrossMerge". http://revctrl.org/CrissCrossMerge. 
^ Jonathan Corbet (2005-04-20), "How Tridge reverse engineered BitKeeper", Linux Weekly News, http://lwn.net/Articles/132938/ 
^ Linus Torvalds (2005-04-07). "Re: Kernel SCM saga..". linux-kernel mailing list. http://marc.info/?l=linux-kernel&m=111288700902396. 
^ Linus Torvalds (2005-10-31). "Re: git versus CVS (versus bk)". git mailing list. http://marc.info/?l=git&m=113072612805233&w=2. 
^ a b c d e f Linus Torvalds. (2007, 05-03). Google tech talk: Linus Torvalds on git. Retrieved on 2007-05-16. Event occurs at 02:30.
^ Linus Torvalds (2007-06-10). "Re: fatal: serious inflate inconsistency". git mailing list. http://marc.info/?l=git&m=118143549107708.  A brief description of Git's data integrity design goals.
^ a b Linus Torvalds (2007-02-27). "Re: Trivia: When did git self-host?". git mailing list. http://marc.info/?l=git&m=117254154130732. 
^ Linus Torvalds (2005-04-06). "Kernel SCM saga..". linux-kernel mailing list. http://marc.info/?l=linux-kernel&m=111280216717070. 
^ Linus Torvalds (2005-04-17). "First ever real kernel git merge!". git mailing list. http://marc.info/?l=git&m=111377572329534. 
^ Matt Mackall (2005-04-29). "Mercurial 0.4b vs git patchbomb benchmark". git mailing list. http://marc.info/?l=git&m=111475459526688. 
^ Linus Torvalds (2005-06-17). "Linux 2.6.12". git-commits-head mailing list. http://marc.info/?l=git-commits-head&m=111904216911731. 
^ Linus Torvalds (2006-10-20). "Re: VCS comparison table". git mailing list. http://marc.info/?l=git&m=116129092117475.  A discussion of Git vs. BitKeeper
^ Linus Torvalds (2005-07-27). "Meet the new maintainer…". git mailing list. http://marc.info/?l=git&m=112243466603239. 
^ Junio C Hamano (2005-12-21). "ANNOUNCE: GIT 1.0.0". git mailing list. http://marc.info/?l=git&m=113515203321888. 
^ Linus Torvalds (2005-04-10). "Re: more git updates…". linux-kernel mailing list. http://marc.info/?l=linux-kernel&m=111314792424707. 
^ Linus Torvalds (2006-03-23). "Re: Errors GITtifying GCC and Binutils". git mailing list. http://marc.info/?l=git&m=114314642000462. 
^ Stenback, Johnny (2006-11-30), "bzr/hg/git performance", Jst's Blog, http://weblogs.mozillazine.org/jst/archives/2006/11/vcs_performance.html, retrieved on 2008-02-20 
^ "Git on MSYS". http://msysgit.googlecode.com. 
^ "msysgit". http://code.google.com/p/msysgit/downloads/list. 
^ Johannes Schindelin (2007-10-14). "Re: Switching from CVS to GIT". git mailing list. http://marc.info/?l=git&m=119240557820569.  A subjective comparison of Git under Windows and Linux on the same system.
^ Martin Langhoff (2007-10-15). "Re: Switching from CVS to GIT". git mailing list. http://marc.info/?l=git&m=119242653809645.  Experience running msysgit on Windows
^ Johannes Sixt (2007-10-15). "Re: Switching from CVS to GIT". git mailing list. http://marc.info/?l=git&m=119243039514160. 
^ Shawn Pearce (2006-10-24). "Re: VCS comparison table". git mailing list. http://marc.info/?l=git&m=116167109024046. 
^ Johannes Schindelin (2007-01-01). "Re: [PATCH] Speedup recursive by flushing index only once for all". git mailing list. http://marc.info/?l=git&m=116850345025162. 
^ Shawn O. Pearce (2007-09-18). "[PATCH 0/5] More builtin-fetch fixes". git mailing list. http://article.gmane.org/gmane.comp.version-control.git/58551. 
^ Kevin Smith (2005-2005-06-28). "Re: git 0.99.7b doesn't build on Cygwin". git mailing list. http://marc.info/?l=git&m=111997776904591. 
^ Johannes Schindelin (2006-03-02). "Re: windows problems summary". git mailing list. http://marc.info/?l=git&m=114131401509784. 
^ http://ffmpeg.org/download.html
^ ""Rails is moving from SVN to Git"". http://weblog.rubyonrails.org/2008/4/2/rails-is-moving-from-svn-to-git. Retrieved on 2008-04-03. 
^ "YUI 2 and YUI 3 Source Code Now on GitHub". http://yuiblog.com/blog/2009/01/14/github/. Retrieved on 2009-01-20. 



[edit] External links



Wikibooks has a book on the topic of
Source Control Management With Git




Git Homepage
Former Git Homepage
Git User's Manual, also distributed with Git in Documentation/user-manual.txt
Git - the project page at kernel.org
Kernel Hackers' Guide to git
The guts of git, article by LWN.net
Git and WhatIsGit at LinuxMIPS wiki
Why Git is better than X - A summary of the best Git features in comparison to other Software configuration management systems.
Projects that use Git from GitWiki
Google Tech Talk: Randal Schwartz on Git from www.youtube.com
Google Tech Talk: Linus Torvalds on git from www.youtube.com
An introduction to git-svn for Subversion/SVK users and deserters, article by Sam Vilain
Git for computer scientists explains how Git conceptually works
Git from the bottom up is similar to "Git for computer scientists", but more thorough. For some high-level commands, it explains how low-level commands can be used to achieve the same effect.
#git on freenode
git by example - simple walk through of common git commands
Git Magic - a comprehensive listing of Git tips & tricks, popularly referred to as "magic". Describes some of the lesser known features of Git.
Git Community Book : The git-scm.com community-built comprehensive online book
Easy Git - a wrapper script for Git, presenting a simplified user interface, designed to be more accessible to users of other revision control systems.
Git Bash Prompt - not just a branch name. Shows git-status info at bash prompt.
Git Quick Reference




Retrieved from "http://en.wikipedia.org/wiki/Git_(software)"
Categories: Free revision control software | Free software programmed in C | Free software programmed in Perl | Self-hosting software | Distributed revision control systemsHidden categories: All articles with unsourced statements | Articles with unsourced statements since February 2009 | Articles containing potentially dated statements from February 2009 | All articles containing potentially dated statements 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Česky
Dansk
Deutsch
Español
Français
한국어
Bahasa Indonesia
Italiano
Nederlands
日本語
Polski
Português
Русский
Slovenčina
Svenska
Українська
中文









 This page was last modified on 3 April 2009, at 14:08.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
