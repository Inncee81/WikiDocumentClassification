













File descriptor - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "File_descriptor";
		var wgTitle = "File descriptor";
		var wgAction = "view";
		var wgArticleId = "608754";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 272779394;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); File descriptor

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




The file descriptors for input, output, and error


In computer programming, a file descriptor is an abstract key for accessing a file. The term is generally used in POSIX operating systems. In Microsoft Windows terminology and in the context of the C standard I/O library, "file handle" is preferred, though the latter case is technically a different object (see below).
In POSIX, a file descriptor is an integer, specifically of the C type int. There are 3 standard POSIX file descriptors which presumably every process (save perhaps a daemon) should expect to have:


Integer value
Name


0
Standard Input (stdin)


1
Standard Output (stdout)


2
Standard Error (stderr)


Generally, a file descriptor is an index for an entry in a kernel-resident data structure containing the details of all open files. In POSIX this data structure is called a file descriptor table, and each process has its own file descriptor table. The user application passes the abstract key to the kernel through a system call, and the kernel will access the file on behalf of the application, based on the key. The application itself cannot read or write the file descriptor table directly.
In Unix-like systems, file descriptors can refer to files, directories, block or character devices (also called "special files"), sockets, FIFOs (also called named pipes), or unnamed pipes.
The FILE * file handle in the C standard I/O library routines is technically a pointer to a data structure managed by those library routines; one of those structures usually includes an actual low level file descriptor for the object in question on Unix-like systems. Since file handle refers to this additional layer, it is not interchangeable with file descriptor.
To further complicate terminology, Microsoft Windows also uses the term file handle to refer to the more low-level construct, akin to POSIX's file descriptors. Microsoft's C libraries also provide compatibility functions which "wrap" these native handles to support the POSIX-like convention of integer file descriptors as detailed above.




Contents


1 Operations on file descriptors

1.1 Creating file descriptors
1.2 Deriving file descriptors
1.3 Operations on a single file descriptor
1.4 Operations on multiple file descriptors
1.5 Operations on the file descriptor table
1.6 Operations that modify process state
1.7 File locking
1.8 Sockets
1.9 Miscellaneous


2 Upcoming operations
3 File descriptors as capabilities
4 See also
5 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Operations on file descriptors
A modern Unix typically provides the following operations on file descriptor

[edit] Creating file descriptors

open(), open64(), creat(), creat64()
socket()
socketpair()
pipe()


[edit] Deriving file descriptors

dirfd()
fileno()


[edit] Operations on a single file descriptor

read(), write()
readv(), writev()
pread(), pwrite()
recv(), send()
recvmsg(), sendmsg() (inc. allowing sending FDs)
sendfile()
lseek(), lseek64()
fstat(), fstat64()
fchmod()
fchown()
fdopen()
gzdopen()
ftruncate()
fsync()
fdatasync()
fstatvfs()


[edit] Operations on multiple file descriptors

select(), pselect()
poll(), epoll()


[edit] Operations on the file descriptor table

close()
dup(): duplicates an existing file descriptor guaranteeing to be the lowest number available file descriptor
dup2(): the new file descriptor will have the value passed as an argument
fcntl (F_DUPFD)
fcntl (F_GETFD and F_SETFD)


[edit] Operations that modify process state

fchdir(): sets the process's current working directory based on a directory file descriptor
mmap(): maps ranges of a file into the process's address space


[edit] File locking

flock()
fcntl (F_GETLK, F_SETLK and F_SETLKW)
lockf()


[edit] Sockets

connect()
bind()
listen()
accept(): creates a new file descriptor for an incoming connection
getsockname()
getpeername()
getsockopt(), setsockopt()
shutdown(): shuts down one or both halves of a full duplex connection


[edit] Miscellaneous

ioctl(): a large collection of miscellaneous operations on a single file descriptor, often associated with a device


[edit] Upcoming operations
A series of new operations on file descriptors has been added to Solaris and Linux, as well as numerous C libraries, to be standardized in a future version of POSIX.[1] The at suffix signifies that the function takes an additional first argument supplying a file descriptor from which relative paths are resolved, the forms lacking the at suffix thus becoming equivalent to passing a file descriptor corresponding to the current working directory.

openat()
faccessat()
fchmodat()
fchownat()
fstatat()
futimesat()
linkat()
mkdirat()
mknodat()
readlinkat()
renameat()
symlinkat()
unlinkat()
mkfifoat()
fdopendir()

The Native API of the Windows NT family of operating systems also allows callers to specify a root directory when they open a file or other object by name.[2]

[edit] File descriptors as capabilities
Unix file descriptors are capabilities. They can be passed between processes across Unix domain sockets using the sendmsg() system call.
A Unix process' file descriptor table is an example of a C-list.

[edit] See also
lsof - a utility that displays information about open file descriptors.

[edit] References

^ Extended API Set, Part 2. The Open Group. October 2006. ISBN 1931624674. http://www.opengroup.org/bookstore/catalog/c063.htm. 
^ ZwCreateFile in MSDN Library








v • d • e

Object-capability security





OS kernels

NLTSS · KeyKOS · EROS · CapROS · Coyotos






Programming languages

Joule · E · Cajita






Systems using capabilities

CapDesk · Plash






Specialised hardware

Cambridge CAP






Concepts

Principle of least authority (POLA) · Confused deputy problem · Ambient authority · File descriptor · C-list · Capability-based security · Capability-based addressing









Retrieved from "http://en.wikipedia.org/wiki/File_descriptor"
Categories: Unix 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Español
Français
Galego
日本語
Polski
Português
Русский
Svenska
中文









 This page was last modified on 23 February 2009, at 19:18.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
