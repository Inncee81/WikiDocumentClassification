













The Mythical Man-Month - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "The_Mythical_Man-Month";
		var wgTitle = "The Mythical Man-Month";
		var wgAction = "view";
		var wgArticleId = "31340";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 276208193;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); The Mythical Man-Month

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


The Mythical Man-Month  





Author
Fred Brooks


Subject(s)
Software project management


Publisher
Addison-Wesley


Publication date
1975, 1995


ISBN
0-201-00650-2 (1975 ed.), 0-201-83595-9 (1995 ed.)


Followed by
No Silver Bullet


The Mythical Man-Month: Essays on Software Engineering is a book on software engineering and project management by Fred Brooks, whose central theme is that "Adding manpower to a late software project makes it later." This idea is known as Brooks' law, and is presented along with the second-system effect and advocacy of prototyping. The work was first published in 1975 (0-201-00650-2), reprinted with corrections in 1982, and republished as an anniversary edition with four extra chapters in 1995 (ISBN 0-201-83595-9) with the essay "No Silver Bullet" and commentary by the author.
Brooks's observations are based on his experiences at IBM while managing the development of OS/360. He had mistakenly added more workers to a project falling behind schedule. He also made the mistake of asserting that one project — writing an Algol compiler — would require six months, regardless of the number of workers involved. (It required longer.) The tendency for managers to repeat such errors in project development led Brooks to quip that his book is called "The Bible of Software Engineering" because "everybody reads it but nobody does anything about it!"




Contents


1 Ideas presented

1.1 The Mythical Man-Month
1.2 The Second-system Effect
1.3 Progress Tracking
1.4 Conceptual Integrity
1.5 The Manual
1.6 The Pilot System
1.7 Formal Documents
1.8 Project Estimation
1.9 Communication
1.10 The Surgical Team
1.11 Code Freeze and System Versioning
1.12 Specialized Tools
1.13 Lowering Software Development Costs


2 References
3 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Ideas presented

[edit] The Mythical Man-Month
Assigning more programmers to a project running behind schedule will make it even later, due to the time required for the new programmers to learn about the project, as well as the increased communication overhead. When N people have to communicate among themselves (without a hierarchy), as N increases, their output M decreases and can even become negative (i.e. the total work remaining at the end of a day is greater than the total work that had been remaining at the beginning of that day, such as when many bugs are created).



Group Intercommunication Formula: n(n − 1) / 2
Example: 50 developers -> 50(50 − 1) / 2 = 1225 channels of communication




[edit] The Second-system Effect
The second system an engineer designs is the most dangerous system he will ever design since he will tend to incorporate all of the additions he originated but did not add (due to the inherent time constraints) to the first system. Thus, when embarking upon a second system, an engineer should be mindful that he is susceptible to over-engineering it.

[edit] Progress Tracking
Question: How does a large software project get to be one year late? Answer: One day at a time! Incremental slippages on many fronts eventually accumulate to produce a large overall delay. Continued attention to meeting small individual milestones is required at each level of management.

[edit] Conceptual Integrity
To make a user-friendly system, the system must have conceptual integrity, which can only be achieved by separating architecture from implementation. A single chief architect (or a small number of architects), acting on the user's behalf, decides what goes in the system and what stays out. A "super cool" idea by someone may not be included if it does not fit seamlessly with the overall system design. In fact, to ensure a user-friendly system, a system may deliberately provide fewer features than it is capable of. The point is that if a system is too complicated to use, then many of its features will go unused because no one has the time to learn how to use them.

[edit] The Manual
What the chief architect produces are written specifications for the system in the form of the manual. It should describe the external specifications of the system in detail, i.e., everything that the user sees. The manual should be altered as feedback comes in from the implementation teams and the users.

[edit] The Pilot System
When designing a new kind of system, a team will design a throw-away system (whether it intends to or not). This system acts as a pilot plant that reveals techniques that will subsequently cause a complete redesign of the system. This second smarter system should be the one delivered to the customer, since delivery of the pilot system would cause nothing but agony to the customer, and possibly ruin the system's reputation and maybe even the company's.

[edit] Formal Documents
Every project manager should create a small core set of formal documents which acts as the roadmap as to what the project objectives are, how they are to be achieved, who is going to achieve them, when they are going to be achieved, and how much they are going to cost. These documents may also reveal inconsistencies that are otherwise hard to see.

[edit] Project Estimation
When estimating project times, it should be remembered that programming products (which can be sold to paying customers) and programming systems are both three times as hard to write as in-house programs[1]. It should be kept in mind how much of the work-week will actually be spent on technical issues, as opposed to administrative or other non-technical tasks, such as meetings.

[edit] Communication
To avoid disaster, all the teams working on a project should remain in contact with each other in as many ways as possible (e-mail, phone, meetings, memos etc.) Instead of assuming something, the implementer should instead ask the architects to clarify their intent on a feature he is implementing, before proceeding with an assumption that might very well be completely incorrect.

[edit] The Surgical Team
Much as a surgical team during surgery is led by one surgeon performing the most critical work himself while directing his team to assist with or overtake less critical parts, it seems reasonable to have a "good" programmer develop critical system components while the rest of a team provides what is needed at the right time. Additionally, Brooks muses that "good" programmers are generally 5-10 times as productive as mediocre ones. See also Organization and Team Patterns.

[edit] Code Freeze and System Versioning
Software is invisible. Therefore, many things only become apparent once a certain amount of work has been done on a new system, allowing a user to experience it. This experience will yield insights, which will change a user's needs or the perception of the user's needs. The system should, therefore, be changed to fulfill the changed requirements of the user. This can only occur up to a certain point, otherwise the system may never be completed. At a certain date, no more changes would be allowed to the system and the code would be frozen. All requests for changes should be delayed until the next version of the system.

[edit] Specialized Tools
Instead of every programmer having his own special set of tools, each team should have a designated tool-maker who may create tools that are highly customized for the job that team is doing, e.g., a code generator tool that spits out code based on a specification. In addition, system-wide tools should be built by a common tools team, overseen by the project manager.

[edit] Lowering Software Development Costs
There are two techniques for lowering software development costs that Brooks writes about:



Implementers may be hired only after the architecture of the system has been completed (a step that may take several months, during which time prematurely-hired implementers may have nothing to do).
Another technique Brooks mentions is not to develop software at all, but to simply buy it "off the shelf" when possible.




[edit] References


^ Mythical Man Month Figure 1.1, Page 13



[edit] External links



Wikiquote has a collection of quotations related to: Fred Brooks



A review by Tal Cohen
Frederick P. Brooks, Jr. Homepage
Preface to 20th Anniversary Edition, as found on Safari.Informit.com
Organization and Team Patterns




Retrieved from "http://en.wikipedia.org/wiki/The_Mythical_Man-Month"
Categories: Software engineering disasters | 1975 books | Software engineering publications | Computer books | Software project management | Addison-Wesley books 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Dansk
Español
Français
日本語
Português
Русский
中文
Tiếng Việt









 This page was last modified on 10 March 2009, at 05:49 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
