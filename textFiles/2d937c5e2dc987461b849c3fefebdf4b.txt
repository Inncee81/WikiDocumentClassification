













Java OpenGL - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Java_OpenGL";
		var wgTitle = "Java OpenGL";
		var wgAction = "view";
		var wgArticleId = "1448660";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281648629;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Java OpenGL

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

JOGL (JSR-231)


A demo screenshot illustrating real-time refraction using JOGL on Mac OS X


Developed by
Sun Microsystems Game Technology Group


Latest release
1.1.1 / May 22, 2008


Operating system
Cross-platform


Type
3D computer graphics software (library/API)


License
BSD license


Website
jogl.dev.java.net


Java OpenGL (JOGL) is a wrapper library that allows OpenGL to be used in the Java programming language. It is currently being developed by the Game Technology Group at Sun Microsystems, and is the reference implementation for JSR-231 (Java Bindings for OpenGL).
JOGL allows access to most features available to C programming language programmers, with the notable exception of window-system related calls in GLUT (as Java contains its own windowing systems, AWT and Swing), and some extensions.




Contents


1 Design
2 Status and Standardization
3 Java2D / OpenGL interoperability
4 3D Tetrahedron Example
5 See also
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Design
The base OpenGL C API is accessed in JOGL via Java Native Interface (JNI) calls. As such, the underlying system must support OpenGL for JOGL to work.
JOGL differs from some other Java OpenGL wrapper libraries in that it merely exposes the procedural OpenGL API via methods on a few classes, rather than attempting to map OpenGL functionality onto the object-oriented programming paradigm. Indeed, the majority of the JOGL code is autogenerated from the OpenGL C header files via a conversion tool named Gluegen, which was programmed specifically to facilitate the creation of JOGL.
This design decision has both its advantages and disadvantages. The procedural and state machine nature of OpenGL is inconsistent with the typical method of programming under Java, which is bothersome to many programmers. However, the straightforward mapping of the OpenGL C API to Java methods makes conversion of existing C applications and example code much simpler. The thin layer of abstraction provided by JOGL makes runtime execution quite efficient, but accordingly is more difficult to code compared to higher-level abstraction libraries like Java3D. Because most of the code is autogenerated, changes to OpenGL can be rapidly added to JOGL.

[edit] Status and Standardization
As of 2007, JOGL provides full access to the OpenGL 2.0 specification.
The last 1.1.0 version is the reference implementation for JSR-231 (Java Bindings for OpenGL).
The 1.1.1 release, available as of May 22, 2008 will give limited access to GLU NURBS, providing rendering of curved lines and surfaces via the traditional GLU APIs. It is planned to do a maintenance review of JSR-231 1.1.1 to add NURBS-related entry points to the JSR-231 API.

[edit] Java2D / OpenGL interoperability
Since the Java SE 6 version of the Java programming language, Java2D (the API for drawing two dimensional graphics in Java) and JOGL have become interoperable, allowing it to :

Overlay Swing components (lightweight menus, tooltips, and other widgets) on top of OpenGL rendering.
Draw 3D OpenGL graphics on top of Java2D rendering (see here for a button with an OpenGL icon).
Use 3D graphics anywhere where ordinarily a Swing widget would be used. (Inside a JTable, JTree, ...)
Draw Java2D graphics on top of 3D OpenGL rendering.


[edit] 3D Tetrahedron Example




JOGL - 3D Tetrahedron Picture


This program displays a simple 3D rendering of a tetrahedron using JOGL.






JOGLTetrahedron class—This class uses the JOGL API to render a 3D tetraherdon.


//depends on jogl.jar and gluegen-rt.jar
import javax.media.opengl.GL;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.glu.GLU;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.media.opengl.GLCanvas;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import com.sun.opengl.util.Animator;
 
public class JOGLTetrahedron implements GLEventListener, KeyListener {
    float rotateT = 0.0f;
    static GLU glu = new GLU();
    static GLCanvas canvas = new GLCanvas();
    static Frame frame = new Frame("Jogl 3D Shape/Rotation");
    static Animator animator = new Animator(canvas); 
    public void display(GLAutoDrawable gLDrawable) {
	final GL gl = gLDrawable.getGL();
	gl.glClear(GL.GL_COLOR_BUFFER_BIT);
	gl.glClear(GL.GL_DEPTH_BUFFER_BIT);
	gl.glLoadIdentity();
	gl.glTranslatef(0.0f, 0.0f, -5.0f);
 
	gl.glRotatef(rotateT, 1.0f, 0.0f, 0.0f);
	gl.glRotatef(rotateT, 0.0f, 1.0f, 0.0f);
	gl.glRotatef(rotateT, 0.0f, 0.0f, 1.0f);
	gl.glRotatef(rotateT, 0.0f, 1.0f, 0.0f);
 
	gl.glBegin(GL.GL_TRIANGLES);
 
	// Front
	gl.glColor3f(0.0f, 1.0f, 1.0f); 
	gl.glVertex3f(0.0f, 1.0f, 0.0f);
	gl.glColor3f(0.0f, 0.0f, 1.0f); 
	gl.glVertex3f(-1.0f, -1.0f, 1.0f);
	gl.glColor3f(0.0f, 0.0f, 0.0f); 
	gl.glVertex3f(1.0f, -1.0f, 1.0f);
 
	// Right Side Facing Front
	gl.glColor3f(0.0f, 1.0f, 1.0f); 
	gl.glVertex3f(0.0f, 1.0f, 0.0f);
	gl.glColor3f(0.0f, 0.0f, 1.0f); 
	gl.glVertex3f(1.0f, -1.0f, 1.0f);
	gl.glColor3f(0.0f, 0.0f, 0.0f); 
	gl.glVertex3f(0.0f, -1.0f, -1.0f);
 
	// Left Side Facing Front
	gl.glColor3f(0.0f, 1.0f, 1.0f); 
	gl.glVertex3f(0.0f, 1.0f, 0.0f);
	gl.glColor3f(0.0f, 0.0f, 1.0f); 
	gl.glVertex3f(0.0f, -1.0f, -1.0f);
	gl.glColor3f(0.0f, 0.0f, 0.0f); 
	gl.glVertex3f(-1.0f, -1.0f, 1.0f);
 
	// Bottom
	gl.glColor3f(0.0f, 0.0f, 0.0f); 
	gl.glVertex3f(-1.0f, -1.0f, 1.0f);
	gl.glColor3f(0.1f, 0.1f, 0.1f); 
	gl.glVertex3f(1.0f, -1.0f, 1.0f);
	gl.glColor3f(0.2f, 0.2f, 0.2f); 
	gl.glVertex3f(0.0f, -1.0f, -1.0f);
 
	gl.glEnd();
 
	rotateT += 0.2f;
    }
 
    public void displayChanged(GLAutoDrawable gLDrawable, 
			       boolean modeChanged, boolean deviceChanged) {
    }
 
    public void init(GLAutoDrawable gLDrawable) {
	GL gl = gLDrawable.getGL();
	gl.glShadeModel(GL.GL_SMOOTH);
	gl.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	gl.glClearDepth(1.0f);
	gl.glEnable(GL.GL_DEPTH_TEST);
	gl.glDepthFunc(GL.GL_LEQUAL);
	gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT, 
		  GL.GL_NICEST);
	gLDrawable.addKeyListener(this);
    }
 
    public void reshape(GLAutoDrawable gLDrawable, int x, 
			int y, int width, int height) {
	GL gl = gLDrawable.getGL();
	if(height <= 0) {
	    height = 1;
	}
	float h = (float)width / (float)height;
	gl.glMatrixMode(GL.GL_PROJECTION);
	gl.glLoadIdentity();
	glu.gluPerspective(50.0f, h, 1.0, 1000.0);
	gl.glMatrixMode(GL.GL_MODELVIEW);
	gl.glLoadIdentity();
    }
 
    public void keyPressed(KeyEvent e) {
	if(e.getKeyCode() == KeyEvent.VK_ESCAPE) {
	    exit();
	}
    }
 
    public void keyReleased(KeyEvent e) {
    }
 
    public void keyTyped(KeyEvent e) {
    }
 
    public static void exit(){
	animator.stop();
	frame.dispose();
	System.exit(0);
    }
 
    public static void main(String[] args) {
	canvas.addGLEventListener(new JOGLTetrahedron());
	frame.add(canvas);
	frame.setSize(640, 480);
	frame.setUndecorated(true);
	frame.setExtendedState(Frame.MAXIMIZED_BOTH);
	frame.addWindowListener(new WindowAdapter() {
		public void windowClosing(WindowEvent e) {
		    exit();
		}
	    });
	frame.setVisible(true);
	animator.start();
	canvas.requestFocus();
    }
}


[edit] See also

Xith3D : a scene graph based graphics API that uses JOGL and LWJGL
LWJGL : another open-source OpenGL wrapper library
Java Bindings for OpenGL
Poxnora, an online multiplayer game that uses JOGL
Wurm Online, an MMORPG simulator that uses JOGL
RuneScape, another MMORPG using JOGL
Elflight Engine : a high performance 3D game engine optimised for the web
JMonkey Engine : a high performance scene graph based graphics API that uses LWJGL and JOGL
Jake2, a Java port of Quake II using JOGL or LWJGL for its low-level graphic API


[edit] External links

JOGL at Java.net
JSR-231 "Java Bindings for OpenGL" website
tool kiet - The OpenGL Programming Guide examples using JOGL.
NeHe's tutorials and sample code
JOGL port of the Nehe tutorials
JSR 231 Specification (draft)
Setting up JOGL in Eclipse
NetBeans OpenGL Pack - OpenGL Development Environment plugin for the NetBeans IDE
Viewer3D - An applet to display interactive 3D content with JOGL.




Retrieved from "http://en.wikipedia.org/wiki/Java_OpenGL"
Categories: Java platform | 3D computer graphics | Java APIs | Java libraries 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
עברית
Nederlands
Русский









 This page was last modified on 4 April 2009, at 06:01 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
