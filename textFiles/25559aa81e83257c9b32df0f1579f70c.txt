













Monte Carlo method - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Monte_Carlo_method";
		var wgTitle = "Monte Carlo method";
		var wgAction = "view";
		var wgArticleId = "56098";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282305925;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Monte Carlo method

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


Computational physics





Numerical analysis · Simulation
Data analysis · Visualization


Fluid dynamics


Finite element · Riemann solver
Smoothed particle hydrodynamics





Monte Carlo methods


Integration · Gibbs sampling · Metropolis algorithm




Particle


N-body · Particle-in-cell
Molecular dynamics





Scientists


von Neumann · Godunov






This box: view • talk • edit



Monte Carlo methods are a class of computational algorithms that rely on repeated random sampling to compute their results. Monte Carlo methods are often used when simulating physical and mathematical systems. Because of their reliance on repeated computation and random or pseudo-random numbers, Monte Carlo methods are most suited to calculation by a computer. Monte Carlo methods tend to be used when it is infeasible or impossible to compute an exact result with a deterministic algorithm.[1]
Monte Carlo simulation methods are especially useful in studying systems with a large number of coupled degrees of freedom, such as fluids, disordered materials, strongly coupled solids, and cellular structures (see cellular Potts model). More broadly, Monte Carlo methods are useful for modeling phenomena with significant uncertainty in inputs, such as the calculation of risk in business. These methods are also widely used in mathematics: a classic use is for the evaluation of definite integrals, particularly multidimensional integrals with complicated boundary conditions.
The term Monte Carlo method was coined in the 1940s by physicists working on nuclear weapon projects in the Los Alamos National Laboratory.[2]




Contents


1 Overview
2 History
3 Applications

3.1 Physical sciences
3.2 Design and visuals
3.3 Finance and business
3.4 Telecommunications

3.4.1 Monte Carlo Simulation versus “What If” Scenarios




4 Use in mathematics

4.1 Integration

4.1.1 Integration methods


4.2 Optimization

4.2.1 Optimization methods


4.3 Inverse problems
4.4 Computational mathematics


5 Monte Carlo and random numbers
6 See also

6.1 General
6.2 Application areas
6.3 Other methods employing Monte Carlo


7 Notes
8 References
9 External links

9.1 Software







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview




The Monte Carlo method can be illustrated as a game of battleship. First a player makes some random shots. Next the player applies algorithms (i.e. a battleship is four dots in the vertical or horizontal direction). Finally based on the outcome of the random sampling and the algorithm the player can determine the likely locations of the other player's ships.


There is no single Monte Carlo method; instead, the term describes a large and widely-used class of approaches. However, these approaches tend to follow a particular pattern:

Define a domain of possible inputs.
Generate inputs randomly from the domain.
Perform a deterministic computation using the inputs.
Aggregate the results of the individual computations into the final result.

For example, the value of π can be approximated using a Monte Carlo method:

Draw a square on the ground, then inscribe a circle within it.
Uniformly scatter some objects of uniform size throughout the square. For example, grains of rice or sand.
Count the number of objects in the circle, multiply by four, and divide by the total number of objects in the square.
The proportion of objects within the circle vs objects within the square will approximate π/4, which is the ratio of the circle's area to the square's area, thus giving an approximation to π.

Notice how the π approximation follows the general pattern of Monte Carlo algorithms. First, we define a domain of inputs: in this case, it's the square which circumscribes our circle. Next, we generate inputs randomly (scatter individual grains within the square), then perform a computation on each input (test whether it falls within the circle). At the end, we aggregate the results into our final result, the approximation of π. Note, also, two other common properties of Monte Carlo methods: the computation's reliance on good random numbers, and its slow convergence to a better approximation as more data points are sampled. If grains are purposefully dropped into only, for example, the center of the circle, they will not be uniformly distributed, and so our approximation will be poor. An approximation will also be poor if only a few grains are randomly dropped into the whole square. Thus, the approximation of π will become more accurate both as the grains are dropped more uniformly and as more are dropped.

[edit] History
The name "Monte Carlo" was popularized by physics researchers Stanislaw Ulam, Enrico Fermi, John von Neumann, and Nicholas Metropolis, among others; the name is a reference to the Monte Carlo Casino in Monaco where Ulam's uncle would borrow money to gamble.[3] The use of randomness and the repetitive nature of the process are analogous to the activities conducted at a casino.
Random methods of computation and experimentation (generally considered forms of stochastic simulation) can be arguably traced back to the earliest pioneers of probability theory (see, e.g., Buffon's needle, and the work on small samples by William Gosset), but are more specifically traced to the pre-electronic computing era. The general difference usually described about a Monte Carlo form of simulation is that it systematically "inverts" the typical mode of simulation, treating deterministic problems by first finding a probabilistic analog (see Simulated annealing). Previous methods of simulation and statistical sampling generally did the opposite: using simulation to test a previously understood deterministic problem. Though examples of an "inverted" approach do exist historically, they were not considered a general method until the popularity of the Monte Carlo method spread.
Perhaps the most famous early use was by Enrico Fermi in 1930, when he used a random method to calculate the properties of the newly-discovered neutron. Monte Carlo methods were central to the simulations required for the Manhattan Project, though were severely limited by the computational tools at the time. Therefore, it was only after electronic computers were first built (from 1945 on) that Monte Carlo methods began to be studied in depth. In the 1950s they were used at Los Alamos for early work relating to the development of the hydrogen bomb, and became popularized in the fields of physics, physical chemistry, and operations research. The Rand Corporation and the U.S. Air Force were two of the major organizations responsible for funding and disseminating information on Monte Carlo methods during this time, and they began to find a wide application in many different fields.
Uses of Monte Carlo methods require large amounts of random numbers, and it was their use that spurred the development of pseudorandom number generators, which were far quicker to use than the tables of random numbers which had been previously used for statistical sampling.

[edit] Applications
As mentioned, Monte Carlo simulation methods are especially useful for modeling phenomena with significant uncertainty in inputs and in studying systems with a large number of coupled degrees of freedom. Specific areas of application include:

[edit] Physical sciences
Monte Carlo methods are very important in computational physics, physical chemistry, and related applied fields, and have diverse applications from complicated quantum chromodynamics calculations to designing heat shields and aerodynamic forms. The Monte Carlo method is widely used in statistical physics, in particular, Monte Carlo molecular modeling as an alternative for computational molecular dynamics; see Monte Carlo method in statistical physics. In experimental particle physics, these methods are used for designing detectors, understanding their behavior and comparing experimental data to theory.

[edit] Design and visuals
Monte Carlo methods have also proven efficient in solving coupled integral differential equations of radiation fields and energy transport, and thus these methods have been used in global illumination computations which produce photorealistic images of virtual 3D models, with applications in video games, architecture, design, computer generated films, special effects in cinema.

[edit] Finance and business
Monte Carlo methods in finance are often used to calculate the value of companies, to evaluate investments in projects at corporate level or to evaluate financial derivatives. The Monte Carlo method is intended for financial analysts who want to construct stochastic or probabilistic financial models as opposed to the traditional static and deterministic models. For its use in the insurance industry, see stochastic modelling.

[edit] Telecommunications
When planning a wireless network, design must be proved to work for a wide variety of scenarios that depend mainly on the number of users, their locations and the services they want to use. Monte Carlo methods are typically used to generate these users and their states. The network performance is then evaluated and, if results are not satisfactory, the network design goes through an optimization process.

[edit] Monte Carlo Simulation versus “What If” Scenarios
The opposite of Monte Carlo simulation might be considered deterministic modeling using single-point estimates. Each uncertain variable within a model is assigned a “best guess” estimate. Various combinations of each input variable are manually chosen (such as best case, worst case, and most likely case), and the results recorded for each so-called “what if” scenario. [4]
By contrast, Monte Carlo simulation considers random sampling of probability distribution functions as model inputs to produce hundreds or thousands of possible outcomes instead of a few discrete scenarios. The results provide probabilities of different outcomes occurring. [5] For example, a comparison of a spreadsheet cost construction model run using traditional “what if” scenarios, and then run again with Monte Carlo simulation and Triangular probability distributions shows that the Monte Carlo analysis has a narrower range than the “what if” analysis. This is because the “what if” analysis gives equal weight to all scenarios.[6]
For an application, see Quantifying uncertainty under Corporate finance.

[edit] Use in mathematics
In general, Monte Carlo methods are used in mathematics to solve various problems by generating suitable random numbers and observing that fraction of the numbers obeying some property or properties. The method is useful for obtaining numerical solutions to problems which are too complicated to solve analytically. The most common application of the Monte Carlo method is Monte Carlo integration.

[edit] Integration
Main article: Monte Carlo integration
Deterministic methods of numerical integration operate by taking a number of evenly spaced samples from a function. In general, this works very well for functions of one variable. However, for functions of vectors, deterministic quadrature methods can be very inefficient. To numerically integrate a function of a two-dimensional vector, equally spaced grid points over a two-dimensional surface are required. For instance a 10x10 grid requires 100 points. If the vector has 100 dimensions, the same spacing on the grid would require 10100 points—far too many to be computed. 100 dimensions is by no means unreasonable, since in many physical problems, a "dimension" is equivalent to a degree of freedom. (See Curse of dimensionality.)
Monte Carlo methods provide a way out of this exponential time-increase. As long as the function in question is reasonably well-behaved, it can be estimated by randomly selecting points in 100-dimensional space, and taking some kind of average of the function values at these points. By the law of large numbers, this method will display  convergence—i.e. quadrupling the number of sampled points will halve the error, regardless of the number of dimensions.
A refinement of this method is to somehow make the points random, but more likely to come from regions of high contribution to the integral than from regions of low contribution. In other words, the points should be drawn from a distribution similar in form to the integrand. Understandably, doing this precisely is just as difficult as solving the integral in the first place, but there are approximate methods available: from simply making up an integrable function thought to be similar, to one of the adaptive routines discussed in the topics listed below.
A similar approach involves using low-discrepancy sequences instead—the quasi-Monte Carlo method. Quasi-Monte Carlo methods can often be more efficient at numerical integration because the sequence "fills" the area better in a sense and samples more of the most important points that can make the simulation converge to the desired solution more quickly.

[edit] Integration methods

Direct sampling methods

Importance sampling
Stratified sampling
Recursive stratified sampling
VEGAS algorithm


Random walk Monte Carlo including Markov chains

Metropolis-Hastings algorithm


Gibbs sampling


[edit] Optimization
Another powerful and very popular application for random numbers in numerical simulation is in numerical optimization. These problems use functions of some often large-dimensional vector that are to be minimized (or maximized). Many problems can be phrased in this way: for example a computer chess program could be seen as trying to find the optimal set of, say, 10 moves which produces the best evaluation function at the end. The traveling salesman problem is another optimization problem. There are also applications to engineering design, such as multidisciplinary design optimization.
Most Monte Carlo optimization methods are based on random walks. Essentially, the program will move around a marker in multi-dimensional space, tending to move in directions which lead to a lower function, but sometimes moving against the gradient.

[edit] Optimization methods

Evolution strategy
Genetic algorithms
Parallel tempering
Simulated annealing
Stochastic optimization
Stochastic tunneling


[edit] Inverse problems
Probabilistic formulation of inverse problems leads to the definition of a probability distribution in the model space. This probability distribution combines a priori information with new information obtained by measuring some observable parameters (data). As, in the general case, the theory linking data with model parameters is nonlinear, the a posteriori probability in the model space may not be easy to describe (it may be multimodal, some moments may not be defined, etc.).
When analyzing an inverse problem, obtaining a maximum likelihood model is usually not sufficient, as we normally also wish to have information on the resolution power of the data. In the general case we may have a large number of model parameters, and an inspection of the marginal probability densities of interest may be impractical, or even useless. But it is possible to pseudorandomly generate a large collection of models according to the posterior probability distribution and to analyze and display the models in such a way that information on the relative likelihoods of model properties is conveyed to the spectator. This can be accomplished by means of an efficient Monte Carlo method, even in cases where no explicit formula for the a priori distribution is available.
The best-known importance sampling method, the Metropolis algorithm, can be generalized, and this gives a method that allows analysis of (possibly highly nonlinear) inverse problems with complex a priori information and data with an arbitrary noise distribution. For details, see Mosegaard and Tarantola (1995) [1] , or Tarantola (2005) [2].

[edit] Computational mathematics
Monte Carlo methods are useful in many areas of computational mathematics, where a lucky choice can find the correct result. A classic example is Rabin's algorithm for primality testing: for any n which is not prime, a random x has at least a 75% chance of proving that n is not prime. Hence, if n is not prime, but x says that it might be, we have observed at most a 1-in-4 event. If 10 different random x say that "n is probably prime" when it is not, we have observed a one-in-a-million event. In general a Monte Carlo algorithm of this kind produces one correct answer with a guarantee n is composite, and x proves it so, but another one without, but with a guarantee of not getting this answer when it is wrong too often — in this case at most 25% of the time. See also Las Vegas algorithm for a related, but different, idea.

[edit] Monte Carlo and random numbers
Interestingly, Monte Carlo simulation methods do not always require truly random numbers to be useful — while for some applications, such as primality testing, unpredictability is vital (see Davenport (1995)).[7] Many of the most useful techniques use deterministic, pseudo-random sequences, making it easy to test and re-run simulations. The only quality usually necessary to make good simulations is for the pseudo-random sequence to appear "random enough" in a certain sense.
What this means depends on the application, but typically they should pass a series of statistical tests. Testing that the numbers are uniformly distributed or follow another desired distribution when a large enough number of elements of the sequence are considered is one of the simplest, and most common ones.

[edit] See also

[edit] General




Statistics portal




Auxiliary field Monte Carlo
Bootstrapping (statistics)
Demon algorithm
Evolutionary Computation
Las Vegas algorithm
Markov chain
Molecular dynamics
Monte Carlo option model
Monte Carlo integration
Quasi-Monte Carlo method
Random number generator
Randomness
Resampling (statistics)


[edit] Application areas

Graphics, particularly for ray tracing; a version of the Metropolis-Hastings algorithm is also used for ray tracing where it is known as Metropolis light transport
Modeling light transport in biological tissue
Monte Carlo methods in finance
Reliability engineering
In simulated annealing for protein structure prediction
In semiconductor device research, to model the transport of current carriers
Environmental science, dealing with contaminant behavior
Search And Rescue and Counter-Pollution. Models used to predict the drift of a life raft or movement of an oil slick at sea.
In probabilistic design for simulating and understanding the effects of variability
In physical chemistry, particularly for simulations involving atomic clusters
In polymer physics

Bond fluctuation model


In computer science

Las Vegas algorithm
LURCH
Computer go
General Game Playing


Modeling the movement of impurity atoms (or ions) in plasmas in existing and tokamaks (e.g.: DIVIMP).
Nuclear and particle physics codes using the Monte Carlo method:

GEANT — CERN's simulation of high energy particles interacting with a detector.
CompHEP, PYTHIA — Monte-Carlo generators of particle collisions
MCNP(X) - LANL's radiation transport codes
MCU: universal computer code for simulation of particle transport (neutrons, photons, electrons) in three-dimensional systems by means of the Monte Carlo method
EGS — Stanford's simulation code for coupled transport of electrons and photons
PEREGRINE: LLNL's Monte Carlo tool for radiation therapy dose calculations
BEAMnrc — Monte Carlo code system for modeling radiotherapy sources (LINAC's)
PENELOPE — Monte Carlo for coupled transport of photons and electrons, with applications in radiotherapy
MONK — Serco Assurance's code for the calculation of k-effective of nuclear systems
Modelling of foam and cellular structures
Modeling of tissue morphogenesis


Computation of holograms

Phylogenetic analysis, i.e. Bayesian inference, Markov chain Monte Carlo




[edit] Other methods employing Monte Carlo

Assorted random models, e.g. self-organised criticality
Direct simulation Monte Carlo
Dynamic Monte Carlo method
Kinetic Monte Carlo
Quantum Monte Carlo
Quasi-Monte Carlo method using low-discrepancy sequences and self avoiding walks
Semiconductor charge transport and the like
Electron microscopy beam-sample interactions
Stochastic optimization
Cellular Potts model
Markov chain Monte Carlo
Cross-entropy method
Applied information economics
Monte Carlo localization


[edit] Notes


^ Douglas Hubbard "How to Measure Anything: Finding the Value of Intangibles in Business" pg. 46, John Wiley & Sons, 2007
^ Nicholas Metropolis (1987), "The beginning of the Monte Carlo method", Los Alamos Science (1987 Special Issue dedicated to Stanislaw Ulam): 125–130, http://library.lanl.gov/la-pubs/00326866.pdf 
^ Douglas Hubbard "How to Measure Anything: Finding the Value of Intangibles in Business" pg. 46, John Wiley & Sons, 2007
^ David Vose: “Risk Analysis, A Quantitative Guide,” Second Edition, p. 13, John Wiley & Sons, 2000.
^ Ibid, p. 16
^ Ibid, p. 17, showing graph
^ Davenport, J. H.. "Primality testing revisited". doi:http://doi.acm.org/10.1145/143242.143290. http://doi.acm.org/10.1145/143242.143290. Retrieved on 2007-08-19. 



[edit] References

Metropolis, N.; Ulam, S. (1949). "The Monte Carlo Method". Journal of the American Statistical Association 44 (247): 335–341. doi:10.2307/2280232. 
Metropolis, Nicholas; Rosenbluth, Arianna W.; Rosenbluth, Marshall N.; Teller, Augusta H.; Teller, Edward (1953). "Equation of State Calculations by Fast Computing Machines". Journal of Chemical Physics 21 (6): 1087. doi:10.1063/1.1699114. 
Hammersley, J. M.; Handscomb, D. C. (1975). Monte Carlo Methods. London: Methuen. ISBN 0416523404. 
Kahneman, D.; Tversky, A. (1982). Judgement under Uncertainty: Heuristics and Biases. Cambridge University Press. 
Gould, Harvey; Tobochnik, Jan (1988). An Introduction to Computer Simulation Methods, Part 2, Applications to Physical Systems. Reading: Addison-Wesley. ISBN 020116504X. 
Binder, Kurt (1995). The Monte Carlo Method in Condensed Matter Physics. New York: Springer. ISBN 0387543694. 
Berg, Bernd A. (2004). Markov Chain Monte Carlo Simulations and Their Statistical Analysis (With Web-Based Fortran Code). Hackensack, NJ: World Scientific. ISBN 9812389350. 
Caflisch, R. E. (1998). Monte Carlo and quasi-Monte Carlo methods. Acta Numerica. 7. Cambridge University Press. pp. 1–49. 
Doucet, Arnaud; Freitas, Nando de; Gordon, Neil (2001). Sequential Monte Carlo methods in practice. New York: Springer. ISBN 0387951466. 
Fishman, G. S. (1995). Monte Carlo: Concepts, Algorithms, and Applications. New York: Springer. ISBN 038794527X. 
MacKeown, P. Kevin (1997). Stochastic Simulation in Physics. New York: Springer. ISBN 9813083263. 
Robert, C. P.; Casella, G. (2004). Monte Carlo Statistical Methods (2nd ed.). New York: Springer. ISBN 0387212396. 
Rubinstein, R. Y.; Kroese, D. P. (2007). Simulation and the Monte Carlo Method (2nd ed.). New York: John Wiley & Sons. ISBN 9780470177938. 
Mosegaard, Klaus; Tarantola, Albert (1995). "Monte Carlo sampling of solutions to inverse problems". J. Geophys. Res. 100 (B7): 12431–12447. doi:10.1029/94JB03097. 
Tarantola, Albert (2005). Inverse Problem Theory. Philadelphia: Society for Industrial and Applied Mathematics. ISBN 0898715725. http://www.ipgp.jussieu.fr/~tarantola/Files/Professional/SIAM/index.html. 


[edit] External links

Overview and reference list, Mathworld
Introduction to Monte Carlo Methods, Computational Science Education Project
Overview of formulas used in Monte Carlo simulation, the Quant Equation Archive, at sitmo.com
The Basics of Monte Carlo Simulations, University of Nebraska-Lincoln
Introduction to Monte Carlo simulation (for Excel), Wayne L. Winston
Monte Carlo Methods - Overview and Concept, brighton-webs.co.uk
Molecular Monte Carlo Intro, Cooper Union
Monte Carlo techniques applied in physics
MonteCarlo Simulation in Finance, global-derivatives.com
Approximation of π with the Monte Carlo Method
Risk Analysis in Investment Appraisal, The Application of Monte Carlo Methodology in Project Appraisal, Savvakis C. Savvides
Probabilistic Assessment of Structures using the Monte Carlo method, Wikiuniversity paper for students of Structural Engineering
A very intuitive and comprehensive introduction to Quasi-Monte Carlo methods
Pricing using Monte Carlo simulation, a practical example, Prof. Giancarlo Vercellino


[edit] Software

The BUGS project (including WinBUGS and OpenBUGS)
Monte Carlo Simulation Tool for Excel by Palisade
Monte Carlo Simulation Tool for Excel by Lumenaut
Monte Carlo Simulation, Resampling, Bootstrap tool
YASAI: Yet Another Simulation Add-In - Free Monte Carlo Simulation Add-In for Excel created by Rutgers University
Easy Monte Carlo Tool - Free Monte Carlo Tool created for UK Every Child Matters programme








v • d • e

Statistics





Design of experiments

Population • Sampling • Stratified sampling • Replication • Blocking






Sample size estimation

Null hypothesis • Alternative hypothesis • Type I and Type II errors • Statistical power • Effect size • Standard error






Descriptive statistics





Continuous data






Location


Mean (Arithmetic, Geometric, Harmonic) • Median • Mode







Dispersion


Range • Standard deviation • Coefficient of variation • Percentile







Moments


Variance • Semivariance • Skewness • Kurtosis










Categorical data


Frequency • Contingency table









Inferential statistics

Bayesian inference • Frequentist inference • Hypothesis testing • Significance • P-value • Interval estimation • Confidence interval • Meta-analysis






General estimation

Bayesian estimator • Maximum likelihood • Method of moments • Minimum distance • Maximum spacing






Specific tests

Z-test (normal) • Student's t-test • Chi-square test • F-test • Sensitivity and specificity






Survival analysis

Survival function • Kaplan-Meier • Logrank test • Failure rate • Proportional hazards models






Correlation

Pearson product-moment correlation coefficient • Rank correlation (Spearman's rho, Kendall's tau) • Confounding variable






Linear models

General linear model • Generalized linear model • Analysis of variance • Analysis of covariance






Regression analysis

Linear regression • Nonlinear regression • Nonparametric regression • Semiparametric regression • Logistic regression






Statistical graphics

Bar chart • Biplot • Box plot • Control chart • Forest plot • Histogram • Q-Q plot • Run chart • Scatter plot • Stemplot






History

History of statistics • Founders of statistics • Timeline of probability and statistics






Publications

Journals in statistics • Important publications






Category • Portal • Topic outline • List of topics








Retrieved from "http://en.wikipedia.org/wiki/Monte_Carlo_method"
Categories: Monte Carlo methods | Randomness | Numerical analysis | Statistical mechanics | Computational physics | Sampling techniques | Statistical approximations | Probabilistic complexity theoryHidden categories: Statistics articles linked to the portal | Statistics articles with navigational template 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Česky
Dansk
Deutsch
Español
فارسی
Français
한국어
Hrvatski
Bahasa Indonesia
Italiano
עברית
Magyar
Nederlands
日本語
‪Norsk (bokmål)‬
Occitan
Polski
Português
Русский
Simple English
Slovenčina
Basa Sunda
Suomi
Svenska
Tiếng Việt
Türkçe
Українська
اردو
中文









 This page was last modified on 7 April 2009, at 09:32.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
