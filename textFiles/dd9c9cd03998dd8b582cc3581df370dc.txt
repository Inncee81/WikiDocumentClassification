













Symbolic link - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Symbolic_link";
		var wgTitle = "Symbolic link";
		var wgAction = "view";
		var wgArticleId = "180473";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 275542162;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Symbolic link

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Not to be confused with SYmbolic LinK (SYLK), a Microsoft Office file format.
In computing, a symbolic link (also symlink or soft link) is a special type of file that contains a reference to another file or directory in the form of an absolute or relative path and that affects pathname resolution.[1] Symbolic links first appeared in the 4.2BSD release of Berkeley Unix (1983). Today they are supported by the POSIX operating-system standard, most Unix-like operating systems, Windows Vista, and to some degree in Windows 2000 and Windows XP.
Symbolic links operate transparently for most operations: programs which read or write to files named by a symbolic link will behave as if operating directly on the target file. However, programs that need to handle symbolic links specially (e.g., backup utilities) may identify and manipulate them directly.
A symbolic link merely contains a text string that is interpreted and followed by the operating system as a path to another file or directory. It is a file on its own and can exist independently of its target. If a symbolic link is deleted, its target remains unaffected. If the target is moved, renamed or deleted, any symbolic link that used to point to it continues to exist but now points to a non-existing file. Symbolic links pointing to non-existing files are sometimes called orphaned or dangling.
Symbolic links exist in contrast to hard links. Hard links may not normally point to directories and they can not link paths on different volumes. Symbolic links may point to any file or directory irrespective of the volumes on which the source and destination reside.




Contents


1 Unix and Linux

1.1 Storage of symbolic links


2 Mac OS

2.1 Aliases


3 Windows

3.1 NTFS Junction points
3.2 Windows Vista symbolic link
3.3 Shortcuts
3.4 Cygwin symlinks


4 Others

4.1 Variant symlinks


5 See also
6 References
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Unix and Linux
In POSIX-compliant operating systems, symbolic links are created with the symlink() system call. When using the ln shell command, this system call is used, instead of link(), when the -s command flag is specified.
To create a symbolic link in Unix-like systems using the command-line interface (shell), enter the following command:

ln -s target link_name

target is the relative or absolute path which the symlink will point to. Usually the target will exist, although one can create a symlink to a target which does not exist. link_name is the desired name of the symbolic link. After creating the symbolic link, it can be treated as an alias for the target. Any file system management commands (e.g., cp, rm) may be used on the symbolic link. Commands which read or write file contents will access the contents of the target file.

$ mkdir -p /tmp/one/two
$ echo "test_a" >/tmp/one/two/a
$ echo "test_b" >/tmp/one/two/b
$ cd /tmp/one/two
$ ls
a  b
$ cd /tmp
$ ln -s /tmp/one/two three
$ cd three
$ ls
a  b
$ cat a
test_a
$ cat /tmp/one/two/a
test_a
$ echo "test_c" >/tmp/one/two/a
$ cat /tmp/one/two/a
test_c
$ cat /tmp/three/a
test_c

Some Unix, as well as Linux (notably GoboLinux), distributions use symlinks extensively in an effort to reorder the file system hierarchy. This offers the opportunity to create a more intuitive directory tree and to reorganize without having to redesign the core set of system functions and utilities themselves.

[edit] Storage of symbolic links
Early implementations of symbolic links stored the symbolic link information as data in regular files. The file contained the textual reference to the link’s target, and an indicator denoting it as a symbolic link.
This method was slow and an inefficient use of disk-space on small systems. An improvement, called fast symlinks, allowed storage of the target path within the data structures used for storing file information on disk (inodes). This space normally stores a list of disk block addresses allocated to a file. Thus, symlinks with short target paths are accessed quickly. Systems with fast symlinks often fall back to using the original method if the target path exceeds the available inode space. The original style is retroactively termed a slow symlink. It is also used for disk compatibility with other or older versions of operating systems.
Although storing the link value inside the inode saves a disk block and a disk read, the operating system still needs to parse the path name in the link, which always requires reading additional inodes and generally requires reading other, and potentially many, directories, processing both the list of files and the inodes of each of them until it finds a match with the link's path components. Only when a link points to a file in the same directory do fast symlinks provide significant gains in performance.
The vast majority of POSIX-compliant implementations use symlink inodes. However, the POSIX standard does not require the entire set of file status information common to regular files to be implemented for symlinks. This allows implementations to use other solutions, such as storing symlink data in directory entries.
The file system permissions of a symbolic link usually have relevance only to rename or removal operations of the link itself, not to the access modes of the target file which are controlled by the target file's own permissions.
The reported size of a symlink is the number of characters in the path it points to.

[edit] Mac OS

[edit] Aliases
Main article: Alias (Mac OS)
In addition to the usual Unix symbolic links, Mac OS can employ aliases, which have the added feature of working even if the target file moves to another location on the same volume. A similar functionality also exists in some Linux distributions.

[edit] Windows

[edit] NTFS Junction points
Main article: NTFS junction point
The Windows 2000 version of NTFS introduced reparse points, which enabled, among other things, the use of Volume Mount Points and junction points. Junction points are for directories only, and moreover, local directories only; junction points to remote shares are unsupported.[2] The Windows 2000 and XP Resource Kits include a program called linkd to create junction points; a more powerful one named Junction was distributed by Sysinternals' Mark Russinovich.

[edit] Windows Vista symbolic link
Main article: NTFS symbolic link
Windows Vista supports symbolic links for both files and directories with the command line utility mklink. Unlike junction points, a symbolic link can also point to a file or remote SMB network path. Additionally, the NTFS symbolic link implementation provides full support for cross-filesystem links. However, the functionality enabling cross-host symbolic links requires that the remote system also support them, which effectively limits their support to Windows Vista and later Windows operating systems.
Symbolic links are designed to aid in migration and application compatibility with POSIX operating systems -- Microsoft aimed for Vista's symbolic links to "function just like UNIX links"[3]. However, the implementation varies from Unix symlinks in several ways; for example, Vista users must manually indicate when creating a symbolic link whether it is a file or directory,[4] and there is a limit of 31 symlinks in a given path.[5]. Additionally, only users with the new Create Symbolic Link privilege, which only administrators have by default, can create symbolic links;[6] if this is not the desired behavior, it must be changed in the Local Security Policy management console.

[edit] Shortcuts
Main article: Computer shortcut
Symbolic links resemble shortcuts, which are supported by the graphical file browsers of some operating systems, but differ in a number of important ways. One difference is what type of software is able to follow them:

Symbolic links are automatically resolved by the file system. Any software programs, upon accessing a symbolic link, will see the target instead, whether the program is aware of symbolic links or not.
Shortcuts are treated like ordinary files by the files system and by software programs that are not aware of them. Only software programs that understand shortcuts (such as the Windows shell and file browsers) treat them as references to other files.

Another difference are the capabilities of the mechanism:

Microsoft Windows shortcuts can only refer to a destination by an absolute path (starting from the root directory), whereas POSIX symbolic links can refer to destinations via either an absolute or a relative path. The latter is useful if both the location and destination of the symbolic link share a common path prefix, but that prefix is not yet known when the symbolic link is created (e.g., in an archive file that can be unpacked anywhere).
Microsoft Windows application shortcuts contain additional metadata that can be associated with the destination, whereas POSIX symbolic links are just strings that will be interpreted as absolute or relative pathnames.


[edit] Cygwin symlinks
Cygwin simulates POSIX-compliant symbolic links in the Microsoft Windows file system. It uses identical programming and user utility interfaces as Unix (see above), but creates Windows shortcuts (.lnk files) with additional information used by Cygwin at the time of symlink resolution. Cygwin symlinks are compliant with both Windows and POSIX standards.
Some differences exist, however. Cygwin has no way to specify shortcut-related information - such as working directory or icon - as there is no place for such parameters in ln -s command. To create standard Microsoft .lnk files Cygwin provides the mkshortcut utility[7]
The Cygwin User's Guide[8] has more information on this topic.

[edit] Others
Symbolic links also resemble shadows in the graphical Workplace Shell of the OS/2 operating system.

[edit] Variant symlinks
A variant symlink is a symbolic link that has a variable name embedded in it. This can allow some clever tricks to be performed that are not possible with a standard symlink. Variables embedded in the symlinks can include user and or environment specific information among other things.
Operating systems that make use of variant symlinks include NetBSD, DragonFly BSD and Domain/OS.

[edit] See also

Hard link
ln (Unix), the ln command, used with the -s option to create new symbolic links on Unix-like systems
Symlink race, a security-vulnerability caused by symbolic links


[edit] References


^ Pathname resolution, POSIX.
^ Sysinternals Junction documentation
^ Symbolic Links, MSDN Library, Win32 and COM Development, 2008-01-18
^ CreateSymbolicLink Function, MSDN Library, Win32 and COM Development
^ Symbolic Link Programming Considerations, MSDN
^ Mark Russinovich: Inside the Windows Vista Kernel: Part 1 – File-based symbolic links, Microsoft Technet, February 2007.
^ [1] Microsoft .lnk files in Cygwin
^ [2] Cygwin User's Guide, Cygwin.



[edit] External links

Q & A: The difference between hard and soft links Detailed and easy to understand





Wikibooks has a book on the topic of
Linux commands



This article was originally based on material from the Free On-line Dictionary of Computing, which is licensed under the GFDL.



Retrieved from "http://en.wikipedia.org/wiki/Symbolic_link"
Categories: Computer file systemsHidden categories: Wikipedia articles incorporating text from FOLDOC 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Deutsch
Español
Français
Bahasa Indonesia
Italiano
Magyar
日本語
Polski
Русский
中文









 This page was last modified on 7 March 2009, at 04:35.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
