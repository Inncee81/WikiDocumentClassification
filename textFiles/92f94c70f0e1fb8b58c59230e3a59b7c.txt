













Procedural generation - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Procedural_generation";
		var wgTitle = "Procedural generation";
		var wgAction = "view";
		var wgArticleId = "2215623";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283552975;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Procedural generation

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Procedural generation is a widely used term in the production of media, indicating the possibility to create content on the fly rather than prior to distribution. This is often related to computer graphics applications and video game level design.




Contents


1 Overview
2 Contemporary application

2.1 Video games
2.2 Film


3 Cellular automata methods of procedural generation
4 Software using procedural generation

4.1 Procedural worlds and universes for space simulations
4.2 Procedural levels

4.2.1 Arcade games
4.2.2 Role-playing games
4.2.3 Strategy games


4.3 Procedural third-person shooters
4.4 Almost entirely procedural games
4.5 Games with miscellaneous procedural effects


5 References
6 See also
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview





This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (July 2007)


The term procedural refers to the process that computes a particular function. Fractals, an example of procedural generation, dramatically expresses this concept, around which a whole body of mathematics—fractal geometry—has evolved. Commonplace procedural content includes textures and meshes. Sound is often procedurally generated as well and has applications in both speech synthesis as well as music. It has been used to create compositions in various genres of electronic music by artists such as Brian Eno who popularized the term "generative music".[1]
While software developers have applied procedural generation techniques for years, few products have employed this approach extensively. An exception is Will Wright's Spore, a recently released video game entirely populated with procedurally generated content. Procedurally generated elements have also appeared in earlier video games: The Elder Scrolls II: Daggerfall randomly generates terrain and NPCs, creating a world roughly the actual size of the British Isles. Soldier of Fortune from Raven Software uses simple routines to detail enemy models. It could also be said that the lighting in Doom 3 from id Software is procedurally generated because it does not rely on lightmaps precomputed with a radiosity process[citation needed]. More recently Avalanche Studios employed procedural generation to create a large and varied group of tropical islands in great detail for Just Cause.
The modern demoscene uses procedural generation to package a great deal of audiovisual content into relatively small programs. Farbrausch is a team famous for such achievements, although many similar techniques were already implemented by The Black Lotus in the 1990s.

[edit] Contemporary application
Procedurally generated content such as textures and landscapes may exhibit variation, but the generation of a particular item or landscape must be identical from frame to frame. Accordingly, the functions used must be referentially transparent, always returning the same result for the same point, so that they may be called in any order and their results freely cached as necessary. This is similar to lazy evaluation in functional programming languages.

[edit] Video games





This article's tone or style may not be appropriate for Wikipedia. Specific concerns may be found on the talk page. See Wikipedia's guide to writing better articles for suggestions. (July 2008)


The earliest computer games were severely limited by memory constraints. This forced content like maps to be generated algorithmically on the fly: there simply wasn't enough space to store a large amount of pre-made levels and artwork. Pseudorandom number generators were often used with predefined seed values in order to create very large game worlds that appeared premade. For example, The Sentinel supposedly had 10,000 different levels stored in only 48 or 64 kilobytes. An extreme case was Elite, which was originally planned to contain a total of 248 (approximately 282 trillion) galaxies with 256 solar systems each. The publisher, however, was afraid that such a gigantic universe would cause disbelief in players, and eight of these galaxies were chosen for the final version.[2] Other notable early examples include the 1985 game Rescue on Fractalus that used fractal technology to procedurally create in real time the craggy mountains of an alien planet and River Raid, the 1982 Activision game that used a pseudorandom number sequence generated by a linear feedback shift register in order to generate a scrolling maze of obstacles.
Today, most games include thousands of times as much data in terms of memory as algorithmic mechanics. For example, all of the buildings in the large game worlds of the Grand Theft Auto games have been individually designed and placed by artists. In a typical modern video game, game content such as textures and character and environment models are created by artists beforehand, then rendered in the game engine. As the technical capabilities of computers and video game consoles increases, the amount of work required by artists also greatly increases. First, high-end gaming PCs and current-generation game consoles like the Xbox 360 and PlayStation 3 are capable of rendering scenes containing many very detailed objects with high-resolution textures in high-definition. This means that artists must invest a great deal more time in creating a single character, vehicle, building, or texture, since gamers will tend to expect ever-increasingly detailed environments.
Furthermore, the number of unique objects displayed in a video game is increasing. In addition to highly detailed models, players expect a variety of models that appear substantially different from one another. In older games, a single character or object model might have been used over and over again throughout a game. With the increased visual fidelity of modern games, however, it is very jarring (and threatens the suspension of disbelief) to see many copies of a single object, while the real world contains far more variety. Again, artists would be required to complete exponentially more work in order to create many different varieties of a particular object. The need to hire larger art staffs is one of the reasons for the rapid increase in game development costs. Some initial approaches to procedural synthesis attempted to solve these problems by shifting the burden of content generation from the artists to programmers who can create code which automatically generates different meshes according to input parameters. Although sometimes this still happens, what has been recognized is that applying a purely procedural model is often hard at best, requiring huge amounts of time to evolve into a functional, usable and realistic-looking method. Instead of writing a procedure that completely builds content procedurally, it has been proven to be much cheaper and more effective to rely on artist created content for some details. For example, SpeedTree is middleware used to generate a large variety of trees procedurally, yet its leaf textures can be fetched from regular files, often representing digitally acquired real foliage. Other effective methods to generate hybrid content are to procedurally merge different pre-made assets or to procedurally apply some distortions to them.
Supposing, however, a single algorithm can be envisioned to generate a realistic-looking tree, the algorithm could be called to generate random trees, thus filling a whole forest at runtime, instead of storing all the vertices required by the various models. This would save storage media space and reduce the burden on artists, while providing a richer experience. The same method would require far more processing power. Since CPUs are constantly increasing in speed, however, the latter is becoming less of a hurdle.
A different problem is that it is not easy to develop a good algorithm for a single tree, let alone for a variety of species (compare Sumac, Birch, Maple). An additional caveat is that assembling a realistic-looking forest could not be done by simply assembling trees because in the real world there are interactions between the various trees which can dramatically change their appearance and distribution.
In 2004, a PC first-person shooter called .kkrieger was released that made heavy use of procedural synthesis: while quite short and very simple, the advanced video effects were packed into just 96 Kilobytes. In contrast, many modern games are released across several CDs, often exceeding 2 gigabytes in size, more than 20,000 times larger. Naked Sky's RoboBlitz used procedural generation to maximize content in a less than 50MB downloadable file for Xbox Live Arcade. Will Wright's Spore also makes use of procedural synthesis.

[edit] Film
As in video games, procedural generation is often used in film to rapidly create visually interesting and accurate spaces. This comes in a wide variety of applications.
One application is known as an "imperfect factory," where artists can rapidly generate a large number of similar objects. This accounts for the fact that, in real life, no two objects are ever exactly alike. For instance, an artist could model a product for a grocery store shelf, and then create an imperfect factory that would generate a large number of similar objects to populate the shelf.
Noise is extremely important to procedural workflow in film, the most prolific of which is Perlin noise. Noise refers to an algorithm that generates a patterned sequence of pseudorandom numbers.

[edit] Cellular automata methods of procedural generation





The neutrality of this section is disputed. Please see the discussion on the talk page. Please do not remove this message until the dispute is resolved. (March 2009)


Simple programs which generate complex output are a typical method of procedural generation. Typically, one starts with some simple initial conditions like an array of numbers. Then one applies simple rules to the array, which determine the next step in the evolution of the output - that is, the next array of numbers. The rules can be fixed, or they can be changing in time. One can let the program run, and given the right update rules and initial conditions, one can obtain a non-repeating evolution starting from an initial array.
Cellular automata are discrete computer models of evolutionary behavior which start from an array of differently-colored cells, then apply update rules to determine the colors of the next array of cells. Typically one starts with a two-color program, and a random finite array of black and white cells. Then one defines a neighborhood --- for the simplest case, just the two neighboring cells of any one cell ---- and creates a so-called "update rule" to determine what the next cell in the evolution will be. Typical elementary update rules are of the form, "If the current cell is black and the cells to the right and left are white, then the next cell in the evolution shall be white."
It is an astonishing fact that such simple rules, even in the simplest case of two colors, can produce a complex evolution. But, in fact, they can (see Rule 30 and Rule 110).
For game developers, this means that, using with finite initial conditions and extremely simple rules, one can generate complex behavior. That is, content can be nearly spontaneously generated from virtually nothing, which is the idea behind procedural generation. Evolving cellular automata is one way of generating a large amount of content from a small amount of input.

[edit] Software using procedural generation

MaPZone/ProFX – a middleware product designed to create and generate procedural textures in games (used in RoboBlitz).
Houdini - a procedural 3D animation package. A free version of the software is available.
Filter Forge – an Adobe Photoshop plugin for designing procedural textures using node-based editing.
Art of Illusion – an open source and free 3D modeler, has an internal node-based procedural texture editor.
SpeedTree – a middleware product for procedurally generating trees.
Terragen – landscape generation software. Terragen 2 permits procedural generation of an entire world.
CityEngine – a procedural 3D modeling software, specialized in city modeling.


[edit] Procedural worlds and universes for space simulations

Elite (1984) - Everything about the universe, planet positions, names, politics and general descriptions, is generated procedurally; Ian Bell has released the algorithms in C as text elite[3]
StarFlight (1986)[citation needed]
Exile (1988) - Game levels were created in a pseudorandom fashion, as areas important to gameplay were generated.[citation needed]
Frontier: Elite II (1993) - Much as the game Elite had a procedural universe, so did its sequel.[citation needed]
Frontier: First Encounters (1995)
Noctis (2002)[citation needed]
Infinity: The Quest for Earth (Not yet released)
Vega Strike - an open source game very similar to Elite.


[edit] Procedural levels

[edit] Arcade games

The Sentinel (1986) - Used procedural generation to create 10,000 unique levels.
Darwinia (2005) - Has procedural landscapes that allowed for greatly reduced game development time.[citation needed]
SYNTH(tm) (2009) - 100% procedural graphics and levels


[edit] Role-playing games

The Elder Scrolls II: Daggerfall (1996)
Diablo (1998) and Diablo II (2000) both use procedural generation for level design.[citation needed]
Dwarf Fortress procedurally generates the game's world.
Dark Cloud and Dark Cloud 2 both generate game levels procedurally.
Hellgate: London (2007)
Nearly all roguelikes use this technique.


[edit] Strategy games

Seven Kingdoms (1997) - Uses procedural generation for levels.[citation needed]
Xconq - an open source strategy game and game engine.


[edit] Procedural third-person shooters

Just Cause (2006) - Game area is over 250,000 acres (1,000 km2), created procedurally[citation needed]
RoboBlitz (2006) for XBox360 live arcade and PC (Textures generated on the fly via ProFX)


[edit] Almost entirely procedural games

.kkrieger (2004)


[edit] Games with miscellaneous procedural effects

Jade Cocoon (1998) - The merged minions were procedurally generated based on body part sizes.[citation needed]
Spore (2008)
The Elder Scrolls III: Morrowind (2002) - Water effects are generated on the fly with procedural animation by the technique demonstrated in NVIDIA's "Water Interaction" demo. [4]
ToeJam & Earl (1991) - The random levels were procedurally generated.
Left 4 Dead (2008) - The events are procedurally generated.


[edit] References

^ Brian Eno (June 8th 1996). "A talk delivered in San Francisco, June 8, 1996". inmotion magazine. http://www.inmotionmagazine.com/eno1.html. Retrieved on 2008-11-07. 
^ Francis Spufford (October 18, 2003). "Masters of their universe". Guardian. http://www.guardian.co.uk/weekend/story/0,3605,1064107,00.html. 
^ Ian Bell's Text Elite Page
^ "NVIDIA Water Interaction Demo". NVIDIA. 2003. http://http.download.nvidia.com/developer/SDK/Individual_Samples/3dgraphics_samples.html#WaterInteraction. Retrieved on 2007-10-08. 


[edit] See also

Procedural modeling
Procedural texture
Procedural animation
Fractal landscape
Cellular automata
L-System
Perlin noise
Random dungeon
.kkrieger
.werkkzeug
Generative Modelling Language
Iterated function system
Generative art


[edit] External links

The Future Of Content - Will Wright keynote on Spore & procedural generation at the Game Developers Conference 2005. (Scroll down 3/4 of page, registration required to view video).
Generating Procedural Clouds in real time on 3D HW
Darwinia - development diary procedural generation of terrains and trees.
Filter Forge tutorial at The Photoshop Roadmap
Procedural Graphics - an introduction by in4k
Texturing & Modeling:A Procedural Approach 3e 2002
Ken Perlin's Discussion of Perlin Noise
Eric W. Weisstein, "Elementary Cellular Automaton" at mathworld.com
The HVox Engine: Procedural Volumetric Terrains on the Fly (2004)




Retrieved from "http://en.wikipedia.org/wiki/Procedural_generation"
Categories: 3D computer graphicsHidden categories: Articles needing additional references from July 2007 | All articles with unsourced statements | Articles with unsourced statements since January 2009 | All articles needing style editing | Wikipedia articles needing style editing from July 2008 | NPOV disputes from March 2009 | All NPOV disputes | Articles with unsourced statements since April 2008 | Articles with unsourced statements since November 2008 | Articles with unsourced statements since September 2007 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Français
Nederlands









 This page was last modified on 13 April 2009, at 13:06 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
