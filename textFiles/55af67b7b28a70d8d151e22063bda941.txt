













C preprocessor - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "C_preprocessor";
		var wgTitle = "C preprocessor";
		var wgAction = "view";
		var wgArticleId = "231835";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282326362;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); C preprocessor

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
The C preprocessor (cpp) is the preprocessor for the C programming language. In many C implementations, it is a separate program invoked by the compiler as the first part of translation. The preprocessor handles directives for source file inclusion (#include), macro definitions (#define), and conditional inclusion (#if). The language of preprocessor directives is not strictly specific to the grammar of C, so the C preprocessor can also be used independently to process other types of files.
The transformations it makes on its input form the first four of C's so-called Phases of Translation. Though an implementation may choose to perform some or all phases simultaneously, it must behave as if it performed them one-by-one in order.




Contents


1 Phases
2 Including files
3 Conditional compilation
4 Macro definition and expansion

4.1 Precedence
4.2 Multiple lines
4.3 Multiple evaluation of side effects
4.4 Token concatenation
4.5 Semicolons

4.5.1 Multiple statements


4.6 Quoting macro arguments

4.6.1 Indirectly quoting macro arguments


4.7 Variadic macros


5 X-Macros
6 User-defined compilation errors and warnings
7 Compiler-specific preprocessor features
8 Standard positioning macros
9 Compiler-specific predefined macros
10 As a general-purpose preprocessor
11 See also
12 References
13 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Phases
The following are the first four (of eight) phases of translation specified in the C Standard:

Trigraph Replacement - The preprocessor replaces trigraph sequences with the characters they represent.
Line Splicing - Physical source lines that are continued with escaped newline sequences are spliced to form logical lines.
Tokenization - The preprocessor breaks the result into preprocessing tokens and whitespace. It replaces comments with whitespace.
Macro Expansion and Directive Handling - Preprocessing directive lines, including file inclusion and conditional compilation, are executed. The preprocessor simultaneously expands macros and, in the 1999 version of the C standard, handles _Pragma operators.


[edit] Including files
The most common use of the preprocessor is to include another file:


#include <stdio.h>
 
int main (void)
{
    printf("Hello, world!\n");
    return 0;
}

The preprocessor replaces the line #include <stdio.h> with the system header file of that name, which declares the printf() function amongst other things. More precisely, the entire text of the file 'stdio.h' replaces the #include directive.
This can also be written using double quotes, e.g. #include "stdio.h". If the filename is enclosed within angle brackets, the file is searched for in the standard compiler include paths. If the filename is enclosed within double quotes, the search path is expanded to include the current source directory. C compilers and programming environments all have a facility which allows the programmer to define where include files can be found. This can be introduced through a command line flag, which can be parameterized using a makefile, so that a different set of include files can be swapped in for different operating systems, for instance.
By convention, include files are given a .h extension, and files not included by others are given a .c extension. However, there is no requirement that this be observed. Occasionally you will see files with other extensions included, in particular files with a .def extension may denote files designed to be included multiple times, each time expanding the same repetitive content.
#include often compels the use of #include guards or #pragma once to prevent double inclusion.

[edit] Conditional compilation
The #if, #ifdef, #ifndef, #else, #elif and #endif directives can be used for conditional compilation.


#ifdef WIN32 // WIN32 is defined by all Windows 32 compilers, but not by others.
#include <windows.h>
#else
#include <unistd.h>
#endif



#if VERBOSE >= 2
  print("trace message");
#endif

The macro WIN32 could be defined implicitly by the compiler, or specified on the compiler's command line, perhaps to control compilation of the program from a makefile.
The code tests if a macro WIN32 is defined. If it is, as in this example, the file <windows.h> is included, otherwise <unistd.h>.

[edit] Macro definition and expansion
There are two types of macros, object-like and function-like. Object-like macros do not take parameters; function-like macros do. The generic syntax for declaring an identifier as a macro of each type is, respectively,


#define <identifier> <replacement token list>
#define <identifier>(<parameter list>) <replacement token list>

Note that the function-like macro declaration must not have any whitespace between the identifier and the first, opening, parenthesis. If whitespace is present, the macro will be interpreted as object-like with everything starting from the first parenthesis added to the token list.
Whenever the identifier appears in the source code it is replaced with the replacement token list, which can be empty. For an identifier declared to be a function-like macro, it is only replaced when the following token is also a left parenthesis that begins the argument list of the macro invocation. The exact procedure followed for expansion of function-like macros with arguments is subtle.
Object-like macros were conventionally used as part of good programming practice to create symbolic names for constants, e.g.


#define PI 3.14159

... instead of hard-coding those numbers throughout one's code. However, both C and C++ provide the const directive, which provides another way to avoid hard-coding constants throughout the code.
An example of a function-like macro is:


#define RADTODEG(x) ((x) * 57.29578)

This defines a radians to degrees conversion which can be written subsequently, e.g. RADTODEG(34) or RADTODEG (34). This is expanded in-place, so the caller does not need to litter copies of the multiplication constant all over his code. The macro here is written as all uppercase to emphasize that it is a macro, not a compiled function.

[edit] Precedence
Note that the example macro RADTODEG(x) given above uses normally superfluous parentheses both around the argument and around the entire expression. Omitting either of these can lead to unexpected results. For example:

Macro defined as



#define RADTODEG(x) (x * 57.29578)

will expand


RADTODEG(a + b)

to


(a + b * 57.29578)


Macro defined as



#define RADTODEG(x) (x) * 57.29578

will expand


1 / RADTODEG(a)

to


1 / (a) * 57.29578

neither of which give the intended result.

[edit] Multiple lines
A macro can be extended over as many lines as required using a backslash escape character at the end of each line. The macro ends after the first line which does not end in a backslash.
The extent to which multi-line macros enhance or reduce the size and complexity of the source of a C program, or its readability and maintainability is open to debate (there is no experimental evidence on this issue). Techniques such as X-Macros are occasionally used to address these potential issues.

[edit] Multiple evaluation of side effects
Another example of a function-like macro is:


#define MIN(a,b) ((a)>(b)?(b):(a))

Notice the use of the ?: operator. This illustrates one of the dangers of using function-like macros. One of the arguments, a or b, will be evaluated twice when this "function" is called. So, if the expression MIN(++firstnum,secondnum) is evaluated, then firstnum may be incremented twice, not once as would be expected.
A safer way to achieve the same would be to use a typeof-construct:


#define max(a,b) \
       ({ typeof (a) _a = (a); \
           typeof (b) _b = (b); \
         _a > _b ? _a : _b; })

This will cause the arguments to be evaluated only once, and it will not be type-specific anymore. This construct is not legal ANSI C; both the typeof keyword, and the construct of placing a compound statement within parentheses, are non-standard extensions implemented in the popular GNU C compiler (GCC). If you are using GCC, the same general problem can also be solved using a static inline function, which is as efficient as a #define. The inline function allows the compiler to check/coerce parameter types -- in this particular example this appears to be a disadvantage, since the 'max' function as shown works equally well with different parameter types, but in general having the type coercion is often an advantage.
Within ANSI C, there is no reliable general solution to the issue of side-effects in macro arguments.

[edit] Token concatenation
Token concatenation, also called token pasting, is one of the most subtle — and easy to abuse — features of the C macro preprocessor. Two arguments can be 'glued' together using ## preprocessor operator; this allows two tokens to be concatenated in the preprocessed code. This can be used to construct elaborate macros which act like a crude version of C++ templates.
For instance:


#define MYCASE(item,id) \
case id: \
  item##_##id = id;\
break
 
switch(x) {
    MYCASE(widget,23);
}

The line MYCASE(widget,23); gets expanded here into


case 23: 
  widget_23 = 23; 
break;

(The semicolon following the invocation of MYCASE becomes the semicolon that completes the break statement.)

[edit] Semicolons
One stylistic note about the above macro is that the semicolon on the last line of the macro definition is omitted so that the macro looks 'natural' when written. It could be included in the macro definition, but then there would be lines in the code without semicolons at the end which would throw off the casual reader. Worse, the user could be tempted to include semicolons anyway; in most cases this would be harmless (an extra semicolon denotes an empty statement) but it would cause errors in control flow blocks:


#define PRETTY_PRINT(msg) \
   printf ("Message: '%s'\n", msg);
 
  if (n < 10)
    PRETTY_PRINT("n is less than 10");
  else
    PRETTY_PRINT("n is at least 10");

This expands to give two statements – the intended printf and an empty statement – in each branch of the if/else construct, which will cause the compiler to give an error message similar to:


error: expected expression before ‘else’

—gcc 4.1.1


[edit] Multiple statements
Inconsistent use of multiple-statement macros can result in unintended behaviour. The code


#define CMDS \
   a = b; \
   c = d
 
  if (var == 13)
    CMDS;
  else
    return;

will expand to


  if (var == 13)
    a = b;
  c = d;
  else
    return;

which is a syntax error (the else is lacking a matching if).
The macro can be made safe by replacing the internal semicolon with the comma operator, since two operands connected by a comma form a single statement. The comma operator is the lowest precedence operator. In particular, its precedence is lower than the assignment operator's, so that a = b, c = d does not parse as a = (b,c) = d. Therefore,


#define CMDS a = b, c = d
 
  if (var == 13)
    CMDS;
  else
    return;

will expand to


  if (var == 13)
    a = b, c = d;
  else
    return;

The problem can also be fixed without using the comma operator:


#define CMDS \
  do { \
    a = b; \
    c = d; \
  } while (0)

expands to


  if (var == 13)
    do {
      a = b;
      c = d;
    } while (0);
  else
    return;

The do and while (0) are needed to allow the macro invocation to be followed by a semicolon; if they were omitted the resulting expansion would be


  if (var == 13) {
      a = b;
      c = d;
  }
  ;
  else
    return;

The semicolon in the macro's invocation above becomes an empty statement, causing a syntax error at the else by preventing it matching up with the preceding if.

[edit] Quoting macro arguments
Although macro expansion does not occur within a quoted string, the text of the macro arguments can be quoted and treated as a string literal by using the "#" directive(also known as the "Stringizing Operator"). For example, with the macro


#define QUOTEME(x) #x

the code


printf("%s\n", QUOTEME(1+2));

will expand to


printf("%s\n", "1+2");

This capability can be used with automatic string literal concatenation to make debugging macros. For example, the macro in


#define dumpme(x, fmt) printf("%s:%u: %s=" fmt, __FILE__, __LINE__, #x, x)
 
int some_function() {
    int foo;
    /* [a lot of complicated code goes here] */
    dumpme(foo, "%d");
    /* [more complicated code goes here] */
}

would print the name of an expression and its value, along with the file name and the line number.

[edit] Indirectly quoting macro arguments
The "#" directive can also be used indirectly. For example, with the macro:


#define FOO bar
#define _QUOTEME(x) #x
#define QUOTEME(x) _QUOTEME(x)

the code


printf("FOO=%s\n", QUOTEME(FOO));

will expand to


printf("FOO=%s\n", "bar");

One common use for this technique is to convert the __LINE__ macro to a string. Eg:


QUOTEME(__LINE__);

is converted to:


"34"

if __LINE__ happens to have the value 34 when QUOTEME() is called. On the other hand _QUOTEME(__LINE__) will expand to "__LINE__"

[edit] Variadic macros
Main article: Variadic macro
Macros that can take a varying number of arguments (variadic macros) are not allowed in C89, but were introduced by a number of compilers and standardised in C99. Variadic macros are particularly useful when writing wrappers to variable parameter number functions, such as printf, for example when logging warnings and errors.

[edit] X-Macros
One little-known usage-pattern of the C preprocessor is known as "X-Macros" or "Supermacros".[1][2][3] An X-Macro is an #include file (commonly using a ".def" extension instead of the traditional ".h") that contains a list of similar macro calls (which can be referred to as "component macros"). The include file is then referenced repeatedly in the following pattern:
(Given that the include file is "xmacro.def" and it contains a list of component macros of the style "foo(x, y, z)")


#define foo(x, y, z) doSomethingWith(x, y, z);
#include "xmacro.def"
#undef foo
 
#define foo(x, y, z) doSomethingElseWith(x, y, z);
#include "xmacro.def"
#undef foo
 
(etc...)

The most common usage of X-Macros is to establish a list of C objects and then automatically generate code for each of them. Some implementations also perform any #undefs they need inside the X-Macro, as opposed to expecting the caller to undef them.
Common sets of objects are a set of global configuration settings, a set of members of a structure, a list of possible XML tags for converting an XML file to a quickly traversable tree or the body of an enum declaration, although other lists are possible.
Once the X-Macro has been processed to create the list of objects, the component macros can be redefined to generate, for instance, accessor and/or mutator functions. Structure serializing and deserializing are also commonly done.
Here is an example of an X-Macro that establishes a struct and automatically creates serialize/deserialize functions:
(Note: for simplicity, we don't account for endianness or buffer overflows)


File:  object.def
 
struct_member( x, int );
struct_member( y, int );
struct_member( z, int );
struct_member( radius, double );
 
 
File: star_table.c
 
typedef struct
{
#define struct_member( name, type ) type name;
#include "object.def"
#undef struct_member
} star;
 
void serialize_star( const star *_star, unsigned char *buffer )
 
{
/* Copy each member's data into buffer and move the pointer. */
#define struct_member( name, type ) \
    memcpy(buffer, (unsigned char *) &(_star->name), sizeof(_star->name) ); \
    buffer += sizeof(_star->name);
#include "object.def"
#undef struct_member
}
 
void deserialize_star( star *_star, const unsigned char *buffer )
 
{
/* Copy each member's data out of buffer and move the pointer. */
#define struct_member( name, type ) \
    memcpy((unsigned char *) &(_star->name), buffer, sizeof(_star->name) ); \
    buffer += sizeof(_star->name);
#include "object.def"
#undef struct_member
}

Often, handlers for individual data types are created and accessed using the token concatenation ("##") and quoting ("#") operators. For instance, the following might be added to the above code:


void print_int( int val )
{
   printf( "%d", val )
}
 
void print_double( double val )
{
   printf( "%g", val )
}
 
void print_star( const star *_star )
 
{
/* print_##type will be replaced with print_int or print_double */
#define struct_member( name, type ) printf( "%s: ", #name ); print_##type( _star->name ); printf("\n");
#include "object.def"
#undef struct_member
}

The creation of a separate header file can be avoided by creating a single macro containing what would be the contents of the file. For instance, the above defined "object.def" could be replaced with this macro:


#define object_def \
struct_member( x, int ); \
struct_member( y, int ); \
struct_member( z, int ); \
struct_member( radius, double );

and then all calls to '#include "object.def"' could be replaced with a simple object_def statement. The above function would become:


void print_star( const star *_star )
 
{
/* print_##type will be replaced with print_int or print_double */
#define struct_member( name, type ) printf( "%s: ", #name ); print_##type( _star->name ); printf("\n");
object_def
#undef struct_member
}

A variant which avoids needing to know the names of any expanded sub-macros is to accept the operators as an argument to the list macro:


#define object_def(_) \
_( x, int ) \
_( y, int ) \
_( z, int ) \
_( radius, double )
 
void print_star( const star *_star )
{
/* print_##type will be replaced with print_int or print_double */
#define struct_member( name, type ) printf( "%s: ", #name ); print_##type( _star->name ); printf("\n")
object_def(struct_member)
#undef struct_member
}

This approach can be dangerous in that the entire macro set is always interpreted as if it was on a single source line, which could encounter compiler limits with complex component macros and/or long member lists.

[edit] User-defined compilation errors and warnings
The #error directive inserts an error message into the compiler output.


#error "Gaah!"

This prints "Gaah!" in the compiler output and halts the computation at that point. This is extremely useful for determining whether a given line is being compiled or not. It is also useful if you have a heavily parameterized body of code and want to make sure a particular #define has been introduced from the makefile, e.g.:


#ifdef WINDOWS
    ... /* Windows specific code */
#elif defined(UNIX)
    ... /* Unix specific code */
#else
    #error "What's your operating system?"
#endif

Some implementations provide a non-standard #warning directive to print out a warning message in the compiler output, but not stop the compilation process. A typical use is to warn about the usage of some old code, which is now unfavored and only included for compatibility reasons, e.g.:


#warning "Do not use ABC, which is deprecated. Use XYZ instead."

Although the text following the #error or #warning directive does not have to be quoted, it is good practice to do so. Otherwise, there may be problems with apostrophes and other characters that the preprocessor tries to interpret. Microsoft C uses #pragma message ( "text" ) instead of #warning.

[edit] Compiler-specific preprocessor features
The #pragma directive is a compiler specific directive which compiler vendors may use for their own purposes. For instance, a #pragma is often used to allow suppression of specific error messages, manage heap and stack debugging, etc.
C99 introduced a few standard #pragma directives, taking the form #pragma STDC …, which are used to control the floating-point implementation.

[edit] Standard positioning macros
Certain symbols are predefined in ANSI C. Two useful ones are __FILE__ and __LINE__, which expand into the current file and line number. For instance:


// debugging macros so we can pin down message provenance at a glance
#define WHERESTR "[file %s, line %d] "
#define WHEREARG __FILE__,__LINE__
 
printf(WHERESTR ": hey, x=%d\n", WHEREARG, x);

This prints the value of x, preceded by the file and line number, allowing quick access to which line the message was produced on. Note that the WHERESTR argument is concatenated with the string following it.

[edit] Compiler-specific predefined macros
Compiler-specific predefined macros are usually listed in the compiler documentation, although this is often incomplete. The Pre-defined C/C++ Compiler Macros project lists "various pre-defined compiler macros that can be used to identify standards, compilers, operating systems, hardware architectures, and even basic run-time libraries at compile-time".
Some compilers can be made to dump at least some of their useful predefined macros, for example:

GNU C Compiler
gcc -dM -E - < /dev/null
HP-UX ansi C compiler
cc -v fred.c (where fred.c is a simple test file)
SCO OpenServer C compiler
cc -## fred.c (where fred.c is a simple test file)
Sun Studio C/C++ compiler
cc -## fred.c (where fred.c is a simple test file)


[edit] As a general-purpose preprocessor
Since the C preprocessor can be invoked independently to process files other than those containing to-be-compiled source code, it can also be used as a "general purpose preprocessor" for other types of text processing. One particularly notable example is the now-deprecated imake system; more examples are listed at General purpose preprocessor.

[edit] See also

C syntax
Make
Preprocessor


[edit] References

^ C Preprocessor Trick For Implementing Similar Data Types
^ Meyers, Randy (May 2001) "The New C: X Macros" in Dr. Dobb's Journal.  Retrieved on 1 May 2008.
^ Beal, Stephan (August 2004) "Supermacros" .  Retrieved on 27 October 2008.


[edit] External links



Wikibooks has a book on the topic of
C Programming/Preprocessor




ISO/IEC 9899. The official C:1999 standard, along with defect reports and a rationale. As of 2005 the latest version is ISO/IEC 9899:TC2.
GNU CPP online manual
Visual Studio .NET preprocessor reference
Collection of pre-defined macros








v • d • e

C programming language





Libraries

C standard library · glibc · Dietlibc · uClibc · Newlib · more






Features

String · Syntax · Preprocessor · Variable types and declarations · Functions






Descendants

C++ · Objective-C · D · C#






C and Other Languages

C and C++ (Compatibility · Operators) · Comparison of Pascal and C · C to Java byte-code compiler






Category








Retrieved from "http://en.wikipedia.org/wiki/C_preprocessor"
Categories: C programming language | Transformation languages | Macro programming languages 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Español
Deutsch
Magyar
Polski
Suomi
Türkçe









 This page was last modified on 7 April 2009, at 12:25 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
