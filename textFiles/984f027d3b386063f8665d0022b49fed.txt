













Graph coloring - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Graph_coloring";
		var wgTitle = "Graph coloring";
		var wgAction = "view";
		var wgArticleId = "426743";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281579556;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Graph coloring

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




A proper vertex coloring of the Petersen graph with 3 colors, the minimum number possible.


In graph theory, graph coloring is a special case of graph labeling; it is an assignment of labels traditionally called "colors" to elements of a graph subject to certain constraints. In its simplest form, it is a way of coloring the vertices of a graph such that no two adjacent vertices share the same color; this is called a vertex coloring. Similarly, an edge coloring assigns a color to each edge so that no two adjacent edges share the same color, and a face coloring of a planar graph assigns a color to each face or region so that no two faces that share a boundary have the same color.
Vertex coloring is the starting point of the subject, and other coloring problems can be transformed into a vertex version. For example, an edge coloring of a graph is just a vertex coloring of its line graph, and a face coloring of a planar graph is just a vertex coloring of its planar dual. However, non-vertex coloring problems are often stated and studied as is. That is partly for perspective, and partly because some problems are best studied in non-vertex form, as for instance is edge coloring.
The convention of using colors originates from coloring the countries of a map, where each face is literally colored. This was generalized to coloring the faces of a graph embedded in the plane. By planar duality it became coloring the vertices, and in this form it generalizes to all graphs. In mathematical and computer representations it is typical to use the first few positive or nonnegative integers as the "colors". In general one can use any finite set as the "color set". The nature of the coloring problem depends on the number of colors but not on what they are.
Graph coloring enjoys many practical applications as well as theoretical challenges. Beside the classical types of problems, different limitations can also be set on the graph, or on the way a color is assigned, or even on the color itself. It has even reached popularity with the general public in the form of the popular number puzzle Sudoku. Graph coloring is still a very active field of research.
Note: Many terms used in this article are defined in the glossary of graph theory.




Contents


1 History
2 Definition and terminology

2.1 Vertex coloring
2.2 Chromatic polynomial
2.3 Edge coloring


3 Properties

3.1 Bounds on the chromatic number
3.2 Graphs with high chromatic number
3.3 Bounds on the chromatic index
3.4 Other properties
3.5 Open problems


4 Algorithms

4.1 Efficient algorithms
4.2 Brute-force search
4.3 Contraction
4.4 Greedy coloring
4.5 Computational complexity
4.6 Parallel and distributed algorithms


5 Applications

5.1 Scheduling
5.2 Register allocation
5.3 Other applications


6 Other colorings

6.1 Ramsey theory
6.2 Other colorings


7 See also
8 Notes
9 References
10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
See also: History of the four color theorem  and History of graph theory
The first results about graph coloring deal almost exclusively with planar graphs in the form of the coloring of maps. While trying to color a map of the counties of England, Francis Guthrie postulated the four color conjecture, noting that four colors were sufficient to color the map so that no regions sharing a common border received the same color. Guthrie’s brother passed on the question to his mathematics teacher Augustus de Morgan at University College, who mentioned it in a letter to William Hamilton in 1852. Arthur Cayley raised the problem at a meeting of the London Mathematical Society in 1879. The same year, Alfred Kempe published a paper that claimed to establish the result, and for a decade the four color problem was considered solved. For his accomplishment Kempe was elected a Fellow of the Royal Society and later President of the London Mathematical Society.[1]
In 1890, Heawood pointed out that Kempe’s argument was wrong. However, in that paper he proved the five color theorem, saying that every planar map can be colored with no more than five colors, using ideas of Kempe. In the following century, a vast amount of work and theories were developed to reduce the number of colors to four, until the four color theorem was finally proved in 1976 by Kenneth Appel and Wolfgang Haken. Perhaps surprisingly, the proof went back to the ideas of Heawood and Kempe and largely disregarded the intervening developments.[2] The proof of the four color theorem is also noteworthy for being the first major computer-aided proof.
In 1912, George David Birkhoff introduced the chromatic polynomial to study the coloring problems, which was generalised to the Tutte polynomial by Tutte, important structures in algebraic graph theory. Kempe had already drawn attention to the general, non-planar case in 1879[3], and many results on generalisations of planar graph coloring to surfaces of higher order followed in the early 20th century.
In 1960, Claude Berge formulated another conjecture about graph coloring, the strong perfect graph conjecture, originally motivated by an information-theoretic concept called the zero-error capacity of a graph introduced by Shannon. The conjecture remained unresolved for 40 years, until it was established as the celebrated strong perfect graph theorem in 2002 by Chudnovsky, Robertson, Seymour, Thomas 2002.
Graph coloring has been studied as an algorithmic problem since the early 1970s. The chromatic number problem is one of Karp’s 21 NP-complete problems from 1972, around the time of various exponential-time algorithms based on backtracking and Zykov’s deletion--contraction recurrence from 1949[4]. One of the major applications of graph coloring, register allocation in compilers was introduced in 1981.

[edit] Definition and terminology

[edit] Vertex coloring
When used without any qualification, a coloring of a graph is almost always a proper vertex coloring, namely a labelling of the graph’s vertices with colors such that no two vertices sharing the same edge (graph theory) have the same color. Since a vertex with a loop (graph theory) could never be properly colored, it is understood that graphs in this context are loopless.
The terminology of using colors for vertex labels goes back to map coloring. Labels like red and blue are only used when the number of colors is small, and normally it is understood that the labels are drawn from the integers {1,2,3,…}.
A coloring using at most k colors is called a (proper) k-coloring. The smallest number of colors needed to color a graph G is called its chromatic number, χ(G). A graph that can be assigned a (proper) k-coloring is k-colorable, and it is k-chromatic if its chromatic number is exactly k. A subset of vertices assigned to the same color is called a color class, every such class forms an independent set. Thus, a k-coloring is the same as a partition of the vertex set into k independent sets, and the terms k-partite and k-colorable have the same meaning.

[edit] Chromatic polynomial
Main article: Chromatic polynomial




This graph can be 3-colored in 12 different ways.


The chromatic polynomial counts the number of ways a graph can be colored using no more than a given number of colors. For example, using three colors, the graph in the image to the right can be colored in 12 ways. With only two colors, it cannot be colored at all. With four colors, it can be colored in 24 + 4⋅12 = 72 ways: using all four colors, there are 4! = 24 valid colorings (every assignment of four colors to any 4-vertex graph is a proper coloring); and for every choice of three of the four colors, there are 12 valid 3-colorings. So, for the graph in the example, a table of the number of valid colorings would start like this:


Available colors
1
2
3
4
…


Number of colorings
0
0
12
72
…






All nonisomorphic graphs on 3 vertices and their chromatic polynomials. The empty graph E3 (red) admits a 1-coloring, the others admit no such colorings. The green graph admits 12 colorings with 3 colors.


The chromatic polynomial is a function P(G,t) that counts the number of t-colorings of G. As the name indicates, for a given G the function is indeed a polynomial in t. For the example graph, P(G,t) = t(t − 1)2(t − 2), and indeed P(G,4) = 72.
The chromatic polynomial includes at least as much information about the colorability of G as does the chromatic number. Indeed, χ is the smallest positive integer that is not a root of the chromatic polynomial,

χ(G) = min{k:P(G,k) > 0}


Chromatic polynomials for certain graphs

Triangle K3
t(t − 1)(t − 2)


Complete graph Kn



Tree with n vertices
t(t − 1)n − 1


Cycle Cn
(t − 1)n + ( − 1)n(t − 1)


Petersen graph
t(t − 1)(t − 2)(t7 − 12t6 + 67t5 − 230t4 + 529t3 − 814t2 + 775t − 352)



[edit] Edge coloring
Main article: Edge coloring
An edge coloring of a graph, is a proper coloring of the edges, meaning an assignment of colors to edges so that no vertex is incident to two edges of the same color. An edge coloring with k colors is called a k-edge-coloring and is equivalent to the problem of partitioning the edge set into k matchings. The smallest number of colors needed for an edge coloring of a graph G is the chromatic index, or edge chromatic number, χ′(G). A Tait coloring is a 3-edge coloring of a cubic graph. The four color theorem is equivalent to the assertion that every planar cubic bridgeless graph admits a Tait coloring.

[edit] Properties

[edit] Bounds on the chromatic number
Assigning distinct colors to distinct vertices always yields a proper coloring, so

1 ≤ χ(G) ≤ n.

The only graphs that can be 1-colored are edgeless graphs, and the complete graph Kn of n vertices requires χ(Kn) = n colors. In an optimal coloring there must be at least one of the graph‘s m edges between every pair of color classes, so

χ(G)(χ(G) − 1) ≤ 2m.

If G contains a clique of size k, then at least k colors are needed to color that clique; in other words, the chromatic number is at least the clique number:

χ(G) ≥ ω(G).

For interval graphs this bound is tight.
The 2-colorable graphs are exactly the bipartite graphs, including trees and forests. By the four color theorem, every planar graph can be 4-colored.
A greedy coloring shows that every graph can be colored with one more color than the maximum vertex degree,

χ(G) ≤ Δ(G) + 1.

Complete graphs have χ(G) = n and Δ(G) = n − 1, and odd cycles have χ(G) = 3 and Δ(G) = 2, so for these graphs this bound is best possible. In all other cases, the bound can be slightly improved; Brooks’ theorem[5] states that

Brooks’ theorem: χ(G) ≤ Δ(G)for a connected, simple graph G, unless G is a complete graph or an odd cycle


[edit] Graphs with high chromatic number
Graphs with large cliques have high chromatic number, but the opposite is not true. The Grötzsch graph is an example of a 4-chromatic graph without a triangle, and the example can be generalised to the Mycielskians.

Mycielski’s Theorem: There exist triangle-free graphs with arbitrarily high chromatic number.

From Brooks’s theorem, graphs with high chromatic number must have high maximum degree. Another local property that leads to high chromatic number is the presence of a large clique. But colorability is not an entirely local phenomenon: A graph with high girth looks locally like a tree, because all cycles are long, but its chromatic number need not be 2:

Theorem (Erdös): There exist graphs of arbitrarily high girth and chromatic number.


[edit] Bounds on the chromatic index
An edge coloring of G is a vertex coloring of its line graph L(G), and vice versa. Thus,

χ(G) = χ'(L(G))

There is a strong relationship between edge colorability and the graph’s maximum degree Δ(G). Since all edges incident to the same vertex need their own color, we have

χ'(G) ≥ Δ(G)

Moreover,

König’s theorem: χ'(G) = Δ(G) if G is bipartite.

In general, the the relationship is even stronger than what Brooks’s theorem gives for vertex coloring:

Vizing’s Theorem: A graph of maximal degree Δ has edge-chromatic number Δ or Δ + 1.


[edit] Other properties
For planar graphs, vertex colorings are essentially dual to nowhere-zero flows.
About infinite graphs, much less is known. The following is one of the few results about infinite graph coloring:

If all finite subgraphs of an infinite graph G are k-colorable, then so is G. (de Bruijn and Erdős 1951)


[edit] Open problems
The chromatic number of the plane, where two points are adjacent if they have unit distance, is unknown, although it is one of 4, 5, 6, or 7. Other open problems concerning the chromatic number of graphs include the Hadwiger conjecture stating that every graph with chromatic number k has a complete graph on k vertices as a minor, and the Erdős–Faber–Lovász conjecture bounding the chromatic number of unions of complete graphs that have at exactly one vertex in common to each pair.
When Birkhoff and Lewis introduced the chromatic polynomial in their attack on the four-color theorem, they conjectured that for planar graphs G, the polymomial P(G,t) has no zeros in the region . Although it is known that such a chromatic polynomial has no zeros in the region  and that , their conjecture is still unresolved. It also remains an unsolved problem to characterize graphs which have the same chromatic polynomial and to determine which polynomials are chromatic.

[edit] Algorithms


Graph coloring





Decision


Name
Graph coloring, vertex coloring, k-coloring


Input
Graph G with n vertices. Integer k


Output
Does G admit a proper vertex coloring with k colors?


Running time
O(2nn)


Complexity
NP-complete


Reduction from
3-Satisfiability


Garey–Johnson
GT4


Optimisation


Name
Chromatic number


Input
Graph G with n vertices.


Output
χ(G)


Complexity
NP-hard


Approximability
O(n(logn) − 3(loglogn)2)


Inapproximability
n1 − ε unless P=NP


Counting problem


Name
Chromatic polymomial


Input
Graph G with n vertices. Integer k


Output
The number P(G,k) of proper k-colorings of G


Running time
O(2nn)


Complexity
#P-complete


Approximability
FPRAS for restricted cases


Inapproximability
No PTAS unless P=NP




[edit] Efficient algorithms
Determining if a graph can be colored with 2 colors is equivalent to determining whether or not the graph is bipartite, and thus polynomial time-computable. More generally, the chromatic number and a corresponding coloring of perfect graphs can be computed in polynomial time using semidefinite programming. Closed formulas for chromatic polynomial are known for many classes of graphs, such as forest, chordal graphs, cycles, wheels, and ladders, so these can be evaluated in polynomial time.

[edit] Brute-force search
Brute-force search for a k-coloring considers every of the  assignments of colors to vertices and checks for each if it is legal. To compute the chromatic number and the chromatic polynomial, this procedure is used for every k, for a total running time of O((n + 1)!), impractical for all but the smallest input graphs.

[edit] Contraction
The contraction G / uv of graph G is the graph obtained by identifying the vertices u and v, removing any edges between them, and replacing them with a single vertex w where any edges that were incident on u or v are redirected to w. This operation plays a major role in the analysis of graph coloring.
The chromatic number satisfies the recurrence relation:

χ(G) = min{χ(G + uv),χ(G / uv)}

due to Zykov,[6] where u and v are nonadjacent vertices, G + uv is the graph with the edge uv added. Several algorithms are based on evaluating this recurrence, the resulting computation tree is sometimes called a Zykov tree. The running time is based on the heuristic for choosing the vertices u and v.
The chromatic polynomial satisfies following recurrence relation

P(G − uv,k) = P(G / uv,k) + P(G,k)

where u and v are adjacent vertices and G − uv is the graph with the edge uv removed. P(G − uv,k) represents the number of possible proper colorings of the graph, when the vertices may have same or different colors. The number of proper colorings therefore come from the sum of two graphs. If the vertices u and v have different colors, then we can as well consider a graph, where u and v are adjacent. If u and v have the same colors, we may as well consider a graph, where u and v are contracted. Tutte’s curiosity about which other graph properties satisfied this recurrence led him to discover a bivariate generalization of the chromatic polynomial, the Tutte polynomial.
The expressions give rise to a recursive procedure, called the deletion–contraction algorithm, which forms the basis of many algorithms for graph coloring. The running time satisfies the same recurrence relation as the Fibonacci numbers, so in the worst case, the algorithm runs in time within a polynomial factor of  [7]. The analysis can be improved to within a polynomial factor of the number t(G) of spanning trees of the input graph [8]. In practice, branch and bound strategies and graph isomorphism rejection are employed to avoid some recursive calls, the running time depends on the heuristic used to pick the vertex pair.

[edit] Greedy coloring
Main article: Greedy coloring




Two greedy colorings of the same graph using different vertex orders. The right example generalises to 2-colorable graphs with n vertices, where the greedy algorithm expends n / 2 colors.


The greedy algorithm considers the vertices in a specific order v1,…,vn and assigns to vi the smallest available color not used by vi’s neighbours among v1,…,vi − 1, adding a fresh color if needed. The quality of the resulting coloring depends on the chosen ordering. There exists an ordering that leads to a greedy coloring with the optimal number of χ(G) colors. On the other hand, greedy colorings can be arbitrarily bad; for example, the crown graph on n vertices can be 2-colored, but has an ordering that leads to a greedy coloring with n / 2 colors.
If the vertices are ordered according to their degrees, the resulting greedy coloring uses at most maxi min{d(xi) + 1,i} colors, at most one more than the graph’s maximum degree. This heuristic is sometimes called the Welsh–Powell algorithm[9]. Another heuristic establishes the ordering dynamically while the algorithm proceeds, choosing next the vertex adjacent to the largest number of different colors [10]. Many other graph coloring heuristics are similarly based on greedy coloring for a specific static or dynamic strategy of ordering the vertices, these algorithms are sometimes called sequential coloring algorithms.

[edit] Computational complexity
Graph coloring is computationally hard. It is NP-complete to decide if a given graph admits a k-coloring for given k except for the cases k = 1 and k = 2. Especially, it is NP-hard to compute the chromatic number. Graph coloring remains NP-complete even on planar graphs of degree at most 4 [11].
The best known approximation algorithm computes a coloring of size at most within a factor O(n(logn) − 3(loglogn)2) of the chromatic number.[12] For all ε > 0 it is NP-hard to approximate the chromatic number within n1 − ε. [13]
It is NP-hard to color a 3-colorable graph with 4 colors [14] and a k-colorable graph with k(logk) / 25 colors for sufficiently large constant k [15].
Computing the coefficients of the chromatic polynomial is #P-hard. In fact, even computing the value of χ(G,k) is #P-hard at any rational point k except for k = 1 and k = 2 [16]. There is no FPRAS for evaluating the chromatic polynomial at any rational point k ≥ 1.5 except for k = 2 unless NP=RP [17].
For edge coloring, the proof of Vizing’s result gives an algorithm that uses at most Δ + 1 colors. However, deciding between the two candidate values for the edge chromatic number is NP-complete. [18] In terms of approximation algorithms, Vizing’s algorithm shows that the edge chromatic number can be approximated within 4 / 3, and the hardness result shows that no (4 / 3 − ε)-algorithm exists for any ε > 0 unless P=NP. These are among the oldest results in the literature of approximation algorithms, even though neither paper makes explicit use of that notion[19].

[edit] Parallel and distributed algorithms
In the field of distributed algorithms, graph coloring is closely related to the problem of symmetry breaking. In a symmetric graph, a deterministic distributed algorithm cannot find a proper vertex coloring. Some auxiliary information is needed in order to break symmetry.
A standard assumption is that initially each node has a unique identifier, for example, from the set {1, 2, ..., n} where n is the number of nodes in the graph. Put otherwise, we assume that we are given an n-coloring. The challenge is to reduce the number of colors from n to, e.g., Δ + 1.
A straightforward distributed version of the greedy algorithm for (Δ + 1)-coloring requires Ω(n) communication rounds in the worst case − information may need to be propagated from one side of the network to another side. However, much faster algorithms exist, at least if the maximum degree Δ is small.
The simplest interesting case is an n-cycle. Richard Cole and Uzi Vishkin[20] show that there is a distributed algorithm that reduces the number of colors from n to O(logn) in one synchronous communication step. By iterating the same procedure, it is possible to obtain a 3-coloring of an n-cycle in O(log* n) communication steps (assuming that we have unique node identifiers).
The function log*, iterated logarithm, is an extremely slowly growing function, "almost constant". Hence the result by Cole and Vishkin raised the question of whether there is a constant-time distribute algorithm for 3-coloring an n-cycle. Linial[21] showed that this is not possible: any deterministic distributed algorithm requires Ω(log* n) communication steps to reduce an n-coloring to a 3-coloring in an n-cycle.
The technique by Cole and Vishkin can be applied in arbitrary bounded-degree graphs as well; the running time is poly(Δ) + O(log* n).[22]

[edit] Applications

[edit] Scheduling
Vertex coloring models to a number of scheduling problems.[23] In the cleanest form, a given set of jobs need to be assigned to time slots, each job requires one such slot. Jobs can be scheduled in any order, but pairs of jobs may be in conflict in the sense that they may not be assigned to the same time slot, for example because they both rely on a shared resource. The corresponding graph contains a vertex for every job and an edge for every conflicting pair of jobs. The chromatic number of the graph is exactly the minimum makespan, the optimal time to finish all jobs without conflicts.
Details of the scheduling problem define the structure of the graph. For example, when assigning aircrafts to flights, the resulting conflict graph is an interval graph, so the coloring problem can be solved efficiently. In bandwidth allocation to radio stations, the resulting conflict graph is a unit disk graph, so the coloring problem is 3-approximable.

[edit] Register allocation
Main article: Register allocation
A compiler is a computer program that translates one computer language into another. To improve the execution time of the resulting code, one of the techniques of compiler optimization is register allocation, where the most frequently used values of the compiled program are kept in the fast processor registers. Ideally, values are assigned to registers so that they can all reside in the registers when they are used.
The textbook approach to this problem is to model it as a graph coloring problem.[24] The compiler constructs an interference graph, where vertices are symbolic registers and an edge connects two nodes if they are needed at the same time. If the graph can be colored with k colors then the variables can be stored in k registers.

[edit] Other applications
The problem of coloring a graph has found a number of applications, including pattern matching.
The recreational puzzle Sudoku can be seen as completing a 9-coloring on given specific graph with 81 vertices.

[edit] Other colorings

[edit] Ramsey theory
Main article: Ramsey theory
An important class of improper coloring problems is studied in Ramsey theory, where the graph’s edges are assigned to colors, and there is no restriction on the colors of incident edges. A simple example is the friendship theorem says that in any coloring of the edges of K6 the complete graph of six vertices there will be a monochromatic triangle; often illustrated by saying that any group of six people either has three mutual strangers or three mutual acquaintances. Ramsey theory is concerned with generalisations of this idea to seek regularity amid disorder, finding general conditions for the existence of monochromatic subgraphs with given structure.

[edit] Other colorings






List coloring
Each vertex chooses from a list of colors
List edge-coloring
Each edge chooses from a list of colors
Total coloring 
Vertices and edges are colored
Harmonious coloring 
Every pair of colors appears on at most one edge
Complete coloring 
Every pair of colors appears on at least one edge
Exact coloring 
Every pair of colors appears on exactly one edge
Acyclic coloring 
Every 2-chromatic subgraph is acyclic
Strong coloring 
Every color appears in every partition of equal size exactly once
Strong edge coloring 
Edges are colored such that each color class induces a matching (equivalent to coloring the square of the line graph)
Equitable coloring 
The sizes of color classes differ by at most one
Sum-coloring 
The criterion of minimalization is the sum of colors






T-coloring 
Distance between two colors of adjacent vertices must not belong to fixed set T
Rank coloring 
If two vertices have the same color i, then every path between them contain a vertex with color greater than i
Interval edge-coloring 
A color of edges meeting in a common vertex must be contiguous
Circular coloring 
Motivated by task systems in which production proceeds in a cyclic way
Path coloring 
Models a routing problem in graphs
Fractional coloring 
Vertices may have multiple colors, and on each edge the sum of the color parts of each vertex is not greater than one
Oriented coloring 
Takes into account orientation of edges of the graph
Cocoloring 
An improper vertex coloring where every color class induces an independent set or a clique
Subcoloring 
An improper vertex coloring where every color class induces a union of cliques
Weak coloring 
An improper vertex coloring where every non-isolated node has at least one neighbor with a different color






Coloring can also be considered for signed graphs and gain graphs.

[edit] See also



Wikimedia Commons has media related to: Graph coloring 



Uniquely colorable graph
Critical graph
Graph homomorphism
Mathematics of Sudoku


[edit] Notes


^ M. Kubale, History of graph coloring, in Kubale (2004)
^ van Lint, Wilson & 2001 (Chap. 33)
^ Jensen, Toft & 1995 (p. 2)
^ Zykov (1949)
^ Brooks (1941)
^ Zykov (1949)
^ Wilf (1986)
^ Sekine, Imai & Tani (1995)
^ Welsh & Powell (1967)
^ Brèlaz (1979)
^ Garey, Johnson & Stockmeyer (1974)
^ Halldórsson (1993)
^ Zuckerman (2007)
^ Guruswami & Khanna (2000)
^ Khot (2001)
^ Jaeger, Vertigan & Welsh (1990)
^ Goldberg & Jerrum (2008)
^ Holyer (1981)
^ Crescenzi & Kann (1998)
^ Cole & Vishkin (1986), see also Cormen, Leiserson & Rivest (1990, Section 30.5)
^ Linial (1992)
^ Goldberg, Plotkin & Shannon (1988)
^ Marx (2004)
^ Chaitin (1982)



[edit] References


Brèlaz, D. (1979), "New methods to color the vertices of a graph", Communications of the Assoc. of Comput. Machinery 22: 251-256 
Brooks, R. L. (1941), "On colouring the nodes of a network", Proc. Cambridge Phil. Soc. 37: 194–197 
de Bruijn, N. G.; Erdős, P. (1951), "A colour problem for infinite graphs and a problem in the theory of relations", Nederl. Akad. Wetensch. Proc. Ser. A 54: 371–373  (= Indag. Math. 13)
Chaitin, G. J. (1982), "Register allocation & spilling via graph colouring", Proc. 1982 SIGPLAN Symp. Compiler constr., pp. 98–105 
Cole, R.; Vishkin, U. (1986), "Deterministic coin tossing with applications to optimal parallel list ranking", Information and Control 70 (1): 32–53, doi:10.1016/S0019-9958(86)80023-7 
Cormen, T. H.; Leiserson, C. E.; Rivest, R. L. (1990), Introduction to Algorithms (1st ed.), The MIT Press 
Garey, M. R.; Johnson, D. S. (1979), Computers and Intractability: A Guide to the Theory of NP-Completeness, W.H. Freeman, ISBN 0-7167-1045-5 
Garey, M. R.; Johnson, D. S.; Stockmeyer, L. (1974), "Some simplified NP-complete problems", Proceedings of the sixth annual ACM Symposium on Theory of Computing, pp. 47-63, http://portal.acm.org/citation.cfm?id=803884 
Goldberg, L. A.; Jerrum, M. (July 2008), "Inapproximability of the Tutte polynomial", Information and Computation 206 (7): 908-929, doi:10.1016/j.ic.2008.04.003 
Goldberg, A. V.; Plotkin, S. A.; Shannon, G. E. (1988), "Parallel symmetry-breaking in sparse graphs", SIAM Journal on Discrete Mathematics 1 (4): 434–446, doi:10.1137/0401044 
Guruswami, V.; Khanna, S. (2000), "On the hardness of 4-coloring a 3-colorable graph.", Proceedings of the 15th annual IEEE Conference on Computational Complexity, pp. 188–197 


Halldórsson, M. M. (1993), "A still better performance guarantee for approximate graph coloring", Inform. Process. Lett. 45 


Holyer, I. (1981), "The NP-completeness of edge-coloring", SIAM J. Comp. 10: 718-720 
Crescenzi, P.; Kann, V. (December 1998), "How to find the best approximation results — a follow-up to Garey and Johnson", ACM SIGACT News 
Jaeger, F.; Vertigan, D. L.; Welsh, D. J. A. (1990), "On the computational complexity of the Jones and Tutte polynomials", Proc. Cambridge Phil. Soc. 108: 35-53 
Jensen, T. R.; Toft, B. (1995), Graph Coloring Problems, Wiley-Interscience, New York, ISBN 0-471-02865-7 
Khot, S. (2001), "Improved inapproximability results for MaxClique, chromatic number and approximate graph coloring", Proc. 42nd Annual Symposium on Foundations of Computer Science, pp. 600–609, doi:10.1109/SFCS.2001.959936 
Kubale, M. (2004), Graph Colorings, American Mathematical Society, ISBN 0-8218-3458-4 
Linial, N. (1992), "Locality in distributed graph algorithms", SIAM Journal on Computing 21 (1): 193–201, doi:10.1137/0221015 
van Lint, J. H.; Wilson, R. M. (2001), A course in combinatorics (2nd ed.), Cambridge University Press, ISBN 0-521-80340-3. 
Marx, D. (2004), "Graph coloring problems and their applications in scheduling", Periodica Polytechnica, Proc. John von Neumann PhD Students Conference, pp. 1–2 


Sekine, K.; Imai, H.; Tani, S. (1995), "Computing the Tutte polynomial of a graph of moderate size", Algorithms and Computation, 6th International Symposium, Lecture Notes in Computer Science 1004, Cairns, Australia, December 4–6, 1995: Springer, pp. 224–233 
Welsh, D. J. A.; Powell, M. B. (1967), "An upper bound for the chromatic number of a graph and its application to timetabling problems", The Computer Journal 10 (1), doi:doi:10.1093/comjnl/10.1.85 
West, D. B. (1996), Introduction to Graph Theory, Prentice-Hall, ISBN 0-13-227828-6 
Wilf, H. S., Algorithms and Complexity, Prentice–Hall 
Zuckerman, D., "Linear degree extractors and the inapproximability of Max Clique and Chromatic Number", Theory of Computing 3: 103–128 
A. A. Zykov (1949), "On some properties of linear complexes (in Russian)", Math. Sbornik. 24: 163-188 



[edit] External links

Graph Coloring Page by Joseph Culberson (graph coloring programs)
CoLoRaTiOn by Jim Andrews and Mike Fellows is a graph coloring puzzle
GF-Graph Coloring Program [1]
Links to Graph Coloring source codes
Code for efficiently computing Tutte, Chromatic and Flow Polynomials by Gary Haggard, David J. Pearce and Gordon Royle: [2]




Retrieved from "http://en.wikipedia.org/wiki/Graph_coloring"
Categories: Graph theory | Graph coloring | NP-complete problems 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Česky
Deutsch
Ελληνικά
Español
Euskara
Français
한국어
Magyar
日本語
Polski
Русский
中文









 This page was last modified on 3 April 2009, at 21:44.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
