













LabVIEW - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "LabVIEW";
		var wgTitle = "LabVIEW";
		var wgAction = "view";
		var wgArticleId = "544733";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280001058;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); LabVIEW

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

LabVIEW






Developed by
National Instruments


Latest release
8.6.1 / 2009-02-09; 53 days ago


Operating system
Cross-platform: Windows, Mac OS X, Linux


Type
Data Acquisition, Instrument Control, Test Automation, Analysis and Signal Processing, Industrial Control, Embedded Design


License
Proprietary


Website
ni.com/labview


LabVIEW (short for Laboratory Virtual Instrumentation Engineering Workbench) is a platform and development environment for a visual programming language from National Instruments. The graphical language is named "G". Originally released for the Apple Macintosh in 1986, LabVIEW is commonly used for data acquisition, instrument control, and industrial automation on a variety of platforms including Microsoft Windows, various flavors of UNIX, Linux, and Mac OS. The latest version of LabVIEW is version 8.6.1, released in February of 2009.




Contents


1 Dataflow programming
2 Graphical programming
3 Benefits
4 Criticism
5 Repositories and libraries
6 Related software
7 See also
8 References
9 Further reading

9.1 Articles about specific applications of LabVIEW
9.2 Articles about using LabVIEW in education


10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Dataflow programming
The programming language used in LabVIEW, also referred to as G, is a dataflow programming language. Execution is determined by the structure of a graphical block diagram (the LV-source code) on which the programmer connects different function-nodes by drawing wires. These wires propagate variables and any node can execute as soon as all its input data become available. Since this might be the case for multiple nodes simultaneously, G is inherently capable of parallel execution. Multi-processing and multi-threading hardware is automatically exploited by the built-in scheduler, which multiplexes multiple OS threads over the nodes ready for execution.

[edit] Graphical programming
LabVIEW ties the creation of user interfaces (called front panels) into the development cycle. LabVIEW programs/subroutines are called virtual instruments (VIs). Each VI has three components: a block diagram, a front panel, and a connector panel. The last is used to represent the VI in the block diagrams of other, calling VIs. Controls and indicators on the front panel allow an operator to input data into or extract data from a running virtual instrument. However, the front panel can also serve as a programmatic interface. Thus a virtual instrument can either be run as a program, with the front panel serving as a user interface, or, when dropped as a node onto the block diagram, the front panel defines the inputs and outputs for the given node through the connector pane. This implies each VI can be easily tested before being embedded as a subroutine into a larger program.
The graphical approach also allows non-programmers to build programs simply by dragging and dropping virtual representations of lab equipment with which they are already familiar. The LabVIEW programming environment, with the included examples and the documentation, makes it simple to create small applications. This is a benefit on one side, but there is also a certain danger of underestimating the expertise needed for good quality "G" programming. For complex algorithms or large-scale code, it is important that the programmer possesses an extensive knowledge of the special LabVIEW syntax and the topology of its memory management. The most advanced LabVIEW development systems offer the possibility of building stand-alone applications. Furthermore, it is possible to create distributed applications, which communicate by a client/server scheme, and are therefore easier to implement due to the inherently parallel nature of G-code.

[edit] Benefits
One benefit of LabVIEW over other development environments is the extensive support for accessing instrumentation hardware. Drivers and abstraction layers for many different types of instruments and buses are included or are available for inclusion. These present themselves as graphical nodes. The abstraction layers offer standard software interfaces to communicate with hardware devices. The provided driver interfaces save program development time. The sales pitch of National Instruments is, therefore, that even people with limited coding experience can write programs and deploy test solutions in a reduced time frame when compared to more conventional or competing systems. A new hardware driver topology (DAQmxBase), which consists mainly of G-coded components with only a few register calls through NI Measurement Hardware DDK (Driver Development Kit) functions, provides platform independent hardware access to numerous data acquisition and instrumentation devices. The DAQmxBase driver is available for LabVIEW on Windows, Mac OS X and Linux platforms.
In terms of performance, LabVIEW includes a compiler that produces native code for the CPU platform. The graphical code is translated into executable machine code by interpreting the syntax and by compilation. The LabVIEW syntax is strictly enforced during the editing process and compiled into the executable machine code when requested to run or upon saving. In the latter case, the executable and the source code are merged into a single file. The executable runs with the help of the LabVIEW run-time engine, which contains some precompiled code to perform common tasks that are defined by the G language. The run-time engine reduces compile time and also provides a consistent interface to various operating systems, graphic systems, hardware components, etc. The run-time environment makes the code portable across platforms. Generally, LV code can be slower than equivalent compiled C code, although the differences often lie more with program optimization than inherent execution speed.
Many libraries with a large number of functions for data acquisition, signal generation, mathematics, statistics, signal conditioning, analysis, etc., along with numerous graphical interface elements are provided in several LabVIEW package options. The number of advanced mathematic blocks for functions such as integration, filters, and other specialized capabilities usually associated with data capture from hardware sensors is immense. In addition, LabVIEW includes a text-based programming component called MathScript with additional functionality for signal processing, analysis and mathematics. MathScript can be integrated with graphical programming using "script nodes" and uses .m file script syntax that is generally compatible with Matlab.
The fully object-oriented character of LabVIEW code allows code reuse without modifications: as long as the data types of input and output are consistent, two sub VIs are interchangeable.
The LabVIEW Professional Development System allows creating stand-alone executables and the resultant executable can be distributed an unlimited number of times. The run-time engine and its libraries can be provided freely along with the executable.
A benefit of the LabVIEW environment is the platform independent nature of the G code, which is (with the exception of a few platform-specific functions) portable between the different LabVIEW systems for different operating systems (Windows, Mac OS X and Linux). National Instruments is increasingly focusing on the capability of deploying LabVIEW code onto an increasing number of targets including devices like Phar Lap OS based LabVIEW real-time controllers, PocketPCs, PDAs, FieldPoint modules and into FPGAs on special boards.
There is a low cost LabVIEW Student Edition aimed at educational institutions for learning purposes. There is also an active community of LabVIEW users who communicate through several e-mail groups and Internet forums.

[edit] Criticism
LabVIEW is a proprietary product of National Instruments. Unlike common programming languages such as C or FORTRAN, LabVIEW is not managed or specified by a third party standards committee such as ANSI.
In addition, as of version 8, all LabVIEW installations on Windows computers require customers to contact National Instruments by Internet or phone to "activate" the product. Macintosh users are not subject to this requirement[1] The increasing dependence on the vendor suggests a possible threat to privacy and data security. For example, although National Instruments claims the process is "secure and anonymous" the immediate implication is that a legal but privately installed instance of LabVIEW seems no longer possible.
Building a stand-alone application with LabVIEW requires the Application Builder component which is included with the Professional Development System but requires a separate purchase if using the Base Package or Full Development System.[2] Compiled executables produced by the Application Builder are not truly standalone in that they also require that the LabVIEW run-time engine be installed on any target computer on which users run the application.[3] The use of standard controls requires a runtime library for any language and all major operating system suppliers supply the required libraries for common languages such as C. However, the runtime required for LabVIEW is not supplied with any operating system and is required to be specifically installed by the administrator or user. This requirement can cause problems if an application is distributed to a user who may be prepared to run the application but does not have the inclination or permission to install additional files on the host system prior to running the executable.
There is some debate as to whether LabVIEW is really a general purpose programming language (or in some cases whether it is really a programming language at all) as opposed to an application-specific development environment for measurement and automation.[4] Critics point to a lack of features, common in most other programming languages, such as native recursion and, until version 8.20, object oriented features.
Also, for an environment heavily targeted for test, LabVIEW includes no built-in functions for formally testing limits, reading a limits file, and conveniently tracking the passing or failing results. Companies tend to build their own proprietary functions for this basic feature if they choose not to use TestStand.

[edit] Repositories and libraries
OpenG, as well as LAVA Code Repository (LAVAcr), serve as repositories for a wide range of LabVIEW applications and libraries.
VI Package Manager has become the standard package manager for LabVIEW libraries. It is very similar in purpose to Ruby's RubyGems and Perl's CPAN, although it provides a graphical user interface similar to the Synaptic Package Manager. VI Package Manager provides access to a repository of the OpenG (and other) libraries for LabVIEW.


[edit] Related software
National Instruments also offers a product called Measurement Studio, which offers many of the test, measurement and control capabilities of LabVIEW, as a set of classes for use with Microsoft Visual Studio. This allows developers to harness some of LabVIEW's strengths within the text-based .NET framework. National Instruments also offers LabWindows/CVI as an alternative for ANSI C programmers.
The TRIL Centre Ireland offers the BioMobius platform as an alternate to LabVIEW which is free for research purposes.

[edit] See also

Dataflow programming
Graphical programming
Virtual instrumentation
Comparison of numerical analysis software
Fourth-generation programming language


[edit] References


^ "Product Activation FAQ". National Instruments. http://www.ni.com/support/licensing/licensefaq.htm. 
^ "Building a Stand-Alone Application". National Instruments. http://zone.ni.com/reference/en-XX/help/371361B-01/lvhowto/building_a_stand_alone_app/. 
^ "Using the LabVIEW Run-Time Engine". National Instruments. http://zone.ni.com/reference/en-XX/help/371361B-01/lvhowto/using_the_lv_run_time_eng/. 
^ Is LabVIEW a general purpose programming language?



[edit] Further reading

Peter A. Blume: The LabVIEW Style Book, February 27 2007, Prentice Hall. Part of the National Instruments Virtual Instrumentation Series series. ISBN 0-13-145835-3
Jeffrey Travis, Jim Kring: LabVIEW for Everyone: Graphical Programming Made Easy and Fun, 3rd Edition, July 27 2006, Prentice Hall. Part of the National Instruments Virtual Instrumentation Series series. ISBN 0-13-185672-3


[edit] Articles about specific applications of LabVIEW

Desnica V, Schreiner M (October 2006). "A LabVIEW-controlled portable x-ray fluorescence spectrometer for the analysis of art objects". X-Ray Spectrometry 35 (5): 280–286. doi:10.1002/xrs.906. http://www3.interscience.wiley.com/cgi-bin/abstract/112748693/ABSTRACT. 
Keleshis C, Ionita C, Rudin S (June 2006). "Labview [sic] graphical user interface for micro angio-fluoroscopic high resolution detector". Medical Physics 33 (6): 2007. doi:10.1118/1.2240285. http://scitation.aip.org/getabs/servlet/GetabsServlet?prog=normal&id=MPHYA6000033000006002007000001&idtype=cvips&gifs=Yes. 
Fedak W, Bord D, Smith C, Gawrych D, Lindeman K (May 2003). "Automation of the Franck-Hertz experiment and the Tel-X-Ometer x-ray machine using LABVIEW". American Journal of Physics (AAPT) 71 (5): 501–506. doi:10.1119/1.1527949. http://scitation.aip.org/getabs/servlet/GetabsServlet?prog=normal&id=AJPIAS000071000005000501000001&idtype=cvips&gifs=Yes. 


[edit] Articles about using LabVIEW in education

Belletti A, Borromei R, Ingletto G (September 2006). "Teaching physical chemistry experiments with a computer simulation by LabVIEW". Journal of Chemical Education (ACS) 83 (9): 1353–1355. http://jchemed.chem.wisc.edu/Journal/Issues/2006/Sep/abs1353.html. 
Moriarty PJ, Gallagher BL, Mellor CJ, Baines RR (October 2003). "Graphical computing in the undergraduate laboratory: Teaching and interfacing with LabVIEW". American Journal of Physics (AAPT) 71 (10): 1062–1074. doi:10.1119/1.1582189. http://scitation.aip.org/getabs/servlet/GetabsServlet?prog=normal&id=AJPIAS000071000010001062000001&idtype=cvips&gifs=Yes. 
Lauterburg, Urs (June 2001). "LabVIEW in Physics Education" (PDF). A white paper about using LabVIEW in physics demonstration and laboratory experiments and simulations.. http://www.clab.unibe.ch/labview/whitepaper/LV-PhysicsWPScreen.pdf. 
Drew SM (December 1996). "Integration of national instruments' LabVIEW software into the chemistry curriculum". Journal of Chemical Education (ACS) 73 (12): 1107–1111. http://jchemed.chem.wisc.edu/Journal/Issues/1996/Dec/abs1107.html. 
Muyskens MA, Glass SV, Wietsma TW, Gray TM (December 1996). "Data acquisition in the chemistry laboratory using LabVIEW software". Journal of Chemical Education (ACS) 73 (12): 1112–1114. http://jchemed.chem.wisc.edu/Journal/Issues/1996/Dec/abs1112.html. 
Ogren PJ, Jones TP (December 1996). "Laboratory interfacing using the LabVIEW software package". Journal of Chemical Education (ACS) 73 (12): 1115–1116. http://jchemed.chem.wisc.edu/Journal/Issues/1996/Dec/abs1115.html. 
Trevelyan, J.P. (June 2004). "10 Years Experience with Remote Laboratories" (PDF). International Conference on Engineering Education Research (ACS). http://telerobot.mech.uwa.edu.au/Information/Trevelyan-INEER-2004.pdf. 


[edit] External links

Official Home Page - The National Instruments web site for the LabVIEW product line.

LabVIEW Help - NI's entire set of online help documentation for LabVIEW 8.20.
Official LabVIEW Community Home Page - NI's "LabVIEW Zone" web site.


LAVA (LabVIEW Advanced Virtual Architects) - Independent community, with discussion forums and a code repository.
Info-LabVIEW - A LabVIEW electronic mailing list
OpenG - Open-source LabVIEW utilities.
The LabVIEW Wiki - A user editable LabVIEW knowledge base powered by MediaWiki.
Free, online LabVIEW programming course - This course was authored by NI, and is hosted by Connexions.
LabVIEW user interfaces Gallery - These applications were designed and developed by Carlos Calderón
LabVIEW FPGA Labs - Labs for LabVIEW FPGA on Xilinx Spartan3E Starter board
LabVIEW Portal








v • d • e

Numerical software





Open source

ADMB · FreeMat · GNU Octave · gretl · R · Scilab






Retail

GAUSS · LabVIEW · MATLAB · Mathematica






List of numerical analysis software · Comparison of numerical analysis software








Retrieved from "http://en.wikipedia.org/wiki/LabVIEW"
Categories: Data analysis software | Numerical software | Visual programming languages | Numerical programming languages | Linux numerical analysis software | Cross-platform software 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Български
Català
Deutsch
Español
Français
Italiano
עברית
Nederlands
日本語
Polski
Português
Русский
Suomi
Tiếng Việt
Türkçe
中文









 This page was last modified on 27 March 2009, at 13:07.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
