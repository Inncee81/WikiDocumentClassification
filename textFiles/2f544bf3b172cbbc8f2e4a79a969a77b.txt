













PL/SQL - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "PL/SQL";
		var wgTitle = "PL/SQL";
		var wgAction = "view";
		var wgArticleId = "24106";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279412285;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-plsql {line-height: normal;}
.source-plsql li, .source-plsql pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for plsql
 * CSS class: source-plsql, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-plsql .de1, .source-plsql .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-plsql  {}
.source-plsql .head {}
.source-plsql .foot {}
.source-plsql .imp {font-weight: bold; color: red;}
.source-plsql .ln-xtra {color: #cc0; background-color: #ffc;}
.source-plsql li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-plsql li.li2 {font-weight: bold;}
.source-plsql .kw1 {color: #00F;}
.source-plsql .kw2 {color: #000;}
.source-plsql .kw3 {color: #00F;}
.source-plsql .kw4 {color: #F00;}
.source-plsql .kw5 {color: #800;}
.source-plsql .co1 {color: #080; font-style: italic;}
.source-plsql .coMULTI {color: #080; font-style: italic;}
.source-plsql .es0 {color: #000; font-weight: bold;}
.source-plsql .br0 {color: #00F;}
.source-plsql .st0 {color: #F00;}
.source-plsql .nu0 {color: #800;}
.source-plsql .me0 {color: #0F0;}
.source-plsql .sc0 {color: #0F0;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); PL/SQL

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
PL/SQL (Procedural Language/Structured Query Language) is Oracle Corporation's proprietary procedural extension to the SQL database language, used in the Oracle database. Some other SQL database management systems offer similar extensions to the SQL language. PL/SQL's syntax strongly resembles that of Ada, and just like Ada compilers of the 1980s the PL/SQL runtime system uses Diana as intermediate representation.
The key strength of PL/SQL is its tight integration with the Oracle database.
PL/SQL is one of three languages embedded in the Oracle Database, the other two being SQL and Java.




Contents


1 Functionality
2 Basic code structure

2.1 Functions
2.2 Procedures
2.3 Anonymous Blocks
2.4 Packages
2.5 Numeric variables
2.6 Character variables
2.7 Date variables
2.8 Datatypes for specific columns


3 Conditional Statements
4 Array handling
5 Looping

5.1 LOOP statements
5.2 FOR loops
5.3 Cursor FOR loops

5.3.1 Example




6 Similar languages
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Functionality
PL/SQL supports variables, conditions, arrays, and exceptions. Implementations from version 8 of Oracle Database onwards have included features associated with object-orientation and some constructs such as loops. PL/SQL, however, as a Turing-complete procedural language that fills in these gaps, allows Oracle database developers to interface with the underlying relational database in an imperative manner. SQL statements can make explicit in-line calls to PL/SQL functions, or can cause PL/SQL triggers to fire upon pre-defined Data Manipulation Language (DML) events.
PL/SQL stored procedures (functions, procedures, packages, and triggers) performing DML will get compiled into an Oracle database: to this extent, their SQL code can undergo syntax-checking. Programmers working in an Oracle database environment can construct PL/SQL blocks of functionality to serve as procedures, functions; or they can write in-line segments of PL/SQL within SQL*Plus scripts.
While programmers can readily incorporate SQL DML statements into PL/SQL (as cursor definitions, for example, or using the SELECT ... INTO syntax), Data Definition Language (DDL) statements such as CREATE TABLE/DROP INDEX etc. require the use of "Dynamic SQL". Earlier versions of Oracle Database required the use of a complex built-in DBMS_SQL package for Dynamic SQL where the system needed to explicitly parse and execute an SQL statement. Later versions have included an EXECUTE IMMEDIATE syntax called "Native Dynamic SQL" which considerably simplifies matters. Any use of DDL in an Oracle database will result in an implicit COMMIT. Programmers can also use Dynamic SQL to execute DML where they do not know the exact content of the statement in advance.
PL/SQL offers several pre-defined packages for specific purposes. Such PL/SQL packages include:

DBMS_OUTPUT - for output operations to non-database destinations
DBMS_JOB - for running specific procedures/functions at a particular time (i.e. scheduling)
DBMS_XPLAN - for formatting Explain Plan output
DBMS_SESSION - provides access to SQL ALTER SESSION and SET ROLE statements, and other session information.
DBMS_METADATA - for extracting meta data from the data dictionary (such as DDL statements)
UTL_FILE - for reading and writing files on disk
UTL_HTTP - for making requests to web servers from the database
UTL_SMTP - for sending mail from the database (via an SMTP server)

Oracle Corporation customarily adds more packages and/or extends package functionality with each successive release of Oracle Database.

[edit] Basic code structure
Anonymous blocks are the basis of standalone PL/SQL scripts, and have the following structure:


<<label>>
DECLARE
	TYPE / item / FUNCTION / PROCEDURE declarations
BEGIN
      Statements
EXCEPTION
	EXCEPTION handlers
END label;

The <<label>> and the DECLARE and EXCEPTION sections are optional.
Exceptions, errors which arise during the execution of the code, have one of two types:

Predefined exceptions
User-defined exceptions.

User-defined exceptions are always raised explicitly by the programmers, using the RAISE or RAISE_APPLICATION_ERROR commands, in any situation where they have determined that it is impossible for normal execution to continue. RAISE command has the syntax:


RAISE <exception name>;

Oracle Corporation has pre-defined several exceptions like NO_DATA_FOUND, TOO_MANY_ROWS, etc. Each exception has a SQL Error Number and SQL Error Message associated with it. Programmers can access these by using the SQLCODE and SQLERRM functions.
The DECLARE section defines and (optionally) initialises variables. If not initialised specifically, they default to NULL.
For example:


DECLARE
  number1 NUMBER(2);
  number2 NUMBER(2)    := 17;             -- value defalt 
  text1   VARCHAR2(12) := 'Hello world';
  text2   DATE         := SYSDATE;        -- current date and time
BEGIN
  SELECT street_number
    INTO number1
    FROM address
   WHERE name = 'Billa';
END;

The symbol := functions as an assignment operator to store a value in a variable.
The major datatypes in PL/SQL include NUMBER, INTEGER, CHAR, VARCHAR2, DATE, TIMESTAMP, TEXT etc.

[edit] Functions
Functions in PL/SQL are a collection of SQL and PL/SQL statements that perform a task and should return a value to the calling environment.


CREATE OR REPLACE FUNCTION <function_name> [(input/output variable declarations)] RETURN return_type
<IS|AS>
	[declaration block]
BEGIN
	<PL/SQL block WITH RETURN statement>
[EXCEPTION
	EXCEPTION block]
END;


[edit] Procedures
Procedures are the same as Functions, in that they are also used to perform some task with the difference being that procedures cannot be used in a SQL statement and although they can have multiple out parameters they do not return a value.

[edit] Anonymous Blocks
Anonymous PL/SQL blocks can be embedded in an Oracle Precompiler or OCI program. At run time, the program, lacking a local PL/SQL engine, sends these blocks to the Oracle server, where they are compiled and executed. Likewise, interactive tools such as SQL*Plus and Enterprise Manager, lacking a local PL/SQL engine, must send anonymous blocks to Oracle.

[edit] Packages
Packages are the combination of Functions, Procedures,Variable,Constants & Cursors...etc.Which is used to group the related things make for reusable purpose. Packages usually have two parts, a specification and a body, although sometimes the body is unnecessary. The specification (spec for short) is the interface to your applications; it declares the types, variables, constants, exceptions, cursors, and subprograms available for use. The body fully defines cursors and subprograms, and so implements the spec.

[edit] Numeric variables


variable_name NUMBER(P[,S]) := VALUE;

To define a numeric variable, the programmer appends the variable type NUMBER to the name definition. To specify the (optional) precision(P) and the (optional) scale (S), one can further append these in round brackets, separated by a comma. ("Precision" in this context refers to the number of digits which the variable can hold, "scale" refers to the number of digits which can follow the decimal point.)
A selection of other datatypes for numeric variables would include: binary_float, binary_double, dec, decimal, double precision, float, integer, int, numeric, real, smallint, binary_integer

[edit] Character variables
variable_name varchar2(L) := 'Text';
To define a character variable, the programmer normally appends the variable type VARCHAR2 to the name definition. There follows in brackets the maximum number of characters which the variable can store.
Other datatypes for character variables include:

varchar, char, long, raw, long raw, nchar, nchar2, clob, blob, bfile


[edit] Date variables
variable_name date := '01-Jan-2005';
Oracle provides a number of data types that can store dates (DATE, DATETIME, TIMESTAMP etc.), however DATE is most commonly used.
Programmers define date variables by appending the datatype code "DATE" to a variable name. The TO_DATE function can be used to convert strings to date values. The function converts the first quoted string into a date, using as a definition the second quoted string, for example:


 TO_DATE('31-12-2004','dd-mm-yyyy')

or


 TO_DATE ('31-Dec-2004','dd-mon-yyyy', 'NLS_DATE_LANGUAGE = American')

To convert the dates to strings one uses the function TO_CHAR (date_string, format_string).
PL/SQL also supports the use of ANSI date and interval literals.[1] The following clause gives an 18-month range:


WHERE dateField BETWEEN DATE '2004-12-31' - INTERVAL '1-6' YEAR TO MONTH
    AND DATE '2004-12-31'


[edit] Datatypes for specific columns
Variable_name Table_name.Column_name%type;
This syntax defines a variable of the type of the referenced column on the referenced tables.
Programmers specify user-defined datatypes with the syntax:

type data_type is record (field_1 type_1 :=xyz, field_2 type_2 :=xyz, ..., field_n type_n :=xyz);

For example:


DECLARE
    TYPE t_address IS  RECORD (
        name address.name%TYPE,
        street address.street%TYPE,
        street_number address.street_number%TYPE,
        postcode address.postcode%TYPE);
    v_address t_address;
BEGIN
    SELECT name, street, street_number, postcode INTO v_address FROM address WHERE ROWNUM = 1;
END;

This sample program defines its own datatype, called t_address, which contains the fields name, street, street_number and postcode.
so according the example we are able to copy the data from database to the fields in program. Using this datatype the programmer has defined a variable called v_address and loaded it with data from the ADDRESS table.
Programmers can address individual attributes in such a structure by means of the dot-notation, thus: "v_address.street := 'High Street';"

[edit] Conditional Statements
The following code segment shows the IF-THEN-ELSIF construct. The ELSIF and ELSE parts are optional so it is possible to create simpler IF-THEN or, IF-THEN-ELSE constructs.


IF x = 1 THEN
   sequence_of_statements_1;
ELSIF x = 2 THEN
   sequence_of_statements_2;
ELSIF x = 3 THEN
   sequence_of_statements_3;
ELSIF x = 4 THEN
   sequence_of_statements_4;
ELSIF x = 5 THEN
   sequence_of_statements_5;
ELSE
   sequence_of_statements_N;
END IF;

The CASE statement simplifies some large IF-THEN-ELSE structures.


CASE
   WHEN x = 1 THEN sequence_of_statements_1;
   WHEN x = 2 THEN sequence_of_statements_2;
   WHEN x = 3 THEN sequence_of_statements_3;
   WHEN x = 4 THEN sequence_of_statements_4;
   WHEN x = 5 THEN sequence_of_statements_5;
   ELSE sequence_of_statements_N;
END CASE;

CASE statement can be used with predefined selector:


CASE x
   WHEN 1 THEN sequence_of_statements_1;
   WHEN 2 THEN sequence_of_statements_2;
   WHEN 3 THEN sequence_of_statements_3;
   WHEN 4 THEN sequence_of_statements_4;
   WHEN 5 THEN sequence_of_statements_5;
   ELSE sequence_of_statements_N;
END CASE;


[edit] Array handling
PL/SQL refers to arrays as "collections". The language offers three types of collections:

Index-by tables (associative arrays)
Nested tables
Varrays (variable-size arrays)

Programmers must specify an upper limit for varrays, but need not for index-by tables or for nested tables. The language includes several collection methods used to manipulate collection elements: for example FIRST, LAST, NEXT, PRIOR, EXTEND, TRIM, DELETE, etc. Index-by tables can be used to simulate associative arrays, as in this example of a memo function for Ackermann's function in PL/SQL.

[edit] Looping
As a procedural language by definition, PL/SQL provides several iteration constructs, including basic LOOP statements, WHILE loops, FOR loops, and Cursor FOR loops.

[edit] LOOP statements
Syntax:


<<parent_loop>>
LOOP
	statements
 
	<<child_loop>>
	LOOP
		statements
		EXIT parent_loop WHEN <condition>; -- Terminates both loops
		EXIT WHEN <condition>; -- Returns control to parent_loop
	END LOOP;
 
	EXIT WHEN <condition>;
END LOOP parent_loop;

Loops can be terminated by using the EXIT keyword, or by raising an exception.

[edit] FOR loops

[edit] Cursor FOR loops


FOR RecordIndex IN (SELECT person_code FROM people_table)
LOOP
  DBMS_OUTPUT.PUT_LINE(RecordIndex.person_code);
END LOOP;

Cursor-for loops automatically open a cursor, read in their data and close the cursor again
As an alternative, the PL/SQL programmer can pre-define the cursor's SELECT-statement in advance in order (for example) to allow re-use or to make the code more understandable (especially useful in the case of long or complex queries).


DECLARE
  CURSOR cursor_person IS
    SELECT person_code FROM people_table;
BEGIN
  FOR RecordIndex IN cursor_person
  LOOP
    DBMS_OUTPUT.PUT_LINE(RecordIndex.person_code);
  END LOOP;
END;

The concept of the person_code within the FOR-loop gets expressed with dot-notation ("."):


RecordIndex.person_code


[edit] Example


 DECLARE
     var NUMBER;
 BEGIN
     /*N.B. for loop variables in pl/sql are new declarations, with scope only inside the loop */ 
     FOR var IN 0 .. 10 LOOP 
          DBMS_OUTPUT.put_line(var);
     END LOOP;
 
     IF (var IS NULL) THEN
          DBMS_OUTPUT.put_line('var is null');
     ELSE
          DBMS_OUTPUT.put_line('var is not null');
     END IF;
 END;

Output:

 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 var is null


[edit] Similar languages
PL/SQL functions analogously to the embedded procedural languages associated with other relational databases. Sybase ASE and Microsoft SQL Server have Transact-SQL, PostgreSQL has PL/pgSQL (which tries to emulate PL/SQL to an extent), and IBM DB2 includes SQL Procedural Language,[2] which conforms to the ISO SQL’s SQL/PSM standard.
The designers of PL/SQL modelled its syntax on that of Ada. Both Ada and PL/SQL have Pascal as a common ancestor, and so PL/SQL also resembles Pascal in numerous aspects. The structure of a PL/SQL package closely resembles the basic Pascal's program structure, or a Borland Delphi unit. Programmers can define global data-types, constants and static variables, public and private, in a PL/SQL package.
PL/SQL also allows for the definition of classes and instantiating these as objects in PL/SQL code. This resembles usages in object-oriented programming languages like Object Pascal, C++ and Java. PL/SQL refers to a class as an "Advanced Data Type" (ADT) or "User Defined Type"(UDT), and defines it as an Oracle SQL data-type as opposed to a PL/SQL user-defined type, allowing its use in both the Oracle SQL Engine and the Oracle PL/SQL engine. The constructor and methods of an Advanced Data Type are written in PL/SQL. The resulting Advanced Data Type can operate as an object class in PL/SQL. Such objects can also persist as column values in Oracle database tables.
PL/SQL does not resemble Transact-SQL, despite superficial similarities. Porting code from one to the other usually involves non-trivial work, not only due to the differences in the feature sets of the two languages, but also due to the very significant differences in the way Oracle and SQL Server deal with concurrency and locking.
The Fyracle project aims to enable the execution of PL/SQL code in the open-source Firebird database.

[edit] References


^ "Literals". Oracle® Database SQL Reference 10g Release 2 (10.2). http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/sql_elements003.htm#sthref365. Retrieved on 2009-03-20. 
^ SQL PL







This article includes a list of references or external links, but its sources remain unclear because it lacks inline citations. Please improve this article by introducing more precise citations where appropriate. (February 2008)







This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (January 2008)





Wikibooks has a book on the topic of
Programming:Oracle PL/SQL Cheatsheet




Feuerstein, Steven; with Bill Pribyl (2005). Oracle PL/SQL Programming (4th ed. ed.). O'Reilly & Associates. ISBN 0-596-00977-1. 
Naudé, Frank (June 9, 2005). "Oracle PL/SQL FAQ rev 2.08". http://www.orafaq.com/faqplsql.htm. 


[edit] External links

Oracle FAQ: PL/SQL
Oracle Technology Center




Retrieved from "http://en.wikipedia.org/wiki/PL/SQL"
Categories: Oracle software | SQL | Ada programming language family | Data-centric programming languagesHidden categories: Articles lacking in-text citations | Articles needing additional references from January 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Česky
Deutsch
Español
Français
한국어
Italiano
עברית
Magyar
Nederlands
日本語
Polski
Português
Română
Русский
Slovenčina
Svenska
ไทย
Тоҷикӣ
Türkçe
Українська
中文









 This page was last modified on 24 March 2009, at 18:30.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
