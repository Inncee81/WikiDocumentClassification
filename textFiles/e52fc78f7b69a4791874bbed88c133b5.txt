













Executable and Linkable Format - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Executable_and_Linkable_Format";
		var wgTitle = "Executable and Linkable Format";
		var wgAction = "view";
		var wgArticleId = "9914";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 276657546;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Executable and Linkable Format

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

ELF

Filename extension
none, .o, .so, .elf


Developed by
Unix System Laboratories


Type of format
Binary, executable, object, shared libraries, core dump


In computing, the Executable and Linking Format (ELF, formerly called Extensible Linking Format) is a common standard file format for executables, object code, shared libraries, and core dumps. First published in the System V Application Binary Interface specification,[1] and later in the Tool Interface Standard,[2] it was quickly accepted among different vendors of Unix systems. In 1999 it was chosen as the standard binary file format for Unix and Unix-like systems on x86 by the 86open project.
Unlike many proprietary executable file formats, ELF is very flexible and extensible, and it is not bound to any particular processor or architecture. This has allowed it to be adopted by many different operating systems on many different platforms.
The ELF format has replaced older executable formats such as a.out and COFF in many Unix-like operating systems such as Linux, Solaris, IRIX, FreeBSD, NetBSD, OpenBSD, DragonFly BSD, Syllable, and HP-UX (except for 32-bit PA-RISC programs which continue to use SOM). ELF has also seen some adoption in non-Unix operating systems, such as the Itanium version of OpenVMS, and BeOS Revision 4 and later for x86 based computers (where it replaced the Portable Executable format; the PowerPC version stayed with Preferred Executable Format). The PlayStation Portable, PlayStation 2, PlayStation 3, Wii, Nintendo DS and GP2X consoles also use ELF. AmigaOS 4 and MorphOS also running on PowerPC machines, use ELF. On the Amiga platform the ELF executable has replaced the previous EHF (Extended Hunk Format) which was used on Amigas equipped with PPC processor expansion cards. The Symbian OS v9 uses E32Image[3] format that is based on ELF file format.
Most Sony Ericsson (for example, the W800i, W610, K790, etc.), some Siemens (SGOLD and SGOLD2 platforms: from Siemens C65 to S75 and BenQ-Siemens E71/EL71) and Motorola (for example, the E398, SLVR L7, v360, v3i and all phone LTE2 which has the patch apply) phones can run ELF files through the use of a patch that adds assembly code to the main firmware (Known as the ELFPack, in the underground modding culture).
The ELF file format is also used as a generic object and executable format for binary images used with embedded processors[citation needed].




Contents


1 ELF file layout
2 Tools
3 Specifications
4 86open

4.1 History


5 See also
6 References
7 Further reading
8 External links

8.1 x86open links







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] ELF file layout




An ELF file has two views: The program header shows the segments used at run-time, whereas the section header lists the set of sections of the binary.


Each ELF file is made up of one ELF header, followed by file data. The file data can include:

Program header table, describing zero or more segments
Section header table, describing zero or more sections
Data referred to by entries in the program header table, or the section header table

The segments contain information that is necessary for runtime execution of the file, while sections contain important data for linking and relocation. Each byte in the entire file is taken by no more than one section at a time, but there can be orphan bytes, which are not covered by a section. In the normal case of a Unix executable one or more sections are enclosed in one segment.

[edit] Tools

readelf is a Unix binary utility that displays information about one or more ELF files. A GPL implementation is provided by GNU Binutils.
elfdump is a Solaris command for viewing ELF information in an elf file.
objdump provides a wide range of information about ELF files and other object formats.
Both readelf and objdump use the Binary File Descriptor library as a back-end to structure the ELF data.


[edit] Specifications

Generic:

System V Application Binary Interface Edition 4.1 (1997-03-18)
System V ABI Update (December 2003)
ELF-64 Object File Format Version 1.5 Draft 2 (May 1998)


AMD64:

System V ABI, AMD64 Supplement


ARM:

ELF for the ARM Architecture


IA32:

System V ABI, IA32 Supplement


IA64:

Itanium Software Conventions and Runtime Guide (September 2000)


M32R:

M32R ELF ABI Supplement Version 1.2 (2004-08-26)


MIPS:

System V ABI, MIPS RISC Processor Supplement
MIPS EABI documentation (2003-06-11)


Motorola 6800:

Motorola 8 and 16 bit Embedded ABI


PA-RISC:
PowerPC:

System V ABI, PPC Supplement
PowerPC Embedded Application Binary Interface 32-Bit Implementation (1995-10-01)
64-bit PowerPC ELF Application Binary Interface Supplement Version 1.9 (2004)


SPARC:

System V ABI, SPARC Supplement


S/390:

S/390 ELF ABI Supplement


zSeries:

zSeries ELF ABI Supplement


Symbian OS 9:

E32Image file format on Symbian OS 9




[edit] 86open
86open was a project to form consensus on a common binary file format for Unix and Unix-like operating systems on the common PC compatible x86 architecture, so as to encourage software developers to port to the architecture.[4]
The format eventually chosen was ELF, specifically the Linux implementation of ELF, after it had turned out to be a de facto standard supported by all involved vendors and operating systems.

[edit] History
The group started email discussions in 1997 and first met in person at the Santa Cruz Operation offices on 1997-08-22.
The steering committee was Marc Ewing, Dion Johnson, Evan Leibovitch, Bruce Perens, Andrew Roach, Bryan Sparks and Linus Torvalds. Other people on the project were Tim Bird, Keith Bostic, Chuck Cranor, Michael Davidson, Chris G. Demetriou, Ulrich Drepper, Don Dugger, Steve Ginzburg, Jon "maddog" Hall, Ron Holt, Jordan Hubbard, Dave Jensen, Kean Johnston, Andrew Josey, Robert Lipe, Bela Lubkin, Tim Marsland, Greg Page, Ronald Joe Record, Tim Ruckle, Joel Silverstein, Chia-pi Tien and Erik Troan. Operating systems and companies represented were BeOS, BSDI, FreeBSD, Linux, NetBSD, SCO and SunSoft, Inc..
The project progressed and in mid-1998, SCO began assisting in the development of lxrun, an open-source compatibility layer capable of running Linux binaries on OpenServer, UnixWare, and Solaris. SCO announced official support of lxrun at LinuxWorld in March 1999. Sun Microsystems began officially supporting lxrun for Solaris in early 1999,[5] and has since moved to integrated support of the Linux binary format via Solaris Containers for Linux Applications.
With the BSDs having long supported Linux binaries (through a compatibility layer) and the main x86 Unix vendors having added support for the format, the project decided that Linux ELF was the format chosen by the industry and "declare[d] itself dissolved" on July 25, 1999.[6]

[edit] See also

DWARF - Debug With Attributed Record Format
Application binary interface


[edit] References


^ System V Application Binary Interface Edition 4.1 (1997-03-18)
^ Tool Interface Standard (TIS) Executable and Linking Format (ELF) Specification Version 1.2 (May 1995)
^ Symbian OS executable file format
^ Leibovitch, Evan (1997-12-23). "86Open Frequently-Asked Questions". http://www.telly.org/86open-faq. Retrieved on 2007-06-06. 
^ Record, Ronald (1998-05-21). "Bulletin on status of 86open at SCO". http://www.mavetju.org/mail/view_message.php?list=freebsd-emulation&id=361608. Retrieved on 2008-05-06. 
^ Leibovitch, Evan (1999-07-25). "The86open Project - FINAL UPDATE". http://www.telly.org/86open/. Retrieved on 2007-05-06. 



[edit] Further reading

John R. Levine (October 1999). Linkers and Loaders. Morgan-Kauffman. ISBN 1-55860-496-0. http://www.iecc.com/linker/. 
Ulrich Drepper (2006-08-20). How To Write Shared Libraries. 4.0. http://people.redhat.com/drepper/dsohowto.pdf. Retrieved on 2007-06-20. 
An unsung hero: The hardworking ELF by Peter Seebach (2005-12-20)
LibElf and GElf — A Library to Manipulate ELF Files by Neelakanth Nadgir (August 2001)
The ELF Object File Format by Dissection by Eric Youngdale (1995-05-01)
A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux by Brian Raiter
ELF relocation into non-relocatable objects by Julien Vanegue (2003-08-13)
Embedded ELF debugging without ptrace by the ELFsh team (2005-08-01)


[edit] External links

Elf library routines
LGPL ELF object file access library
ELFIO: a C++ library for reading and generating files in the ELF binary format.
FreeBSD Handbook — Binary formats
FreeBSD elf(5) manual page
NetBSD ELF FAQ
Sun's Linker and Libraries Guide
The ERESI project : reverse engineering on ELF-based operating systems


[edit] x86open links

Linux Today article on 86open July 26, 1999
Announcement of 86open on Debian Announce mailing list October 10, 1997, Bruce Perens
Declaration of Ulrich Drepper (PDF) in The SCO Group vs IBM, September 19, 2006
86open and ELF discussion on Groklaw, August 13, 2006








v • d • e

Executable file formats






a.out  · COFF  · COM  · ECOFF  · ELF  · Hunk  · Mach-O  · MZ  · NE  · PE  · PEF  · XCOFF









Retrieved from "http://en.wikipedia.org/wiki/Executable_and_Linkable_Format"
Categories: Executable file formatsHidden categories: All articles with unsourced statements | Articles with unsourced statements since June 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Deutsch
Español
Français
Italiano
Nederlands
日本語
Polski
Português
Русский
Slovenčina
Українська









 This page was last modified on 12 March 2009, at 02:09.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
