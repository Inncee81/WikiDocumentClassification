













Integrated development environment - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Integrated_development_environment";
		var wgTitle = "Integrated development environment";
		var wgAction = "view";
		var wgArticleId = "15305";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281490975;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Integrated development environment

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




Anjuta, a C and C++ IDE for the GNOME environment


An integrated development environment (IDE) also known as integrated design environment or integrated debugging environment is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a:

Source code editor
Compiler and/or interpreter
Build automation tools
Debugger

Sometimes a version control system and various tools are integrated to simplify the construction of a GUI. Many modern IDEs also have a class browser, an object inspector, and a class hierarchy diagram, for use with object-oriented software development.[1]




Contents


1 Overview
2 History
3 Topics

3.1 Visual programming
3.2 Language support
3.3 Attitudes across different computing platforms


4 See also
5 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
IDEs are designed to maximize programmer productivity by providing tightly-knit components with similar user interfaces. This should mean that the programmer has much less mode switching to do than when using discrete development programs. However, because an IDE is by its very nature a complicated piece of software, this high productivity only occurs after a lengthy learning curve.
Typically an IDE is dedicated to a specific programming language, so as to provide a feature set which most closely matches the programming paradigms of the language. However, some multiple-language IDEs are in use, such as Eclipse, ActiveState Komodo, recent versions of NetBeans, Microsoft Visual Studio and WinDev.
IDEs typically present a single program in which all development is done. This program typically provides many features for authoring, modifying, compiling, deploying and debugging software. The aim is to abstract the configuration necessary to piece together command line utilities in a cohesive unit, which theoretically reduces the time to learn a language, and increases developer productivity. It is also thought that the tight integration of development tasks can further increase productivity. For example, code can be compiled while being written, providing instant feedback on syntax errors. While most modern IDEs are graphical, IDEs in use before the advent of windowing systems (such as Microsoft Windows or X11) were text-based, using function keys or hotkeys to perform various tasks (Turbo Pascal is a common example). This contrasts with software development using unrelated tools, such as vi, GCC or make.

[edit] History




GNU Emacs, an extensible editor which is commonly used as an IDE on Unix-like systems


IDEs initially became necessary when developing via a console or terminal. Early languages did not have one, since they were prepared using flowcharts, coding before being submitted to a compiler[clarification needed]. Dartmouth BASIC was the first language to be created with an IDE (and was also the first to be designed for use while sitting in front of a console or terminal). Its IDE (part of the Dartmouth Time Sharing System) was command-based, and therefore did not look much like the menu-driven, graphical IDEs prevalent today. However it integrated editing, file management, compilation, debugging and execution in a manner consistent with a modern IDE.




Keyboard Maestro [2]


Maestro I is a product from Softlab Munich and was the world's first integrated development environment[3] 1975 for software. Maestro I was installed for 22,000 programmers worldwide. Until 1989, 6,000 installations existed in the Federal Republic of Germany. Maestro I was arguably the world leader in this field during the 1970s and 1980s. Today one of the last Maestro I can be found in the Arlington Museum of Information Technology.
One of the first IDEs with a plug-in concept was Softbench. In 1995 Computerwoche commented that the use of an IDE was not well received by developers since it would fence in their creativity.

[edit] Topics

[edit] Visual programming




Eclipse, a free software IDE written in Java


There is growing interest in visual programming (not to be confused with Visual Basic or Visual C++). Visual IDEs allow users to create new applications by moving programming building blocks or code nodes to create flowcharts or structure diagrams which are then compiled or interpreted. These flowcharts often are based on the Unified Modeling Language.
This interface has been popularized with the Lego Mindstorms system, and is being actively pursued by a number of companies wishing to capitalize on the power of custom browsers like those found at Mozilla, and the power of distributed programming (cf. LabVIEW software). An early visual programming system, Max, was modelled after analog synthesizer design and has been used to develop real-time music performance software since the 1980s. Another early example was Prograph, a dataflow-based system originally developed for the Macintosh. The graphical programming environment "Grape" is used to program qfix robot kits.
This approach is also used in specialist software such as Openlab, where the end users want the flexibility of a full programming language, without the traditional learning curve associated with one.
An open source visual programming system is Mindscript, which has extended functionality for cryptology, database interfacing, etc.

[edit] Language support
Eclipse, an example of a multiple-language IDE, has Java as a base installed language. It also has plugins for C/C++, Python, Perl, Ruby, Groovy, Fortran, Cobol, PHP, JSP/Servlet, Java EE,Scala, OOD/OOP/AOP design tools and many more plugins. These all can be installed on the same IDE at the same time. They all have their own debugger and integrated IDE options, which sometimes leads to grave inconsistencies in the user interface itself due to the overwhelming amount of customizability and keyboard shortcuts.

[edit] Attitudes across different computing platforms
Many Unix programmers argue that traditional command-line POSIX tools constitute an IDE, though one with a different style of interface and under the Unix environment. Many programmers still use makefiles and their derivatives. Also, many Unix programmers use Emacs or Vim, which integrate support for many of the standard Unix build tools. Data Display Debugger is intended to be an advanced graphical front-end for many text-based debugger standard tools.
On the various Microsoft Windows platforms, command-line tools for development are seldom used. Accordingly, there are many commercial and non-commercial solutions, however each has a different design commonly creating incompatibilities. Most major compiler vendors for Windows still provide free copies of their command-line tools, including Microsoft (Visual C++, Platform SDK, Microsoft .NET Framework SDK, nmake utility), CodeGear (bcc32 compiler, make utility), and GNU (gcc, gdb, GNU make).
IDEs have always been popular on the Apple Macintosh's Mac OS, dating back to Macintosh Programmer's Workshop, Turbo Pascal, THINK Pascal and THINK C environments in the mid-1980s. Currently Mac OS X programmers can choose between limited IDEs, including native IDEs like Xcode, older IDEs like CodeWarrior, and open-source tools, such as Eclipse and Netbeans. ActiveState Komodo is a proprietary IDE supported on the Mac OS.
Some open-source IDEs such as Eclipse and Netbeans, which themselves are developed using a cross-platform language (i.e., Java), run on multiple platforms including Windows, Linux, and Mac OS.
Also, there are IDEs online. This IDEs are accesible with web browsers. Some examples are: WebDevStudio or CodeIde.

[edit] See also



Wikimedia Commons has media related to: Integrated development environments 



Comparison of integrated development environments
Computer-aided software engineering
Multiple document interface#IDE-style interface
List of software engineering topics
Rapid application development
Read-eval-print loop
PHP IDE
Software development kit
Software engineering
Utility program


[edit] References


^ Dana Nourie (2005-03-24). "Getting Started with an Integrated Development Environment". Sun Microsystems, Inc.. http://java.sun.com/developer/technicalArticles/tools/intro.html. Retrieved on 2008-09-09.Â 
^ Image credit: Arlington Museum of Information Technology
^ "Interaktives Programmieren als Systems-Schlage" from Computerwoche (German)







This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (October 2008)









vÂ â¢Â dÂ â¢Â e

Integrated development environments for C/C++





Open source

AnjutaÂ Â· Code::BlocksÂ Â· CodeLiteÂ Â· Dev-C++Â Â· EclipseÂ Â· GeanyÂ Â· GNAT Programming StudioÂ Â· KDevelopÂ Â· MonoDevelopÂ Â· NetBeansÂ Â· wxDev-C++






Freeware

Visual Studio ExpressÂ Â· Pelles CÂ Â· Sun StudioÂ Â· Turbo C++ ExplorerÂ Â· Xcode






Retail

C++ BuilderÂ Â· Visual StudioÂ Â· Turbo C++ Professional






Category Â â¢ Comparison








Retrieved from "http://en.wikipedia.org/wiki/Integrated_development_environment"
Categories: Integrated development environmentsHidden categories: All pages needing cleanup | Wikipedia articles needing clarification from March 2009 | Articles needing additional references from October 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




Â 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Ø§ÙØ¹Ø±Ø¨ÙØ©
Asturianu
à¦¬à¦¾à¦à¦²à¦¾
CatalÃ 
Äesky
Deutsch
ÎÎ»Î»Î·Î½Î¹ÎºÎ¬
EspaÃ±ol
Esperanto
ÙØ§Ø±Ø³Û
FranÃ§ais
íêµ­ì´
Bahasa Indonesia
Italiano
×¢××¨××ª
àº¥àº²àº§
LietuviÅ³
Magyar
Nederlands
æ¥æ¬èª
Polski
PortuguÃªs
RomÃ¢nÄ
Ð ÑÑÑÐºÐ¸Ð¹
SlovenÄina
Suomi
Svenska
à¹à¸à¸¢
Tiáº¿ng Viá»t
TÃ¼rkÃ§e
Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°
ä¸­æ









 This page was last modified on 3 April 2009, at 12:45.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  WikipediaÂ® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
