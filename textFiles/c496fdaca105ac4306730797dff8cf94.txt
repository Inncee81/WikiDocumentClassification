













Java Database Connectivity - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Java_Database_Connectivity";
		var wgTitle = "Java Database Connectivity";
		var wgAction = "view";
		var wgArticleId = "42755";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281042018;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-java5 {line-height: normal;}
.source-java5 li, .source-java5 pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java5
 * CSS class: source-java5, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java5 .de1, .source-java5 .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java5  {}
.source-java5 .head {}
.source-java5 .foot {}
.source-java5 .imp {font-weight: bold; color: red;}
.source-java5 .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java5 li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java5 li.li2 {font-weight: bold;}
.source-java5 .kw1 {color: #b1b100;}
.source-java5 .kw2 {color: #000000; font-weight: bold;}
.source-java5 .kw3 {color: #993333;}
.source-java5 .kw4 {color: #b13366;}
.source-java5 .kw5 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw6 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw7 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw8 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw9 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw10 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw11 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw12 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw13 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw14 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw15 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw16 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw17 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw18 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw19 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw20 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw21 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw22 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw23 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw24 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw25 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw26 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw27 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw28 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw29 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw30 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw31 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw32 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw33 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw34 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw35 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw36 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw37 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw38 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw39 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw40 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw41 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw42 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw43 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw44 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw45 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw46 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw47 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw48 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw49 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw50 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw51 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw52 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw53 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw54 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw55 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw56 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw57 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw58 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw59 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw60 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw61 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw62 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw63 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw64 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw65 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw66 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw67 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw68 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw69 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw70 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw71 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw72 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw73 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw74 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw75 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw76 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw77 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw78 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw79 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw80 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw81 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw82 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw83 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw84 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw85 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw86 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw87 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw88 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw89 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw90 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw91 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw92 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw93 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw94 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw95 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw96 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw97 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw98 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw99 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw100 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw101 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw102 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw103 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw104 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw105 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw106 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw107 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw108 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw109 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw110 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw111 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw112 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw113 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw114 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw115 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw116 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw117 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw118 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw119 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw120 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw121 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw122 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw123 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw124 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw125 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw126 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw127 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw128 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw129 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw130 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw131 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw132 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw133 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw134 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw135 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw136 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw137 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw138 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw139 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw140 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw141 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw142 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw143 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw144 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw145 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw146 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw147 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw148 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw149 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw150 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw151 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw152 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw153 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw154 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw155 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw156 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw157 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw158 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw159 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw160 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw161 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw162 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw163 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw164 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw165 {color: #aaaadd; font-weight: bold;}
.source-java5 .kw166 {color: #aaaadd; font-weight: bold;}
.source-java5 .co1 {color: #808080; font-style: italic;}
.source-java5 .coMULTI {color: #808080; font-style: italic;}
.source-java5 .es0 {color: #000099; font-weight: bold;}
.source-java5 .br0 {color: #66cc66;}
.source-java5 .st0 {color: #ff0000;}
.source-java5 .nu0 {color: #cc66cc;}
.source-java5 .me1 {color: #006600;}
.source-java5 .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Java Database Connectivity

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Java Database Connectivity (JDBC) is an API for the Java programming language that defines how a client may access a database. It provides methods for querying and updating data in a database. JDBC is oriented towards relational databases.
The Java 2 Platform, Standard Edition, version 1.4 (J2SE) includes the JDBC 3.0 API[1] together with a reference implementation JDBC-to-ODBC bridge, enabling connections to any ODBC-accessible data source in the JVM host environment. This bridge is native code (not Java), closed source, and only appropriate for experimental use and for situations in which no other driver is available,[2] not least because it provides only a limited subset of the JDBC 3.0 API,[3] as it was originally built and shipped with JDBC 1.0 for use with old ODBC v2.0 drivers[4] (ODBC v3.0 was released in 1996[5]).




Contents


1 Overview
2 Example
3 JDBC Drivers

3.1 Types
3.2 Sources


4 References
5 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
JDBC has been part of the Java Standard Edition since the release of JDK 1.1. The JDBC classes are contained in the Java package java.sql. Starting with version 3.0, JDBC has been developed under the Java Community Process. JSR 54 specifies JDBC 3.0 (included in J2SE 1.4), JSR 114 specifies the JDBC Rowset additions, and JSR 221 is the specification of JDBC 4.0 (included in Java SE 6).[6]
JDBC allows multiple implementations to exist and be used by the same application. The API provides a mechanism for dynamically loading the correct Java packages and registering them with the JDBC Driver Manager. The Driver Manager is used as a connection factory for creating JDBC connections.
JDBC connections support creating and executing statements. These may be update statements such as SQL's CREATE, INSERT, UPDATE and DELETE, or they may be query statements such as SELECT. Additionally, stored procedures may be invoked through a JDBC connection. JDBC represents statements using one of the following classes:

Statement – the statement is sent to the database server each and every time.
PreparedStatement – the statement is cached and then the execution path is pre determined on the database server allowing it to be executed multiple times in an efficient manner.
CallableStatement – used for executing stored procedures on the database.

Update statements such as INSERT, UPDATE and DELETE return an update count that indicates how many rows were affected in the database. These statements do not return any other information.
Query statements return a JDBC row result set. The row result set is used to walk over the result set. Individual columns in a row are retrieved either by name or by column number. There may be any number of rows in the result set. The row result set has metadata that describes the names of the columns and their types.
There is an extension to the basic JDBC API in the javax.sql.

[edit] Example
The method Class.forName(String) is used to load the JDBC driver class. The line below causes the JDBC driver from some jdbc vendor to be loaded into the application. (Some JVMs also require the class to be instantiated with .newInstance().)


Class.forName( "com.somejdbcvendor.TheirJdbcDriver" );

In JDBC 4.0, it's no longer necessary to explicitly load JDBC drivers using Class.forName(). See JDBC 4.0 Enhancements in Java SE 6.
When a Driver class is loaded, it creates an instance of itself and registers it with the DriverManager. This can be done by including the needed code in the driver class's static block. e.g. DriverManager.registerDriver(Driver driver)
Now when a connection is needed, one of the DriverManager.getConnection() methods is used to create a JDBC connection.


Connection conn = DriverManager.getConnection(
     "jdbc:somejdbcvendor:other data needed by some jdbc vendor",
     "myLogin",
     "myPassword" );

The URL used is dependent upon the particular JDBC driver. It will always begin with the "jdbc:" protocol, but the rest is up to the particular vendor. Once a connection is established, a statement must be created.


Statement stmt = conn.createStatement();
try {
    stmt.executeUpdate( "INSERT INTO MyTable( name ) VALUES ( 'my name' ) " );
} finally {
    //It's important to close the statement when you are done with it
    stmt.close();
}

Note that Connections, Statements, and ResultSets often tie up operating system resources such as sockets or file descriptors. In the case of Connections to remote database servers, further resources are tied up on the server, e.g., cursors for currently open ResultSets. It is vital to close() any JDBC object as soon as it has played its part; garbage collection should not be relied upon. Forgetting to close() things properly results in spurious errors and misbehaviour. The above try-finally construct is a recommended code pattern to use with JDBC objects.
Data is retrieved from the database using a database query mechanism. The example below shows creating a statement and executing a query.


Statement stmt = conn.createStatement();
try {
    ResultSet rs = stmt.executeQuery( "SELECT * FROM MyTable" );
    try {
        while ( rs.next() ) {
            int numColumns = rs.getMetaData().getColumnCount();
            for ( int i = 1 ; i <= numColumns ; i++ ) {
               // Column numbers start at 1.
               // Also there are many methods on the result set to return
               //  the column as a particular type. Refer to the Sun documentation
               //  for the list of valid conversions.
               System.out.println( "COLUMN " + i + " = " + rs.getObject(i) );
            }
        }
    } finally {
        rs.close();
    }
} finally {
    stmt.close();
}

Typically, however, it would be rare for a seasoned Java programmer to code in such a fashion. The usual practice would be to abstract the database logic into an entirely different class and to pass preprocessed strings (perhaps derived themselves from a further abstracted class) containing SQL statements and the connection to the required methods. Abstracting the data model from the application code makes it more likely that changes to the application and data model can be made independently.
An example of a PreparedStatement query. Using conn and class from first example.


PreparedStatement ps = conn.prepareStatement( "SELECT i.*, j.* FROM Omega i, Zappa j WHERE i.name = ? AND j.num = ?" );
try {
    // In the SQL statement being prepared, each question mark is a placeholder
    // that must be replaced with a value you provide through a "set" method invocation.
    // The following two method calls replace the two placeholders; the first is
    // replaced by a string value, and the second by an integer value.
    ps.setString(1, "Poor Yorick");
    ps.setInt(2, 8008);
 
    // The ResultSet, rs, conveys the result of executing the SQL statement.
    // Each time you call rs.next(), an internal row pointer, or cursor,
    // is advanced to the next row of the result.  The cursor initially is
    // positioned before the first row.
    ResultSet rs = ps.executeQuery();
    try {
        while ( rs.next() ) {
            int numColumns = rs.getMetaData().getColumnCount();
            for ( int i = 1 ; i <= numColumns ; i++ ) {
                // Column numbers start at 1.
                // Also there are many methods on the result set to return
                // the column as a particular type. Refer to the Sun documentation
                // for the list of valid conversions.
                System.out.println( "COLUMN " + i + " = " + rs.getObject(i) );
            } // for
        } // while
    } finally {
        rs.close();
    }
} finally {
   ps.close();
} // try

When a database operation fails, an SQLException is raised. There is typically very little one can do to recover from such an error, apart from logging it with as much detail as possible. It is recommended that the SQLException be translated into an application domain exception (an unchecked one) that eventually results in a transaction rollback and a notification to the user.
Here are examples of host database types which Java can convert to with a function.

setXXX() Methods

Oracle Datatype
setXXX()


CHAR
setString()


VARCHAR2
setString()


NUMBER
setBigDecimal()


setBoolean()


setByte()


setShort()


setInt()


setLong()


setFloat()


setDouble()


INTEGER
setInt()


FLOAT
setDouble()


CLOB
setClob()


BLOB
setBlob()


RAW
setBytes()


LONGRAW
setBytes()


DATE
setDate()


setTime()


setTimestamp()


For an example of a CallableStatement (to call stored procedures in the database), see the JDBC API Guide.

[edit] JDBC Drivers
JDBC Drivers are client-side adaptors (they are installed on the client machine, not on the server) that convert requests from Java programs to a protocol that the DBMS can understand.

[edit] Types
There are commercial and free drivers available for most relational database servers. These drivers fall into one of the following types:

Type 1, the JDBC-ODBC bridge driver
Type 2, the Native-API driver
Type 3, the JDBC net pure-java driver
Type 4, the native-protocol pure-java driver

Internal JDBC driver, driver embedded with JRE in Java-enabled SQL databases. Used for Java stored procedures. This does not belong to the above classification, although it would likely be either a type 2 or type 4 driver (depending on whether the database itself is implemented in Java or not). An example of this is the KPRB driver supplied with Oracle RDBMS. "jdbc:default:connection" is a relatively standard way of referring making such a connection (at least Oracle and Apache Derby support it). The distinction here is that the JDBC client is actually running as part of the database being accessed, so access can be made directly rather than through network protocols.

[edit] Sources

SQLSummit.com publishes list of drivers, including JDBC drivers and vendors
Sun Microsystems provides a list of some JDBC drivers and vendors
Simba Technologies ships an SDK for building custom JDBC Drivers for any custom/proprietary relational data source
DataDirect Technologies provides a comprehensive suite of fast Type 4 JDBC drivers for all major database
IDS Software provides a Type 3 JDBC driver for concurrent access to all major databases. Supported features include resultset caching, SSL encryption, custom data source, dbShield.
i-net software provides fast Type 4 JDBC drivers for all major databases
OpenLink Software ships JDBC Drivers for a variety of databases, including Bridges to other data access mechanisms (e.g., ODBC, JDBC) which can provide more functionality than the targeted mechanism
JDBaccess is a Java persistence library for MySQL and Oracle which defines major database access operations in an easy usable API above JDBC
JNetDirect provides a suite of fully Sun J2EE certified high performance JDBC drivers.
HSQL is a RDBMS with a JDBC driver and is available under a BSD license.


[edit] References


^ JDBC(™) API Specification Version: 3.0
^ Java Database Connectivity Overview
^ Reference FAQs: Does the JDBC-ODBC Bridge support the new features in the JDBC 3.0 API?
^ Reference FAQs: Are there any ODBC drivers that do not work with the JDBC-ODBC Bridge?
^ Understanding ODBC 3.0 Standards and OLE DB
^ JDBC(™) API Specification Version: 4.0



[edit] External links

JDBC API Guide
java.sql API Javadoc documentation
javax.sql API Javadoc documentation
Java Database Connectivity at the Open Directory Project








v • d • e

Database management systems





Database models · Database normalization · Database storage · Distributed DBMS · Referential integrity · Relational algebra · Relational calculus · Relational database · Relational DBMS · Relational model · Object-relational database · Transaction processing





Concepts

Database · ACID · CRUD · Null · Candidate key · Foreign key · Primary key · Superkey · Surrogate key






Objects

Trigger · View · Table · Cursor · Log · Transaction · Index · Stored procedure · Partition






SQL

Select · Insert · Update · Merge · Delete · Join · Union · Create · Drop · Begin work · Commit · Rollback · Truncate · Alter






Components

Concurrency control · Data dictionary · JDBC · ODBC · Query language · Query optimizer · Query plan






Database products: Object-oriented (comparison) · Relational (comparison) · Document-oriented








Retrieved from "http://en.wikipedia.org/wiki/Java_Database_Connectivity"
Categories: Database management systems | Java platform | Java specification requests | SQL data access | Databases | Java APIs 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Česky
Dansk
Deutsch
Ελληνικά
Español
Français
한국어
Italiano
Magyar
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Suomi
Svenska
ไทย
Tiếng Việt
Українська
中文









 This page was last modified on 1 April 2009, at 08:33.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
