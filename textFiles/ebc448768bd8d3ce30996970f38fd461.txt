













Von Neumann universal constructor - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Von_Neumann_universal_constructor";
		var wgTitle = "Von Neumann universal constructor";
		var wgAction = "view";
		var wgArticleId = "8597086";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 287562500;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Von Neumann universal constructor

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




The first implementation of von Neumann's self-reproducing universal constructor.[1] Three generations of machine are shown, the second has nearly finished constructing the third. The lines running to the right are the tapes of genetic instructions, which are copied along with the body of the machines. The machine shown runs in a 32-state version of von Neumann's cellular automata environment, not his original 29-state specification.


John von Neumann's Universal Constructor is a self-replicating machine in a cellular automata environment. It was designed in the 1940s, without the use of a computer. The fundamental details of the machine were published in von Neumann's book Theory of Self-Reproducing Automata, completed in 1966 by Arthur W. Burks after von Neumann's death.[2]
Von Neumann's specification defined the machine as using 29 states, these states constituting means of signal carriage and logical operation, and acting upon signals represented as bit streams. A 'tape' of cells encodes the sequence of actions to be performed by the machine. Using a writing head (termed a construction arm) the machine can print out (construct) a new pattern of cells, allowing it to make a complete copy of itself, and the tape.




Contents


1 Purpose
2 Implementation

2.1 Comparison of implementations


3 Practicality

3.1 Computational cost
3.2 Evolvability


4 See also
5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Purpose
Von Neumann's design has traditionally been understood to be a demonstration of the logical requirements for machine self-replication.[3] However it is clear that far simpler machines can achieve self-replication. Examples include trivial crystal-like growth, template replication and Langton's loops. But von Neumann was interested in something more profound: construction universality and evolution.[4]
This universal constructor can be seen as an abstract simulation of a physical universal assembler.
Note that the simpler self-replicating CA structures (especially, Byl's loop and the Chou-Reggia loop) cannot exist in a wide variety of forms and thus have very limited evolvability. Other CA structures such as the Evoloop are somewhat evolvable but still don't support open-ended evolution. Commonly, simple replicators do not fully contain the machinery of construction, there being a degree to which the replicator is information copied by its surrounding environment. Although the Von Neumann design is a logical construction, it is in principle a design that could be instantiated as a physical machine. The issue of the environmental contribution to replication is somewhat open, since there are different conceptions of raw material and its availability.
The concept of a universal constructor is non-trivial because of the existence of garden of eden patterns but a simple definition is that a universal constructor is able to construct any finite pattern of non-excited (quiescent) cells.
Von Neumann's crucial insight is that part of the replicator has a double use; being both an active component of the construction mechanism, and being the target of a passive copying process. This part is played by the tape of instructions in Von Neumann's combination of universal constructor plus instruction tape.
The combination of a universal constructor and a tape of instructions would i) allow self-replication, and also ii) guarantee that the open-ended complexity growth observed in biological organisms was possible.[3] The image below illustrates this possibility.
This insight is all the more remarkable because it preceded the discovery of the structure of the DNA molecule by Watson and Crick, though it followed the Avery-MacLeod-McCarty experiment which identified DNA as the molecular carrier of genetic information in living organisms.[5] The DNA molecule is processed by separate mechanisms that carry out its instructions and copy the DNA for insertion for the newly constructed cell. The ability to achieve open-ended evolution lies in the fact that, just as in nature, errors (mutations) in the copying of the genetic tape can lead to viable variants of the automaton, which can then evolve via natural selection.





A demonstration of the ability of von Neumann's machine to support inheritable mutations. (1) At an earlier timestep, a mutation was manually added to the second generation machine's tape. (2) Later generations both display the phenotype of the mutation (a drawing of a flower) and pass the mutation on to their children, since the tape is copied each time. This example illustrates how von Neumann's design allows for complexity growth (in theory) since the tape could specify a machine that is more complex than the one making it.




[edit] Implementation
Arthur Burks and others extended the work of von Neumann, giving a much clearer and complete set of details regarding the design and operation of von Neumann's self-replicator. The work of J. W. Thatcher is particularly noteworthy, for he greatly simplified the design. Still, their work did not yield a complete design, cell by cell, of a configuration capable of demonstrating self-replication.
Renato Nobili and Umberto Pesavento published the first fully-implemented self-reproducing cellular automaton in 1995, nearly fifty years after von Neumann's work.[1][6] They used a 32-state cellular automaton (CA) instead of von Neumann's original 29-state specification, extending it to allow for easier signal-crossing and a more compact design. They also published an implementation of a general constructor within the original 29-state CA but not one capable of complete replication - the configuration cannot duplicate its tape, nor can it trigger its offspring; the configuration can only construct, and its offspring are not self-replicable.[6][7]
In 2007, Nobili published a 32-state implementation that uses run-length encoding to greatly reduce the size of the tape. [1]
In 2008, William R. Buckley published two configurations which are self-replicators within the original 29-state CA of von Neumann.[7] Buckley claims that the crossing of signal within von Neumann 29-state cellular automata is not necessary to the construction of self-replicators.[7] Buckley also points out that for the purposes of evolution, each replicator should return to its original configuration after replicating, in order to be capable (in theory) of making more than one copy. As published, the 1995 design of Nobili-Pesavento does not fulfill this requirement but the 2007 design of Nobili does; the same is true of Buckley's configurations.
In 2004, D. Mange et al. reported an implementation of a self-replicator that is consistent with the designs of von Neumann.[8]
C. L. Nehaniv in 2002, and also Y. Takada et al. in 2004, proposed a universal constructor directly implemented upon an asynchronous cellular automaton, rather than upon a synchronous cellular automaton. [9] [10]

[edit] Comparison of implementations


implementation
source
ruleset
rectangular area
number of cells
length of tape
timesteps for replication


Buckley, 2008[7]
replicator.mc [2]
original 29-state
312 × 132
18,589
294,844
261 × 109


Nobili-Pesavento, 1995 [1]
[3]
Nobili 32-state
97 × 170
6,329
145,315
63.4 × 109


Nobili, 2007
SR_CCN_AP.EVN [4][5]
Nobili 32-state
97 × 100
5,313
56,325
9.59 × 109


It should be noted that none of the configurations discussed in this article is a universal constructor; none could, for instance, construct the real-time crossing organ devised by Gorman.[7] It is also true that none of these configurations is a partial constructor; all self-replicate by holistic means.[11] To date, no configuration capable of universal construction has been demonstrated for the 29-state model of von Neumann.

[edit] Practicality

[edit] Computational cost
All the implementations of von Neumann's self-reproducing machine require considerable resources to run on computer. For example, in the Nobili-Pesavento 32-state implementation shown above, while the body of the machine is just 6,329 non-empty cells (within a rectangle of size 97x170), it requires a tape that is 145,315 cells long, and takes 63 billion timesteps to replicate. A simulator running at 1,000 timesteps per second would take over 2 years to make the first copy. In 1995, when the first implementation was published, the authors had not seen their own machine replicate. However, in 2008, the hashlife algorithm was extended to support the 29-state and 32-state rulesets in Golly. On a modern desktop PC, replication now takes only a few minutes, although a significant amount of memory is required.

[edit] Evolvability
Von Neumann's stated problem was evolution [6]: how is the complexity growth and evolvability of biological organisms possible? His machine shows how it is logically possible, by using a universal constructor, but does not show how it is possible in practice. In his unfinished work he briefly considers conflict and interactions between replicators [7] but in practice his model is not likely to become a useful unit of evolution because it is too fragile.[3]

[edit] See also

Langton's loops
Nobili cellular automata
Quine (computing)
Self-replicating machine
Santa Claus machine
Von Neumann cellular automata
Wireworld


[edit] References

^ a b c Pesavento, Umberto (1995). "An implementation of von Neumann's self-reproducing machine" (PDF). Artificial Life (MIT Press) 2 (4): 337–354. http://web.archive.org/web/20070418081628/http://dragonfly.tam.cornell.edu/~pesavent/pesavento_self_reproducing_machine.pdf. 
^ von Neumann, John; Burks, Arthur W. (1966). "Theory of Self-Reproducing Automata." (Scanned book online). www.walenz.org. Archived from the original on 2008-01-05. http://web.archive.org/web/20080105213853/www.walenz.org/vonNeumann/index.html. Retrieved on 2008-02-29. 
^ a b c McMullin, B. (2000). "John von Neumann and the Evolutionary Growth of Complexity: Looking Backwards, Looking Forwards...". Artificial Life 6 (4): 347–361. doi:10.1162/106454600300103674. http://www.eeng.dcu.ie/~alife/bmcm-alj-2000/. 
^ http://www.walenz.org/vonNeumann/page0110.html
^ Rocha, L.M., "Von Neumann and Natural Selection.", Lecture Notes of I-585-Biologically Inspired Computing Course, Indiana University, http://informatics.indiana.edu/rocha/i-bic/pdfs/ibic_lecnotes_c6.pdf 
^ a b Nobili, Renato; Pesavento, Umberto (1996), "Generalised von Neumann's Automata", in Besussi, E.; Cecchini, A. (PDF), Proc. Artificial Worlds and Urban Studies, Conference 1, Venice: DAEST, http://www.pd.infn.it/%7Ernobili/pdf_files/jvnconstr.pdf 
^ a b c d e Buckley, William R. (2008), "Signal Crossing Solutions in von Neumann Self-replicating Cellular Automata", in Andrew Adamatzky, Ramon Alonso-Sanz, Anna Lawniczak, Genaro Juarez Martinez, Kenichi Morita, Thomas Worsch, Proc. Automata 2008, Luniver Press 
^ Mange, Daniel; Stauffer, A.; Peparaolo, L.; Tempesti, G. (2004), "A Macroscopic View of Self-replication", Proceedings of the IEEE 92 (12): 1929–1945, doi:10.1109/JPROC.2004.837631 
^ Nehaniv, Chrystopher L. (2002), "Self-Reproduction in Asynchronous Cellular Automata", 2002 NASA/DoD Conference on Evolvable Hardware (15-18 July 2002, Alexandria, Virginia, USA), IEEE Computer Society Press, pp. 201–209 
^ Takada, Yousuke; Isokawa, Teijiro; Peper, Ferdinand; Matsui, Nobuyuki (2004), "Universal Construction on Self-Timed Cellular Automata", in Sloot, P.M.A., ACRI 2004, LNCS 3305, pp. 21–30 
^ Buckley, William R. (2008), "Computational Ontogeny", Biological Theory 3 (1): 3–6, doi:10.1162/biot.2008.3.1.3 


[edit] External links

Golly - the Cellular Automata Simulation Accelerator Very fast implementation of state transition and support for JvN, GoL, Wolfram, and other systems.
von Neumann's Self-Reproducing Universal Constructor The original Nobili-Pesavento source code, animations and Golly files of the replicators.
John von Neumann's 29 state Cellular Automata Implemented in OpenLaszlo by Don Hopkins




Retrieved from "http://en.wikipedia.org/wiki/Von_Neumann_universal_constructor"
Categories: Artificial life | Cellular automaton patterns 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Français









 This page was last modified on 3 May 2009, at 02:04 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
