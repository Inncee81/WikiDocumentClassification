













Chaitin's constant - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Chaitin\'s_constant";
		var wgTitle = "Chaitin\'s constant";
		var wgAction = "view";
		var wgArticleId = "6205";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 271868806;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Chaitin's constant

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In the computer science subfield of algorithmic information theory a Chaitin constant or halting probability is a real number that informally represents the probability that a randomly-chosen program will halt. These numbers are formed from a construction due to Gregory Chaitin.
Although there are infinitely many halting probabilities, it is common to use the letter Ω to refer to them as if there were only one. Because Ω depends on the program encoding used, it is sometimes called Chaitin's construction instead of Chaitin's constant when not referring to any specific encoding.
Each halting probability is a normal and transcendental real number which is not computable, which means that there is no halting algorithm that enumerates its digits.




Contents


1 Background
2 Definition of halting probabilities
3 Use of Chaitin's constant in proving unsolved problems in number theory
4 Interpretation as a probability
5 Properties
6 Uncomputability of halting probabilities
7 Incompleteness theorem for halting probabilities
8 Super Omega
9 See also
10 References
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Background
The definition of a halting probability relies on the existence of prefix-free universal computable functions. Such a function, intuitively, represents a programming language with the property that no valid program can be obtained as a proper extension of another valid program.
Suppose that F is a partial function that takes one argument, a finite binary string, and possibly returns a single binary string as output. The function F is called computable if there is a Turing machine that computes it.
The function F is called universal if the following property holds: for every computable function f of a single variable v there is a string w such that for all x, F(w x) = f(x). This means that F can be used to simulate any computable function of one variable. Informally, w represents a "interpreter" for the computable function f, and F represents an emulator that parses the interpreter as a prefix of its input and then executes it on the remainder of input. Note that for any fixed w the function f(x) = F(w x) is computable; thus the universality property states that all computable functions of one variable can be obtained in this fashion.
The domain of F is the set of all inputs p on which it is defined. For F that are universal, such a p can generally be seen both as the concatenation of a program part and a data part, and as a single program for the function F.
The function F is called prefix-free if there are no two elements p, p′ in its domain such that p′ is a proper extension of p. This can be rephrased as: the domain of F is a prefix-free code (instantaneous code) on the set of finite binary strings. A simple way to enforce prefix-free-ness is to use machines whose means of input is a binary stream from which bits can be read one at a time. There is no end-of-stream marker; the end of input is determined by when the universal machine decides so stop reading more bits. Here, the difference between the two notions of program mentioned in the last paragragh becomes clear; the one is easily recognized by some grammar, while the other requires arbitrary computation to recognize.
The domain of any universal computable function is a computably enumerable set but never a computable set. The domain is always Turing equivalent to the halting problem.

[edit] Definition of halting probabilities
Let PF be the domain of a prefix-free universal computable function F. The constant ΩF is then defined as

,

where  denotes the length of a string p. This is an infinite sum which has one summand for every p in the domain of F. The requirement that the domain be prefix-free, together with Kraft's inequality, ensures that this sum converges to a real number between 0 and 1. If F is clear from context then ΩF may be denoted simply Ω, although different prefix-free universal computable functions lead to different values of Ω.

[edit] Use of Chaitin's constant in proving unsolved problems in number theory
Chaitin's constant can be used, in principle, to solve many outstanding problems in number theory, including Goldbach's conjecture and the Riemann hypothesis.[1]
Goldbach's conjecture says every even number greater than 2 is the sum of two primes. For a given even number, let a computer program iterate through the even numbers, beginning with the given one, searching for corresponding two primes in each instance. If the appropriate primes exist, then the program finds them eventually, advances to the next even number and the search is continued. If there are no two primes that add to the even number, then the program exhausts eventually all possible prime pairs in the test, thus it notices that a counterexample has just been found, it halts and Goldbach's conjecture has been disproved. Thus, this is a counterexample-searching program: it "freezes" exactly if Goldbach's conjecture is true; it halts (with a counterexample) exactly if the conjecture is false.
Let this program be N bits long. Given unlimited resources and time, the first N bits of Chaitin's number can be used to prove Goldbach's conjecture as follows. In dovetailing fashion, all programs of all lengths are run, until enough have halted to jointly contribute enough probability to match these first N bits. If the Goldbach program hasn't halted yet, then it never will, since its contribution to the halting probability would affect the first N bits. Thus, the conjecture holds unless we already found a counterexample.
The same Chaitin constant can be used to prove (or disprove) the Riemann hypothesis and many other of the unsolved problems in mathematics.

[edit] Interpretation as a probability
The Cantor space is the collection of all infinite sequences of 0s and 1s. A halting probability can be interpreted as the measure of a certain subset of Cantor space under the usual probability measure on Cantor space. It is from this interpretation that halting probabilities take their name.
The probability measure on Cantor space, sometimes called the fair-coin measure, is defined so that for any binary string x the set of sequences that begin with x has measure 2-|x|. This implies that for each natural number n, the set of sequences f in Cantor space such that f(n) = 1 has measure 1/2, and the set of sequences whose nth element is 0 also has measure 1/2.
Let F be a prefix-free universal computable function. The domain P of F consists of an infinite set of binary strings

.

Each of these strings pi determines a subset Si of Cantor space; the set Si contains all sequences in cantor space that begin with pi. These sets are disjoint because P is a prefix-free set. The sum



represents the measure of the set

.

In this way, ΩF represents the probability that a randomly selected infinite sequence of 0s and 1s begins with a bit string (of some finite length) that is in the domain of F. It is for this reason that ΩF is called a halting probability.

[edit] Properties
Each Chaitin constant Ω has the following properties:

It is algorithmically random. This means that the shortest program to output the first n bits of Ω must be of size at least n-O(1). This is because, as in the Goldbach example, those n bits enable us to find out exactly which programs halt among all those of length at most n.
It is a normal number, which means that its digits are equidistributed as if they were generated by tossing a fair coin.
It is not a computable number; there is no computable function that enumerates its binary expansion, as discussed below.
The set of rational numbers q such that q ≤ Ω is computably enumerable; a real number with such a property is called a left-c.e. real number in recursion theory.
It is Turing equivalent to the halting problem and thus at level  of the arithmetical hierarchy.

Not every set Turing equivalent to the halting problem is a halting probability. A finer equivalence relation, Solovay equivalence, can be used to characterize the halting probabilities among the left-c.e. reals.

[edit] Uncomputability of halting probabilities
A real number is called computable if there is an algorithm which, given n, returns the first n digits of the number. This is equivalent to the existence of a program that enumerates the digits of the real number.
No halting probability is computable. The proof of this fact relies on an algorithm which, given the first n digits of Ω, solves Turing's halting problem for programs of length up to n. Since the halting problem is undecidable, Ω can not be computed.
The algorithm proceeds as follows. Given the first n digits of Ω and a k≤n, the algorithm enumerates the domain of F until enough elements of the domain have been found so that the probability they represent is within 2-(k+1) of Ω. After this point, no additional program of length k can be in the domain, because each of these would add 2-k to the measure, which is impossible. Thus the set of strings of length k in the domain is exactly the set of such strings already enumerated.

[edit] Incompleteness theorem for halting probabilities
Main article: Kolmogorov complexity#Chaitin's incompleteness theorem
For each specific consistent effectively represented axiomatic system for the natural numbers, such as Peano arithmetic, there exists a constant N such that no bit of Ω after the Nth can be proven to be one or zero within that system. The constant N depends on how the formal system is effectively represented, and thus does not directly reflect the complexity of the axiomatic system. This incompleteness result is similar to Gödel's incompleteness theorem in that it shows that no consistent formal theory for arithmetic can be complete.

[edit] Super Omega
As mentioned above, the first n bits of Gregory Chaitin's constant Omega are random or incompressible in the sense that we cannot compute them by a halting algorithm with fewer than n-O(1) bits. However, consider the short but never halting algorithm which systematically lists and runs all possible programs; whenever one of them halts its probability gets added to the output (initialized by zero). After finite time the first n bits of the output will never change any more (it does not matter that this time itself is not computable by a halting program). So there is a short non-halting algorithm whose output converges (after finite time) onto the first n bits of Omega, for any n. In other words, the enumerable first n bits of Omega are highly compressible in the sense that they are limit-computable by a very short algorithm; they are not random with respect to the set of enumerating algorithms. Jürgen Schmidhuber (2000) constructed a limit-computable "Super Omega" which in a sense is much more random than the original limit-computable Omega, as one cannot significantly compress the Super Omega by any enumerating non-halting algorithm.

[edit] See also

Kolmogorov complexity
Incompleteness theorem


[edit] References

^ Thomas M. Cover and Joy A. Thomas, Elements of Information Theory, 2nd Edition, Wiley-Interscience, 2006.


Cristian S. Calude (2002). Information and Randomness: An Algorithmic Perspective, second edition. Springer. ISBN 3-5404-3466-6
Cristian S. Calude, Michael J. Dinneen, and Chi-Kou Shu. Computing a Glimpse of Randomness.
R. Downey, and D. Hirschfeldt (200?), Algorithmic Randomness and Complexity, monograph in preparation, Springer-Verlag. Preliminary version can be found online.
Ming Li and Paul Vitányi (1997). An Introduction to Kolmogorov Complexity and Its Applications. Springer. Introduction chapter full-text.
Jürgen Schmidhuber (2000). Algorithmic Theories of Everything (arXiv: quant-ph/ 0011122). Journal reference: J. Schmidhuber (2002). Hierarchies of generalized Kolmogorov complexities and nonenumerable universal measures computable in the limit. International Journal of Foundations of Computer Science 13(4):587-612.


[edit] External links

Omega and why math has no TOEs article based on one written by Gregory Chaitin which appeared in the August 2004 edition of Mathematics Today, on the occasion of the 50th anniversary of Alan Turing's death.
The Limits of Reason, Gregory Chaitin, originally appeared in Scientific American, March 2006.
Limit-computable Super Omega more random than Omega and generalizations of algorithmic information, by Jürgen Schmidhuber




Retrieved from "http://en.wikipedia.org/wiki/Chaitin%27s_constant"
Categories: Algorithmic information theory | Theory of computation | Transcendental numbers 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
日本語
Русский
Svenska









 This page was last modified on 19 February 2009, at 17:28.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
