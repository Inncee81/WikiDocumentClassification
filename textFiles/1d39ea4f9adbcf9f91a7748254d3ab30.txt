













Behavior Driven Development - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Behavior_Driven_Development";
		var wgTitle = "Behavior Driven Development";
		var wgAction = "view";
		var wgArticleId = "2965801";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 286506743;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Behavior Driven Development

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article includes a list of references or external links, but its sources remain unclear because it lacks inline citations. Please improve this article by introducing more precise citations where appropriate. (February 2008)


Behavior Driven Development (or BDD) is an Agile software development technique that encourages collaboration between developers, QA and non-technical or business participants in a software project. It was originally conceived in 2003 by Dan North [1] as a response to Test Driven Development, and has evolved over the last few years.
The focus of BDD is the language and interactions used in the process of software development. Behavior-driven developers use their native language in combination with the ubiquitous language of Domain Driven Design to describe the purpose and benefit of their code. This allows the developers to focus on why the code should be created, rather than the technical details, and minimizes translation between the technical language in which the code is written and the domain language spoken by the business, users, stakeholders, project management etc.
Dan North created a story-level BDD framework for Ruby called rbehave which was later integrated into the RSpec project. He also worked with David Chelimsky and Aslak Hellesøy and others to develop RSpec and also to write "The RSpec Book: Behaviour Driven Development with RSpec, Cucumber, and Friends". The first story-based framework in RSpec was later replaced by Cucumber mainly developed by Aslak Hellesøy.




Contents


1 BDD Practices
2 Outside-In
3 Scenarios, or Application Examples

3.1 Scenario 1: Refunded items should be returned to stock
3.2 Scenario 2: Replaced items should be returned to stock


4 Unit-level Examples and Behavior
5 Using Mocks
6 References
7 External links

7.1 Tools







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] BDD Practices
The practices of BDD include:

Involving stakeholders in the process through outside-in software development
Using examples to describe the behavior of the application, or of units of code
Automating those examples to provide quick feedback and regression testing
In software tests, using 'should' to help clarify responsibility and allow the software's functionality to be questioned
Test use 'ensure' to differentiate outcomes in the scope of the code in question from side-effects of other elements of code.
Using mocks to stand-in for modules of code which have not yet been written


[edit] Outside-In
BDD is driven by Business Value; that is, the benefit to the business which accrues once the application is in production. The only way in which this benefit can be realized is through the User Interface(s) to the application, usually (but not always) a GUI.
In the same way, each piece of code, starting with the UI, can be considered a stakeholder of the other modules of code which it uses. Each element of code provides some aspect of behavior which, in collaboration with the other elements, provides the application behavior.
The first piece of production code that BDD developers implement is the UI. Developers can then benefit from quick feedback as to whether the UI looks and behaves appropriately. Through code, and using principles of good design and refactoring, developers discover collaborators of the UI, and of every unit of code thereafter. This helps them adhere to the principle of YAGNI, since each piece of production code is required either by the business, or by another piece of code already written.

[edit] Scenarios, or Application Examples
The requirements of a retail application might be, "Refunded or replaced items should be returned to stock."
In BDD, a developer or QA might clarify the requirements by breaking this down into specific examples, eg.

[edit] Scenario 1: Refunded items should be returned to stock

Given a customer buys a black jumper
and I have three black jumpers left in stock
when he returns the jumper for a refund
then I should have four black jumpers in stock


[edit] Scenario 2: Replaced items should be returned to stock

Given that a customer buys a blue garment
and I have two blue garments in stock
and three black garments in stock.
When he returns the garment for a replacement in black,
Then I should have three blue garments in stock
and two black garments in stock

Each scenario is an exemplar, designed to illustrate a specific aspect of behavior of the application.
When discussing the scenarios, participants question whether the outcomes described always result from those events occurring in the given context. This can help to uncover further scenarios which clarify the requirements. For instance, a domain expert noticing that refunded items are not always returned to stock might reword the requirements as "Refunded or replaced items should be returned to stock unless faulty."
This in turn helps participants to pin down the scope of requirements, which leads to better estimates of how long those requirements will take to implement.
The words Given, When and Then are often used to help drive out the scenarios, but are not mandated.
These scenarios can also be automated, if an appropriate tool exists to allow automation at the UI level. If no such tool exists then it may be possible to automate at the next level in, ie: if an MVC design pattern has been used, the level of the Controller.

[edit] Unit-level Examples and Behavior
The same principles of examples, using contexts, events and outcomes can be used to drive development at a unit level. For instance, the following examples describe an aspect of behavior of a list:
Example 1: New lists are empty

Given a new list
Then the list should be empty.

Example 2: Lists with things in them are not empty.

Given a new list
When we add an object
Then the list should not be empty.

Both these examples are required to describe the behavior of the


list.isEmpty()

method, and to derive the benefit of the method. These examples can be automated using TDD frameworks. In BDD these examples are usually encapsulated in a single test method, with the name of the method being a complete description of the behavior.
For instance, using Java and JUnit 4, the above examples might become:


public class ListTest {
 
   @Test
   public void shouldKnowWhetherItIsEmpty() {
      List list1 = new List();
      assertTrue(list1.isEmpty());
 
      List list2 = new List();
      list2.add(new Object());
      assertFalse(list2.isEmpty());
   }
}

Sometimes the difference between the context, events and outcomes may be made more explicit. For instance:


public class WindowControlBehavior {
 
    @Test
    public void shouldCloseWindows() {
 
        // Given
        WindowControl control = new WindowControl("My AFrame");
        AFrame frame = new AFrame();
 
        // When
        control.closeWindow();
 
        // Then
        ensureThat(!frame.isShowing());       
    }
}

However the example is phrased, the effect should be that of describing the behavior of the code in question. For instance, from the examples above one can derive:

List should know when it is empty
WindowControl should close windows

The description is useful if the test fails, and provides documentation of the code's behavior to anyone interested in Lists or WindowControls. Once the examples have been written they are then run and the code implemented to make them work in the same way as TDD.

[edit] Using Mocks
Because of the outside-in nature of BDD, developers will often find themselves trying to use units of code which don't yet exist. When this happens, an object which is simpler than the desired code, and provides the same interface but predictable behaviour, can be injected into the code which needs it.
These objects can either be created by hand, or created using a mocking framework such as Moq, NMock, Rhino Mocks, JMock or EasyMock.
BDD proponents claim that the use of "should" and "ensureThat" in BDD examples encourages developers to question whether the responsibilities they're assigning to their classes are appropriate, or whether they can be delegated or moved to another class entirely. Questioning responsibilities in this way, and using mocks to fulfill the required roles of collaborating classes, encourages the use of Role-based Interfaces. It also helps to keep the classes small and loosely coupled.

[edit] References


^ D.North, Introducing Behaviour Driven Development



[edit] External links

Dan North's article introducing BDD
Introduction to Behavior Driven Development
Behavior Driven Development Using Ruby (Part 1)
Behavior-Driven Development Using Ruby (Part 2)
In pursuit of code quality: Adventures in behavior-driven development by Andrew Glover
Behavior Driven Database Development by Pramodkumar Sadalage
The RSpec Book: Behaviour Driven Development with RSpec, Cucumber, and Friends


[edit] Tools

ASSpec - ActionScript 3
BDoc - Extracting documentation from unit tests, supporting behaviour driven development
BDD in Python is core module doctest
beanSpec - Java
cfSpec - ColdFusion
CSpec - C
dSpec - Delphi
Concordion - a Java automated testing tool for BDD that uses plain English to describe behaviors.
Cucumber - Plain text + Ruby. Works against Java, .NET, Ruby, Flex or any web application via Watir or Selenium.
easyb - Groovy/Java
EasySpec - Groovy, usable in Java. Developer also working on Perception a tool for doing Context/Specification reporting for many different tools.
GSpec - Groovy
Instinct - Java
JBehave - Java
JDave - Java
JFXtras Test - JavaFX
JSpec - JavaScript (great syntax, async support, many matchers, tiny framework, and more)
JSSpec - JavaScript
NBehave - .Net
NSpec - .Net
NSpecify - .Net
NUnit - Another implementation of BDD framework in .Net with focus on specification testing
PHPSpec - PHP
RSpec - Ruby
specs - Scala
spec-cpp - C++
Specter - Another implementation of BDD framework in .Net with focus on specification readability
StoryQ - .Net 3.5, can be integrated with NUnit to provide both specification readability and testing
tspec - Groovy (Thai syntax)




Retrieved from "http://en.wikipedia.org/wiki/Behavior_Driven_Development"
Categories: Software development philosophies | Software testingHidden categories: Articles lacking in-text citations from February 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Français
日本語









 This page was last modified on 27 April 2009, at 20:26 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
