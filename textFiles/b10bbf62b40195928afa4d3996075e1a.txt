













Microsoft Solutions Framework - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Microsoft_Solutions_Framework";
		var wgTitle = "Microsoft Solutions Framework";
		var wgAction = "view";
		var wgArticleId = "2566197";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281924866;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Microsoft Solutions Framework

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (March 2008)


Microsoft Solutions Framework (MSF) is a set of principles, models, disciplines, concepts, and guidelines for delivering information technology solutions from Microsoft. MSF is not limited to developing applications only, it is also applicable to other IT projects like deployment, networking or infrastructure projects. MSF does not force the developer to use a specific methodology (Waterfall, Agile) but lets them decide what methodology to use.




Contents


1 History

1.1 MSF 1.0
1.2 MSF 2.0

1.2.1 MSF 2.5


1.3 MSF 3.0
1.4 MSF 4.0


2 Goals
3 Components
4 Foundational Principles

4.1 MSF Models
4.2 MSF Project Management Process
4.3 MSF for Agile Software Development methodology
4.4 MSF for Capability Maturity Model Integration Process Improvement methodology


5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History

[edit] MSF 1.0
MSF was first introduced by Microsoft as version 1.0 in 1993.

[edit] MSF 2.0
In 1997, Microsoft released MSF version 2.0. Microsoft began to deliver MSF concepts in two instructor-led courses:

Solutions Development Discipline (SDD)
Designing Component Solutions (DCS)


[edit] MSF 2.5
MSF version 2.5 was released in 1999. In March 1999, Microsoft began offering a new instructor-led course in MSF concepts called Principles of Infrastructure Deployment (PID). A month later, Microsoft modified its Solutions Development Discipline course to become Principles of Application Development (PAD). In May, Microsoft modified its Designing Component Solutions course to become Principles of Component Design (PCD) and added an additional course called Principles of Enterprise Architecture (PEA).

[edit] MSF 3.0
2002 saw the release of MSF version 3.0. It modified version 2.0 in the following ways:

Combined previously separate models into unified Team and Process models designed for application across a variety of project types including deployment, enterprise software integration, and development projects.
Folded the Application Development and Infrastructure Deployment models into a single Process Model consisting of five phases.
Added Project Management and Readiness Management Disciplines.
Made changes to the Risk Management Discipline.
Added links between MSF and the Microsoft Operations Framework (MOF).
Added an MSF Practitioner Program designed to train individuals to lead or participate in MSF projects.[1]


[edit] MSF 4.0
MSF version 4.0 was released in 2005. The release was a major refresh of the Process Model (now called the Governance Model) and the Team Model.[2] In addition, two derivative methodologies for software development were released by Microsoft as part of their Visual Studio Team System product line:

Microsoft Solutions Framework for Agile Software Development (MSF4ASD)
Microsoft Solutions Framework for Capability Maturity Model Integration Process Improvement (MSF4CMMI)


[edit] Goals
Microsoft Solutions Framework (MSF) is a set of software engineering processes, principles, and proven practices intended to enable developers to achieve success in the software development life cycle (SDLC). MSF provides an adaptable guidance, based upon experiences and best practices from inside and outside of Microsoft, to increase the chance of successful delivery of an information technology solution to the customer by working fast, decreasing the number of people on the project team, averting risk, while enabling high quality results.

[edit] Components
The Microsoft Solution Framework version 4.0 is a combination of a metamodel which can be used as a base for prescriptive software engineering processes, and two customizable and scalable software engineering processes. The MSF metamodel consists of foundational principles, a team model and cycles and iterations.
MSF 4.0 provides a higher-level framework of guidance and principles which can be mapped to a variety of prescriptive process templates. It is structured in both descriptive and prescriptive methodologies. The descriptive component is called the MSF 4.0 metamodel, which is a theoretical description of the SDLC best practices for creating SDLC methodologies. Microsoft is of the opinion that organizations have diverging dynamics and contrary priorities during their software development; some organizations need a responsive and adaptable software development environment, while others need a standardized, repeatable and more controlled environment. To fulfill these needs, Microsoft represents the metamodel of MSF 4.0 in two prescriptive methodology templates that provide specific process guidance, named Microsoft Solutions Framework for Agile Software Development (MSF4ASD) and Microsoft Solutions Framework for Capability Maturity Model Integration Process Improvement (MSF4CMMI). Note that these software engineering processes can be modified and customized to the preferences of organization, customer and project team.
The MSF philosophy holds that there is no single structure or process that optimally applies to the requirements and environments for all sorts of projects. Therefore MSF supports multiple process approaches, so it can be adapted to support any project, regardless of size or complexity. This flexibility means that it can support a wide degree of variation in the implementation of software engineering processes while retaining a set of core principles and mindsets.
The Microsoft Solutions Framework Process Model consists of series of short development cycles and iterations. This model embraces rapid iterative development with continuous learning and refinement, due to progressive understanding of the business and project of the stakeholders. Identifying requirements, product development, and testing occur in overlapping iterations resulting in incremental completion to ensure a flow of value of the project. Each iteration has a different focus and result in a stable portion of the overall system.

[edit] Foundational Principles
The following are the eight foundational principles, which form the backbone for the other models and disciplines of MSF:
1. Foster open communication
2. Work towards a shared vision
3. Empower team members
4. Establish clear accountability and shared responsibility
5. Focus on delivering business value
6. Stay agile, expect change
7. Invest in quality
8. Learn from all experiences

[edit] MSF Models
MSF consists of two models:
1. MSF Team Model. This describes the role of various team members in a software development project. The members of this team would be:

Product Management: Mainly deals with customers and define project requirements, also ensures customer expectations are met.
Program Management: Maintains project development and delivery to the customer
Architecture: Responsible for solution design, making sure the solution design optimally satisfies all needs and expectations
Development: Develops according to the specifications.
Test: Tests and assures product quality
Release/Operations: Ensures smooth deployment and operations of the software
User Experience: Supports issues of the users.

One person may be assigned to perform multiple roles. MSF also has suggestion on how to combine responsibilities such as the developer should not be assigned to any other role.
2. MSF Governance Model. This describes the different stages in processing for a project. The MSF Governance Model has five overlapping tracks of activity (see below), each with a defined quality goal. These tracks of activity define what needs to be accomplished and leave how they are accomplished to the team selected methodology. For instance, these tracks can be small in scope and performed quickly to be consistent with an Agile methodology, or can be serialized and elongated to be consistent with a Waterfall methodology.

Envision - think about what needs to be accomplished and identify constraints
Plan - plan and design a solution to meet the needs and expectations within those constraints
Build - build the solution
Stabilize - validate that the solution meets the needs and expectations
Deploy - deploy the solution


[edit] MSF Project Management Process

Integrate planning and conduct change control
Define and manage the scope of the project
Prepare a budget and manage costs
Prepare and track schedules
Ensure that right resources are allocated to the project
Manage contracts and vendors and procure project resources
Facilitate team and external communications
Facilitate the risk management process
Document and monitor the team's quality management process


[edit] MSF for Agile Software Development methodology
The MSF for Agile Software Development (MSF4ASD) is intended to be a light weight, iterative and adaptable process.
The MSF4ASD uses the principles of the agile development approach formulated by the Agile Alliance. The MSF4ASD provides a process guidance which focuses on the people and changes. It includes learning opportunities by using iterations and evaluations in each iteration.

[edit] MSF for Capability Maturity Model Integration Process Improvement methodology
The MSF for Capability Maturity Model Integration Process Improvement (MSF4CMMI) has more artifacts, more processes, more signoffs, more planning and is intended for projects that require a higher degree of formality and ceremony.
The MSF4CMMI is a formal methodology for software engineering. Capability Maturity Model was created at the Software Engineering Institute of Carnegie Mellon University, and is a process improvement approach that provides organizations with the essential elements of continuous process improvement resulting in a reduced SDLC, improved ability to meet the cost and schedule targets, building products of high quality. The MSF4CMMI has extended the MSF4ASD guidance with additional formality, reviews, verification and audit. This results in a SEP that relies on process and conformance to process rather than relying purely on trust and the ability of the individual team members. The MSF4CMMI has more mandatory documents and reports than the agile version, and this more formal development process reduces risk on large software projects and provides a measurable status. One of the benefits of using the CMMI process is the standard evaluation by which one can compare the ability to develop software in other organizations.

[edit] References


^ Keeton, Marlys (April 2006). Microsoft Solutions Framework (MSF): A Pocket Guide. Van Haren Publishing. p. 15. ISBN 9077212167. 
^ Turner, Michael S. V. (2006-08-30). Microsoft Solutions Framework Essentials: Building Successful Technology Solutions. Microsoft Press. ISBN 0-7356-2353-8. http://www.microsoft.com/mspress/books/10250.aspx. 




[edit] External links

Microsoft Solution Framework home page
Microsoft Solution Framework in Visual Studio 2005 Team System
MSF Essentials book
MSF Resources at North Star Analytics




Retrieved from "http://en.wikipedia.org/wiki/Microsoft_Solutions_Framework"
Categories: Microsoft | Microsoft development tools | Project management | Software development | Agile software developmentHidden categories: Articles lacking sources from March 2008 | All articles lacking sources 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Français
Русский









 This page was last modified on 5 April 2009, at 17:12 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
