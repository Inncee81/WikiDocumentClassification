













Progressive enhancement - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Progressive_enhancement";
		var wgTitle = "Progressive enhancement";
		var wgAction = "view";
		var wgArticleId = "3302324";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280789001;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Progressive enhancement

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Progressive enhancement is a strategy for web design that emphasizes accessibility, semantic markup, and external stylesheet and scripting technologies. Progressive enhancement uses web technologies in a layered fashion that allows everyone to access the basic content and functionality of a web page, using any browser or Internet connection, while also providing those with better bandwidth or more advanced browser software an enhanced version of the page.




Contents


1 History
2 Introduction and background
3 Core principles
4 Support and adoption
5 Benefits for accessibility
6 Benefits for search engine optimization (SEO)
7 Criticism and responses
8 See also
9 References
10 Related Reading

10.1 Articles
10.2 Books


11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
"Progressive Enhancement" was coined by Steven Champeon of hesketh.com in a series of articles and presentations for Webmonkey and the SXSW Interactive conference between March and June of 2003.[1][2]

[edit] Introduction and background
The strategy is an attempt to subvert the traditional web design strategy known as "graceful degradation", wherein designers would create Web pages for the latest browsers that would also work well in older versions of browser software. Graceful degradation was supposed to allow the page to "degrade", or remain presentable even if certain technologies assumed by the design were not present, without being jarring to the user of such older software. In practice, graceful degradation has been supplanted by an attitude that the end user should "just upgrade". This attitude is due to time and budget constraints, limited access to testing alternate browser software, as well as the widespread belief that "browsers are free". Unfortunately, upgrading is often not possible due to IT department policies, older hardware, and other reasons. The "just upgrade" attitude also ignores deliberate user choices and the existence of a variety of browser platforms; many of which run on handhelds or in other contexts where available bandwidth is restricted, or where support for sound or color and limited screen size, for instance, are far different from the typical graphical desktop browser.
In Progressive Enhancement (PE) the strategy is deliberately reversed: a basic markup document is created, geared towards the lowest common denominator of browser software functionality, and then the designer adds in functionality or enhancements to the presentation and behavior of the page, using modern technologies such as Cascading Style Sheets or JavaScript (or other advanced technologies, such as Flash or Java applets or SVG, etc.) All such enhancements are externally linked, in order to avoid forcing browsers of lesser capability to "eat" data they do not understand and cannot handle, or which would swamp their Internet connection.
The PE approach is derived from Champeon's early experience (c. 1993-4) with SGML, before working with HTML or any Web presentation languages, as well as from later experiences working with CSS to work around browser bugs. In those early SGML contexts, semantic markup was of key importance, whereas presentation was nearly always considered separately, rather than being embedded in the markup itself. This concept is variously referred to in markup circles as the rule of separation of presentation and content, separation of content and style, or of separation of semantics and presentation. As the Web evolved in the mid-nineties, but before CSS was introduced and widely supported, this cardinal rule of SGML was repeatedly violated by HTML's extenders. As a result, web designers were forced to adopt new, disruptive technologies and tags in order to remain relevant. With a nod to graceful degradation, in recognition that not everyone had the latest browser, many began to simply adopt design practices and technologies only supported in the most recent and perhaps the single previous major browser releases. For several years, much of the Web simply did not work in anything but the most recent, most popular browsers. This remained true until the rise and widespread adoption of and support for CSS, as well as many populist, grassroots educational efforts (from Eric Costello, Owen Briggs, Dave Shea, and others) showing Web designers how to use CSS for layout purposes.
PE is based on a recognition that the core assumption behind "graceful degradation" — that browsers always got faster and more powerful — was proving itself false with the rise of handheld and PDA devices with low-functionality browsers and serious bandwidth constraints. In addition, the rapid evolution of HTML and related technologies in the early days of the Web has slowed, and very old browsers have become obsolete, freeing designers to use powerful technologies such as CSS to manage all presentation tasks and JavaScript to enhance complex client-side behavior.
First proposed as a somewhat less unwieldy catchall phrase to describe the delicate art of "separating document structure and contents from semantics, presentation, and behavior", and based on the then-common use of CSS hacks to work around rendering bugs in specific browsers, the PE strategy has taken on a life of its own as new designers have embraced the idea and extended and revised the approach.

[edit] Core principles
Progressive Enhancement consists of the following core principles:

basic content should be accessible to all browsers
basic functionality should be accessible to all browsers
sparse, semantic markup contains all content
enhanced layout is provided by externally linked CSS
enhanced behavior is provided by unobtrusive, externally linked JavaScript
end user browser preferences are respected


[edit] Support and adoption

Jim Wilkinson created a page for Progressive Enhancement Wiki to collect some tricks and tips and to explain the overall strategy.[3]
Designers such as Jeremy Keith have shown how the approach can be used harmoniously with still other approaches to modern Web design (such as Ajax) to provide flexible, but powerful, user experiences.[4]
Others, including Dave Shea, have helped to spread the adoption of the term to refer to CSS-based design strategies.
Organizations such as the Web Standards Project have embraced PE as a basis for their educational efforts.
In 2006 Nate Koechley at Yahoo! made extensive reference to PE in his own approach to Web design and browser support, Graded Browser Support (GBS).[5]
Steve Chipman at AOL has referred to PE as a basis for his Web design strategy.[6]
David Artz, leader of the AOL Optimization team, developed a suite of Accessible Rendering Technologies, and invented a technique for disassembly of the “enhancement” on the fly, saving the user’s preference.
Chris Heilmann discusses the importance of targeted delivery of CSS so that each browser only gets the content (and enhancements) it can handle.[7]


[edit] Benefits for accessibility
Web pages created according to the principles of PE are by their nature more accessible, because the strategy demands that basic content always be available, not obstructed by commonly unsupported or easily disabled scripting. Additionally, the sparse markup principle makes it easier for tools that read content aloud to find that content. It is unclear as to how well PE sites work with older tools designed to deal with table layouts, "tag soup," and the like.

[edit] Benefits for search engine optimization (SEO)
Improved results with respect to Search Engine Optimization is another side effect of a PE-based Web design strategy. Because the basic content is always accessible to search engine spiders, pages built with PE methods avoid problems that may hinder search engine indexing[8].

[edit] Criticism and responses
Some skeptics, such as Garret Dimon, have expressed their concern that PE is not workable in situations that rely heavily on JavaScript to achieve certain user interface presentations or behaviors.[9]. Others have countered with the point that informational pages should be coded using PE in order to be indexed by spiders,[10] and that even Flash-heavy pages should be coded using PE.[11] In a related area, many have expressed their doubts concerning the principle of the separation of content and presentation in absolute terms, pushing instead for a realistic recognition that the two are inextricably linked.[12][13]

[edit] See also

Unobtrusive JavaScript
Ajax
Graceful degradation
Liquid layout


[edit] References

Olsson, Tommy (2007) for Accessites.org Graceful Degradation & Progressive Enhancement Retrieved April 2, 2007.
Shea, Dave (2004) Zen and the Art of Web Improvement (WE04 Keynote) Retrieved April 14, 2006.
Koechley, Nate (2006) Graded Browser Support Retrieved April 14, 2006.
Stearns, Geoff (2006) Using Alternate Content As Content In Flash Retrieved April 14, 2006.
Edwards, James & Adams, Cameron (2006) Script Smarter: Quality JavaScript from Scratch Retrieved April 14, 2006.
Heilmann, Christian (2006) Seven Accessibility Mistakes, Part I Retrieved April 14, 2006.
Nyman, Robert (2006) What is Accessibility? Retrieved April 14, 2006.
101 Search Engine Optimization Tips Retrieved April 14, 2006.
van der Sluis, Bobby (2005) Ten Good Practices for Writing JavaScript in 2005 Retrieved April 14, 2006.
Bowman, Doug (2003) Are They Really Separated? Retrieved April 14, 2006.
Malicoat, Todd (2003) Form vs. Function in Site Design Retrieved April 14, 2006.


Footnoted references



^ Champeon, Steven (2003), Progressive Enhancement and the Future of Web Design, Webmonkey
^ Champeon, Steven & Finck, Nick (2003) Inclusive Web Design for the Future, SxSWi presentation
^ Wilkinson, Jim (2003), CSS-Discuss Wiki page on Progressive Enhancement
^ Adactio, Progressive Enhancement with AJAX
^ Nate Koechley, Graded Browser Support
^ Steven G. Chipman, New Skool DOM Scripting
^ Chris Heilmann, Double Vision – Give the Browsers CSS They Can Digest
^ Stephan Spencer, PE is good for SEO | Searchlight - CNET News
^ Dimon, Garret, The Reality of Progressive Enhancement
^ IA Summit 2006 » Blog Archive » Web 2.0 and SEO?
^ deconcept » Using alternate content as content in Flash
^ Stopdesign | Are They Really Separated?
^ A List Apart: Articles: Separation Anxiety: The Myth of the Separation of Style from Content



[edit] Related Reading

[edit] Articles

Gustafson, Aaron (2007) Ruining the User Experience Retrieved May 7, 2007.
Keith, Jeremy (2006) Behavioral Separation Retrieved May 7, 2007.
Olsson, Tommy (2007) Graceful Degradation & Progressive Enhancement
Hesketh.com, September 12, 2003 Progressive Enhancement: Paving the Way for Future Web Design


[edit] Books

Briggs, Owen; Champeon, Steven; Costello, Eric; Patternson, Matthew (2004) Cascading Style Sheets: Separating Content From Presentation (2nd ed.). San Francisco: Apress. ISBN 1-59059-231-X
Keith, Jeremy (2007) Bulletproof Ajax. Berkeley: New Riders. ISBN 0-321-47266-7
Keith, Jeremy (2005) DOM Scripting: Web Design with JavaScript and the Document Object Model. Berkeley: friends of ED. ISBN 1-590-59533-5


[edit] External links

AnyBrowser Pages
Color Vision - by Cal Henderson
The W3C Markup Validation Service




Retrieved from "http://en.wikipedia.org/wiki/Progressive_enhancement"
Categories: Web design | Usability 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Español
Français
Polski









 This page was last modified on 31 March 2009, at 03:20 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
