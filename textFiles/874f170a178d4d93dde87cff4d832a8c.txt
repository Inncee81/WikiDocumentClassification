













XMLHttpRequest - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "XMLHttpRequest";
		var wgTitle = "XMLHttpRequest";
		var wgAction = "view";
		var wgArticleId = "1594360";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279526957;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-html4strict {line-height: normal;}
.source-html4strict li, .source-html4strict pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for html4strict
 * CSS class: source-html4strict, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-html4strict .de1, .source-html4strict .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-html4strict  {}
.source-html4strict .head {}
.source-html4strict .foot {}
.source-html4strict .imp {font-weight: bold; color: red;}
.source-html4strict .ln-xtra {color: #cc0; background-color: #ffc;}
.source-html4strict li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-html4strict li.li2 {font-weight: bold;}
.source-html4strict .kw1 {color: #b1b100;}
.source-html4strict .kw2 {color: #000000; font-weight: bold;}
.source-html4strict .kw3 {color: #000066;}
.source-html4strict .coMULTI {color: #808080; font-style: italic;}
.source-html4strict .es0 {color: #000099; font-weight: bold;}
.source-html4strict .br0 {color: #66cc66;}
.source-html4strict .st0 {color: #ff0000;}
.source-html4strict .nu0 {color: #cc66cc;}
.source-html4strict .sc0 {color: #00bbdd;}
.source-html4strict .sc1 {color: #ddbb00;}
.source-html4strict .sc2 {color: #009900;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); XMLHttpRequest

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (June 2008)







This article contains instructions, advice, or how-to content. The purpose of Wikipedia is to present facts, not to train. Please help improve this article either by rewriting the how-to content or by moving it to Wikiversity or Wikibooks.




HTTP


Persistence · Compression · SSL


Headers


ETag · Cookie · Referrer


Status codes


301 Moved permanently


302 Found


303 See Other


403 Forbidden


404 Not Found



This box: view • talk • edit



XMLHttpRequest (XHR) is a DOM API that can be used inside a web browser scripting language, such as Javascript, to send an HTTP request directly to a web server and load the server response data directly back into the scripting language. Once the data is within the scripting language, it is available as both an XML document, if the response was valid XML markup, and as plain text. The XML data can easily be used to manipulate the currently active document in the browser without the need of the client loading a new web page document. Plain text data can be evaluated within the scripting language to manipulate the document, too; in the example of Javascript, the plain text may be formatted as JSON by the web server and evaluated within Javascript to create an object of data for use on the current DOM.
This type of AJAX architecture should not be confused with (XDR) XDomainRequest which is a lightweight form of the XMLHttpRequest design by Microsoft which doesn't utilize XML-RPC. [1]
XMLHttpRequest is an important part of the AJAX web development technique, and it is used by many websites to implement responsive and dynamic web applications. Examples of web applications that make use of XMLHttpRequest include Google Maps, Windows Live's Virtual Earth, the MapQuest dynamic map interface, Facebook, and many others.




Contents


1 History and support
2 Cross-site HTTP requests
3 Known problems

3.1 Caching

3.1.1 Workaround


3.2 Reusing XMLHttpRequest Object in IE
3.3 Cross-browser support


4 Frameworks
5 References
6 See also
7 External links

7.1 Documentation/Browser implementations
7.2 Cross-Browser implementations
7.3 Tutorials
7.4 Security







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History and support
The XMLHttpRequest concept was originally developed by Microsoft as a server side API call for Outlook Web Access 2000.[2] At the time, it was not a standards-based web client feature; however, de facto support for it has been implemented by many major web browsers. The Microsoft implementation is called XMLHTTP. It has been available since the introduction of Internet Explorer 5.0[3] and is accessible via JScript, VBScript and other scripting languages supported by IE browsers. In JScript, Internet Explorer versions prior to 7.0 require XMLHTTP to be invoked as an ActiveXObject, so they cannot instantiate the XMLHttpRequest class without help as follows:


// Provide the XMLHttpRequest class for IE 5.x-6.x:
if( typeof XMLHttpRequest == "undefined" ) XMLHttpRequest = function() {
  try { return new ActiveXObject("Msxml2.XMLHTTP.6.0") } catch(e) {}
  try { return new ActiveXObject("Msxml2.XMLHTTP.3.0") } catch(e) {}
  try { return new ActiveXObject("Msxml2.XMLHTTP") } catch(e) {}
  try { return new ActiveXObject("Microsoft.XMLHTTP") } catch(e) {}
  throw new Error( "This browser does not support XMLHttpRequest." )
};

The Mozilla project incorporated the first compatible native implementation of XMLHttpRequest in Mozilla 1.0 in 2002. This implementation was later followed by Apple since Safari 1.2, Konqueror, Opera Software since Opera 8.0, iCab since 3.0b352, and Microsoft since Internet Explorer 7.0.[3]
The World Wide Web Consortium published a Working Draft specification for the XMLHttpRequest object's API on 15 April 2008.[4] Its goal is "to document a minimum set of interoperable features based on existing implementations, allowing Web developers to use these features without platform-specific code". The draft specification is based upon existing popular implementations, to help improve and ensure interoperability of code across web platforms. As of April 2008, the W3C standard was still a work in progress.
On 25 February 2008 the World Wide Web Consortium published a Working Draft of XMLHttpRequest2 object's API with some extended functionality (such as progress events, cross-site requests, handling of byte streams)[5].
Web pages that use XMLHttpRequest or XMLHTTP can mitigate the current minor differences in the implementations either by encapsulating the XMLHttpRequest object in a JavaScript wrapper, or by using an existing framework that does so. In either case, the wrapper should detect the abilities of current implementation and work within its requirements.
Traditionally, there have been other methods to achieve a similar effect of server dynamic applications using scripting languages and/or plugins:

Invisible IFrames (or Netscape Navigator's equivalent ilayers)
Remote Scripting
Netscape's LiveConnect
Microsoft's ActiveX
Microsoft's XML Data Islands
Adobe Flash Player
Java applets

In addition, the World Wide Web Consortium has several recommendations that also allow for dynamic communication between a server and user agent, though few of them are well supported.[citation needed] These include:

The object element defined in HTML 4 for embedding arbitrary content types into documents, (replaces inline frames under XHTML 1.1)
The Document Object Model (DOM) Level 3 Load and Save Specification.[6]


[edit] Cross-site HTTP requests
Modern browsers are in the process of implementing cross-site XMLHttpRequests, notably Firefox 3.1. [7] An alternate technique for cross-site HTTP requests is AJAST.

[edit] Known problems

[edit] Caching
Most of the implementations also realize HTTP caching. Internet Explorer and Firefox do, but there is a difference in how and when the cached data is revalidated. Firefox revalidates the cached response every time the page is refreshed, issuing an "If-Modified-Since" header with value set to the value of the "Last-Modified" header of the cached response.
Internet Explorer does so only if the cached response is expired (i.e., after the date of received "Expires" header). This raises some issues, since a bug exists in Internet Explorer, where the cached response is never refreshed.[8]
It is possible to unify the caching behavior on the client. The following script illustrates an example approach (See the history and support section for compatibility with versions of Internet Explorer prior to 7.0):


var request =  new XMLHttpRequest();
request.open("GET", url, false);
request.send(null);
if(!request.getResponseHeader("Date")) {
  var cached = request;
  request =  new XMLHttpRequest();
  var ifModifiedSince = cached.getResponseHeader("Last-Modified");
  ifModifiedSince = (ifModifiedSince) ?
      ifModifiedSince : new Date(0); // January 1, 1970
  request.open("GET", url, false);
  request.setRequestHeader("If-Modified-Since", ifModifiedSince);
  request.send("");
  if(request.status == 304) {
    request = cached;
  }
}

In Internet Explorer, if the response is returned from the cache without revalidation, the "Date" header is an empty string. The workaround is achieved by checking the "Date" response header and issuing another request if needed. In case a second request is needed, the actual HTTP request is not made twice, as the first call would not produce an actual HTTP request.
The reference to the cached request is preserved, because if the response code/status of the second call is "304 Not Modified", the response body becomes an empty string ("") and then it is needed to go back to the cached object. A way to save memory and expenses of second object creation is to preserve just the needed response data and reuse the XMLHttpRequest object.
The above script relies on the assumption that the "Date" header is always issued by the server, which should be true for most server configurations. Also, it illustrates a synchronous communication between the server and the client. In case of asynchronous communication, the check should be made during the callback.
This problem is often overcome by employing techniques preventing the caching at all. Using these techniques indiscriminately can result in poor performance and waste of network bandwidth.
If script executes operation that has side effects (e.g. adding a comment, marking message as read) which requires that request always reaches the end server, it should use POST method instead.

[edit] Workaround
Internet Explorer will also cache dynamic pages and this is a problem because the URL of the page may not change but the content will (for example a news feed). A workaround for this situation can be achieved by adding a unique time stamp or random number, or possibly both, typically using the Date object and/or Math.random().
For simple document request the query string delimiter '?' can be used, or for existing queries a final sub-query can be added after a final '&' – to append the unique query term to the existing query. The downside is that each such request will fill up the cache with useless (never reused) content that could otherwise be used for other cached content (more useful data will be purged from cache to make room for these one-time responses).
A better workaround can be achieved by adding meta tags to dynamic pages in order to make them no-cachable:


<meta http-equiv="Pragma" content="no-cache" />
<meta http-equiv="Expires" content="-1" />


[edit] Reusing XMLHttpRequest Object in IE
In IE, if the open method is called after setting the onreadystatechange callback, there will be a problem when trying to reuse the XHR object. To be able to reuse the XHR object properly, use the open method first and set onreadystatechange later. This happens because IE resets the object implicitly in the open method if the status is 'completed'. For more explanation of reuse: Reusing XMLHttpRequest Object in IE. The downside to calling the open method after setting the callback is a loss of cross-browser support for readystates. See the quirksmode article.

[edit] Cross-browser support
Microsoft developers were the first to include the XMLHttp object in their MSXML ActiveX control. Developers at the open source Mozilla project saw this invention and ported their own XMLHttp, not as an ActiveX control but as a native browser object called XMLHttpRequest. Konqueror, Opera and Safari have since implemented similar functionality but more along the lines of an identical XMLHttpRequest. Some Ajax developer and run-time frameworks only support one implementation of XMLHttp while others support both. Developers building Ajax functionality from scratch can provide if/else logic within their client-side JavaScript to use the appropriate XMLHttp object as well. Internet Explorer 7 added native support for the XMLHttpRequest object, but retains backward compatibility with the ActiveX implementation.[3] To avoid excess conditionals, see the source code in the history and support section.

[edit] Frameworks
Because of the complexity of handling cross-browser distinctions between XMLHttpRequest implementations, a number of Ajax frameworks have emerged to abstract these differences into a set of reusable programming constructs.

[edit] References


^ XDomainRequest, Microsoft Developer Network
^ XMLHTTP's Original Development, Article on XMLHTTP Original Development from an Original Developer
^ a b c Dutta, Sunava (2006-01-23). "Native XMLHTTPRequest object". IEBlog. Microsoft. http://blogs.msdn.com/ie/archive/2006/01/23/516393.aspx. Retrieved on 2006-11-30. 
^ The XMLHttpRequest Object 15 April 2008
^ The XMLHttpRequest2 Object 25 February 2008
^ Document Object Model (DOM) Level 3 Load and Save Specification, V 1.0, W3C Recommendation 07 April 2004
^ HTTP access control Information
^ - Sergey Ilinsky's cross-compatible XMLHttpRequest implementation (Internet Explorer: cached document is not checked against modification date)



[edit] See also

Ajax (programming)
AJAST (Programming)
HTTP
Representational State Transfer (REST)


[edit] External links





This section includes a list of references or external links, but its sources remain unclear because it lacks inline citations. Please improve this article by introducing more precise citations where appropriate. (June 2008)



[edit] Documentation/Browser implementations

The XMLHttpRequest Object — W3C Working Draft
Apple Safari 1.2
Microsoft IXMLHTTPRequest
Mozilla XML Extras
Opera 9


[edit] Cross-Browser implementations

Standard-compliant cross-browser implementation of XMLHttpRequest object


[edit] Tutorials

Very Dynamic Web Interfaces
Ajax tutorial for creating client-side dynamic web pages


[edit] Security

"Attacking AJAX Applications", a presentation given at the Black Hat security conference. Discusses several issues involving XHR and the future of cross-domain AJAX.




Retrieved from "http://en.wikipedia.org/wiki/XMLHttpRequest"
Categories: JavaScript programming language | XML | HTTP | HTTP clients | Ajax (programming) | Articles with example code | MicrosoftHidden categories: Articles needing additional references from June 2008 | Articles containing how-to sections | All articles with unsourced statements | Articles with unsourced statements since June 2008 | Articles lacking in-text citations from June 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Deutsch
Español
Français
Íslenska
Italiano
Nederlands
日本語
Polski
Português
Română
Русский
Svenska
ไทย
Türkçe
Українська
中文









 This page was last modified on 25 March 2009, at 05:42.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
