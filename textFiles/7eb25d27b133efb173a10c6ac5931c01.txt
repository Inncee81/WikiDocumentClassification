













Object-oriented analysis and design - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Object-oriented_analysis_and_design";
		var wgTitle = "Object-oriented analysis and design";
		var wgAction = "view";
		var wgArticleId = "2613984";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 275034662;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Object-oriented analysis and design

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Object-oriented analysis and design (OOAD) is a software engineering approach that models a system as a group of interacting objects. Each object represents some entity of interest in the system being modeled, and is characterised by its class, its state (data elements), and its behavior. Various models can be created to show the static structure, dynamic behavior, and run-time deployment of these collaborating objects. There are a number of different notations for representing these models, such as the Unified Modeling Language (UML).
Object-oriented analysis (OOA) applies object-modeling techniques to analyze the functional requirements for a system. Object-oriented design (OOD) elaborates the analysis models to produce implementation specifications. OOA focuses on what the system does, OOD on how the system does it.




Contents


1 Object-oriented systems
2 Object-oriented analysis
3 Object-oriented design
4 Literature
5 See also
6 References
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Object-oriented systems
An object-oriented system is composed of objects. The behavior of the system results from the collaboration of those objects. Collaboration between objects involves them sending messages to each other. Sending a message differs from calling a function in that when a target object receives a message, it itself decides what function to carry out to service that message. The same message may be implemented by many different functions, the one selected depending on the state of the target object.
The implementation of "message sending" varies depending on the architecture of the system being modeled, and the location of the objects being communicated with.

[edit] Object-oriented analysis
Object-oriented analysis (OOA) looks at the problem domain, with the aim of producing a conceptual model of the information that exists in the area being analyzed. Analysis models do not consider any implementation constraints that might exist, such as concurrency, distribution, persistence, or how the system is to be built. Implementation constraints are dealt with during object-oriented design (OOD). Analysis is done before the Design[citation needed].
The sources for the analysis can be a written requirements statement, a formal vision document, interviews with stakeholders or other interested parties. A system may be divided into multiple domains, representing different business, technological, or other areas of interest, each of which are analyzed separately.
The result of object-oriented analysis is a description of what the system is functionally required to do, in the form of a conceptual model. That will typically be presented as a set of use cases, one or more UML class diagrams, and a number of interaction diagrams. It may also include some kind of user interface mock-up.

[edit] Object-oriented design
Main article: Object oriented design
Object-oriented design (OOD) transforms the conceptual model produced in object-oriented analysis to take account of the constraints imposed by the chosen architecture and any non-functional – technological or environmental – constraints, such as transaction throughput, response time, run-time platform, development environment, or programming language.
The concepts in the analysis model are mapped onto implementation classes and interfaces. The result is a model of the solution domain, a detailed description of how the system is to be built.

[edit] Literature

Grady Booch. "Object-oriented Analysis and Design with Applications, 3rd edition":http://www.informit.com/store/product.aspx?isbn=020189551X Addison-Wesley 2007.
Rebecca Wirfs-Brock, Brian Wilkerson, Lauren Wiener. Designing Object Oriented Software. Prentice Hall, 1990. [A down-to-earth introduction to the object-oriented programming and design.]
A Theory of Object-Oriented Design: The building-blocks of OOD and notations for representing them (with focus on design patterns.)
Martin Fowler. Analysis Patterns: Reusable Object Models. Addison-Wesley, 1997. [An introduction to object-oriented analysis with conceptual models]
Bertrand Meyer. Object-oriented software construction. Prentice Hall, 1997.
Brett McLaughlin, Gary Pollice, David West. Head First Object-Oriented Analysis and Design. O'Reilly, 2006.
Craig Larman. Applying UML and Patterns - Introduction to OOA/D & Iterative Development. Prentice Hall PTR, 3rd ed. 2005.


[edit] See also

Schlaer-Mellor
Object-oriented modeling
Object-oriented programming
Object-oriented user interface
Meta-model
Software analysis pattern
Model Driven Engineering (MDE)
Model-driven architecture (MDA)
Domain Specific Language (DSL)
Domain-specific modelling (DSM)
Model-based testing (MBT)
Object modeling language
QVT The OMG Queries/Views/Transformations Model Transformation Language
Unified Modeling Language UML
ATLAS Transformation Language ATL
Meta-Object Facility MOF
XML Metadata Interchange XMI
Class-Responsibility-Collaboration card (CRC cards)
Domain-driven design


[edit] References
This article was originally based on material from the Free On-line Dictionary of Computing, which is licensed under the GFDL.





This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (February 2009)



[edit] External links

Article Object-Oriented Analysis and Design with UML and RUP an overview (also about CRC cards).
Applying UML - Object Oriented Analysis & Design tutorial
OOAD & UML Resource website and Forums - Object Oriented Analysis & Design with UML.
Article Object-Oriented Analysis in the Real World








v • d • e

Unified Modeling Language





Actors

Organizations: Object Management Group • UML Partners • Persons: Grady Booch • Ivar Jacobson • James Rumbaugh






Concepts

Object oriented: Object-oriented programming • Object-oriented analysis and design
Structure: Actor • Attribute • Artifact • Class • Component • Interface • Object • Package
Behavior: Activity • Event • Message • Method • State • Use case
Relationships: Aggregation • Association • Composition • Dependency • Generalization (or Inheritance)
Extensibility: Profile • Stereotype • Other concepts: Multiplicity






Structure diagrams

Class diagram • Component diagram • Composite structure diagram • Deployment diagram • Object diagram • Package diagram






Behavior diagrams

Activity diagram • State Machine diagram • Use case diagram






Interaction diagrams

Communication diagram • Sequence diagram • Interaction overview diagram • Timing diagram






Other topics

Glossary of UML terms • IBM Rational Unified Process • List of UML tools • Systems Modeling Language • UML colors • XMI









Retrieved from "http://en.wikipedia.org/wiki/Object-oriented_analysis_and_design"
Categories: Object-oriented programming | Software designHidden categories: All articles with unsourced statements | Articles with unsourced statements since December 2008 | Wikipedia articles incorporating text from FOLDOC | Articles needing additional references from February 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Dansk
Deutsch
Español
Français
日本語
Türkçe









 This page was last modified on 4 March 2009, at 23:00 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
