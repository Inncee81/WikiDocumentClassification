













Event-driven programming - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Event-driven_programming";
		var wgTitle = "Event-driven programming";
		var wgAction = "view";
		var wgArticleId = "62599";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280200939;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-tcl {line-height: normal;}
.source-tcl li, .source-tcl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for tcl
 * CSS class: source-tcl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-tcl .de1, .source-tcl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-tcl  {}
.source-tcl .head {}
.source-tcl .foot {}
.source-tcl .imp {font-weight: bold; color: red;}
.source-tcl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-tcl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-tcl li.li2 {font-weight: bold;}
.source-tcl .kw1 {color: #ff7700;font-weight:bold;}
.source-tcl .kw2 {color: #008000;}
.source-tcl .kw3 {color: #dc143c;}
.source-tcl .kw4 {color: #0000cd;}
.source-tcl .co1 {color: #808080; font-style: italic;}
.source-tcl .coMULTI {color: #808080; font-style: italic;}
.source-tcl .es0 {color: #000099; font-weight: bold;}
.source-tcl .br0 {color: #66cc66;}
.source-tcl .st0 {color: #483d8b;}
.source-tcl .nu0 {color: #ff4500;}
.source-tcl .me1 {color: black;}
.source-tcl .re0 {color: #ff3333;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Event-driven programming

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


Programming paradigms




Agent-oriented
Component-based

Flow-based
Pipeline


Concatenative
Concurrent computing
Context-oriented
Declarative (Contrast: Imperative)

Functional

Dataflow

Cell-oriented (spreadsheets)
Reactive




Goal-directed

Constraint
Constraint logic
Logic

Abductive logic
Inductive logic






Event-driven
Feature-oriented
Function-level (Contrast: Value-level)
Imperative (Contrast: Declarative)

Advanced separation of concerns

Aspect-oriented
Subject-oriented


Array (Contrast: Scalar)
Automata-based
Object-oriented

Class-based
Prototype-based


Procedural

Structured


Role-oriented
Scalar (Contrast: Array)


Iterative (Contrast: Recursive)
Metaprogramming

Attribute-oriented
Automatic

Generic

Template

Policy-based




Language-oriented

Grammar-oriented

Dialecting


Intentional




Reflective


Modular
Nondeterministic
Parallel computing

Process-oriented


Programming in the large and programming in the small
Recursive (Contrast: Iterative)
Tree
Value-level (Contrast: Function-level)


This box: view • talk • edit



In computer programming, event-driven programming or event-based programming is a programming paradigm in which the flow of the program is determined by events — i.e., sensor outputs or user actions (mouse clicks, key presses) or messages from other programs or threads.
Event-driven programming can also be defined as an application architecture technique in which the application has a main loop which is clearly divided down to two sections: the first is event selection (or event detection), and the second is event handling. In embedded systems the same may be achieved using interrupts instead of a constantly running main loop; in that case the former portion of the architecture resides completely in hardware.
Event-driven programs can be written in any language, although the task is easier in languages that provide high-level abstractions, such as closures. Some integrated development environments provide code generation assistants that automate the most repetitive tasks required for event handling.




Contents


1 Contrast with batch programming

1.1 Batch version
1.2 Event-driven version


2 Example: reading from a socket
3 Event handlers

3.1 A trivial event handler


4 Creating event handlers
5 Binding event handlers
6 Main loop
7 See also
8 References
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Contrast with batch programming
In contrast, in batch programming, the flow is determined by the programmer. Although batch programming is the style taught in beginning programming classes, the more complex event-driven programming is the standard architecture of modern interactive programs.
Here are two pseudocode versions of a trivial program to add two numbers:

[edit] Batch version

read a number (from the keyboard) and store it in variable A[0]
read a number (from the keyboard) and store it in variable A[1]
print A[0]+A[1]


[edit] Event-driven version

set counter K to 0
repeat
{
   if a number has been entered (from the keyboard)
   {
     store in A[K] and increment K
     if K equals 2 print A[0]+A[1] and reset K to 0
   }
}

At first sight, the event-driven program seems more cumbersome and for such a trivial task is indeed so. However, the second program can be generalized far more easily than the first. Instead of checking just for a number entry we may add code to check whether any of several events has occurred. Then for each event we can execute a particular piece of code that is commonly referred to as an event handler.
A slight variation in the above further illustrates the point:

set counter K to 0
repeat
{
   whenever a number has been entered (from the keyboard) // keyboard-number event
   {
     store in A[K] and increment K // keyboard-number handler
   }
   if K equals 2 // ready-to-sum event
   {
     print A[0]+A[1] and reset K to 0 // ready-to-sum handler
   }
}


[edit] Example: reading from a socket





This section overlaps with other sections too much. It should be combined with the rest of the article.
Please improve this article if you can.


This example uses pseudocode to illustrate how data is read from a socket using an event-driven approach:

function read_next_data(fd)
   data = read_async( fd )
   if len(data) == 0
       => Nothing to read, register to be called back when something is ready
       event_polling_register( fd, read_next_data )
       => Go back to doing something else
   else
       => Data was available and len(data) was received
       add_data_to_buffer( buffer, data )
   end_if
end_function

This example uses Tcl code to illustrate how data is read from a socket using an event-driven approach:


 # open channel
 set chan [socket $host $port]
 set buffer ""
 fconfigure $chan -blocking none
 # register event handler
 fileevent $chan readable [list read_next_data $chan buffer]  
 
 # process event until end of file
 proc read_next_data {chan bufferVar} {
    upvar #0 $bufferVar buffer
    append buffer [read $chan]
    if {[eof $chan]} {close $chan}
 }


[edit] Event handlers
Because the code for checking for events and the main loop does not depend on the application, many programming frameworks take care of their implementation and expect the user to provide only the code for the event handlers. In this simple example there may be a call to event handler called OnKeyEnter() that includes an argument with a string of characters, corresponding to what the user typed before hitting the ENTER key. If we want to add two numbers we need to use storage outside the event handler, so the implementation might look like this

[edit] A trivial event handler

globally declare the counter K and the integer T.
OnKeyEnter(character C)
{
   convert C to a number N
   if K is zero store N in T and increment K
   otherwise add N to T, print the result and reset K to zero
}

While keeping track of history is straightforward in a batch program, it requires special attention and planning in an event-driven program.

[edit] Creating event handlers
The first step in developing an event-driven program is to write a series of subroutines, or methods, called event-handler routines. These routines handle the events that the main program will respond to. For example, in a GUI program, we might be interested in a single (as opposed to a double) left-button mouse-click on a command button. So a routine would be written to respond to such an event. The routine might open another window, save data to a database or exit the application. Many modern day programming environments provide the programmer with event templates so that the programmer need only supply the event code.

[edit] Binding event handlers
The second step is to bind event handlers to events, so that the correct function is called when the event takes place.
Graphical editors combine the first two steps: double-click on a button, and the editor creates an (empty) event handler associated with the user clicking the button and opens a text window so you can edit the event handler.

[edit] Main loop
Main article: main loop
The third step in developing an event-driven program is to write the main loop: a function that checks for events, and then calls the matching event handler. Most event-driven programming environments already provide this main loop, so it need not be rewritten.


[edit] See also

Signal programming (a similar concept)
Programming paradigm
Hardware Description Language
SEDA
Event Stream Processing (a similar concept)
Message-oriented middleware
Publish/subscribe
Virtual synchrony, a distributed execution model for event-driven programming
Event-driven architecture


[edit] References



Grant Palmer: Java Event Handling, Prentice Hall, ISBN 0-13-041802-1.
David Luckham: The Power of Events - An Introduction to Complex Event Processing in Distributed Enterprise Systems, Addison-Wesley, ISBN 0-201-72789-7.
George S. Fishman: Discrete-Event Simulation - Modeling, Programming, and Analysis, Springer, ISBN 0-387-95160-1.
Bertrand Meyer (2004): The power of abstraction, reuse and simplicity: an object-oriented library for event-driven design, in Festschrift in Honor of Ole-Johan Dahl, eds. Olaf Owe et al., Springer-Verlag, Lecture Notes in Computer Science 2635, also available online.
Miro Samek: Practical UML Statecharts in C/C++, Second Edition: Event-Driven Programming for Embedded Systems, Newnes 2008, ISBN 978-0-7506-8706-5.
Faison, Ted (2006). Event-Based Programming: Taking Events to the Limit. Apress. ISBN 1-59059-643-9. 



[edit] External links

Description from Portland Pattern Repository
Tutorial "Event-Driven Programming: Introduction, Tutorial, History" by Stephen Ferg
Tutorial "Event Driven Programming" by Alan Gauld
Article "Event Collaboration" by Martin Fowler
Article "Transitioning from Structured to Event-Driven Programming" by Ben Watson
Article "Rethinking Swing Threading" by Jonathan Simon
Article "The event driven programming style" by Chris McDonald
Article "Event Driven Programming using Template Specialization" by Christopher Diggins
Article "Concepts and Architecture of Vista - a Multiparadigm Programming Environment" by Stefan Schiffer and Joachim Hans Fröhlich
Chapter "Event-Driven Programming and Agents"
LabWindows/CVI Resources
Comment by Tim Boudreau
Complex Event Processing and Service Oriented Architecture [1]
Event-driven programming and SOA: How EDA extends SOA and why it is important Jack van Hoof
For an open source example, see Distributed Publish/Subscribe Event System
Event-driven programming in Java, see open source project Jsasb by Rex Young
For C-Code generation from UML State-Charts for Embedded Systems see Sinelabore.com
StateWizard - A ClassWizard-like event-driven state machine framework and tool running in popular IDEs under open-source license.




Retrieved from "http://en.wikipedia.org/wiki/Event-driven_programming"
Categories: Programming paradigms | Events (computing) | Articles with example pseudocodeHidden categories: Articles in need of internal merging 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Galego
Italiano
עברית
Nederlands
日本語
Polski
Português
Română
Русский
Simple English
Türkçe
中文









 This page was last modified on 28 March 2009, at 12:23.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
