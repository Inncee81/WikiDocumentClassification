













Software metric - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Software_metric";
		var wgTitle = "Software metric";
		var wgAction = "view";
		var wgArticleId = "187442";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281676211;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Software metric

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





It has been suggested that Programming Complexity be merged into this article or section. (Discuss)







This article or section reads like an editorial or opinion piece and may require cleanup.
Please improve this article by rewriting this article or section in an encyclopedic style to make it neutral in tone.
See Wikipedia:How to edit a page and Category:Wikipedia help for help, or this article's talk page. (documentation, talk)(May 2008)


A software metric is a measure of some property of a piece of software or its specifications.
Since quantitative methods have proved so powerful in the other sciences, computer science practitioners and theoreticians have worked hard to bring similar approaches to software development. Tom DeMarco stated, “You can’t control what you can't measure.”[1]
Modern software development practitioners are likely to point out that naive and simplistic metrics can cause more harm than good.[2]




Contents


1 Software Metrices Measurement
2 Common software metrics
3 Limitations
4 See also
5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Software Metrices Measurement
I. The what and why of measurement

  Measurement is an essential element of management; there is little chance of controlling what we
  can not measure.
    A. Measurement assigns numbers based on well deﬁned meaning
        1. Sometimes the environment must be modiﬁed
           In a software context, this can mean special compilers or development procedures that
           track various activities.
    B. Software metrics helps avoid pitfalls
        1. Cost overruns
           Most project fail to separate design and coding costs. Doing so helps identify where
           problems exist.
        2. Clarify goals
           Project goals are often fuzzy, and so it is difﬁcult to quantify how well they have been
           achieved.
    C. Metrics can help answer certain question
        1. What does each process activity cost?
        2. How productive is the staff?
        3. How “good” is code being developed?
        4. How can the code under development be improved?
    D. Measurement is though for understanding, control, and improvement

II. The scope of software metrics

   Software metrics is a term applied to a wide variety of measurement activities, under for a wide va-
   riety of reasons. Software metrics provides a means of measuring software; both under development
   and after a system is ﬁelded. Software is an abstract construct, and measuring it is difﬁcult. What,
   exactly, do you measure to get meaningful results?
     A. Cost and effort estimation
         Various models work to predict the cost and time to complete a project
     B. Productivity models and measures
     C. Data collection
         Consistent, meaningful data collection is difﬁcult, and made more difﬁcult by try to collect
         data across diverse projects.
     D. Quality models and measures
         Bad code is not worth much, even if lots of it is written quickly.
     E. Reliability modeling
         Just how reliable is the software? when can we expect the next failure?
      F. Performance evaluation
         How well does the system perform? Response and completion time, transactions processed,
         etc.


[edit] Common software metrics
Common software metrics include:

Source lines of code
Cyclomatic complexity
Function point analysis
Bugs per line of code
Code coverage
Number of lines of customer requirements.
Number of classes and interfaces
Robert Cecil Martin’s software package metrics
Cohesion
Coupling

The definition of many of these metrics is often imprecise, and consequently it is often unclear how tools for computing them arrive at a particular result [3]. One exception is SemmleCode, where each metric is given a concise definition as a query evaluated against the facts in the program.

[edit] Limitations
It is very difficult to satisfactorily define or measure "how much" software there is in a program, especially when making such a prediction prior to the detail design. The practical utility of software metrics has thus been limited to narrow domains where they include:

Schedule
Size/Complexity
Cost
Quality

Too much emphasis on any one of these aspects of performance is likely to create an imbalance in the team’s motivations, leading to a dysfunctional project.
The Balanced scorecard is a one tool for managing a suite of metrics that address multiple performance perspectives.

[edit] See also

Software development effort estimation
Software engineering
Computer science
Software quality
Software package metrics
Goal Question-Metric
Ohloh: quantitative analysis of hundreds of open source projects
List of code quality management dashboards
Software crisis


[edit] References

^ DeMarco, Tom. Controlling Software Projects: Management, Measurement and Estimation. ISBN 0-13-171711-1. 
^ Dr. Cem Kaner, Software Engineer Metrics: What do they measure and how do we know?
^ Rüdiger Lincke, Jonas Lundberg, Welf Löwe: Comparing software metrics tools. ISSTA 2008: 131-142


[edit] External links

International Function Point Users Group
What is FPA at Nesma website
Estimating With Use Case Points by Mike Cohn. Describes the process to measure the size of an application modeled with UML, using use cases.
OO & Agile Metrics Resources - includes workshop material on gaming metrics to improve their design
Further defines the term Software Metrics with examples.
Free demos of software metrics products for analyzing, planning and monitoring sofwtare projects (cockpits).
Software Engineering Metrics: What do they measure and how do we knwow - An intellectually rigorous treatment of software engineering metrics




Retrieved from "http://en.wikipedia.org/wiki/Software_metric"
Categories: Software metrics | MetricsHidden categories: Articles to be merged since June 2008 | All articles to be merged | Wikipedia articles needing style editing from May 2008 | All articles needing style editing 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Bahasa Indonesia
Italiano
עברית
日本語
Polski
Português
Русский
Türkçe









 This page was last modified on 4 April 2009, at 10:38.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
