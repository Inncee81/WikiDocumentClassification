













NeWS - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "NeWS";
		var wgTitle = "NeWS";
		var wgAction = "view";
		var wgArticleId = "55519";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282981035;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); NeWS

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




HyperTIES browser and Emacs authoring tool with pie menus on the NeWS window system.


NeWS (for Network extensible Window System) was a windowing system developed by Sun Microsystems in the mid 1980s.[1] Originally known as "SunDew",[2] its primary authors were James Gosling and David S. H. Rosenthal. The NeWS interpreter was based on PostScript (as was the later Display PostScript, although the two projects were otherwise unrelated) extending it to allow interaction and multiple "contexts" to support windows. Like PostScript, NeWS could be used as a complete programming language, but unlike PostScript, NeWS could be used to make complete interactive programs with mouse support and a GUI.




Contents


1 Description
2 Licensing

2.1 Applications


3 Competition with X Window System
4 Why did NeWS fail?
5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Description
NeWS started by modifying the PostScript interpreter to run in a cooperative multitasking fashion, since, unlike PostScript in a printer, NeWS would be displaying a number of PostScript programs at the same time on one screen. It also added a complete view hierarchy system, based on viewports known as canvases. Like the view system in most GUIs, NeWS included the concept of a tree of embedded views along which events were passed. For instance, a mouse click would generate an event that would be passed to the object directly under the mouse pointer, say a button. If this object did not respond to the event, the object "under" the button would then receive the message, and so on. NeWS included a complete model for these events, including timers and other automatic events, input queues for devices such as mice and keyboards, and other functionality required for full interaction.
To support event-based programming, NeWS expanded the original PostScript stack-based language into a complete object oriented (OO) programming style with inheritance. This eliminated the need for an external OO language to build a complete application.
Since all of these additions were implemented as extensions to PostScript, it was possible to write simple PostScript code that would result in a running, onscreen, interactive program. Two popular demonstration programs were an onscreen clock, which required about two pages of code, and a program which drew a pair of eyes that followed the cursor as it moved around the screen. The eyeball program was shown at SIGGRAPH in 1988, and was the inspiration for the later well-known X application xeyes.
NeWS included several libraries of user interface elements (widgets), themselves written in NeWS. These widgets ran all of their behaviour in the NeWS interpreter, and only required communications to an outside program (or more NeWS code) when the widget demanded it. For example, a toggle button's display routine can query the button's state (pressed or not) and change its display accordingly. The button's PostScript code can also react to mouse clicks by changing its state from "pressed" to "not pressed" and vice versa. All this can happen in the windowing server without interaction with the client program, and only when the mouse is released on the button will an event be sent off for handling.
This was more sophisticated than the X Window System server model, which can only report "mouse was pushed down here", "mouse is now here", "mouse was released here" events to a client, which then has to figure out if the event is in the button, switch the state, and finally instruct the server to display the new state. If client and server are not on the same machine, these interactions must travel over the network, which results in a delay in responding.
The best example of such a library is TNT (The NeWS Toolkit) which was released by Sun in 1989. Sun also shipped a smaller toolkit intended for example purposes and making small programs.

[edit] Licensing
Although adoption was never widespread, several companies licensed NeWS and adapted it for various uses.

SGI used a version of it named 4Sight to replace their proprietary IRIS GL windowing system.
Grasshopper systems created a Macintosh port called MacNeWS
Architech Corporation ported NeWS to OS/2[3]


[edit] Applications
The OPEN LOOK version of the FrameMaker desktop publishing program, developed by Frame Technology Corp. with funding mainly from Sun Microsystems and NSA, was one of the few commercial products that ran on NeWS. HyperLook, developed by Arthur van Hoff, was an interactive application design system.[4]

[edit] Competition with X Window System
The first versions of NeWS emulated the X11 protocol by translating the calls into NeWS PostScript. Speed problems plus the existence of programs that relied on the exact pixel results of X11 calls forced Sun to release an X11/NeWS hybrid called Xnews which ran an X server in parallel with the PostScript interpreter. This seriously degraded the NeWS interpreter performance and was not considered a very good X server either. Sun also implemented the OPEN LOOK look and feel for X programs in two toolkits: OLIT was built on the same Xt (X Intrinsics) base as Motif, and XView used the same APIs as Sun's earlier SunView window system.
After it was clear that OPEN LOOK had lost out to Motif in popularity, and after Adobe acquired FrameMaker, products on NeWS simply vanished. Most Unix workstations (including Sun's own) now run the X Window System.

[edit] Why did NeWS fail?





This article is written like a personal reflection or essay and may require cleanup. Please help improve it by rewriting it in an encyclopedic style. (March 2008)


In many ways NeWS had an excellent design for thin-networked clients

moving much of the processing to the display
allowing clients to reduce network traffic by defining new operators
separating graphical user interface semantics from client program semantics.
the PostScript drawing model, which is far easier to use and more powerful than other graphical APIs, even compared to ones being used 20 years later.

Many expected it to be a huge success. Possible reasons for its failure in the market include:

NeWS needed to be licensed from Sun, while the source code for the X Window System was freely distributed under the MIT License. Any commercial code shipped using the NeWS libraries required licensing fees to be paid to Sun, Adobe Systems, and Xerox PARC.
NeWS lacked a robust library of reusable code until well after the X Window System had become the dominant paradigm. This mistake was obviously not repeated in Java. Making matters worse, the variety of widget sets offered by Sun was confusing to developers.
PostScript is a poor language to write math expressions in, due to its postfix and stack nature. That was not a detriment to printing, but math is needed extensively for user interface routines such as the calculation of how far down a slider a mouse was clicked. Several compilers from C-like syntax were available, such as pdb (PostScript Done Better) and c2ps, but were cumbersome to use and not supported by Sun.
Writing NeWS applications required coding the client- and server-side parts of the application in two very different programming languages and communicated asynchronously. Coordinating the communication between the two sides was difficult and Sun provided little support for it.
The implementation of the NeWS window server never achieved the level of robustness of competing window systems. The situation was made worse with the NeWS/X11 merge, and was compounded by the timing of its release as part of the first Solaris 2 release, which itself had performance issues.
Management was confused as to what market NeWS applied to and how to best leverage its strengths when comparing to X11

It is interesting to contrast NeWS with Display PostScript (DPS), which used the same underlying imaging model and language, but did so in a very different way. In DPS the PostScript commands were limited to what was needed to draw things; all other operations (such as creating a window to draw into) had to be implemented using other system interfaces. In comparison with NeWS, DPS lacked interesting features such as the ability to use a PostScript path to describe the shape of a window, which also meant DPS required use of the low-level Xlib library and very unwieldy glue code to make sure both DPS and X were agreeing about what to do. However, it also meant that the majority of the system and application code was compiled rather than interpreted, making it many times faster and considerably easier to write and debug. The result was a much smaller engine that like NeWS offered a PostScript-based display, but had higher performance and a somewhat more "natural" programming environment.

[edit] References


^ Don Hopkins. "NeWS - Network extensible Window System". http://www.art.net/studios/Hackers/Hopkins/Don/lang/NeWS.html. Retrieved on 2008-01-08. 
^ Gosling, James (1986). "Article 5 - SunDew". in F.R.A. Hopgood, D.A. Duce .... Methodology of Window Management (Eurographics Seminars) Proceedings of an Alvey Workshop at Cosener's House, Abingdon, UK, April 1985. UK: Springer-Verlag. ISBN 3-540-16116-3. 
^ James Gosling, David S. H. Rosenthal, Michelle J. Arden (1989). The NeWS Book. Springer Verlag. p. 193. ISBN 978-0-387-96915-2. Google Book Search. Retrieved 2009-03-29.
^ HyperLook (aka HyperNeWS (aka GoodNeWS))



[edit] External links

a short description of NeWS
The NeWS eyeball program




Retrieved from "http://en.wikipedia.org/wiki/NeWS"
Categories: PostScript | Sun Microsystems software | Windowing systemsHidden categories: Wikipedia articles needing style editing from March 2008 | All articles needing style editing 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Français
日本語
Nederlands









 This page was last modified on 10 April 2009, at 14:31 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
