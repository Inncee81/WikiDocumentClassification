













Computer-aided software engineering - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Computer-aided_software_engineering";
		var wgTitle = "Computer-aided software engineering";
		var wgAction = "view";
		var wgArticleId = "627071";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281053060;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Computer-aided software engineering

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article contains too much jargon and may need simplification or further explanation. Please discuss this issue on the talk page, and/or remove or explain jargon terms used in the article. Editing help is available. (October 2008)


Computer-Aided Software Engineering (CASE), in the field of Software Engineering is the scientific application of a set of tools and methods to a software which results in high-quality, defect-free, and maintainable software products.[1] It also refers to methods for the development of information systems together with automated tools that can be used in the software development process. [2]




Contents


1 Overview
2 History of CASE
3 CASE Topics

3.1 CASE tools

3.1.1 Classification of CASE Tools

3.1.1.1 Life-Cycle Based CASE Tools
3.1.1.2 Integration Dimension




3.2 CASE Workbenches

3.2.1 Classification of CASE Workbenches


3.3 CASE Environments

3.3.1 Classification of CASE Environments

3.3.1.1 Toolkits
3.3.1.2 Language-centered
3.3.1.3 Integrated
3.3.1.4 Fourth generation
3.3.1.5 Process-centered






4 Applications
5 Risks and associated controls
6 See also
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
The term "Computer-aided software engineering" (CASE) can refer to the software used for the automated development of systems software, i.e., computer code. The CASE functions include analysis, design, and programming. CASE tools automate methods for designing, documenting, and producing structured computer code in the desired programming language.[3]
Two key ideas of Computer-aided Software System Engineering (CASE) are:[4]

the harboring of computer assistance in software development and or software maintenance processes, and
An engineering approach to the software development and or maintenance.

Some typical CASE tools are:

Configuration management tools
Data modeling tools
Model transformation tools
Refactoring tools
Source code generation tools, and
Unified Modeling Language

Many CASE tools not only output code but also generate other output typical of various systems analysis and design methodologies such as

data flow diagram
entity relationship diagram
logical schema
Program specification
SSADM.
User documentation


[edit] History of CASE
The term CASE was originally coined by software company, Nastec Corporation of Southfield, Michigan in 1982 with their original integrated graphics and text editor GraphiText, which also was the first microcomputer-based system to use hyperlinks to cross-reference text strings in documents — an early forerunner of today's web page link. GraphiText's successor product, DesignAid was the first microprocessor-based tool to logically and semantically evaluate software and system design diagrams and build a data dictionary.
Under the direction of Albert F. Case, Jr. vice president for product management and consulting, and Vaughn Frick, director of product management, the DesignAid product suite was expanded to support analysis of a wide range of structured analysis and design methodologies, notable Ed Yourdon and Tom DeMarco, Chris Gane & Trish Sarson, Ward-Mellor (real-time) SA/SD and Warnier-Orr (data driven).
The next entrant into the market was Excelerator from Index Technology in Cambridge, Mass. While DesignAid ran on Convergent Technologies and later Burroughs Ngen networked microcomputers, Index launched Excelerator on the IBM PC/AT platform. While, at the time of launch, and for several years, the IBM platform did not support networking or a centralized database as did the Convergent Technologies or Burroughs machines, the allure of IBM was strong, and Excelerator came to prominence. Hot on the heels of Excelerator were a rash of offerings from companies such as Knowledgeware (James Martin, Fran Tarkenton and Don Addington), Texas Instrument's IEF and Accenture's FOUNDATION toolset (METHOD/1, DESIGN/1, INSTALL/1, FCP).
CASE tools were at their peak in the early 1990s. At the time IBM had proposed AD/Cycle which was an alliance of software vendors centered around IBM's mainframe:

The application development tools can be from several sources: from IBM, from vendors, and from the customers themselves. IBM has entered into relationships with Bachman Information Systems, Index Technology Corporation, and Knowledgeware, Inc. wherein selected products from these vendors will be marketed through an IBM complementary marketing program to provide offerings that will help to achieve complete life-cycle coverage.[5]

With the decline of the mainframe, AD/Cycle and the Big CASE tools died off, opening the market for the mainstream CASE tools of today. Interestingly, nearly all of the leaders of the CASE market of the early 1990s ended up being purchased by Computer Associates, including IEW, IEF, ADW, Cayenne, and Learmonth & Burchett Management Systems (LBMS).

[edit] CASE Topics
Alfonso Fuggetta classified CASE into 3 categories: [6]

Tools support only specific tasks in the software process.
Workbenches support only one or a few activities.
Environments support (a large part of) the software process.

Workbenches and environments are generally built as collections of tools. Tools can therefore be either stand along products or components of workbenches and environments.

[edit] CASE tools
CASE tools are a class of software that automates many of the activities involved in various life cycle phases. For example, when establishing the functional requirements of a proposed application, prototyping tools can be used to develop graphic models of application screens to assist end users to visualize how an application will look after development. Subsequently, system designers can use automated design tools to transform the prototyped functional requirements into detailed design documents. Programmers can then use automated code generators to convert the design documents into code. Automated tools can be used collectively, as mentioned, or individually. For example, prototyping tools could be used to define application requirements that get passed to design technicians who convert the requirements into detailed designs in a traditional manner using flowcharts and narrative documents, without the assistance of automated design software.[7]

[edit] Classification of CASE Tools
Existing CASE Environments can be classified along 4 different dimensions :

Life-Cycle Support
Integration Dimension
Construction Dimension
Knowledge Based CASE dimension [8]

Let us take the meaning of these dimensions along with their examples one by one :

[edit] Life-Cycle Based CASE Tools
This dimension classifies CASE Tools on the basis of the activities they support in the information systems life cycle. They can be classified as Upper or Lower CASE tools.

Upper CASE Tools: support strategic, planning and construction of conceptual level product and ignore the design aspect. They support traditional diagrammatic languages such as ER diagrams, Data flow diagram, Structure charts etc.
Lower CASE Tools : concentrate on the back end activities of the software life cycle and hence support activities like physical design, debugging, construction, testing, integration of software components, maintenance, reengineering and reverse engineering activities.


[edit] Integration Dimension
Three main CASE Integration dimension have been proposed : [9]

CASE Framework
ICASE Tools
Integrated Project Support Environment(IPSE)


[edit] CASE Workbenches
Workbenches integrate integrate several CASE tools into one application to support specific software-process activities. Hence they achieve:

a homogeneous and consistent interface (presentation integration).
easy invocation of tools and tool chains (control integration).
access to a common data set managed in a centralized way (data integration).


[edit] Classification of CASE Workbenches
CASE workbenches can be further classified into following 8 classes:[6]

Business planning and modeling
Analysis and design
User-interface development
Programming
Verification and validation
Maintenance and reverse engineering
Configuration management
Project management


[edit] CASE Environments
An environment is a collection of CASE tools and workbenches that supports the software process.

[edit] Classification of CASE Environments
CASE environments are classified based on the focus/basis of integration[6]

Toolkits
Language-centered
Integrated
Fourth generation
Process-centered


[edit] Toolkits
Toolkits are loosely integrated collections of products easily extended by aggregating different tools and workbenches. Typically, the support provided by a toolkit is limited to programming, configuration management and project management. And the toolkit itself is environments extended from basic sets of operating system tools, for example, the Unix Programmer's Work Bench and the VMS VAX Set. In addition, toolkits' loose integration requires user to activate tools by explicit invocation or simple control mechanisms. The resulting files are unstructured and could be in different format, therefore the access of file from different tools may requite explicit file format conversion. However, since the only constrain for adding a new component is the formats of the files, toolkits can be easily and incrementally extended.[6]

[edit] Language-centered
The environment itself is written in the programming language for which it was developed, thus enable users to reuse, customize and extend the environment. Integration of code in different languages is a major issue for language-centered environments. Lack of process and data integration is also a problem. The strengths of these environments include good level of presentation and control integration. Interlisp, Smalltalk, Rational, and KEE are examples of language-centered environments.[6]

[edit] Integrated
These environment achieve presentation integration by providing uniform, consistent, and coherent tool and workbench interfaces. Data integration is achieved through the repository concept: they have a specialized database managing all information produced and accessed in the environment. Examples of integrated environment are IBM AD/Cycle and DEC Cohesion.[6]

[edit] Fourth generation
Forth generation environments were the first integrated environments. They are sets of tools and workbenches supporting the development of a specific class of program: electronic data processing and business-oriented applications. In general, they include programming tools, simple configuration management tools, document handling facilities and, sometimes, a code generator to produce code in lower level languages. Informix 4GL, and Focus fall into this category.[6]

[edit] Process-centered
Environments in this category focus on process integration with other integration dimensions as starting points. A process-centered environment operates by interpreting a process model created by specialized tools. They usually consist of tools handling two functions:

Process-model execution, and
Process-model production

Examples are East, Enterprise II, Process Wise, Process Weaver, and Arcadia.[6]

[edit] Applications
All aspects of the software development life cycle can be supported by software tools, and so the use of tools from across the spectrum can, arguably, be described as CASE; from project management software through tools for business and functional analysis, system design, code storage, compilers, translation tools, test software, and so on.
However, it is the tools that are concerned with analysis and design, and with using design information to create parts (or all) of the software product, that are most frequently thought of as CASE tools. CASE applied, for instance, to a database software product, might normally involve:

Modelling business / real world processes and data flow
Development of data models in the form of entity-relationship diagrams
Development of process and function descriptions
Production of database creation SQL and stored procedures


[edit] Risks and associated controls
Common CASE risks and associated controls include:

Inadequate Standardization : Linking CASE tools from different vendors (design tool from Company X, programming tool from Company Y) may be difficult if the products do not use standardized code structures and data classifications. File formats can be converted, but usually not economically. Controls include using tools from the same vendor, or using tools based on standard protocols and insisting on demonstrated compatibility. Additionally, if organizations obtain tools for only a portion of the development process, they should consider acquiring them from a vendor that has a full line of products to ensure future compatibility if they add more tools.[7]


Unrealistic Expectations : Organizations often implement CASE technologies to reduce development costs. Implementing CASE strategies usually involves high start-up costs. Generally, management must be willing to accept a long-term payback period. Controls include requiring senior managers to define their purpose and strategies for implementing CASE technologies.[7]


Quick Implementation : Implementing CASE technologies can involve a significant change from traditional development environments. Typically, organizations should not use CASE tools the first time on critical projects or projects with short deadlines because of the lengthy training process. Additionally, organizations should consider using the tools on smaller, less complex projects and gradually implementing the tools to allow more training time.[7]


Weak Repository Controls : Failure to adequately control access to CASE repositories may result in security breaches or damage to the work documents, system designs, or code modules stored in the repository. Controls include protecting the repositories with appropriate access, version, and backup controls.[7]


[edit] See also

Data modeling
Domain-specific modelling
GForge Advanced Server
LibreSource
Model-driven architecture
Modeling language
Rapid application development


[edit] References


^ Kuhn, D.L (1989). "Selecting and effectively using a computer aided software engineering tool". Annual Westinghouse computer symposium; 6-7 Nov 1989; Pittsburgh, PA (USA); DOE Project.
^ P.Loucopoulus and V. Karakostas. System Requirement Engineering.
^ CASE definition In: Telecom Glossary 2000. Retrieved 26 Oct 2008.
^ K. Robinson (1992). Putting the Software Engineering into CASE. New York : John Wiley and Sons Inc.
^ “AD/Cycle strategy and architecture,” IBM Systems Journal, Vol 29, NO 2, 1990; page 172
^ a b c d e f g h Alfonso Fuggetta (December 1993). "A classification of CASE technology". Computer 26 (12): 25-38. doi:10.1109/2.247645. http://www2.computer.org/portal/web/csdl/abs/mags/co/1993/12/rz025abs.htm. Retrieved on 03-14-2009. 
^ a b c d e Software Development Techniques. In: FFIEC InfoBase. Retrieved 26 Oct 2008.
^ Software Engineering : Tools, Principles and Techniques by Sangeeta Sabharwal, Umesh Publications
^ Evans R. Rock. Case Analyst Workbenches : A Detailed Product Evaluation. Volume 1 pp 229-242 by



[edit] External links

Definition and discussion of CASE from Carnegie Mellon Software Engineering Institute


CASE tool index - Quite a comprehensive list


[1] - AD/Cycle Strategy and Architecture




Retrieved from "http://en.wikipedia.org/wiki/Computer-aided_software_engineering"
Categories: Computer-aided software engineering tools | Software development | Data managementHidden categories: Cleanup from October 2008 | Wikipedia articles needing style editing from October 2008 | All articles needing style editing 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Bosanski
Català
Česky
Deutsch
Español
Français
Italiano
Latviešu
Lietuvių
Nederlands
日本語
Polski
Português
ไทย
中文









 This page was last modified on 1 April 2009, at 10:34.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
