













Boolean logic - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Boolean_logic";
		var wgTitle = "Boolean logic";
		var wgAction = "view";
		var wgArticleId = "12351124";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279256153;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Boolean logic

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Boolean logic is a complete system for logical operations. It was named after George Boole, who first defined an algebraic system of logic in the mid 19th century. Boolean logic has many applications in electronics, computer hardware and software, and is the base of digital electronics. In 1938, Claude Shannon showed how electric circuits with relays were a model for Boolean logic. This fact soon proved enormously consequential with the emergence of the electronic computer.
Using the algebra of sets, this article contains a basic introduction to sets, Boolean operations, Venn diagrams, truth tables, and Boolean applications. The Boolean algebra article discusses a type of algebraic structure that satisfies the axioms of Boolean logic. The binary arithmetic article discusses the use of binary numbers in computer systems.




Contents


1 Set logic versus Boolean logic
2 Terms
3 Example

3.1 Chaining operations together
3.2 Use of parentheses
3.3 Application to binary values


4 Properties
5 Other notations
6 Basic mathematics use of Boolean terms
7 English language use of Boolean terms
8 Applications

8.1 Digital electronic circuit design
8.2 Database applications
8.3 Search engine queries


9 See also
10 Notes and references
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Set logic versus Boolean logic
Sets can contain any elements. We will first start out by discussing general set logic, then restrict ourselves to Boolean logic, where elements (or "bits") each contain only two possible values, called various names, such as "true" and "false", "yes" and "no", "on" and "off", or "1" and "0".

[edit] Terms




Venn diagram showing the intersection of sets "A AND B" (in violet/dark shading), the union of sets "A OR B" (all the colored/shaded regions), and the exclusive OR case "set A XOR B" (all the colored regions except the violet/only the lightly shaded regions). The "universe" is represented by all the area within the rectangular frame.


Let X be a set:

An element is one member of a set. This is denoted by . If it's not an element of the set, this is denoted by .


The universe is the set X, sometimes denoted by 1. Note that this use of the word universe means "all elements being considered", which are not necessarily the same as "all elements there are".


The empty set or null set is the set of no elements, denoted by  and sometimes 0.


A unary operator applies to a single set. There is one unary operator, called logical NOT. It works by taking the complement.


A binary operator applies to two sets. The basic binary operators are logical OR and logical AND. They perform the union and intersection of sets. There are also other derived binary operators, such as XOR (exclusive OR).


A subset is denoted by  and means every element in set A is also in set B.


A proper subset is denoted by  and means every element in set A is also in set B and the two sets are not equal.


A superset is denoted by  and means every element in set B is also in set A.


A proper superset is denoted by  and means every element in set B is also in set A and the two sets are not equal.


[edit] Example
Imagine that set A contains all even numbers (multiples of two) in "the universe" (defined in the example to the right as all integers between 0 and 30 inclusive) and set B contains all multiples of three in "the universe". Then the intersection of the two sets (all elements in sets A AND B) would be all multiples of six in "the universe". The complement of set A (all elements NOT in set A) would be all odd numbers in "the universe".



[edit] Chaining operations together
While at most two sets are joined in any Boolean operation, the new set formed by that operation can then be joined with other sets utilizing additional Boolean operations. Using the previous example, we can define a new set C as the set of all multiples of five in "the universe". Thus "sets A AND B AND C" would be all multiples of 30 in "the universe". If more convenient, we may consider set AB to be the intersection of sets A and B, or the set of all multiples of six in "the universe". Then we can say "sets AB AND C" are the set of all multiples of 30 in "the universe". We could then take it a step further, and call this result set ABC.

[edit] Use of parentheses
While any number of logical ANDs (or any number of logical ORs) may be chained together without ambiguity, the combination of ANDs and ORs and NOTs can lead to ambiguous cases. In such cases, parentheses may be used to clarify the order of operations. As always, the operations within the innermost pair is performed first, followed by the next pair out, etc., until all operations within parentheses have been completed. Then any operations outside the parentheses are performed.

[edit] Application to binary values
In this example we have used natural numbers, while in Boolean logic binary numbers are used. The universe, for example, could contain just two elements, "0" and "1" (or "true" and "false", "yes" and "no", "on" or "off", etc.). We could also combine binary values together to get binary words, such as, in the case of two digits, "00", "01", "10", and "11". Applying set logic to those values, we could have a set of all values where the first digit is "0" ("00" and "01") and the set of all values where the first and second digits are different ("01" and "10"). The intersection of the two sets would then be the single element, "01". This could be shown by the following Boolean expression, where "1st" is the first digit and "2nd" is the second digit:
(NOT 1st) AND (1st XOR 2nd)

[edit] Properties
We define symbols for the two primary binary operations as  (logical AND/set intersection) and  (logical OR/set union), and for the single unary operation  / ~ (logical NOT/set complement). We will also use the values 0 (logical FALSE/the empty set) and 1 (logical TRUE/the universe). The following properties apply to both Boolean logic and set logic (although only the notation for Boolean logic is displayed here):






associativity




commutativity




absorption




distributivity




complements




idempotency




boundedness








0 and 1 are complements




de Morgan's laws




involution




The first three properties define a lattice; the first five define a Boolean algebra. The remaining five are a consequence of the first five.

[edit] Other notations
Mathematicians and engineers often use plus (+) for OR and a product sign () for AND. OR and AND are somewhat analogous to addition and multiplication in other algebraic structures, and this notation makes it very easy to get sum of products form for normal algebra. NOT may be represented by a line drawn above the expression being negated ().
Programmers will often use a pipe symbol (|) for OR, an ampersand (&) for AND, and a tilde (~) for NOT. In many programming languages, these symbols stand for bitwise operations. "||", "&&", and "!" are used for variants of these operations.
Another notation uses "meet" for AND and "join" for OR. However, this can lead to confusion, as the term "join" is also commonly used for any Boolean operation which combines sets together, which includes both AND and OR.

[edit] Basic mathematics use of Boolean terms

In the case of simultaneous equations, they are connected with an implied logical AND:




x + y = 2






AND






x - y = 2




The same applies to simultaneous inequalities:




x + y < 2






AND






x - y < 2




The greater than or equals sign () and less than or equals sign () may be assumed to contain a logical OR:




X < 2






OR






X = 2




The plus/minus sign (), as in the case of the solution to a square root problem, may be taken as logical OR:




WIDTH = 3






OR






WIDTH = -3




[edit] English language use of Boolean terms
Care should be taken when converting an English sentence into a formal Boolean statement. Many English sentences have imprecise meanings, e.g. "All that glitters is not gold," which could mean that "nothing that glitters is gold" or "some things which glitter are not gold".
AND and OR can also be used interchangeably in English, in certain cases:

"I always carry an umbrella for when it rains and snows."


"I always carry an umbrella for when it rains or snows."


" I never walk in the rain or snow."


Sometimes the English words AND and OR have the opposite meaning in Boolean logic:

"Give me all the red and blue berries" usually means "Give me all berries that are red or blue". An alternative phrasing for standard written English: "Give me all berries that are red as well as all berries that are blue".


Also note that the word OR in English may correspond with either logical OR or logical XOR, depending on the context:

"I start to sweat when the humidity or temperature is high." (logical OR)


"You want ice cream and candy? You may have ice cream or candy." (logical XOR)

Logical XOR can be translated as "one, or the other, but not both", and is commonly referred to as either/or in English usage.

The combination AND/OR is sometimes used in English to specify a logical OR, when just using the word OR alone might have been mistaken as meaning logical XOR:

"I'm having chicken and/or beef for dinner." (logical OR). An alternative phrasing for standard written English: "I'm having chicken, or beef, or both, for dinner."


The use of the "and/or" virgule is generally disfavored in formal written English.[1] Such usage may introduce critical imprecision in legal instruments, research findings, and specifications for computer programs or electronic circuits.


A case where this is an issue is when specifications for a computer program or electronic circuit are supplied as an English paragraph describing their function. For example, the statement: "the program should verify that the applicant has checked the male or female box", should be taken as an XOR, and a check added to ensure that one, and only one, box is selected. In other cases, the interpretation of English may be less certain, and the author of the specification may need to be consulted to determine their true intent.

[edit] Applications

[edit] Digital electronic circuit design
Boolean logic is also used for circuit design in electrical engineering; here 0 and 1 may represent the two different states of one bit in a digital circuit, typically high and low voltage. Circuits are described by expressions containing variables, and two such expressions are equal for all values of the variables if, and only if, the corresponding circuits have the same input-output behavior. Furthermore, every possible input-output behavior can be modeled by a suitable Boolean expression.
Basic logic gates such as AND, OR, and NOT gates may be used alone, or in conjunction with NAND, NOR, and XOR gates, to control digital electronics and circuitry. Whether these gates are wired in series or parallel controls the precedence of the operations.

[edit] Database applications
Relational databases use SQL, or other database-specific languages, to perform queries, which may contain Boolean logic. For this application, each record in a table may be considered to be an "element" of a "set". For example, in SQL, these SELECT statements are used to retrieve data from tables in the database:

   SELECT * FROM EMPLOYEES WHERE LAST_NAME = 'Smith' AND FIRST_NAME = 'John' ;


   SELECT * FROM EMPLOYEES WHERE LAST_NAME = 'Smith' OR  FIRST_NAME = 'John' ;


   SELECT * FROM EMPLOYEES WHERE NOT LAST_NAME = 'Smith' ;

Parentheses may be used to explicitly specify the order in which Boolean operations occur, when multiple operations are present:

   SELECT * FROM EMPLOYEES WHERE (NOT LAST_NAME = 'Smith') AND (FIRST_NAME = 'John' OR FIRST_NAME = 'Mary') ;

Multiple sets of nested parentheses may also be used, where needed.
Any Boolean operation (or operations) which combines two (or more) tables together is referred to as a join, in relational database terminology.
In the field of Electronic Medical Records, some software applications use Boolean logic to query their patient databases, in what has been named Concept Processing technology.

[edit] Search engine queries
Search engine queries also employ Boolean logic. For this application, each web page on the Internet may be considered to be an "element" of a "set". The following examples use a syntax supported by Google.[2]

Doublequotes are used to combine whitespace-separated words into a single search term.[3]
Whitespace is used to specify logical AND, as it is the default operator for joining search terms:


   "Search term 1" "Search term 2"


The OR keyword is used for logical OR:


   "Search term 1" OR "Search term 2"


The minus sign is used for logical NOT (AND NOT):


   "Search term 1" -"Search term 2"


[edit] See also



The Wikibook How to search has a page on the topic of
Boolean Logic






The Wikibook Electronics has a page on the topic of
Boolean Algebra




Boolean algebra topics
Boolean domain
Boolean function
Boolean-valued function
Laws of Form
Logic minimization
Logic gate
Logical graph
Venn diagram
Ternary logic


[edit] Notes and references


^ Usage Guide.
^ Not all search engines support the same query syntax. Additionally, some organizations (such as Google) provide "specialized" search engines that support alternate or extended syntax. (See e.g.,Syntax cheatsheet, Google codesearch supports regular expressions).
^ Doublequote-delimited search terms are called "exact phrase" searches in the Google documentation.



[edit] External links

The Calculus of Logic, by George Boole, Cambridge and Dublin Mathematical Journal Vol. III (1848), pp. 183-98.
Logical Formula Evaluator (for Windows), a software which calculates all possible values of a logical formula
How Stuff Works - Boolean Logic
Maiki & Boaz BDD-PROJECT, a Web Application for BDD reduction and visualization.








v • d • e

Digital systems





Components

Logic gate · Digital circuit · Integrated circuit (IC)






Theory

Boolean logic · Digital signal processing · Computer architecture






Applications

Digital audio · Digital photography · Digital video









Retrieved from "http://en.wikipedia.org/wiki/Boolean_logic"
Categories: Boolean algebra | Logic | Articles with example code 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Česky
Français
हिन्दी
עברית
日本語
Português
Русский
中文









 This page was last modified on 23 March 2009, at 23:22 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
