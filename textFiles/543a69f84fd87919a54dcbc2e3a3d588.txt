













Software patent - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Software_patent";
		var wgTitle = "Software patent";
		var wgAction = "view";
		var wgArticleId = "76266";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282163470;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Software patent

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


Computer programs, software and
patent law





Topics



Software patent
Debate
Free software
List of patents



Treaties



TRIPS Agreement
Patent Cooperation Treaty
European Patent Convention



Countries



United Kingdom
United States



Case law



European Patent Office
United Kingdom



Related topics



Business methods




This box: view • talk • edit



Software patent does not have a universally accepted definition.[1] One definition suggested by the Foundation for a Free Information Infrastructure is that a software patent is a "patent on any performance of a computer realised by means of a computer program".[2][a] In 2005, the European Patent Office suggested that a software patent is a patent for a computer program claimed as such, or an algorithm or computer-implemented business method that make no technical contribution.[3]
There is intense debate over the extent to which software patents should be granted, if at all. Important issues concerning software patents include:

Where the boundary between patentable and non-patentable software should lie;[4]
Whether the inventive step and non-obviousness requirement is too easily satisfied for software;[5] and
Whether patents covering software encourage or discourage innovation.[6]





Contents


1 Background
2 History and current trends

2.1 Early example of a software patent
2.2 United States
2.3 Europe

2.3.1 United Kingdom


2.4 Japan
2.5 Other countries


3 Patentable subject matter

3.1 Proposals


4 Obviousness

4.1 Inventive step test in Europe


5 Perceived negative effects

5.1 Compatibility


6 Conflicts

6.1 Computer-implemented invention (CII)
6.2 Overlap with copyright
6.3 Free and open source software
6.4 General software developer unhappiness


7 Jurisdictions
8 Litigation
9 Licensing
10 See also
11 Notes
12 References
13 External links

13.1 Economic studies
13.2 Books
13.3 Papers and presentations







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Background
A patent is a set of exclusionary rights granted by a state to a patent holder for a limited period of time, usually 20 years. These rights are granted to patent applicants in exchange for their disclosure of the inventions. Once a patent is granted in a given country, no person may make, use, sell or import/export the claimed invention in that country without the permission of the patent holder. Permission, where granted, is typically in the form of a license which conditions are set by the patent owner: it may be gratis or in return for a royalty payment or lump sum fee.
Patents are territorial in nature. To obtain a patent, inventors must file patent applications in each and every country in which they want a patent. For example, separate applications must be filed in Japan, China, the United States and India if the applicant wishes to obtain patents in those countries. However, some regional offices exist, such as the European Patent Office (EPO), which act as supranational bodies with the power to grant patents which can then be brought into effect in the member states, and an international procedure also exists for filing a single international application under the Patent Cooperation Treaty (PCT), which can then give rise to patent protection in most countries.
These different countries and regional offices have different standards for granting patents. This is particularly true of software or computer-implemented inventions, especially where the software is implementing a business method.

[edit] History and current trends

[edit] Early example of a software patent
On 1962-05-21, a British patent application entitled "A Computer Arranged for the Automatic Solution of Linear Programming Problems" was filed.[7] The invention was concerned with efficient memory management for the simplex algorithm, and may be implemented by purely software means. The patent was granted on August 17, 1966 and seems to be one of the first software patents.[8]

[edit] United States




Growth of software patents in US


Main article: Software patents under United States patent law
The United States Patent and Trademark Office has granted patents that may be referred to as software patents since at least the early 1970s.[9] In Gottschalk v. Benson (1972), the United States Supreme Court ruled that a patent for a process should not be allowed if it would "wholly pre-empt the mathematical formula and in practical effect would be a patent on the algorithm itself", adding that "it is said that the decision precludes a patent for any program servicing a computer. We do not so hold."[10] In 1981, the Supreme Court stated that "a claim drawn to subject matter otherwise statutory does not become nonstatutory simply because it uses a mathematical formula, computer program, or digital computer" and a claim is patentable if it contains "a mathematical formula [and] implements or applies the formula in a structure or process which, when considered as a whole, is performing a function which the patent laws were designed to protect".[11]
Due to different treatment of federal patent rights in different parts of the country, in 1982 the U.S. Congress created a new court (the Federal Circuit) to hear patent cases. Following several landmark decisions by this court, by the early 1990s the patentability of software was well established, and in 1996 the USPTO issued Final Computer Related Examination Guidelines stating that "A practical application of a computer-related invention is statutory subject matter. This requirement can be discerned from the variously phrased prohibitions against the patenting of abstract ideas, laws of nature or natural phenomena" (emphasis added).[12]
The recent expansion of the Internet and e-commerce has led to many patents being applied for and being granted for business methods implemented in software and the question of whether business methods are statutory subject matter is a separate issue from the question of whether software is. There have been several successful enforcement trials in the USA, some of which are listed in the list of software patents article.

[edit] Europe
Main article: Software patents under the European Patent Convention
Within European Union member states, the EPO and other national patent offices have issued many patents for inventions involving software since the European Patent Convention (EPC) came into force in the late 1970s. Article 52 EPC excludes "programs for computers" from patentability (Art. 52(2)) to the extent that a patent application relates to a computer program "as such" (Art. 52(3)). This has been interpreted to mean that any invention which makes a non-obvious "technical contribution" or solves a "technical problem" in a non-obvious way is patentable even if that technical problem is solved by running a computer program.[13]
Computer-implemented inventions which only solve a business problem using a computer, rather than a technical problem, are considered unpatentable as lacking an inventive step (see T 258/03). Nevertheless, the fact that an invention is useful in business does not mean it is not patentable if it also solves a technical problem.

[edit] United Kingdom
Main article: Software patents under United Kingdom patent law
United Kingdom patent law is interpreted to have the same effect as the European Patent Convention such that "programs for computers" are excluded from patentability to the extent that a patent application relates to a computer program "as such". Current case law in the UK states that an (alleged) invention will only be actually regarded as an invention if it provides a contribution that is not excluded and which is also technical. A computer program implementing a business process is therefore not an invention, but a computer program implementing an industrial process may well be.

[edit] Japan
Software-related inventions are patentable. To qualify as an invention, however, there must be "a creation of technical ideas utilizing a law of nature" although this requirement is typically met by "concretely realising the information processing performed by the software by using hardware resources".[14] Software-related inventions may be considered obvious if they involve: the application of an operation known in other fields; the addition of a commonly known means or replacement by equivalent; the implementation in software of functions which were previously performed by hardware; or the systematisation of known human transactions. [15]

[edit] Other countries
In India, a clause to include software patents was quashed by the Indian Parliament in April 2005.[16]
In Australia, pure or abstract methods of doing business are not considered to be patentable, but if the method is implemented using a computer, it avoids the exclusion for business methods.[17]
In the Philippines, "schemes, rules and methods of performing mental acts, playing games or doing business, and programs for computers" are non-patentable inventions under Sec. 22.2 of Republic Act No. 8293, otherwise known as the "Intellectual Property Code of the Philippines."
In South Korea, software is considered patentable and many patents directed towards "computer programs" have been issued.[18] In 2006, Microsoft was ordered to halt sales of its "Office" suite due to a patent infringement ruling by the Supreme Court of Korea.[19][not in citation given] The company was found to have infringed upon patents directed towards automatic language translation within software programs.[19][not in citation given]

[edit] Patentable subject matter
Main article: Patentable subject matter
Patents are intended to promote innovation by encouraging the timely disclosure of how to make and use inventions and by protecting investments made to commercialize inventions. They attempt to accomplish this by requiring that a prompt and full disclosure is made by an inventor of how to make and use the invention and by granting a monopoly right for a limited period of time to a patent owner to prevent others from making, using or selling the invention in exchange for said prompt and full disclosure.
There is debate as to whether or not these aims are achieved with software patents.

[edit] Proposals
In seeking to find a balance, different countries have different policies as to where the boundary between patentable and non-patentable software should lie. In Europe, a number of different proposals for setting a boundary line were put forward during the debate concerning the proposed Directive on the patentability of computer-implemented inventions, none of which were found acceptable by the various parties to the debate. Two particular suggestions for a hurdle that software must pass to be patentable include:

A computer program that utilises "controllable forces of nature to achieve predictable results".[20]
A computer program which provides a "technical effect".[21]

In the US, Ben Klemens, a Guest Scholar at the Brookings Institution, proposed that patents should be granted only to inventions that include a physical component that is by itself nonobvious.[22] This is based on Justice William Rehnquist's ruling in the U.S. Supreme Court case of Diamond v. Diehr that stated that "... insignificant postsolution activity will not transform an unpatentable principle into a patentable process." By this rule, one would consider software loaded onto a stock PC to be an abstract algorithm with obvious postsolution activity, while a new circuit design implementing the logic would likely be a nonobvious physical device. Upholding an "insignificant postsolution activity" rule as per Justice Rehnquist's ruling would also eliminate most business method patents.

[edit] Obviousness
A common objection to software patents is that they relate to trivial inventions.[23] A patent on an invention that many people would easily develop independently of one another should not, it is argued, be granted since this impedes development. Different countries have different ways of dealing with the question of inventive step and non-obviousness in relation to software patents.

[edit] Inventive step test in Europe
See Inventive step requirement in Europe and, for instance, T 258/03.

[edit] Perceived negative effects

[edit] Compatibility
There are a number of high profile examples where the patenting of a data exchange standards forced another programming group to introduce an alternative format. For instance, the PNG format was introduced to avoid the GIF patent problems, and the Ogg Vorbis format was introduced to avoid the MP3 patent problems. If it is discovered that these new suggested formats are themselves covered by existing patents, the final result may be a large number of incompatible formats. Creating such formats and supporting them costs money, creates inconvenience to users and even threatens to split the Internet into several partially incompatible sub-networks (ASF and non-ASF, for example).

[edit] Conflicts

[edit] Computer-implemented invention (CII)
Main article: Software patents under the European Patent Convention
A microsite of the EPO website states that a generally accepted and widely used definition of a CII is "an invention whose implementation involves the use of a computer, computer network or other programmable apparatus, the invention having one or more features which are realised wholly or partly by means of a computer program."[24] A similar definition is provided by The Guidelines for Examination at the EPO.[25]
The EPO, in contrast, deny that they grant software patents.[26] They further argue that the term software patent is itself a misleading concept since it could imply that an invention must be in the form of software to count as a CII. The case law of the EPO[27] and various national courts in Europe[28] states that a computer program cannot be patented in the guise of an object or as hardware if the underlying invention is still a computer program as such. Computer-implemented invention also covers inventions relating to computer control of processes external to a computer, such as ABS braking systems. Such inventions are not caught by many definitions of software patent, such as the one proposed by the FFII.[2]
Additionally, the EPO do not grant patents to all computer-implemented inventions since they must still provide a technical solution to a technical problem to be viewed as being inventive, whereas the term software patent implies a granted patent. Nevertheless, the fact that the EPO deem that many software-related patent applications describe inventions is a point of contention.

[edit] Overlap with copyright
Protection by patent protection and copyright constitute two different means of legal protection which may cover the same subject-matter, such as computer programs, since each of these two means of protection serves its own purpose. [29] Software is protected as works of literature under the Berne Convention, thus any software written is automatically covered by copyright. This allows the creator to prevent another entity from copying the program and there is generally no need to register code in order for it to be copyrighted.
Patents, on the other hand, give their owners the right to prevent others from using a claimed invention, even if it was independently developed and there was no copying involved. In fact, one of the most recent EPO decisions T 424/03 clarifies the distinction, stating that software is patentable, because it is basically only a technical method executed on a computer, which is to be distinguished from the program itself for executing the method, the program being merely an expression of the method, and thus being copyrighted.
Patents cover the underlying methodologies embodied in a given piece of software, or the function that the software is intended to serve, independent of the particular language or code that the software is written in. Copyright prevents the direct copying of some or all of a particular version of a given piece of software, but do not prevent other authors from writing their own embodiments of the underlying methodologies. Copyright can also be used to prevent a given set of data from being copied while still allowing the author to keep the contents of said set of data a trade secret.
Whether and how the numerus clausus principle shall apply to the legal hybrid software[30] is in dispute[31].

[edit] Free and open source software
Main article: Software patents and free software
There is tremendous animosity in the free software community towards software patents. Much of this has been caused by free software/open source projects shutting down[32] when the holders of patents covering aspects of a project demanded license fees that the project could not or was not willing to pay or offered licenses under terms which the project was unwilling to accept, or could not accept because it conflicted with the free software licence in use.[33]
Several patent holders have offered royalty-free patent licenses. Companies that have done this include IBM, Microsoft, Nokia, Novell,[34] Red Hat,[35] Sun Microsystems and Unisys. Such actions have rarely appeased the free/open source software community for reasons such as fear of the patent holder changing their mind or problems with some of the license terms.[36]
In 2005 Sun Microsystems announced that they were making a portfolio of 1,600 patents available through a free software/open-source-type patent license called Common Development and Distribution License.[37] This was criticized by the free/open source software community, however, since it did not release the source code under a free/open source software license.[38]
In 2006, Microsoft's patent pledge not to sue Novell Linux customers, openSUSE contributors, and free/open source software developers[39] and the associated collaboration agreement with Novell[40] was met with disdain from the Software Freedom Law Center[41] while commentators from the Free Software Foundation stated that the agreement would not comply with GPLv3.[42][43]
Draft versions of the GNU GPL version 3 may also conflict with patents on software by preventing any patent holder from enforcing their patents against a user if said patent holder also distributes software covered by those patents under the GPL.[44]

[edit] General software developer unhappiness
In the late 1990s, Unisys claimed to have granted royalty free licenses to hundreds of not-for-profit organizations that used the patented LZW compression method and, by extension, the GIF image format. However, this did not include most software developers and Unisys were "barraged" by negative and "sometimes obscene" emails from software developers.[45]

[edit] Jurisdictions
Substantive law regarding the patentability of software and computer-implemented inventions, and case law interpreting the legal provisions, are different under different jurisdictions.
Software patents under multilateral treaties:

Software patents under TRIPs Agreement
Software patents under the European Patent Convention
Computer programs and the Patent Cooperation Treaty

Software patents under national laws:

Software patents under United States patent law
Software patents under United Kingdom patent law


[edit] Litigation
Several successful litigations show that software patents are enforceable in the US. See List of software patents for more examples.
Similarly in Japan, software patents have been successfully enforced. In 2005, for example, Matsushita won a court order barring Justsystem from infringing Matsushita's Japanese patent 2,803,236 covering word processing software. A Tokyo court ordered Justsystem to pull their product from the market. On September 30 2005, Intellectual Property High Court of Japan, which was newly formed in April 2005, granted Justsystems' appeal and overturned the Tokyo District Court decision in October 2005.[46]

[edit] Licensing
Main article: License




Total US software patents by class of invention as of 2004


Patenting software is widespread in the US. As of 2004, approximately 145,000 patents had issued in the 22 classes of patents covering "computer implemented inventions". (see table to the right).
Many software companies cross license their patents to each other. These agreements allow each party to practice the other party's patented inventions without the threat of being sued for patent infringement. Often, there is no payment of any royalties between the parties. Microsoft, for example, has agreements with IBM, Sun Microsystems, SAP, Hewlett-Packard, Siemens AG, Cisco, Autodesk[47] and recently Novell. Microsoft cross-licensed its patents with Sun, despite being direct competitors, and with Autodesk even though Autodesk has far fewer patents than Microsoft.
The ability to negotiate cross licensing agreements is a major reason that many software companies, including those providing open source software, file patents. As of June 2006, for example, Red Hat has developed a portfolio of 10 issued US patents, 1 issued European patent, 163 pending US patent applications, and 33 pending international PCT (Patent Cooperation Treaty) patent applications. Red Hat uses this portfolio to cross license with proprietary software companies so that they can preserve their freedom to operate.[35]
Many software patent holders license their patents in exchange for monetary royalties. Some patent owners, such as IBM, are in the business of selling the products they patent and view licensing as a way to increase the return on their investment in innovation. IBM generates an additional $US 2 billion per year by licensing.[48]
Other patent holders are in the business of inventing new "computer implemented inventions" and then commercializing the inventions by licensing the patents to other companies that manufacture the inventions. Walker Digital, for example, has generated a large patent portfolio from its research efforts, including the basic patent on the Priceline.com reverse auction technology. US universities also fall into this class of patent owners. They collectively generate about $1.4 billion per year through licensing the inventions they develop to both established and start up companies in all fields of technology, including software.[49]
Still other patent holders focus on obtaining patents from original inventors and licensing them to companies that have introduced commercial products into the marketplace after the patents were filed. Some of these patent holders, such as Intellectual Ventures, are privately held companies financed by large corporations such as Microsoft, Intel, Google, etc. Others, such as Acacia Technologies, are publicly traded companies with institutional investors being the primary shareholders.[50]
The practice of acquiring patents merely to license them is controversial in the software industry. Companies that have this business model are pejoratively referred to as patent trolls. It is an integral part of the business model that patent licensing companies sue infringers that do not take a license. Furthermore, they may take advantage of the fact that many companies will pay a modest license fee (e.g.$100,000 to $1,000,000) for rights to a patent of questionable validity, rather than pay the high legal fees ($2,000,000 on up) to demonstrate in court that the patent is invalid.[citation needed]

[edit] See also


Types of patents




Biological patent
Business method patent
Chemical patent
Design patent
Software patent




edit box



Proposed directive on the patentability of computer-implemented inventions
Agreement on Trade-Related Aspects of Intellectual Property Rights (TRIPS Agreement)
Patent Commons Project
Open Invention Network (OIN)


[edit] Notes

a. ^ The FFII are an anti-software patent group and the material associated with their definition of a software patent suggests that the purpose of the definition is to identify patents that should not be granted as a matter of policy.


[edit] References





This article's citation style may be unclear. The references used may be clearer with a different or consistent style of citation, footnoting, or external linking.




^ "Defining a Software Patent". Public Patent Foundation. http://softwarepatentwatch.wordpress.com/defining-software-patent. Retrieved on 2007-05-30. 
^ a b ""The Gauss Project"". FFII. http://www.ffii.se/erik/EPIP/img8.html. Retrieved on 2007-05-30. 
^ European Patent Office continues to advocate harmonisation in the field of CII patents
^ Software patents in Europe: debunking the myths, OUT-LAW News, 19/08/2004
^ "Public consultation on level of the inventive step required for obtaining patents" (PDF). UK Intellectual Property Office. http://www.ipo.gov.uk/response-inventive.pdf. Retrieved on 2007-06-05. 
^ Patenthawk.com blog entry
^ GB patent 1039141
^ Beresford, K (2000) Patenting Software under the European Patent Convention, London: Sweet & Maxwell, page 4. See also http://www2.warwick.ac.uk/fac/soc/law/elj/jilt/2003_1/kretschmer/.
^ U.S. Patent 3,552,738 , U.S. Patent 3,553,358  and U.S. Patent 3,553,384  granted 5 Jan 1971, and U.S. Patent 3,996,564  granted December 7, 1976 can be easily found using the Bessen/Hunt technique. Earlier patents may exist but US patent database does not permit full text searching for earlier patents
^ Gottschalk v Benson, 409 U.S. 63 (1972)
^ Diamond v. Diehr, 450 U.S. 175 (1981)
^ Final Computer Related Examination Guidelines
^ T469/03, Reasons 5.1 to 5.3
^ Examination Guidelines for Patent and Utility Model in Japan, Japanese Patent Office, May 2005, page 11
^ Examination Guidelines for Patent and Utility Model in Japan, Japanese Patent Office, May 2005, pages 16-17
^ Software patents under Ordinance face reversal
^ AIPLA International Patent Law Handbook: Software and Business Method Inventions Australia
^ EPO web site, Patent information, East Asian patent information, Virtual helpdesk, Korea, FAQ, FAQ - Korea. Consulted on October 29, 2008.
^ a b Candace Lombardi, Microsoft lost in translation, cnet.com, News Blog, November 27, 2006. Consulted on October 29, 2008.
^ Amendment 23 introduced on September 2003 by the European Parliament to the proposed Directive on the patentability of computer-implemented inventions [1], "Dispositions program decision" (BGH 22/6/1976), Nordic Patent Law treaty.
^ Decision T 59/93 of the Boards of Appeal of the European Patent Office, Reasons, point 3.4
^ Wall Street Journal, 25 March 2006, p A9 WSJ link (subscription required)
^ Patent absurdity | Technology | guardian.co.uk
^ Computer-Implemented Inventions (CII)
^ EPO microsite on CIIs
^ EPO CII Brochure
^ T0158/88
^ Judgment in CFPH's application
^ Decision T 1173/97 of the Boards of appeal of the EPO, July 1, 1998, Reasons 2.4 - see T 1173/97 on the EPO boards of appeal section of the EPO web site.
^ Burk "Copyrightable functions and patentable speech" CACM 44, 2, 69 DOI 10.1145/359205.359231
^ Schricker/Straus "Stellungnahme 2000"; Hoffmann „Mehrfachschutz geistigen Eigentums im deutschen Rechtssystem 2008 ISBN 978-3831608065; Peukert "Güterzuordnung als Rechtsprinzip" 2008 ISBN 3161497244
^ http://www.gnu.org/patent-examp/patent-examples.html
^ http://swpat.ffii.org/patents/effects
^ Patent Policy
^ a b redhat.com | Red Hat Patent Policy
^ "Microsoft's Open Specification Promise: No Assurance for GPL". Software Freedom Law Center. http://www.softwarefreedom.org/resources/2008/osp-gpl.html. 
^ Sun Grants Global Open Source Community Access to More than 1,600 Patents, Sun press release, January 25, 2005
^ [Sun's patent umbrella springs some leaks, Silicon Valley Sleuth, January 27, 2005]
^ "Community Commitments - Microsoft & Novell Interoperability Collaboration". November 2, 2006. http://www.microsoft.com/interop/msnovellcollab/community.mspx. 
^ "Microsoft and Novell Announce Broad Collaboration on Windows and Linux Interoperability and Support". November 2, 2006. http://www.novell.com/news/press/item.jsp?id=1196.  "Novell press release" 
^ "Microsoft’s developer patent pledge “worse than useless” says SFLC". November 10, 2006. http://www.businessreviewonline.com/os/archives/2006/11/microsofts_deve.html. 
^ "Microsoft makes Linux pact with Novell". November 2, 2006. http://news.com.com/Microsoft+makes+Linux+pact+with+Novell/2100-1016_3-6132119.html. 
^ "Microsoft patent deal could leave Novell behind". November 24, 2006. http://www.cbronline.com/article_news.asp?guid=C1856F2A-F214-4A65-A8C1-4B6CBC1CEED5. 
^ HP may fork the GPL Stephen Shankland, CNET News.com, Published: 03 Aug 2006 09:05 BST
^ Unisys Not Suing (most) Webmasters for Using GIFs–Slashdot article from August 31, 1999
^ "Decision Summary, 2005 (Ne) 10040 Appeal Case of Seeking Injunction against Patent Infringement". Intellectual Property High Court. http://www.ip.courts.go.jp/eng/documents/pdf/g_panel/decision_summary2005ne10040.pdf. Retrieved on 2009-01-08. 
^ IDG News Service
^ Newsweek Article
^ untitled
^ http://premium.hoovers.com/subscribe/co/overview.xhtml?ID=fffrfkrhrrxhjcxxkh



[edit] External links

Software and Business Methods on the WIPO web site
FFII Annotated Bibliography


[edit] Economic studies

Bessen & Hunt (2004), An Empirical Look at Software Patents, <http://www.researchoninnovation.org/swpat.pdf>. This paper includes a method of identifying software patents that has proved popular with organisations such as the Public Patent Foundation.[2]
The Software Patent Experiment (PDF) Bessen & Hunt 2004.
A Review of Bessen and Hunt's Analysis of Software Patents by Robert Hahn and Scott Wallsten of the American Enterprise Institute.
A Reply to Hahn and Wallsten by Bessen and Hunt, 2004.
Federal Trade Commission 2003 patent report (PDF file) Also FFII review of FTC report.
CEP Discussion Paper No 740, August 2006, Strategic Patenting and Software Innovation by Michael Noel and Mark Schankerman, London School of Economics and Political Science


[edit] Books

Patent Failure, James Bessen and Michael Meurer, Princeton University Press, 2008.
Math You Can't Use: Patents, Copyright, and Software, Ben Klemens, Brookings Institution Press, 2005.
The Patent Wars: The Battle to Own the World's Technology, Fred Warshofsky
Information Feudalism - Peter Drahos
Florian Müller, No Lobbyists As Such (2006). 377 page play-by-play memoir of the story of Florian's part in the campaign over the EU software patent directive.


[edit] Papers and presentations

R Hunt. You can patent that? (PDF file) Overview of the legal history and trends.
N. Szabo. Elemental Subject Matter (PDF file) How software came to be patentable in the United States.
Hideo Furutani. Patentability of Business Method Inventions in Japan Compared with the US and Europe (PDF file) Presented at USPTO, Arlington, Virginia (2003)
Richard Stallman: The Dangers of Software Patents, May 24, 2004
Alexandre Abecassis: Patenting Software Innovations: A brief overview of the situation in some jurisdictions of interest (PDF file) IEEE Canadian Review No55, pp24-27




Retrieved from "http://en.wikipedia.org/wiki/Software_patent"
Categories: Computer-related patent lawHidden categories: All articles with unsourced statements | Articles with unsourced statements since October 2008 | Articles with unsourced statements since November 2008 | Wikipedia references cleanup 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Dansk
Deutsch
Ελληνικά
Español
Français
Bahasa Indonesia
Italiano
Lietuvių
Nederlands
日本語
Polski
Svenska
ไทย









 This page was last modified on 6 April 2009, at 18:43.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
