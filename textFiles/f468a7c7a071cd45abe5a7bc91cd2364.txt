













OpenGL - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "OpenGL";
		var wgTitle = "OpenGL";
		var wgAction = "view";
		var wgArticleId = "22497";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281172242;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); OpenGL

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





It has been suggested that IRIS GL be merged into this article or section. (Discuss)



OpenGL




Developed by
Silicon Graphics


Latest release
3.1 / March 24, 2009


Operating system
Cross-platform


Type
API


License
Various


Website
http://www.opengl.org


OpenGL (Open Graphics Library) is a standard specification defining a cross-language, cross-platform API for writing applications that produce 2D and 3D computer graphics. The interface consists of over 250 different function calls which can be used to draw complex three-dimensional scenes from simple primitives. OpenGL was developed by Silicon Graphics Inc. (SGI) in 1992[1] and is widely used in CAD, virtual reality, scientific visualization, information visualization, and flight simulation. It is also used in video games, where it competes with Direct3D on Microsoft Windows platforms (see Direct3D vs. OpenGL). OpenGL is managed by the non-profit technology consortium, the Khronos Group.




Contents


1 Specification
2 Design
3 Example
4 Documentation
5 Extensions
6 Associated utility libraries
7 Bindings
8 Higher level functionality
9 History
10 OpenGL 2.0
11 OpenGL 2.1
12 OpenGL 3.0

12.1 Longs Peak and OpenGL 3.0 controversy


13 OpenGL 3.1
14 Post OpenGL 3.1

14.1 Mt. Evans


15 Sample renderings
16 See also

16.1 OpenGL support libraries
16.2 Other 3D graphics APIs
16.3 Other 2D graphics APIs
16.4 Benchmarks


17 References
18 Further reading
19 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Specification
At its most basic level OpenGL is a specification, meaning it is simply a document that describes a set of functions and the precise behaviours that they must perform. From this specification, hardware vendors create implementations — libraries of functions created to match the functions stated in the OpenGL specification, making use of hardware acceleration where possible. Hardware vendors have to meet specific tests to be able to qualify their implementation as an OpenGL implementation.
Efficient vendor-supplied implementations of OpenGL (making use of graphics acceleration hardware to a greater or lesser extent) exist for Mac OS, Microsoft Windows, Linux and many Unix platforms. Various software implementations exist, bringing OpenGL to a variety of platforms that do not have vendor support. Notably, the free software/open source library Mesa 3D is a fully software-based graphics API which is code-compatible with OpenGL. However to avoid licensing costs associated with formally calling itself an OpenGL implementation, it claims merely to be a "very similar" API. On some platforms, notably mobile phones, handhelds and game consoles, a reduced API OpenGL ES is often used.
The OpenGL specification was revised by OpenGL Architecture Review Board (ARB) founded in 1992. The ARB was formed by a set of companies interested in the creation of a consistent and widely available API. Microsoft, one of the founding members, left the project in 2003.
On 21 September 2006, control of OpenGL passed to the Khronos Group.[2] This was done in order to improve the marketing of OpenGL, and to remove barriers between the development of OpenGL and OpenGL ES.[3] The subgroup of Khronos that manages OpenGL was called the OpenGL ARB Working Group,[4] for historical reasons. There is a list of members which make up the OpenGL ARB Working Group at section Members of Khronos Group. OpenGL is a general purpose API with lots of different possibilities because of the great number of companies with different interests which have made up the old ARB as well the current group.
Mark Segal and Kurt Akeley authored the original OpenGL specification. Chris Frazier edited version 1.1. Jon Leech edited versions 1.2 through the present version 3.0. Jon Leech has retired as secretary of the old ARB, and Barthold Lichtenbelt has taken his place as Khronos OpenGL ARB Steering Group Chair[citation needed].

[edit] Design
OpenGL serves two main purposes:

To hide the complexities of interfacing with different 3D accelerators, by presenting the programmer with a single, uniform API.
To hide the differing capabilities of hardware platforms, by requiring that all implementations support the full OpenGL feature set (using software emulation if necessary).

OpenGL's basic operation is to accept primitives such as points, lines and polygons, and convert them into pixels. This is done by a graphics pipeline known as the OpenGL state machine. Most OpenGL commands either issue primitives to the graphics pipeline, or configure how the pipeline processes these primitives. Prior to the introduction of OpenGL 2.0, each stage of the pipeline performed a fixed function and was configurable only within tight limits. OpenGL 2.0 offers several stages that are fully programmable using GLSL.
OpenGL is a low-level, procedural API, requiring the programmer to dictate the exact steps required to render a scene. This contrasts with descriptive (aka scene graph or retained mode) APIs, where a programmer only needs to describe a scene and can let the library manage the details of rendering it. OpenGL's low-level design requires programmers to have a good knowledge of the graphics pipeline, but also gives a certain amount of freedom to implement novel rendering algorithms.
OpenGL has historically been influential on the development of 3D accelerators, promoting a base level of functionality that is now common in consumer-level hardware:

Rasterised points, lines and polygons as basic primitives





Simplified version of the Graphics Pipeline Process; excludes a number of features like blending, VBOs and logic ops



A transform and lighting pipeline
Z-buffering
Texture mapping
Alpha blending

A brief description of the process in the graphics pipeline could be:[5]

Evaluation, if necessary, of the polynomial functions which define certain inputs, like NURBS surfaces, approximating curves and the surface geometry.
Vertex operations, transforming and lighting them depending on their material. Also clipping non visible parts of the scene in order to produce the viewing volume.
Rasterisation or conversion of the previous information into pixels. The polygons are represented by the appropriate colour by means of interpolation algorithms.
Per-fragment operations, like updating values depending on incoming and previously stored depth values, or colour combinations, among others.
Lastly, fragments are inserted into the Frame buffer.

Many modern 3D accelerators provide functionality far above this baseline, but these new features are generally enhancements of this basic pipeline rather than radical revisions of it.

[edit] Example
This example will draw a green square on the screen. OpenGL has several ways to accomplish this task, but this is the easiest to understand.


glClear( GL_COLOR_BUFFER_BIT );


This statement clears the color buffer, so that the screen will start blank.



glMatrixMode( GL_PROJECTION );      /* Subsequent matrix commands will affect the projection matrix */
glLoadIdentity();                   /* Initialise the projection matrix to identity */
glFrustum( -1, 1, -1, 1, 1, 1000 ); /* Apply a perspective-projection matrix */


These statements initialize the projection matrix, setting a 3d frustum matrix that represents the viewable area. This matrix transforms objects from camera-relative space to OpenGL's projection space.



glMatrixMode( GL_MODELVIEW );       /* Subsequent matrix commands will affect the modelview matrix */
glLoadIdentity();                   /* Initialise the modelview to identity */
glTranslatef( 0, 0, -3 );           /* Translate the modelview 3 units along the Z axis */


These statements initialize the modelview matrix. This matrix defines a transform from model-relative coordinates to camera space. The combination of the modelview matrix and the projection matrix transforms objects from model-relative space to projection screen space.



glBegin( GL_POLYGON );              /* Begin issuing a polygon */
glColor3f( 0, 1, 0 );               /* Set the current color to green */
glVertex3f( -1, -1, 0 );            /* Issue a vertex */
glVertex3f( -1, 1, 0 );             /* Issue a vertex */
glVertex3f( 1, 1, 0 );              /* Issue a vertex */
glVertex3f( 1, -1, 0 );             /* Issue a vertex */
glEnd();                            /* Finish issuing the polygon */


These commands draw a green square in the XY plane.


[edit] Documentation
OpenGL's popularity is partially due to the excellence of its official documentation.[citation needed] The OpenGL ARB released a series of manuals along with the specification which have been updated to track changes in the API. These are almost universally known by the colors of their covers:

The Red Book – OpenGL Programming Guide, 6th edition. ISBN 0-321-48100-3

A readable tutorial and reference book – this is a 'must have' book for OpenGL programmers. The first edition is available online here and here.


The Blue Book – OpenGL Reference manual, 4th edition. ISBN 0-321-17383-X

Essentially a hard-copy printout of the man pages for OpenGL.
Includes a poster-sized fold-out diagram showing the structure of an idealised OpenGL implementation. It is available here.


The Green Book – OpenGL Programming for the X Window System. ISBN 0-201-48359-9

A book about X11 interfacing and GLUT.


The Alpha Book (which actually has a white cover) – OpenGL Programming for Windows 95 and Windows NT. ISBN 0-201-40709-4

A book about interfacing OpenGL with Microsoft Windows.



Then, for OpenGL 2.0 and beyond:

The Orange Book – OpenGL Shading Language, 2nd edition. ISBN 0-321-33489-2

A readable tutorial and reference book for GLSL.




[edit] Extensions
The OpenGL standard allows individual vendors to provide additional functionality through extensions as new technology is created. Extensions may introduce new functions and new constants, and may relax or remove restrictions on existing OpenGL functions. Each vendor has an alphabetic abbreviation that is used in naming their new functions and constants. For example, NVIDIA's abbreviation (NV) is used in defining their proprietary function glCombinerParameterfvNV() and their constant GL_NORMAL_MAP_NV.
It may happen that more than one vendor agrees to implement the same extended functionality. In that case, the abbreviation EXT is used. It may further happen that the Architecture Review Board "blesses" the extension. It then becomes known as a standard extension, and the abbreviation ARB is used. The first ARB extension was GL_ARB_multitexture, introduced in version 1.2.1. Following the official extension promotion path, multitexturing is no longer an optionally implemented ARB extension, but has been a part of the OpenGL core API since version 1.3.
Before using an extension a program must first determine its availability, and then obtain pointers to any new functions the extension defines. The mechanism for doing this is platform-specific and libraries such as GLEW and GLEE exist to simplify the process.
Specifications for nearly all extensions can be found at the official extension registry. [6]

[edit] Associated utility libraries
Several libraries are built on top of or beside OpenGL to provide features not available in OpenGL itself. Libraries such as GLU can always be found with OpenGL implementations, and others such as GLUT and SDL have grown over time and provide rudimentary cross platform windowing and mouse functionality and if unavailable can easily be downloaded and added to a development environment. Simple graphical user interface functionality can be found in libraries like GLUI or FLTK. Still other libraries like AUX are deprecated and have been superseded by functionality commonly available in more popular libraries, but code using them still exists, particularly in simple tutorials. Other libraries have been created to provide OpenGL application developers a simple means of managing OpenGL extensions and versioning. Examples of these libraries include GLEW (the OpenGL Extension Wrangler Library) and GLEE (the OpenGL Easy Extension Library).
In addition to the aforementioned simple libraries, other higher level object oriented scene graph retained mode libraries exist such as PLIB, OpenSG, OpenSceneGraph, and OpenGL Performer. These are available as cross platform free/open source or proprietary programming interfaces written on top of OpenGL and systems libraries to enable the creation of real-time visual simulation applications. Other solutions support parallel OpenGL programs for Virtual Reality, scalability or graphics clusters usage, either transparently like Chromium or through a programming interface like Equalizer.
Mesa 3D is a free/open source implementation of OpenGL. It supports pure software rendering as well as providing hardware acceleration for several 3D graphics cards under Linux. As of June 22, 2007 it implements the 2.1 standard, and provides some of its own extensions for some platforms.

[edit] Bindings
In order to emphasize its multi-language and multi-platform characteristics, various bindings and ports have been developed for OpenGL in many languages. Some languages and their bindings are:

Ada: AdaOpenGL 1.12 supports GL, GLU, GLUT, GLX and WGL
BlitzMax: OOP language with no runtime. Supports Win32/64, Linux, Mac OS X (PowerPC/Intel). Built in OpenGL support.
C#:

The Open Toolkit library contains OpenGL, OpenAL and OpenCL bindings for .Net/Mono. Supports Win32/64, Linux and Mac OS X.
The framework Tao for Microsoft .NET includes OpenGL between other multimedia libraries[7]


D: See bindings and Project Derelict
Delphi: Dot
Eiffel: EiffelOpenGL
Fortran: f90gl supports OpenGL 1.2, GLU 1.2 and GLUT 3.7
FreeBASIC: Native OpenGL support. Built-in OpenGL context creation.
Haskell: HOpenGL supports GL, GLU and GLUT. Included with the latest version of the Glasgow Haskell Compiler.
Java:

Java Bindings for OpenGL (JSR 231) and Java OpenGL (JOGL)
Lightweight Java Game Library (LWJGL)


Lisp: See the cl-opengl project at common-lisp.net
Lua: Doris, LuaGL
Mercury Prolog mtogl
Ocaml: GLCaml and LablGL
Perl:

Perl OpenGL (POGL) module - shared libs written in C
C vs Perl and Perl vs Python benchmarks


Pike: It has a OpenGL native interface. Moreover, it supports GLU and GLUT [8]
PHP: See http://phpopengl.sourceforge.net/
PureBasic: Native OpenGL support.
Python: PyOpenGL supports GL, GLU and GLUT
R (programming language): [1]
Ruby: ruby-opengl - supports GL, GLU and GLUT
Scheme:

Chicken Scheme has an OpenGL egg
OpenGL bindings for PLT Scheme
OpenGL bindings for Gauche Scheme
Ypsilon Scheme comes with GL and GLUT bindings out of the box


Smalltalk as seen in Croquet Project running on Squeak Smalltalk
thinBasic - native interface for OpenGL 2.1, GLU library + language specific higher level module
Visual Basic: ActiveX Control
Visual Prolog commercial edition

For more information on OpenGL Language bindings, see opengl.org's Wiki.

[edit] Higher level functionality
OpenGL was designed to be graphic output-only: it provides only rendering functions. The core API has no concept of windowing systems, audio, printing to the screen, keyboard/mouse or other input devices. While this seems restrictive at first, it allows the code that does the rendering to be completely independent of the operating system it is running on, allowing cross-platform development. However, some integration with the native windowing system is required to allow clean interaction with the host system. This is performed through the following add-on APIs:

GLX – X11 (including network transparency)
WGL – Microsoft Windows
CGL – Mac OS X. Better integration with Mac OS X's application frameworks is provided by APIs layered on top of CGL: AGL for Carbon and NSOpenGL for Cocoa.

Additionally, GLUT, SDL and the GLFW libraries provide functionality for basic windowing using OpenGL, in a portable manner. Some opensource crossplatform toolkits like GTK+, QT and WxWidgets include a widget to embed OpenGL contents.

[edit] History
In the 1980s, developing software that could function with a wide range of graphics hardware was a real challenge. Software developers wrote custom interfaces and drivers for each piece of hardware. This was expensive and resulted in much duplication of effort.
By the early 1990s, Silicon Graphics (SGI) was a leader in 3D graphics for workstations. Their IRIS GL API[9] was considered the state of the art and became the de facto industry standard, overshadowing the open standards-based PHIGS. This was because IRIS GL was considered easier to use, and because it supported immediate mode rendering. By contrast, PHIGS was considered difficult to use and outdated in terms of functionality.
SGI's competitors (including Sun Microsystems, Hewlett-Packard and IBM) were also able to bring to market 3D hardware, supported by extensions made to the PHIGS standard. This in turn caused SGI market share to weaken as more 3D graphics hardware suppliers entered the market. In an effort to influence the market, SGI decided to turn the IrisGL API into an open standard.
SGI considered that the IrisGL API itself wasn't suitable for opening due to licensing and patent issues. Also, the IrisGL had API functions that were not relevant to 3D graphics. For example, it included a windowing, keyboard and mouse API, in part because it was developed before the X Window System and Sun's NeWS systems were developed.
In addition, SGI had a large number of software customers; by changing to the OpenGL API they planned to keep their customers locked onto SGI (and IBM) hardware for a few years while market support for OpenGL matured. Meanwhile, SGI would continue to try to maintain their customers tied to SGI hardware by developing the advanced and proprietary Iris Inventor and Iris Performer programming APIs.
As a result, SGI released the OpenGL standard.
The OpenGL standardised access to hardware, and pushed the development responsibility of hardware interface programs, sometimes called device drivers, to hardware manufacturers and delegated windowing functions to the underlying operating system. With so many different kinds of graphic hardware, getting them all to speak the same language in this way had a remarkable impact by giving software developers a higher level platform for 3D-software development.
In 1992,[10] SGI led the creation of the OpenGL architectural review board (OpenGL ARB), the group of companies that would maintain and expand the OpenGL specification for years to come. OpenGL evolved from (and is very similar in style to) SGI's earlier 3D interface, IrisGL. One of the restrictions of IrisGL was that it only provided access to features supported by the underlying hardware. If the graphics hardware did not support a feature, then the application could not use it. OpenGL overcame this problem by providing support in software for features unsupported by hardware, allowing applications to use advanced graphics on relatively low-powered systems.
In 1994 SGI played with the idea of releasing something called "OpenGL++" which included elements such as a scene-graph API (presumably based around their Performer technology). The specification was circulated among a few interested parties – but never turned into a product.[11]
Microsoft released Direct3D in 1995, which would become the main competitor of OpenGL. On 17 December 1997[12], Microsoft and SGI initiated the Fahrenheit project, which was a joint effort with the goal of unifying the OpenGL and Direct3D interfaces (and adding a scene-graph API too). In 1998 Hewlett-Packard joined the project.[13] It initially showed some promise of bringing order to the world of interactive 3D computer graphics APIs, but on account of financial constraints at SGI, strategic reasons at Microsoft, and general lack of industry support, it was abandoned in 1999.[14]

[edit] OpenGL 2.0
OpenGL 2.0 was conceived by 3Dlabs to address concerns that OpenGL was stagnating and lacked a strong direction. 3Dlabs proposed a number of major additions to the standard. Most of these were, at the time, rejected by the ARB or otherwise never came to fruition in the form that 3Dlabs proposed. However, their proposal for a C-style shading language was eventually completed, resulting in the current formulation of GLSL (the OpenGL Shading Language, also slang). Like the assembly-like shading languages that it was replacing, it allowed the programmer to replace the fixed-function vertex and fragment pipe with shaders, though this time written in a C-like language.
The design of GLSL was notable for making relatively few concessions to the limitations of the hardware then available; this hearkened back to the earlier tradition of OpenGL setting an ambitious, forward-looking target for 3D accelerators rather than merely tracking the state of currently available hardware. The final OpenGL 2.0 specification [15] includes support for GLSL.

[edit] OpenGL 2.1
OpenGL 2.1 was released on August 2, 2006 and is backward compatible with all prior OpenGL versions.[16] OpenGL 2.1 incorporates the following functionality:

OpenGL Shading Language revision 1.20 (GLSL)
Commands to specify and query non-square matrix uniforms for use with the OpenGL Shading Language
Pixel buffer objects for efficient image transfers to and from buffer objects for commands such as glTexImage2D and glReadPixels.

This functionality corresponds to the ARB_pixel_buffer_object extension.


sRGB texture formats.

This functionality corresponds to the EXT_texture_sRGB extension.




[edit] OpenGL 3.0
Revision 3.0[17] of the OpenGL API was released on August 11, 2008 and is backward compatible with all prior OpenGL versions, though a deprecation mechanism has been introduced to simplify the API in future revisions.

OpenGL Shading Language revision 1.30 (GLSL)
Vertex Array Objects
More flexible Framebuffer Objects
32-bit (single precision) floating-point textures and render buffers
16-bit (half precision) floating-point vertex and pixel data
Ability to render vertex transformations into a buffer
Texture arrays
32-bit (single precision) floating point depth buffer support

Full use of OpenGL 3.0 requires the same level of hardware as is required for DirectX 10 support. Unlike DirectX 10, OpenGL 3.0 does not require Windows Vista and can be used on any OS for which the appropriate drivers are provided.

[edit] Longs Peak and OpenGL 3.0 controversy
Prior to the release of OpenGL 3.0 the new revision was known as the codename Longs Peak. At the time of its original announcement Longs Peak was presented as the first major API revision in OpenGL's lifetime. It consisted of an overhaul to the way that OpenGL works, calling for fundamental changes to the API.
The draft introduced a change to object management. The GL 2.1 object model was built upon the state-based design of OpenGL. That is, in order to modify an object or to use it, one needs to bind the object to the state system, then make modifications to the state or perform function calls that use the bound object.
Because of OpenGL's use of a state system, objects must be mutable. That is, the basic structure of an object can change at any time, even if the rendering pipeline is asynchronously using that object. A texture object can be redefined from 2D to 3D. This requires any OpenGL implementations to add a degree of complexity to internal object management.
Under the Longs Peak API object creation would become atomic, using templates to define the properties of an object which would be created with a single function call. The object could then be used immediately across multiple threads. Objects would also be immutable; however, they could have their contents changed and updated. For example, a texture could change its image, but its size and format could not be changed.
To support backwards compatibility the old state based API would still be available, but no new functionality would be exposed via the old API in later versions of OpenGL. This would have allowed legacy code bases, such as the majority of CAD products, to continue to run while other software could be written against or ported to the new API.
Longs Peak was initially due to be finalized in September 2007 under the name OpenGL 3.0, but the Khronos group announced October 30 that it had run into several issues that it wished to address before releasing the specification.[18] As a result the spec was delayed, and the Khronos group went into a media blackout until the release of the final OpenGL 3.0 spec.
The final specification proved far less revolutionary than the Longs Peak proposal. Instead of removing all immediate mode and fixed functionality (non-shader mode), the spec included them as deprecated features. The proposed object model was not included, and no plans have been announced to include it in any future revisions. As a result the API remained largely the same with a few existing extensions being promoted to core functionality.
Among some developer groups this decision caused something of an uproar [19], with many developers professing that they would switch to DirectX in protest. Most complaints revolved around the lack of communication by Khronos to the development community and multiple features being discarded that were viewed favorably by many. Other frustrations included the requirement of DirectX 10 level hardware in order to use OpenGL 3.0 and the absence of geometry shaders and instanced rendering as a core features.
Other sources reported that the community reaction wasn't quite as severe as originally presented [20], with many vendors showing support for the update. [21] [22]

[edit] OpenGL 3.1
Revision 3.1 (Longs Peak Reloaded) was released on March 24 2009 and introduces a range of features to make the API more convenient to use, in addition to performance orientated features:[23]

OpenGL Shading Language revision 1.40 (GLSL)
Texture Buffer Objects - a new texture type that holds a one-dimensional array of texels
Uniform Buffer Objects for fast data share/update
Signed normalized textures (±1.0 range)
A minimum of 16 texture units accessible by the vertex shader
Primitive restart
Instancing - drawing of objects multiple times through the re-use of vertex data
CopyBuffer API for fast data copy; used in conjunction with OpenCL

With the release of the OpenGL 3.1 specification, a compatibility extension that enables developers to access the OpenGL 1.X/2.X functionality removed in OpenGL 3.1 was also released.[24] Notably, legacy functionality for wide line support is retained.
Removed legacy functionality includes:[25]

All fixed-function options
Direct mode
Color index mode, i.e. pixel formats with color palettes


[edit] Post OpenGL 3.1





This article or section contains information about scheduled or expected future software.
The content may change as the software release approaches and more information becomes available.





Prior to the release of OpenGL 3.0 plans were discussed to add more functionality to OpenGL beyond 3.0. Some of the features planned for the future releases have been introduced the final 3.1 specification.

[edit] Mt. Evans
This revision, which was due to be released 3-5 months after 3.0, would bring OpenGL 3.0 up-to-date with more modern hardware features. These included geometry shaders, integers in shaders, texture arrays, and instanced rendering. However, it is worth noting that both the use of integers in shaders and texture arrays are already part of the final 3.0 spec.

[edit] Sample renderings









Refraction using programmable vertex shaders









Animated textures using framebuffer objects and vertex/fragment program extensions







[edit] See also

List of OpenGL programs - list of popular games and applications that use OpenGL
ARB (GPU assembly language) - OpenGL's low-level shading language
Cg – Nvidia's shading language that works with OpenGL
GLSL - Open crossplatform high-level shading language that works with OpenGL
OpenCL - Open crossplatform GPU general purpose language that works with OpenGL
OpenGL ES – OpenGL for embedded systems
OpenAL – The Open Audio Library – designed to work well with OpenGL.
OpenSL ES – Another audio library.
OpenML - The Open Media Library - designed to work well with OpenGL.
Graphics pipeline


[edit] OpenGL support libraries

GLUT – The OpenGL utility toolkit.
SDL – The Simple DirectMedia Layer.
GLU – Some additional functions for OpenGL programs.
GLee - The OpenGL Easy Extension library.
GLEW – The OpenGL Extension Wrangler Library.
GLUI - a GUI toolkit made with GLUT
GLFW - a portable framework for OpenGL application development.
GLM - C++ mathematics toolkit for OpenGL based on the GLSL specification.
SFML - Simple and Fast Multimedia Library.
Glux - The OpenGL Utility & Auxiliary Library.


[edit] Other 3D graphics APIs

Mesa 3D – An open source implementation of OpenGL.
Direct3D – A competitor to OpenGL. See Comparison of OpenGL and Direct3D.
VirtualGL - An OpenGL 3D model server that sends rendered images to a remote X server


[edit] Other 2D graphics APIs

Cairo (graphics) - a cross platform graphical vectorial draw and text toolkit.
GTK+ - a cross platform graphical widget toolkit.
Qt - a cross platform graphical widget toolkit.
wxWidgets - a cross platform graphical widget toolkit.

All can incorporate OpenGL 3D objects. Cairo can use OpenGL as backend.

[edit] Benchmarks

GLMark


[edit] References


^ "SGI - OpenGL Overview". http://www.sgi.com/products/software/opengl/overview.html. 
^ "OpenGL Pipeline Newsletter Vol.2, Transitions". http://www.opengl.org/pipeline/article/vol002_1/. 
^ "Analysis: Khronos and OpenGL ARB merge". http://www.tgdaily.com/2006/07/18/analysis_khronos_and_open_gl_merge/. 
^ "OpenGL Architecture Review Board Working Group". http://www.opengl.org/about/arb/. 
^ "The OpenGL Graphics System Specification. Version 2.1" (PDF). http://www.opengl.org/registry/doc/glspec21.20061201.pdf. 
^ http://www.opengl.org/registry/
^ http://www.taoframework.com/
^ http://pike.ida.liu.se/about/pike/modules.xml
^ "IRIS GL, SGI's property". http://www.cg.tuwien.ac.at/~wimmer/apis/API_Summary.html. 
^ "Creation of the OpenGL ARB". http://www.sgi.com/company_info/newsroom/press_releases/2004/august/opengl.html. 
^ "End of OpenGL++". http://www.opengl.org/about/arb/meeting_notes/notes/Meeting1.2/meeting_note_10-03-98.html. 
^ "Announcement of Fahrenheit". http://www.windowsitpro.com/Article/ArticleID/17533/17533.html. 
^ "Members of Fahrenheit. 1998.". http://www.findarticles.com/p/articles/mi_m0CGN/is_n3341/ai_20211297. 
^ "End of Fahrenheit". http://www.theregister.co.uk/1999/11/29/ms_quietly_dumps_windows_opengl/. 
^ http://www.opengl.org/documentation/specs/version2.0/glspec20.pdf
^ "OpenGL 2.1 Features". http://www.opengl.org/documentation/current_version/. 
^ http://www.opengl.org/registry/doc/glspec30.20080811.pdf
^ "OpenGL ARB announces an update on OpenGL 3.0". October 30, 2007. http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=229374#Post229374. Retrieved on 2007-10-31. 
^ http://tech.slashdot.org/article.pl?sid=08/08/11/2135259
^ http://feeds.feedburner.com/~r/opengl/zOLP/~3/365627409/
^ http://feeds.feedburner.com/~r/opengl/zOLP/~3/368325680/
^ http://feeds.feedburner.com/~r/opengl/zOLP/~3/364953172/
^ Khronos Group (24 March 2009). Khronos Releases Streamlined OpenGL 3.1 Specification. Press release. http://www.khronos.org/news/press/releases/khronos-releases-streamlined-opengl-3.1-specification/. Retrieved on 2009-03-30. 
^ Khronos webmaster (March 24 2009). "Official feedback on OpenGL 3.1 thread". OpenGL.org Discussion and Help Forums. http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=255002. Retrieved on 2009-03-30. 
^ Bertuch, Manfred (26 March 2009). "Specification adopted for OpenGL 3.1". heise online. http://www.heise.de/english/newsticker/news/135265. Retrieved on 2009-03-30. 



[edit] Further reading

Richard S. Wright, Benjamin Lipchak, Nicholas Haemel: OpenGL SuperBible: Comprehensive Tutorial and Reference, 4th Edition, Addison-Wesley, June 18 2007, ISBN 0-321-49882-8
Dave Shreiner, Mason Woo, Jackie Neider, Tom Davis: OpenGL Programming Guide: The Official Guide to Learning OpenGL, Version 2.1, 6th Edition, Addison-Wesley, July 30 2007, ISBN 0-321-48100-3
Fosner, Ron: OpenGL Programming for Windows 95 and Windows NT, Addison Wesley, ISBN 0-201-40709-4
Kilgard, Mark: OpenGL for the X Window System, Addison-Wesley, ISBN 0-201-48359-9
Lengyel, Eric: The OpenGL Extensions Guide, Charles River Media, ISBN 1-58450-294-0
OpenGL Architecture Review Board, et al: OpenGL Reference Manual: The Official Reference Document to OpenGL, Version 1.4, Addison-Wesley, ISBN 0-321-17383-X
OpenGL Architecture Review Board, et al: OpenGL Programming Guide: The Official Guide to Learning OpenGL, Version 2, Fifth Edition, Addison-Wesley, ISBN 0-321-33573-2
Rost, Randi J.: OpenGL Shading Language, Addison-Wesley, ISBN 0-321-19789-5


[edit] External links



Wikibooks has a book on the topic of
Programming:OpenGL




Official website
SGI's OpenGL website
OpenGL at the Open Directory Project
Khronos Group, Inc.
NeHe Tutorials, OpenGL tutorials
Video tutorial by Bill Jacobs
CodeSampler.com, OpenGL Code Samples
Fahrenheit in Microsoft
OpenGL Programming Guide on the web
gDEBugger - OpenGL Debugger and Profiler Windows and Linux
Example 3D underwater world code.




Retrieved from "http://en.wikipedia.org/wiki/OpenGL"
Categories: Upcoming software | OpenGL | Graphics libraries | 3D computer graphics | Application programming interfaces | Video game development | Graphics standards | Virtual reality | Cross-platform softwareHidden categories: Articles to be merged since February 2009 | All articles to be merged | All articles with unsourced statements | Articles with unsourced statements since September 2008 | Articles with unsourced statements since March 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
বাংলা
Bosanski
Български
Català
Česky
Dansk
Deutsch
Español
فارسی
Français
Galego
한국어
Italiano
עברית
ქართული
Latviešu
Magyar
Македонски
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Simple English
Slovenčina
Slovenščina
Српски / Srpski
Suomi
Svenska
ไทย
Tiếng Việt
Türkçe
Українська
中文









 This page was last modified on 1 April 2009, at 22:41.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
