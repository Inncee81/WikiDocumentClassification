













Product Family Engineering - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Product_Family_Engineering";
		var wgTitle = "Product Family Engineering";
		var wgAction = "view";
		var wgArticleId = "4774788";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283879521;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Product Family Engineering

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article's citation style may be unclear. The references used may be clearer with a different or consistent style of citation, footnoting, or external linking.







This article may contain original research or unverified claims. Please improve the article by adding references. See the talk page for details. (September 2007)


Product families/lines are quite common in our daily lives, but before a product family can be successfully established, an extensive process has to be followed. This process is known as product family engineering, product line engineering, and software product lines.
Product family/line engineering can be defined as a method that creates an underlying architecture of an organizations product platform. It provides an architecture that is based on commonality as well as planned variabilities. The various product variants can be derived from the basic product family, which creates the opportunity to reuse and differentiate on products in the family.
Product family/line engineering is a relatively new approach to the creation of new products. It focuses on the process of engineering new products in such a way that it is possible to reuse product components and apply variability with decreased costs and time. Product family/line engineering is all about reusing components and structures as much as possible.
Several studies have proven that using a Product family/line engineering approach for product development can have several benefits (Carnegie Mellon (SEI), 2003). Here is a list of some of them:

Higher productivity
Higher quality
Faster time-to-market
Lower labor needs

The Nokia case mentioned below also illustrates these benefits.




Contents


1 Overall process

1.1 Phase 1: product management

1.1.1 Evaluate business visioning
1.1.2 Define product line scope


1.2 Phase 2: domain engineering

1.2.1 Analyze domain requirements
1.2.2 Define common requirements
1.2.3 Define variable requirements
1.2.4 Design domain
1.2.5 Implement domain
1.2.6 Test domain


1.3 Phase 3: product engineering

1.3.1 Define product requirements
1.3.2 Design product
1.3.3 Build product
1.3.4 Test product
1.3.5 Deliver and Support Product




2 Process data diagram
3 List of concepts
4 Example
5 References
6 See also
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overall process
The product family/line engineering process consists of several phases. The three main phases are:

Phase 1: Product Management
Phase 2: Domain Engineering
Phase 3: Product Engineering

The process has been modelled on a higher abstraction level. This has the advantage that it can be applied to all kinds of product lines and families, not only software. The model can be applied to any product family. Figure 1 shows a model of the entire process. Below, the process is described in detail. The process description contains elaborations of the activities and the important concepts being used. All concepts printed italic are explained in Table 1.

[edit] Phase 1: product management
The first phase is the starting up of the whole process. In this phase some important aspects are defined especially with regard to economic aspects. This phase is responsible for outlining market strategies and defining a scope, which tells what should and should not be inside the product family.

[edit] Evaluate business visioning
During this first activity all context information relevant for defining the scope of the product line is collected and evaluated. It is important to define a clear market strategy and take external market information into account, such as consumer demands. The activity should deliver a Context Document that contains guidelines, constraints and the product strategy.

[edit] Define product line scope
Scoping techniques are applied to define which aspects are within the scope. This is based upon the previous step in the process, where external factors have been taken into account. The output is a Product Portfolio Description, which includes a List of current and future products and also a Product Roadmap.
It can be argued whether phase 1: “Product Management” is part of the product family/line engineering process, because it could be seen as an individual business process that is more focused on the management aspects instead of the product aspect. However phase 2 needs some important input from this phase, as a large piece of the scope is defined in this phase. So from this point of view it is important to include the Product Management phase (phase 1) into the entire process as a base for the Domain Engineering process.

[edit] Phase 2: domain engineering
During the Domain Engineering phase the variable and common requirements are gathered for the whole product line. The goal is to establish a reusable platform. The output of this phase is a set of common and variable requirements for all products in the product line.

[edit] Analyze domain requirements
This activity includes all activities for analyzing the domain with regard to concept requirements. The requirements are categorized and split up into two new activities. The output is a document with the domain analysis.
As can be seen in Figure 1 the process of defining common requirements is a parallel process with defining variable requirements. Both activities take place at the same time.

[edit] Define common requirements
Includes all activities for eliciting and documenting the common requirements of the product line, resulting in a document with reusable common requirements.

[edit] Define variable requirements
Includes all activities for eliciting and documenting the variable requirements of the product line, resulting in a document with variable requirements.

[edit] Design domain
This process step consists of activities for defining the reference architecture of the product line. This generates an abstract structure for all products in the product line.

[edit] Implement domain
During this step a detailed design of the reusable components and the implementation of these components are created.

[edit] Test domain
Validates and verifies the reusability of components. Components are tested against their specifications. After successful testing of all components in different use cases and scenarios, the Domain Engineering phase has been completed.

[edit] Phase 3: product engineering
In the final phase a product X is being engineered. This product X uses the commonalities and variability from the Domain Engineering phase, so product X is being derived from the platform established in the Domain Engineering phase. It basically takes all common requirements and similarities from the preceding phase plus its own variable requirements. Using the base from the Domain Engineering phase and the individual requirements of the Product Engineering phase a complete and new product can be built. After that the product has been fully tested and approved, the product X can be delivered.

[edit] Define product requirements
Developing the product requirements specification for the individual product and reuse the requirements from the preceding phase.

[edit] Design product
All activities for producing the product architecture. Makes use of the reference architecture from the step “Design Domain”, it selects and configures the required parts of the reference architecture and incorporates product specific adaptations.

[edit] Build product
During this process the product is built, using selections and configurations of the reusable components.

[edit] Test product
During this step the product is verified and validated against its specifications. A test report gives information about all tests that were carried out, this gives an overview of possible errors in the product. If the product in the next step is not accepted, the process will loop back to “Build Product”, in Figure 1 this is indicated as “[unsatisfied]”.

[edit] Deliver and Support Product
The final step is the acceptance of the final product. If it has been successfully tested and approved to be complete, it can be delivered. If the product does not satisfy to the specifications, it has to be rebuilt and tested again.
The next figure shows the overall process of product family/line engineering as described above. It is a full process overview with all concepts attached to the different steps.

[edit] Process data diagram
On the left side the entire process from the top to bottom has been drawn. All activities on the left side are linked to the concepts on the right side through dotted lines. Every concept has a number, which reflects the association with other concepts.




Figure 1: Process Data Diagram



[edit] List of concepts
Below the list with concepts will be explained. Most concept definitions are extracted from Pohl, Bockle, & Linden (2005) and also some new definitions have been added.



Concept


Definition




Domain Analysis


Document contains an analysis of the domain through which common and variable requirements can be split up.




Reusable Common Requirements


Document contains requirements that are common to all products in the product line.




Variable Requirements


Document contains derivation of customised requirements for different products.




Reference Architecture


Determines the static and dynamic decomposition that is valid for all products of the product line. Also the collection of common rules guiding the design, realisation of the parts, and how they are combined to form products.




Variability Model


Defines the variability of the product line.




Design & Implementation Assets of Reusable Components


The major components for the design and implementation aspects, which are relevant for the whole product family.




Test Results


The output of the tests performed in domain testing.




Reusable Test Artifacts


Test artifacts include the domain test plan, the domain test cases, and the domain test case scenarios.




Requirements Specifications


The requirements for a particular product.




Product Architecture


Comparable to Reference architecture, but this contains the product specific architecture.




Running Application


A working application that can be tested later on.




Detailed Design Artifacts


These include the different kinds of models that capture the static and dynamic structure of each component.




Test Report


Document with all test results of the product.




Problem Report


Document, which lists all problems encountered while testing the product.




Final Product


The delivery of the completed product.




Family Model


The overlapping concept of all family members with all sub products.




Family Member


The concept of the individual product.




Context Document


Document containing important information for determining the scope; containing guidelines, constraints and production strategy.




Guidelines


Market/business/product guidelines




Constraints


Market/business/product constraints




Product Strategy


Product strategy with regard to markets




Product Portfolio Description


Portfolio containing all available products, with important properties.




List of Current & Future Products


A list of all current products and the products that will be produced in the future.




Product Roadmap


Describes the features of all products of the product line and categorises the feature into common features that are part of each product and variable features that are only part of some products.



Table 1: List of concepts

[edit] Example
There are some good examples of the use of Product family/line engineering, which were quite successful. The abstract model of Product Line Engineering allows different kinds of uses, most of them are related to the consumer electronics market. Below an example is given of an application of the Product line engineering process, based on a real experience of Nokia.
Nokia produces different types of products. Among them is a mobile phones product family, currently containing 25 to 30 new products every year. These products are sold all over the world, which makes it necessary to support a many different languages and user interfaces. A main problem here is that several different user interfaces must be supported, and because new products succeed each other very quickly, this should be done as efficiently as possible. Product family/line engineering makes it possible to create software for the different products and use variability to customize the software to each different mobile phone.
The Nokia case is comparable with a normal software product line. During the first phase, product management, it is possible to define the scope of the different mobile phone series. During the second phase, domain engineering, requirements are defined for the family, and for the individual types of phones, e.g., 6100/8300 series. In this phase, the software requirements are made, which can serve as a base for the whole product family. This speeds the overall development process for the software. The last phase, product engineering, is more focused on the individual types of phones. The requirements from the preceding phase are used to create individual software for the type of phone then being developed.
The use of a product line gave Nokia the opportunity to increase their production of new mobile phone models from 5-10 to around 30. Carnegie Mellon (SEI), 2006, Clements & Northrop (2003).

[edit] References
Jan Bosch, Design and use of software architectures: adopting and evolving a product-line approach, ACM Press/Addison-Wesley Publishing Co., New York, NY, 2000 http://www.amazon.com/Design-Use-Software-Architectures-Bosch/dp/0201674947
Carnegie Mellon Software Engineering Institute (SEI). Software Product Lines. Retrieved February 17, 2006, from: http://www.sei.cmu.edu/productlines/index.html
Clements P. & Northrop L.M. (2003). Software Product Lines. Presentation Carnegie Mellon Software Engineering Institute. Retrieved March 26, 2006, from: http://www.sei.cmu.edu/programs/pls/sw-product-lines_05_03.pdf
European Software Institute (ESI). Retrieved February 17, 2006, from: http://www.esi.es/Families/famResults.html
Pohl K., Bockle G., & Linden F. van der (2005). Software Product Line Engineering. Berlin, Heidelberg, New York: Springer-Verlag.

[edit] See also

Automatic programming
Domain Analysis
Feature Model
Feature Oriented Programming
Multiagent systems product lines
Systems Engineering
Version Management


[edit] External links

Carnegie Mellon Software Engineering Institute (SEI)
European Software Institute (ESI)
Software Product Lines
University of Trier, Computer Science
software product line research sathya ganeshan




Retrieved from "http://en.wikipedia.org/wiki/Product_Family_Engineering"
Categories: Product managementHidden categories: Wikipedia references cleanup | Articles that may contain original research since September 2007 | All articles that may contain original research 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
한국어









 This page was last modified on 14 April 2009, at 22:40 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
