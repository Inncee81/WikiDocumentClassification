













COBOL - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "COBOL";
		var wgTitle = "COBOL";
		var wgAction = "view";
		var wgArticleId = "6799";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280527827;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); COBOL

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other uses, see COBOL (disambiguation).

COBOL

Paradigm
procedural,
object-oriented


Appeared in
1959 (1959)


Designed by
Grace Hopper, William Selden, Gertrude Tierney, Howard Bromberg, Howard Discount, Vernon Reeves, Jean E. Sammet


Typing discipline
strong, static


Major implementations
OpenCOBOL, MicroFocus.com


Dialects
HP3000 COBOL/II, COBOL/2, IBM OS/VS COBOL, IBM COBOL/II, IBM COBOL SAA, IBM Enterprise COBOL, IBM COBOL/400, IBM ILE COBOL, Unix COBOL X/Open, Micro Focus COBOL, Microsoft COBOL, Ryan McFarland RM/COBOL, Ryan McFarland RM/COBOL-85, DOSVS COBOL, UNIVAC COBOL, Realia COBOL, Fujitsu COBOL, ICL COBOL, ACUCOBOL-GT, DEC VAX COBOL, Wang VS COBOL, Visual COBOL


Influenced by
FLOW-MATIC, COMTRAN, FACT


Influenced
PL/I, CobolScript, ABAP


COBOL (pronounced /ˈkoʊbɒl/) is one of the oldest programming languages still in active use. Its name is an acronym for COmmon Business-Oriented Language, defining its primary domain in business, finance, and administrative systems for companies and governments.
The COBOL 2002 standard includes support for object-oriented programming and other modern language features.[1]




Contents


1 History and specification

1.1 COBOL 2002 and object-oriented COBOL
1.2 History of COBOL standards
1.3 Legacy


2 Features

2.1 Syntactic features
2.2 Data types
2.3 Hello, world


3 Criticism
4 Defense
5 Aphorisms and humor about COBOL
6 See also

6.1 Other third-generation programming languages


7 References
8 Sources
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History and specification
A specification of COBOL was initially created during the second half of 1959 by Glen Sophocleous. The scene was set on April 8 at a meeting of computer manufacturers, users and university people at the University of Pennsylvania Computing Center and subsequently the United States Department of Defense agreed to sponsor and oversee the next activities. A meeting was held at the Pentagon on May 28 and 29 (exactly one year after the Zürich ALGOL 58 meeting), chaired by Charles A. Phillips. There it was decided to set up three committees, short, intermediate and long range (the last one was actually never formed). It was the Short Range Committee, chaired by Joseph Wegstein of the US National Bureau of Standards, that during the next months would create a description of the first version of COBOL.[2] The committee was formed to recommend a short range approach to a common business language. The committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were Burroughs Corporation, IBM, Minneapolis-Honeywell (Honeywell Labs), RCA, Sperry Rand, and Sylvania Electric Products. The three government agencies were the US Air Force, the David Taylor Model Basin, and the National Bureau of Standards (now National Institute of Standards and Technology). The intermediate-range committee was formed but never became operational. In the end a sub-committee of the Short Range Committee developed the specifications of the COBOL language. This sub-committee was made up of six individuals:

William Selden and Gertrude Tierney of IBM
Howard Bromberg and Howard Discount of RCA
Vernon Reeves and Jean E. Sammet of Sylvania Electric Products[3]

This subcommittee completed the specifications for COBOL in December 1959. The specifications were to a great extent inspired by the FLOW-MATIC language invented by Grace Hopper, commonly referred to as "the mother of the COBOL language", the IBM COMTRAN language invented by Bob Bemer, and the FACT language from Honeywell.
The name COBOL was decided upon at a meeting of the committee held on 18 Sept. 1959.
The first compilers for COBOL were subsequently implemented during the year 1960 and on 6 and 7 Dec. essentially the same COBOL program was run on two different makes of computers, an RCA computer and a Remington-Rand Univac computer, demonstrating that compatibility could be achieved.
Since 1959 COBOL has undergone several modifications and improvements. In an attempt to overcome the problem of incompatibility between different versions of COBOL, the American National Standards Institute (ANSI) developed a standard form of the language in 1968. This version was known as American National Standard (ANS) COBOL. In 1974, ANSI published a revised version of (ANS) COBOL, containing a number of features that were not in the 1968 version. In 1985, ANSI published still another revised version that had new features not in the 1974 standard. The language continues to evolve today.

[edit] COBOL 2002 and object-oriented COBOL
In the early 1990s it was decided to add object-orientation in the next full revision of COBOL. The initial estimate was to have this revision completed by 1997 and an ISO CD (Committee Draft) was available by 1997. Some implementers (including Micro Focus, Fujitsu, and IBM) introduced object-oriented syntax based on the 1997 or other drafts of the full revision. The final approved ISO Standard (adopted as an ANSI standard by INCITS) was approved and made available in 2002.
Like the C++ programming language, object-oriented COBOL compilers are available even as the language moves toward standardization. Fujitsu and Micro Focus currently support object-oriented COBOL compilers targeting the .NET framework.[4]
The 2002 (4th revision) of COBOL included many other features beyond object-orientation. These included (but are not limited to):

National Language support (including but not limited to Unicode support)
Locale-based processing
User-defined functions
CALL (and function) prototypes (for compile-time parameter checking)
Pointers and syntax for getting and freeing storage
Calling conventions to and from non-COBOL languages such as C
Support for execution within framework environments such as Microsoft's .NET and Java (including COBOL instantiated as Enterprise JavaBeans)
Bit and Boolean support
“True” binary support (up until this enhancement, binary items were truncated based on the (base-10) specification within the Data Division)
Floating-point support
Standard (or portable) arithmetic results
XML generation and parsing


[edit] History of COBOL standards
The specifications approved by the full Short Range Committee were approved by the Executive Committee on January 3, 1960, and sent to the government printing office, which edited and printed these specifications as Cobol 60.
The American National Standards Institute (ANSI) produced several revisions of the COBOL standard, including:

COBOL-68
COBOL-74
COBOL-85
Intrinsic Functions Amendment - 1989
Corrections Amendment - 1991

After the Amendments to the 1985 ANSI Standard (which were adopted by ISO), primary development and ownership was taken over by ISO. The following editions and TRs (Technical Reports) have been issued by ISO (and adopted as ANSI) Standards:

COBOL 2002
Finalizer Technical Report - 2003
Native XML syntax Technical Report - 2006l
Object Oriented Collection Class Libraries - pending final approval

From 2002, the ISO standard is also available to the public coded as ISO/IEC 1989.
Work is progressing on the next full revision of the COBOL Standard. It is expected to be approved and available in the early 2010s. For information on this revision, to see the latest draft of this revision, or to see what other works is happening with the COBOL Standard, see the COBOL Standards Website.

[edit] Legacy
COBOL programs are in use globally in governmental and military agencies, in commercial enterprises, and on operating systems such as IBM's z/OS, Microsoft's Windows, and the POSIX families (Unix/Linux etc.). In 1997, the Gartner Group reported that 80% of the world's business ran on COBOL with over 200 billion lines of code in existence and with an estimated 5 billion lines of new code annually.[5]
Near the end of the twentieth century the year 2000 problem was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required for COBOL code has been attributed both to the large amount of business-oriented COBOL, as COBOL is by design a business language and business applications use dates heavily, and to constructs of the COBOL language such as the PICTURE clause, which can be used to define fixed-length numeric fields, including two-digit fields for years.

[edit] Features
COBOL as defined in the original specification included a PICTURE clause for detailed field specification. It did not support local variables, recursion, dynamic memory allocation, or structured programming constructs. Support for some or all of these features has been added in later editions of the COBOL standard.
COBOL has many reserved words (over 400), called keywords. The original COBOL specification supported self-modifying code via the infamous "ALTER X TO PROCEED TO Y" statement. This capability has since been removed.

[edit] Syntactic features
COBOL provides an update-in-place syntax, for example

      ADD YEARS TO AGE

The equivalent construct in many procedural languages would be

age = age + years

This syntax is similar to the compound assignment operator later adopted by C:

age += years

The abbreviated conditional expression

      IF SALARY > 9000 OR SUPERVISOR-SALARY OR = PREV-SALARY

is equivalent to

      IF SALARY > 9000
          OR SALARY > SUPERVISOR-SALARY
          OR SALARY = PREV-SALARY

COBOL provides "named conditions" (so-called 88-levels). These are declared as sub-items of another item (the conditional variable). The named condition can be used in an IF statement, and tests whether the conditional variable is equal to any of the values given in the named condition's VALUE clause. The SET statement can be used to make a named condition TRUE (by assigning the first of its values to the conditional variable).
COBOL allows identifiers to be up to 30 characters long. When COBOL was introduced, much shorter lengths (e.g., 6 characters for FORTRAN) were prevalent.
The concept of copybooks was introduced by COBOL; these are chunks of text which can be inserted into a program's code. This is done with the COPY statement, which also allows parts of the copybook's text to be replaced with other text (using the REPLACING ... BY ... clause).

[edit] Data types
Standard COBOL provides the following data types:


Data type
Sample declaration
Notes


Character
PIC X(20)
PIC A(4)9(5)X(7)
Alphanumeric and alphabetic-only
Single-byte character set (SBCS)


Edited character
PIC X99BAXX
Formatted and inserted characters


Numeric fixed-point binary
PIC S999V99
USAGE COMPUTATIONAL
or
BINARY
Binary 16, 32, or 64 bits (2, 4, or 8 bytes)
Signed or unsigned. Conforming compilers limit the maximum value of variables based on the picture clause and not the number of bits reserved for storage.


Numeric fixed-point packed decimal
PIC S999V99
USAGE PACKED-DECIMAL
1 to 18 decimal digits (1 to 10 bytes)
Signed or unsigned


Numeric fixed-point zoned decimal
PIC S999V99
[USAGE DISPLAY]
1 to 18 decimal digits (1 to 18 bytes)
Signed or unsigned


Numeric floating-point
PIC S9V999ES99
Binary floating-point


Edited numeric
PIC +Z,ZZ9.99
PIC $***,**9.99CR
Formatted characters and digits


Group (record)
01 CUST-NAME.
  05 CUST-LAST PIC X(20).
  05 CUST-FIRST PIC X(20).
Aggregated elements


Table (array)
OCCURS 12 TIMES
Fixed-size array, row-major order
Up to 7 dimensions


Variable-length table
OCCURS 0 to 12 TIMES
DEPENDING ON CUST-COUNT
Variable-sized array, row-major order
Up to 7 dimensions


Renames (variant or union data)
66 RAW-RECORD
  RENAMES CUST-RECORD
Character data overlaying other variables


Condition name
88 IS-RETIRED-AGE
  VALUES 65 THRU 150
Boolean value
dependent upon another variable


Array index
USAGE INDEX
Array subscript


Most vendors provide additional types, such as:


Data type
Sample declaration
Notes


Numeric fixed-point binary
in native byte order
PIC S999V99
USAGE COMPUTATIONAL-4
Binary 16, 32, or 64 bits (2, 4, or 8 bytes)
Signed or unsigned


Numeric fixed-point binary
in big-endian byte order
PIC S999V99
USAGE COMPUTATIONAL-5
Binary 16, 32, or 64 bits (2, 4, or 8 bytes)
Signed or unsigned


Wide character
PIC G(20)
Alphanumeric
Double-byte character set (DBCS)


Edited wide character
PIC G99BGGG
Formatted and inserted wide characters


Edited floating-point
PIC +9.9(6)E+99
Formatted characters and decimal digits


Data pointer
USAGE POINTER
Data memory address


Code pointer
USAGE PROCEDURE-POINTER
Code memory address


Bit field
PIC 1(n) USAGE COMPUTATIONAL-5
n can be from 1 to 64, defining an n-bit integer
Signed or unsigned


Index
USAGE INDEX
Binary value corresponding to an occurrence of a table element
May be linked to a specific table using INDEXED BY



[edit] Hello, world
An example of the "Hello, world" program in COBOL:

      IDENTIFICATION DIVISION.
      PROGRAM-ID. HELLO-WORLD.
      PROCEDURE DIVISION.
      MAIN.
          DISPLAY 'Hello, world.'.
          STOP RUN.


[edit] Criticism
Critics have argued that COBOL's syntax serves mainly to increase the size of programs, at the expense of developing the thinking process needed for software development. In his letter to an editor in 1975 titled "How do we tell truths that might hurt?", computer scientist and Turing Award recipient Edsger Dijkstra remarked that "The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense."[6]
COBOL 85 was not compatible with earlier versions, resulting in the "cesarean birth of COBOL 85". Joseph T. Brophy, CIO, Travelers Insurance, spearheaded an effort to inform users of COBOL of the heavy reprogramming costs of implementing the new standard. As a result the ANSI COBOL Committee received more than 3,200 letters from the public, mostly negative, requiring the committee to make changes.[7]
Older versions of COBOL lack local variables and so cannot truly support structured programming.
Others[who?] criticize the ad hoc incorporation of features on a language that was meant to be a short term solution to interoperability in 1959. Coupled with the perceived archaic syntax, they argue that it tries to fill a niche for which better tools have already been designed and developed.

[edit] Defense
The COBOL specification has also been revised over the years to incorporate developments in computing theory and practice .
As with any language, COBOL code can be made more verbose than necessary. For example, one of the roots of the quadratic equation ax2 + bx + c = 0, which are:



can be coded in COBOL using the "compute" verb as:

      COMPUTE X = (-B + SQRT(B ** 2 - (4 * A * C))) / (2 * A)

The same formula could also be written less concisely as:

      MULTIPLY B BY B GIVING B-SQUARED.  
      MULTIPLY 4 BY A GIVING FOUR-A.  
      MULTIPLY FOUR-A BY C GIVING FOUR-A-C.  
      SUBTRACT FOUR-A-C FROM B-SQUARED GIVING RESULT-1.  
      COMPUTE RESULT-2 = RESULT-1 ** .5.
      SUBTRACT B FROM RESULT-2 GIVING NUMERATOR.
      MULTIPLY 2 BY A GIVING DENOMINATOR.
      DIVIDE NUMERATOR BY DENOMINATOR GIVING X.

Which form to use is a matter of style. In some cases the less concise form may be easier to read. For example:

      ADD YEARS TO AGE.
      MULTIPLY PRICE BY QUANTITY GIVING COST.
      SUBTRACT DISCOUNT FROM COST GIVING FINAL-COST.

Older versions of COBOL supported local variables via embedded programs (scope-delimited by the keywords PROGRAM-ID and END-PROGRAM). Variables declared within the embedded program are invisible outside its scope. Also, local variables could be accomplished via separately compiled sub-programs. Newer COBOL compilers support the LOCAL-STORAGE section for local variables.

[edit] Aphorisms and humor about COBOL
It has been said of languages like C, C++, and Java that the only way to modify legacy code is to rewrite it - write once and write once again; or write once and throw away. On the other hand, it has been said of COBOL that there actually is one original COBOL program, and it has only been copied and modified millions of times.
The name "ADD 1 TO COBOL GIVING COBOL" has been suggested for a hypothetical object-oriented dialect of COBOL, as a play on the name C++. While this is meant to suggest that COBOL is inherently verbose, the form given is more verbose than COBOL actually requires; the succinct form would be "ADD 1 TO COBOL".
Another suggested name is "POSTINCREMENT COBOL BY 1", which not only reflects the verbose nature of COBOL statements, but also highlights the tendency for COBOL features to require their own dedicated reserved keywords (standard COBOL employs over 400 reserved words), this example being the case for a hypothetical new POSTINCREMENT operator.

[edit] See also

Alphabetical list of programming languages
Burroughs B2000
CODASYL
Comparison of programming languages
OpenCOBOL


[edit] Other third-generation programming languages




Ada
ALGOL
APL
BASIC
C
C++
C#




FORTRAN
Java
Eiffel
Lisp - ISO/IEC 13816
Pascal, Object Pascal, Extended Pascal
PL/I
RPG





[edit] References


^ Oliveira, Rui (2006). The Power of Cobol. City: BookSurge Publishing. ISBN 0620346523. 
^ Garfunkel, Jerome (1987). The Cobol 85 Example Book. New York: Wiley. ISBN 0471804614. 
^ Wexelblat, Richard (1981). History of Programming Languages. Boston: Academic Press. ISBN 0127450408. 
^ NetCOBOL for .NET supports COBOL migration and software development in the .NET environment
^ "Future of COBOL" (PDF). LegacyJ Corporation. 2003. 5. http://www.legacyj.com/cobol/FutureOfCobol.pdf. Retrieved on 2006-11-08. 
^ Dijkstra (2006). "E. W. Dijkstra Archive: How do we tell truths that might hurt? (EWD498)". University of Texas at Austin. http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html. Retrieved on August 29 2007. 
^ (The COBOL 85 Example Book)



[edit] Sources

Ebbinkhuijsen, Wim B.C., COBOL Alphen aan den Rijn/Diegem: Samson Bedrijfsinformatie bv, 1990. ISBN 90-14-04560-3. (Dutch)


[edit] External links





This article's external links may not follow Wikipedia's content policies or guidelines. Please improve this article by removing excessive or inappropriate external links.





Wikibooks has more on the topic of
COBOL



Standards:

COBOL Standard Committee

Reference manuals:

IBM Enterprise COBOL for z/OS V4R1 Bookshelf
IBM VS COBOL II V1R4.0 Bookshelf
IBM COBOL documentation (iSeries Information Center)
IBM ILE COBOL Programmer's GuidePDF (6.8 MB)
IBM ILE COBOL Language ReferencePDF (7.0 MB)

Tutorials, forums and communities:

COBOL Tutorial
Mainframe COBOL Community
Add1tocobol: COBOL advocacy project
Cobol User's Group has an extensive collection of links

Compilers and other products:

IBM COBOL compilers
OpenCOBOL, an open-source COBOL compiler.

OpenCOBOL FAQ, and collection of code samples.


TinyCOBOL, an open-source COBOL compiler based on the COBOL 85 standards
Micro Focus
Wildcat Cobol, an open-source COBOL compiler for .NET
XML Thunder, which serializes and de-serializes XML in COBOL

Other perspectives:

Description from another wiki
Article "Cobol: Not Dead Yet" by Robert Mitchell
Article "Cobol Coders: Going, Going, Gone?" by Gary Anthes
Article "The future's bright ... the future's Cobol" by Paul Krill




Retrieved from "http://en.wikipedia.org/wiki/COBOL"
Categories: COBOL | Object-oriented programming languages | .NET programming languagesHidden categories: All pages needing cleanup | Articles with specifically-marked weasel-worded phrases since March 2009 | Wikipedia external links cleanup 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
العربية
Azərbaycan
বাংলা
Bosanski
Български
Català
Česky
Dansk
Deutsch
Ελληνικά
Español
Esperanto
فارسی
Français
Gaeilge
Galego
한국어
Hrvatski
Bahasa Indonesia
Interlingua
Italiano
עברית
ქართული
Lietuvių
Magyar
मराठी
Bahasa Melayu
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Slovenčina
Slovenščina
Српски / Srpski
Srpskohrvatski / Српскохрватски
Suomi
Svenska
தமிழ்
తెలుగు
ไทย
Tiếng Việt
Тоҷикӣ
Türkçe
Українська
中文









 This page was last modified on 29 March 2009, at 23:38.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
