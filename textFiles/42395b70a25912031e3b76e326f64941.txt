













Enterprise application integration - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Enterprise_application_integration";
		var wgTitle = "Enterprise application integration";
		var wgAction = "view";
		var wgArticleId = "842555";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281927500;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Enterprise application integration

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Enterprise Application Integration (EAI) is defined as the use of software and computer systems architectural principles to integrate a set of enterprise computer applications.




Contents


1 Overview
2 Improving connectivity
3 Purposes of EAI
4 EAI patterns

4.1 Integration patterns
4.2 Access patterns
4.3 Lifetime patterns


5 EAI topologies
6 Technologies
7 Communication architectures
8 EAI Implementation Pitfalls
9 Advantages and Disadvantages
10 The Future of EAI
11 See also

11.1 Initiatives and organizations
11.2 Commercial solutions
11.3 Open-source projects


12 External links
13 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
Supply chain management applications (for managing inventory and shipping), customer relationship management applications (for managing current and potential customers), business intelligence applications (for finding patterns from existing data from operations), and other types of applications (for managing data such as human resources data, health care, internal communications, etc) typically cannot communicate with one another in order to share data or business rules. For this reason, such applications are sometimes referred to as islands of automation or information silos. This lack of communication leads to inefficiencies, wherein identical data are stored in multiple locations, or straightforward processes are unable to be automated.
Enterprise application integration (EAI) is the process of linking such applications within a single organization together in order to simplify and automate business processes to the greatest extent possible, while at the same time avoiding having to make sweeping changes to the existing applications or data structures. In the words of the Gartner Group, EAI is the “unrestricted sharing of data and business processes among any connected application or data sources in the enterprise.”[1]
One large challenge of EAI is that the various systems that need to be linked together often reside on different operating systems, use different database solutions and different computer languages, and in some cases are legacy systems that are no longer supported by the vendor who originally created them. In some cases, such systems are dubbed "stovepipe systems" because they consist of components that have been jammed together in a way that makes it very hard to modify them in any way.

[edit] Improving connectivity
If integration is applied without following a structured EAI approach, point-to-point connections grow across an organization. Dependencies are added on an impromptu basis, resulting in a tangled mess that is difficult to maintain. This is commonly referred to as spaghetti, an allusion to the programming equivalent of spaghetti code. For example:
The number of n connections needed to have a fully meshed point-to-point connections is given by . Thus, for ten applications to be fully integrated point-to-point, , or 45 point-to-point connections are needed.
However, EAI is not just about sharing data between applications; it focuses on sharing both business data and business process. Attending to EAI involves looking at the system of systems, which involves large scale inter-disciplinary problems with multiple, heterogeneous, distributed systems that are embedded in networks at multiple levels.

[edit] Purposes of EAI
EAI can be used for different purposes:

Data (information) Integration: Ensuring that information in multiple systems is kept consistent. This is also known as EII (Enterprise Information Integration).
Process Integration: Linking business processes across applications.
Vendor independence: Extracting business policies or rules from applications and implementing them in the EAI system, so that even if one of the business applications is replaced with a different vendor's application, the business rules do not have to be re-implemented.
Common Facade: An EAI system could front-end a cluster of applications, providing a single consistent access interface to these applications and shielding users from having to learn to interact with different software packages.


[edit] EAI patterns

[edit] Integration patterns
There are two patterns that EAI systems implement:

Mediation
Here, the EAI system acts as the go-between or broker between (interface or communicating) multiple applications. Whenever an interesting event occurs in an application (e. g., new information created, new transaction completed, etc.) an integration module in the EAI system is notified. The module then propagates the changes to other relevant applications.
Federation
In this case, the EAI system acts as the overarching facade across multiple applications. All accesses from the 'outside world' to any of the applications are front-ended by the EAI system. The EAI system is configured to expose only the relevant information and interfaces of the underlying applications to the outside world, and performs all interactions with the underlying applications on behalf of the requester.

Both patterns are often used concurrently. The same EAI system could be keeping multiple applications in sync (mediation), while servicing requests from external users against these applications (federation).

[edit] Access patterns
EAI supports both asynchronous and synchronous access patterns, the former being typical in the mediation case and the latter in the federation case.

[edit] Lifetime patterns
An integration operation could be short-lived (e. g., keeping data in sync across two applications could be completed within a second) or long-lived (e. g., one of the steps could involve the EAI system interacting with a human work flow application for approval of a loan that takes hours or days to complete).

[edit] EAI topologies
There are two major topologies: hub-and-spoke, and bus. Each has its own advantages and disadvantages. In the hub-and-spoke model, the EAI system is at the center (the hub), and interacts with the applications via the spokes. In the bus model, the EAI system is the bus (or is implemented as a resident module in an already existing message bus or message-oriented middleware).

[edit] Technologies
Multiple technologies are used in implementing each of the components of the EAI system:

Bus/hub
This is usually implemented by enhancing standard middleware products (application server, message bus) or implemented as a stand-alone program (i. e., does not use any middleware), acting as its own middleware.
Application connectivity
The bus/hub connects to applications through a set of adapters (also referred to as connectors). These are programs that know how to interact with an underlying business application. The adapter performs two-way communication, performing requests from the hub against the application, and notifying the hub when an event of interest occurs in the application (a new record inserted, a transaction completed, etc.). Adapters can be specific to an application (e. g., built against the application vendor's client libraries) or specific to a class of applications (e. g., can interact with any application through a standard communication protocol, such as SOAP or SMTP). The adapter could reside in the same process space as the bus/hub or execute in a remote location and interact with the hub/bus through industry standard protocols such as message queues, web services, or even use a proprietary protocol. In the Java world, standards such as JCA allow adapters to be created in a vendor-neutral manner.
Data format and transformation
To avoid every adapter having to convert data to/from every other applications' formats, EAI systems usually stipulate an application-independent (or common) data format. The EAI system usually provides a data transformation service as well to help convert between application-specific and common formats. This is done in two steps: the adapter converts information from the application's format to the bus's common format. Then, semantic transformations are applied on this (converting zip codes to city names, splitting/merging objects from one application into objects in the other applications, and so on).
Integration modules
An EAI system could be participating in multiple concurrent integration operations at any given time, each type of integration being processed by a different integration module. Integration modules subscribe to events of specific types and process notifications that they receive when these events occur. These modules could be implemented in different ways: on Java-based EAI systems, these could be web applications or EJBs or even POJOs that conform to the EAI system's specifications.
Support for transactions
When used for process integration, the EAI system also provides transactional consistency across applications by executing all integration operations across all applications in a single overarching distributed transaction (using two-phase commit protocols or compensating transactions).


[edit] Communication architectures
Currently, there are many variations of thought on what constitutes the best infrastructure, component model, and standards structure for Enterprise application integration. There seems to be consensus that four components are essential for a modern enterprise application integration architecture:

A centralized broker that handles security, access, and communication. This can be accomplished through integration servers (like the School Interoperability Framework (SIF) Zone Integration Servers) or through similar software like the Enterprise service bus (ESB) model that acts as a SOAP-oriented services manager.
An independent data model based on a standard data structure. It appears that XML and the use of XML style sheets has become the de facto and in some cases de jure standard.
A connector, or agent model where each vendor, application, or interface can build a single component that can speak natively to that application and communicate with the centralized broker.
A system model that defines the APIs, data flow and rules of engagement to the system such that components can be built to interface with it in a standardized way.

Although other approaches like connecting at the database or user-interface level have been explored, they have not been found to scale or be able to adjust. Individual applications can publish messages to the centralized broker and subscribe to receive certain messages from that broker. Each application only requires one connection to the broker. This central control approach can be extremely scalable and highly evolvable.
Enterprise Application Integration is related to middleware technologies such as message-oriented middleware (MOM), and data representation technologies such as XML. Other EAI technologies involve using web services as part of service-oriented architecture as a means of integration. Enterprise Application Integration tends to be data centric. In the near future, it will come to include content integration and business processes.

[edit] EAI Implementation Pitfalls
In 2003 it was reported that 70% of all EAI projects fail. Most of these failures are not due to the software itself or technical difficulties, but due to management issues. Integration Consortium European Chairman Steve Craggs has outlined the seven main pitfalls undertaken by companies using EAI systems and explains solutions to these problems.[2]

Constant change


The very nature of EAI is dynamic and requires dynamic project managers to manage their implementation.


Lack of EAI experts


EAI requires knowledge of many issues and technical aspects.


Competing standards


Within the EAI field, the paradox is that EAI standards themselves are not universal.


EAI is a tool paradigm


EAI is not a tool, but rather a system and should be implemented as such.


Building interfaces is an art


Engineering the solution is not sufficient. Solutions need to be negotiated with user departments to reach a common consensus on the final outcome. A lack of consensus on interface designs leads to excessive effort to map between various systems data requirements.


Loss of detail


Information that seemed unimportant at an earlier stage may become crucial later.


Accountability


Since so many departments have many conflicting requirements, there should be clear accountability for the system's final structure.

Other potential problems may arise in these areas:

Emerging Requirements


EAI implementations should be extensible and modular to allow for future changes.


Protectionism


The applications whose data is being integrated often belong to different departments that have technical, cultural, and political reasons for not wanting to share their data with other departments


[edit] Advantages and Disadvantages

Advantages

Real time information access among systems
Streamlines business processes and helps raise organizational efficiency.
Maintains information integrity across multiple systems
Ease of development and maintenance


Disadvantages

Prohibitively high development costs, especially for small and mid-sized businesses (SMBs).
EAI implementations are very time consuming, and need a lot of resources.
Require a fair amount of up front design, which many managers are not able to envision or not willing to invest in. Most EAI projects usually start off as point-to-point efforts, very soon becoming unmanageable as the number of applications increase.




[edit] The Future of EAI
EAI technologies are still being developed and there still is no consensus on the ideal approach or the correct group of technologies a company should use. A common pitfall is to use other proprietary technologies that claim to be open and extensible but create vendor lock-in.

[edit] See also

Comparison of business integration software
Data integration
Enterprise integration
Enterprise Integration Patterns
Enterprise service bus
Generalised Enterprise Reference Architecture and Methodology
Integration appliance
Straight Through Processing
System integration


[edit] Initiatives and organizations

Health Level 7
Open Knowledge Initiative
OSS through Java
Schools Interoperability Framework (SIF)


[edit] Commercial solutions

Adeptia Integration Software
Axway
expressor software
IBM WebSphere Message Broker
iBOLT
Integration Objects
Intersystems
Interwoven
IONA Technologies Artix ESB
iWay Software
Microsoft BizTalk Server
MOND Technologies
Oracle Aqualogic Service Bus
Oracle BPEL Process Manager
RBRO Solutions


[edit] Open-source projects

Apache ActiveMQ
Apache Camel
Apache ServiceMix
Apache Synapse
Bostech
FUSE ESB (enterprise ServiceMix)
FUSE Mediation Router (enterprise Camel)
FUSE Message Broker (enterprise ActiveMQ)
Jitterbit Integration Server
MuleSource
Openadaptor
OpenESB
PEtALS ESB
Spring Integration
Virtuoso Universal Server


[edit] External links

Integration Consortium
Open Architectures to Improve Plant Visibility and Performance


[edit] References

^ In its April 2001 report for AIIM International, "Enterprise Applications: Adoption of E-Business and Document Technologies, 2000-2001: Worldwide Industry Study," Gartner defines EAI as "the unrestricted sharing of data and business processes among any connected applications and data sources in the enterprise."
Gable, Julie (March/April 2002). "Enterprise application integration". Information Management Journal. http://findarticles.com/p/articles/mi_qa3937/is_200203/ai_n9019202. Retrieved on 2008-01-22. 
^ Trotta, Gian (2003-12-15). "Dancing Around EAI 'Bear Traps'". http://www.ebizq.net/topics/int_sbp/features/3463.html. Retrieved on 2006-06-27. 




Retrieved from "http://en.wikipedia.org/wiki/Enterprise_application_integration"
Categories: Enterprise application integration 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Dansk
Deutsch
Español
Français
한국어
עברית
Nederlands
日本語
Português
Русский
Tiếng Việt
中文









 This page was last modified on 5 April 2009, at 17:27.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
