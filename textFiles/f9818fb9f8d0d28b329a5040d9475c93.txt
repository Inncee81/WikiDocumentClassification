













ALGOL - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "ALGOL";
		var wgTitle = "ALGOL";
		var wgAction = "view";
		var wgArticleId = "1453";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281553258;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); ALGOL

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other uses of "Algol", see Algol (disambiguation).

ALGOL

Paradigm
procedural, imperative, structured


Appeared in
1958


Designed by
Bauer, Bottenbruch, Rutishauser, Samelson, Backus, Katz, Perlis, Wegstein, Naur, Vauquois, van Wijngaarden, Woodger, Green, McCarthy


Influenced
Most subsequent imperative languages (so-called ALGOL-like languages)


ALGOL (short for ALGOrithmic Language)[1] is a family of imperative computer programming languages originally developed in the mid 1950s which greatly influenced many other languages and became the de facto way algorithms were described in textbooks and academic works for almost the next 30 years[2]. It was designed to avoid some of the perceived problems with FORTRAN and eventually gave rise to many other programming languages (including BCPL, B, C, Simula and Pascal). ALGOL introduced code blocks and was the first language to use begin end pairs for delimiting them. Fragments of ALGOL-like syntax are sometimes still used as a notation for algorithms, so-called Pidgin Algol.
There were three major specifications:




ALGOL 58 - originally proposed to be called IAL (for International Algorithmic Language).
ALGOL 60, described in detail on this page - revised 1963[3]
ALGOL 68 - revised 1973[4]




Niklaus Wirth based his own Algol-W on ALGOL 60 before moving to develop Pascal. Algol-W was intended to be the next generation ALGOL but the ALGOL 68 committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published.
Algol68 is substantially different from Algol60 but was not well received so that in general "Algol" means dialects of Algol60.




Contents


1 Import and Implementations
2 History

2.1 IAL implementations timeline


3 Properties

3.1 ALGOL 60 Reserved words and restricted identifiers


4 Examples and portability issues

4.1 Code sample (ALGOL 60)
4.2 Timeline: Hello world

4.2.1 ALGOL 58 (IAL)
4.2.2 ALGOL 60 family
4.2.3 ALGOL 68




5 See also
6 References
7 Further reading
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Import and Implementations
The International Algorithmic Language (IAL) was extremely influential and is generally considered the ancestor of most of the modern programming languages (the so-called Algol-like languages). The Burroughs corporation built their line of computers to directly execute it. Additionally, in computer science, ALGOL object code was a simple and compact and stack-based instruction set architecture mainly used in teaching compiler construction and other high order language (of which Algol is generally considered the first) physical implementations such as Lisp machines and P-code machines. [5]

[edit] History
ALGOL was developed jointly by a committee of European and American computer scientists in a meeting in 1958 at ETH Zurich (cf. ALGOL 58). It specified three different syntaxes: a reference syntax, a publication syntax, and an implementation syntax. The different syntaxes permitted it to use different keyword names and conventions for decimal points (commas vs periods) for different languages.
ALGOL was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input/output facilities in its description and the lack of interest in the language by large computer vendors. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.
John Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth's suggestion renamed Backus-Naur form.[6]
Peter Naur: "As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960."
The following people attended the meeting in Paris (from January 1 to 16):

Friedrich L. Bauer, Peter Naur, Heinz Rutishauser, Klaus Samelson, Bernard Vauquois, Adriaan van Wijngaarden, and Michael Woodger (from Europe)
John W. Backus, Julien Green, Charles Katz, John McCarthy, Alan J. Perlis, and Joseph Henry Wegstein (from the USA).

Alan Perlis gave a vivid description of the meeting: "The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent."
Both John Backus and Peter Naur served on the committee which created ALGOL 60 as did Wally Feurzeig, who later created Logo.
ALGOL 60 inspired many languages that followed it. Tony Hoare remarked: "Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors."[7]

[edit] IAL implementations timeline
To date there have been at least 70 augmentations, extensions, derivations and sublanguages of Algol 60.[8]


Name
Year
Author
State
Description
Target CPU


ZMMD-implementation
1958
Friedrich L. Bauer, Heinz Rutishauser, Klaus Samelson, Hermann Bottenbruch
Germany
implementation of ALGOL 58
Z22


Elliott ALGOL
1960
C. A. R. Hoare
UK
Subject of the famous Turing lecture
National-Elliott 803 & the Elliott 503


JOVIAL
1960
Jules Schwarz
USA
Was the DOD HOL prior to Ada (programming language)
Various (see article)


Burroughs Algol
(Several variants)
1961
Burroughs Corporation (with participation by Hoare, Dijkstra, and others)
USA
Basis of the Burroughs (and now Unisys MCP based) computers
Burroughs large systems
and their midrange as well.


Case ALGOL
1961

USA
Simula was originally contracted as a simulation extension of the Case ALGOL
UNIVAC 1107


GOGOL
1961
Bill McKeeman
USA
For ODIN time-sharing system
PDP-1


X1 Algol 60
1961
Edsger Dijkstra and J.A. Zonneveld
Netherlands
Mathematical Centre, Amsterdam
X1


Dartmouth ALGOL 30
1962
Thomas Eugene Kurtz et al.
USA

LGP-30


USS 90 Algol
1962
L. Petrone
Italy



Algol Translator
1962
G. van der May and W.L. van der Poel
Netherlands
Staatsbedrijf der Posterijen, Telegrafie en Telefonie
ZEBRA


Kidsgrove Algol
1963
F. G. Duncan
UK

English Electric Company KDF9


VALGOL
1963
Val Schorre
USA
A test of the META II compiler compiler


Whetstone
1964
Brian Randell and L J Russell
UK
Atomic Power Division of English Electric Company. Precursor to Ferranti Pegasus (computer), National Physical Laboratories ACE (computer) and English Electric DEUCE implementations.
English Electric Company KDF9


NU ALGOL
1965

Norway

UNIVAC


ALGEK
1965

USSR
Minsk-22
АЛГЭК, based on ALGOL-60 and COBOL support, for economical tasks


MALGOL
1966
publ. A. Viil, M Kotli & M. Rakhendi,
Estonian SSR
Minsk-22


ALGAMS
1967
GAMS group (ГАМС, группа автоматизации программирования для машин среднего класса), cooperation of Comecon Academies of Science
Comecon
Minsk-22, later ES EVM, BESM


ALGOL/ZAM
1967

Poland

Polish ZAM computer


RegneCentralen ALGOL
1967
Peter Naur
Denmark



Simula 67
1967
Ole-Johan Dahl and Kristen Nygaard
Norway
Algol 60 with classes
UNIVAC 1107


Chinese Algol
1972

China
Chinese characters, expressed via the Symbol system


DG/L
1972

USA

DG Eclipse family of Computers


The Burroughs dialects included special Bootstrapping dialects such as ESPOL and NEWP.

[edit] Properties
ALGOL 60 as officially defined had no I/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of transput (ALGOL 68 parlance for Input/Output) facilities.
ALGOL 60 allowed for two evaluation strategies for parameter passing: the common call-by-value, and call-by-name. Call-by-name had certain limitations in contrast to call-by-reference, making it an undesirable feature in imperative language design. For example, it is impossible in ALGOL 60 to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.[9] However, call-by-name is still beloved of ALGOL implementors for the interesting "thunks" that are used to implement it. Donald Knuth devised the "Man or boy test" to separate compilers that correctly implemented "recursion and non-local references". This test contains an example of call-by-name.
ALGOL 68 was defined using a two-level grammar formalism invented by Adriaan van Wijngaarden and which bears his name. Van Wijngaarden grammars use a context-free grammar to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language standards are labelled "semantics" and have to be expressed in ambiguity-prone natural language prose, and then implemented in compilers as ad hoc code attached to the formal language parser.

[edit] ALGOL 60 Reserved words and restricted identifiers
There are 35 such reserved words in the standard Burroughs large systems sub-language: ALPHA, ARRAY, BEGIN, BOOLEAN, COMMENT, CONTINUE, DIRECT, DO, DOUBLE, ELSE, END, EVENT, FALSE, FILE, FOR, FORMAT, GO, IF, INTEGER, LABEL, LIST, LONG, OWN, POINTER, PROCEDURE, REAL, STEP, SWITCH, TASK, THEN, TRUE, UNTIL, VALUE, WHILE, ZIP.
There are 71 such restricted identifiers in the standard Burroughs large systems sub-language: ACCEPT, AND, ATTACH, BY, CALL, CASE, CAUSE, CLOSE, DEALLOCATE, DEFINE, DETACH, DISABLE, DISPLAY, DIV, DUMP, ENABLE, EQL, EQV, EXCHANGE, EXTERNAL, FILL, FORWARD, GEQ, GTR, IMP, IN, INTERRUPT, IS, LB, LEQ, LIBERATE, LINE, LOCK, LSS, MERGE, MOD, MONITOR, MUX, NEQ, NO, NOT, ON, OPEN, OR, OUT, PICTURE, PROCESS, PROCURE, PROGRAMDUMP, RB, READ, RELEASE, REPLACE, RESET, RESIZE, REWIND, RUN, SCAN, SEEK, SET, SKIP, SORT, SPACE, SWAP, THRU, TIMES, TO, WAIT, WHEN, WITH, WRITE and also the names of all the intrinsic functions.

[edit] Examples and portability issues

[edit] Code sample (ALGOL 60)
(The way the bold text has to be written depends on the implementation, e.g. 'INTEGER' (including the quotation marks) for integer; this is known as stropping.)

procedure Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k);
    value n, m; array a; integer n, m, i, k; real y;
comment The absolute greatest element of the matrix a, of size n by m 
is transferred to y, and the subscripts of this element to i and k;
begin integer p, q;
    y := 0; i := k := 1;
    for p:=1 step 1 until n do
    for q:=1 step 1 until m do
        if abs(a[p, q]) > y then
            begin y := abs(a[p, q]);
            i := p; k := q
            end
end Absmax

Here's an example of how to produce a table using Elliott 803 ALGOL.[10]

 FLOATING POINT ALGOL TEST'
 BEGIN REAL A,B,C,D'

 READ D'

 FOR A:= 0.0 STEP D UNTIL 6.3 DO
 BEGIN
   PRINT PUNCH(3),££L??'
   B := SIN(A)'
   C := COS(A)'
   PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C'
 END'
 END'

PUNCH(3) sends output to the teleprinter rather than the tape punch.
SAMELINE suppresses the carriage return + line feed normally printed between arguments.
ALIGNED(1,6) controls the format of the output with 1 digit before and 6 after the decimal point.

[edit] Timeline: Hello world
The variations and lack of portability of the programs from one implementation to another is easily demonstrated by the classic hello world program.

[edit] ALGOL 58 (IAL)
Main article: ALGOL 58
ALGOL 58 had no I/O facilities.

[edit] ALGOL 60 family
Since ALGOL 60 had no I/O facilities, there is no portable hello world program in ALGOL. The following program could (and still will) compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from The Language Guide at the University of Michigan-Dearborn Computer and Information Science Department Hello world! ALGOL Example Program page.

BEGIN
  FILE F(KIND=REMOTE);
  EBCDIC ARRAY E[0:11];
  REPLACE E BY "HELLO WORLD!";
  WRITE(F, *, E);
END.

A simpler program using an inline format:

BEGIN
  FILE F(KIND=REMOTE);
  WRITE(F, <"HELLO WORLD!">);
END.

A even simpler program using the Display statement:

BEGIN DISPLAY("HELLO WORLD!") END.

An alternative example, using Elliott Algol I/O is as follows. Elliott Algol used different characters for "open-string-quote" and "close-string-quote", represented here by ‘ and ’.

 program HiFolks;
 begin
    print ‘Hello world’;
 end;

Here's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5 hole paper tape and thus only had upper case. The code lacked any quote characters so £ (UK Pound Sign) was used for open quote and ? (Question Mark) for close quote. Special sequences were placed in double quotes (e.g. ££L?? produced a new line on the teleprinter).

  HIFOLKS'
  BEGIN
     PRINT £HELLO WORLD££L???'
  END'

The ICL 1900 Algol I/O version allowed input from paper tape or punched card. Paper tape 'full' mode allowed lower case. Output was to a line printer.

  'BEGIN'
     'WRITE TEXT'("HELLO WORLD");
  'END'


[edit] ALGOL 68
Main article: ALGOL 68
In the language of the "Algol 68 Report", Input/output facilities were collectively called the "Transput".
ALGOL 68 code was published with reserved words typically in lowercase, but bolded or underlined.

begin
  print(("Hello, world!",newline))
end

OR using a specific transput channel:

begin
  putf((stand out,$gl$,"Hello, world!"))
end

For ease of programming computers with 7-bit characters of the time there were "official" methods to "BOLD" reserved words, for example, by using uppercase:

BEGIN
  print(("Hello, world!",newline))
END

Programmers were sometimes required to totally "THINK IN UPPERCASE" on computers that only had 6-bit characters, eg the CDC 6600 "super computers". In this case the above code would be written:

'BEGIN'
  PRINT(("HELLO, WORLD!",NEWLINE))
'END'

The "Algol 68 Report" was translated into Russian, German, French and Bulgarian, and allowed programming in languages with larger character sets, eg Cyrillic alphabet. eg the Russian BESM-4.

BEGIN
  print(("Здравствуй, мир!",newline))
END

Note: The 1964 Russian standard GOST 10859 allowed the encoding of 4-bit, 5-bit, 6-bit and 7-bit characters in ALGOL.[11]

[edit] See also

ALGOL 58
ALGOL 60
ALGOL N
ALGOL 68
Algol-W
Atlas Autocode
CORAL66
Edinburgh IMP
Jensen's Device
ISWIM
JOVIAL
NELIAC
Simula
S-algol


[edit] References


^ The name of the family is sometimes given in mixed case (Algol 60), and sometimes in all uppercase (ALGOL 68). For simplicity this article uses ALGOL.
^ cf. Pseudocode
^ "Revised Report on the Algorithmic Language Algol 60". 1963. http://www.masswerk.at/algol60/report.htm. Retrieved on June 8 2007. 
^ "Revised Report on the Algorithmic Language ALGOL 68". 1973. http://burks.brighton.ac.uk/burks/language/other/a68rr/rrtoc.htm. Retrieved on June 8 2007. 
^ "Compiler Construction Theory and Practice, Ch.9". Science Research Associates, Inc. 1979. 
^ Knuth, Donald E. (1964) Backus Normal Form vs Backus Naur Form. Communications of the ACM 7(12):735-736
^ "Hints on Programming Language Design", C.A.R. Hoare, December 1973. Page 27. (This statement is sometimes erroneously attributed to Edsger Dijkstra, also involved in implementing the first ALGOL 60 compiler.)
^ The Encyclopedia of Computer Languages
^ Aho, Alfred V.; Ravi Sethi, Jeffrey D. Ullman (1986). Compilers: Principles, Techniques, and Tools (1st edition ed.). Addison-Wesley. ISBN 0-201-10194-7. , Section 7.5, and references therein
^ "803 ALGOL", the manual for Elliott 803 ALGOL
^ "GOST 10859 standard". http://homepages.cwi.nl/~dik/english/codes/stand.html#gost10859. Retrieved on June 5 2007. 



[edit] Further reading

B. Randell and L.J. Russell, ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer. Academic Press, 1964. The design of the Whetstone Compiler. One of the early published descriptions of implementing a compiler. See the related papers: Whetstone Algol Revisited, and The Whetstone KDF9 Algol Translator by B. Randell
E. W, Dijkstra, Algol 60 translation: an algol 60 translator for the x1 and making a translator for algol 60, report MR 35/61. Mathematisch Centrum, Amsterdam, 1961. [1]


[edit] External links

Revised Report on the Algorithmic Language Algol 60 by Peter Naur, et al. ALGOL definition
A BNF syntax summary of ALGOL 60
"The Emperor's Old Clothes" - Hoare's 1980 ACM Turing Award speech, which discusses ALGOL history and his involvement
MARST, a free Algol-to-C translator
AN IMPLEMENTATION OF ALGOL 60 FOR THE FP6000 Discussion of some implementation issues.
"The European Side of the Last Phase of the Development of ALGOL 60" by Peter Naur
Edinburgh University wrote compilers for Algol60 (later updated for Algol60M) based on their Atlas Autocode compilers initially bootstrapped from the Atlas to the KDF-9. The Edinburgh compilers generated code for the ICL1900, the ICL4/75 (an IBM360 clone), and the ICL2900. Here is the BNF for Algol60 and the ICL2900 compiler source, library documentation, and a considerable test suite including Brian Wichmann's tests. Also there is a rather superficial Algol60 to Atlas Autocode source-level translator.
Eric Raymond's Retrocomputing Museum, among others a link to the NASE Algol-60 interpreter written in C.




Retrieved from "http://en.wikipedia.org/wiki/ALGOL"
Categories: ALGOL 60 dialects | Articles with example ALGOL 60 code | Procedural programming languages | Structured programming languages | Systems programming languages 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Azərbaycan
বাংলা
Bosanski
Български
Català
Česky
Dansk
Deutsch
Español
فارسی
Français
Galego
한국어
Italiano
עברית
Magyar
Bahasa Melayu
Nederlands
日本語
‪Norsk (nynorsk)‬
Polski
Português
Русский
Slovenčina
Srpskohrvatski / Српскохрватски
Suomi
Svenska
Türkçe
Українська
中文









 This page was last modified on 3 April 2009, at 19:13.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
