













Verlet integration - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Verlet_integration";
		var wgTitle = "Verlet integration";
		var wgAction = "view";
		var wgArticleId = "825735";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280725538;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Verlet integration

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Verlet integration (IPA: [veʁ'le]) is a numerical method used to integrate Newton's equations of motion. It is frequently used to calculate trajectories of particles in molecular dynamics simulations and video games. The verlet integrator offers greater stability than the much simpler Euler method, as well as other properties that are important in physical systems such as time-reversibility and area preserving properties. At first it may seem natural to simply calculate trajectories using Euler integration. However, this kind of integration suffers from many problems, as discussed at Euler integration. Stability of the technique depends fairly heavily upon either a uniform update rate, or the ability to accurately identify positions at a small time delta into the past. The method was used by Carl Størmer to compute the trajectories of particles moving in a magnetic field (hence it is also called Störmer's method) and was popularized in molecular dynamics by French physicist Loup Verlet in 1967.




Contents


1 Basic Verlet
2 Velocity Verlet
3 Error terms
4 Constraints
5 Collision reactions
6 Applications
7 See also
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Basic Verlet
The Verlet algorithm [1] reduces the level of errors introduced into the integration by calculating the position at the next time step from the positions at the previous and current time steps, without using the velocity. It is derived by writing two Taylor expansions of the position vector  in different time directions.




Where  is the position,  the velocity,  the acceleration and  the jerk (third derivative of the position with respect to the time) t. Adding these two expansions gives



This offers the advantage that the first and third-order term from the Taylor expansion cancels out, thus making the Verlet integrator an order more accurate than integration by simple Taylor expansion alone. Note that if using this equation at t = 0, one needs the position at time − Δt, . At first sight this could give problems, because the initial conditions are known only at the initial time. This can be solved by doing the first time step using the equation



The error on the first time step calculation then is of Δt3 order. This is not considered a problem because on a simulation of over a large amount of timesteps, the error on the first timestep is only a negligible small amount of the total error. As also can be seen in the basic verlet formula, the velocities are not explicitly given in the Basic Verlet equation, but often they are necessary for the calculation of certain physical quantities. This can create technical challenges in molecular dynamics simulations, because kinetic energy and instantaneous temperatures at time t cannot be calculated for a system until the positions are known at time t + Δt. This deficiency can either be dealt with using the Velocity Verlet algorithm, or estimating the velocity using the position terms and the mean value theorem:



Note that this velocity term is for the velocity at time t, not t + Δt, meaning that the velocity term is a step behind the position term. You can shorten the interval to approximate the velocity at time t + Δt at the cost of accuracy:




[edit] Velocity Verlet
A related, and more commonly used, algorithm is the Velocity Verlet algorithm [2]. This uses a similar approach but explicitly incorporates velocity, solving the first-timestep problem in the Basic Verlet algorithm:




It can be shown that the error on the Velocity Verlet is of the same order as the Basic Verlet. Note that the Velocity algorithm is not necessarily more memory consuming, because it's not necessary to keep track of the velocity at every timestep during the simulation. The standard implementation scheme of this algorithm is:

Calculate: 
Calculate: 
Derive  from the interaction potential.
Calculate: 

The derivation of the acceleration comes from the relation



Note, however, that this algorithm assumes that acceleration at time  only depends on position , and does not depend on velocity 

[edit] Error terms
The local error in position of the Verlet integrator is O(Δt4) as described above, and the local error in velocity is O(Δt2).
The global error in position, in contrast, is O(Δt2) and the global error in velocity is O(Δt2). These can be derived by noting the following:



and



Therefore:



Similarly:





Which can be generalized to (it can be shown by induction, but it is given here without proof):



If we consider the global error in position between x(t) and x(t + T), where T = nΔt, it is clear that:



And therefore, the global (cumulative) error over a constant interval of time is given by:



Because the velocity is determined in a non-cumulative way from the positions in the Verlet integrator, the global error in velocity is also O(Δt2).
In molecular dynamics simulations, the global error is typically far more important than the local error, and the Verlet integrator is therefore known as a second-order integrator.

[edit] Constraints
Main article: Constraint algorithm
The most notable thing that is now easier due to using Verlet integration rather than Eulerian is that constraints between particles are very easy to do. A constraint is a connection between multiple points that limits them in some way, perhaps setting them at a specific distance or keeping them apart, or making sure they are closer than a specific distance. Often physics systems use springs between the points in order to keep them in the locations they are supposed to be. However, using springs of infinite stiffness between two points usually gives the best results coupled with the verlet algorithm. Here's how:















The  variables are the positions of the points i at time t, the  are the unconstrained positions (i.e. the point positions before applying the constraints) of the points i at time t, the d variables are temporary (they are added for optimization as the results of their expressions are needed multiple times), and r is the distance that is supposed to be between the two points. Currently this is in one dimension; however, it is easily expanded to two or three. Simply find the delta (first equation) of each dimension, and then add the deltas squared to the inside of the square root of the second equation (Pythagorean theorem). Then, duplicate the last two equations for the number of dimensions there are. This is where verlet makes constraints simple - instead of say, applying a velocity to the points that would eventually satisfy the constraint, you can simply position the point where it should be and the verlet integrator takes care of the rest.
Problems, however, arise when multiple constraints position a vertex. One way to solve this is to loop through all the vertices in a simulation in a criss cross manner, so that at every vertex the constraint relaxation of the last vertex is already used speed up the spread of the information. Either use fine time steps for the simulation, use a fixed number of constraint solving steps per time step, or solve constrains until they are met by a specific deviation.
When approximating the constraints locally to first order this is the same as the Gauss–Seidel method. For small matrices it is known that LU decomposition is faster. Large systems can be divided into clusters (for example: each ragdoll=cluster). Inside clusters the LU method is used, between clusters the Gauss–Seidel method is used. The matrix code can be reused: The dependency of the forces on the positions can be approximated locally to first order, and the verlet integration can be made more implicit.
For big matrices sophisticated solvers (look especially for "The sizes of these small dense matrices can be tuned to match the sweet spot" in [3]) for sparse matrices exist, any self made Verlet integration has to compete with these. The usage of (clusters of) matrices is not generally more precise or stable, but addresses the specific problem, that a force on one vertex of a sheet of cloth should reach any other vertex in a low number of time steps even if a fine grid is used for the cloth [4] (link needs refinement) and not form a sound wave.
Another way to solve Holonomic constraints is to use constraint algorithms.

[edit] Collision reactions
One way of reacting to collisions is to use a penalty-based system which basically applies a set force to a point upon contact. The problem with this is that it is very difficult to choose the force imparted. Use too strong a force and objects will become unstable, too weak and the objects will penetrate each other. Another way is to use projection collision reactions which takes the offending point and attempts to move it the shortest distance possible to move it out of the other object.
The Verlet integration would automatically handle the velocity imparted via the collision in the latter case, however note that this is not guaranteed to do so in a way that is consistent with collision physics (that is, changes in momentum are not guaranteed to be realistic). Instead of implicitly changing the velocity term, you would need to explicitly control the final velocities of the objects colliding (by changing the recorded position from the previous time step).
The two simplest methods for deciding on a new velocity are perfectly elastic collisions and inelastic collisions. A slightly more complicated strategy that offers more control would involve using the coefficient of restitution.

[edit] Applications
The Verlet equations can also be modified to create a very simple damping effect (for instance, to emulate air friction in computer games):



Where f is a number representing the fraction of the velocity per update that is lost to friction (0-1).

[edit] See also

Courant–Friedrichs–Lewy condition
Symplectic integrator


[edit] External links

Advanced Character Physics by Thomas Jakobsen
Clothlike demo using the Verlet algorithm
The Verlet algorithm
Theory of Molecular Dynamics Simulations - bottom of page








v • d • e

Numerical integration





First order methods

Euler method · Backward Euler · Semi–implicit Euler






Second order methods

Verlet integration · Velocity Verlet · Crank–Nicolson method · Beeman's algorithm · Midpoint method · Heun's method · Newmark-beta method · Leapfrog integration






Higher order methods

Runge–Kutta methods · List of Runge-Kutta methods · Linear multistep method









Retrieved from "http://en.wikipedia.org/wiki/Verlet_integration"
Categories: Numerical differential equations 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Polski









 This page was last modified on 30 March 2009, at 20:53 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
