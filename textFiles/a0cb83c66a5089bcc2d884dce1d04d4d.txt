













Null (SQL) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Null_(SQL)";
		var wgTitle = "Null (SQL)";
		var wgAction = "view";
		var wgArticleId = "2002540";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 270565033;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-sql {line-height: normal;}
.source-sql li, .source-sql pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for sql
 * CSS class: source-sql, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-sql .de1, .source-sql .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-sql  {}
.source-sql .head {}
.source-sql .foot {}
.source-sql .imp {font-weight: bold; color: red;}
.source-sql .ln-xtra {color: #cc0; background-color: #ffc;}
.source-sql li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-sql li.li2 {font-weight: bold;}
.source-sql .kw1 {color: #993333; font-weight: bold;}
.source-sql .co1 {color: #808080; font-style: italic;}
.source-sql .co2 {color: #808080; font-style: italic;}
.source-sql .coMULTI {color: #808080; font-style: italic;}
.source-sql .es0 {color: #000099; font-weight: bold;}
.source-sql .br0 {color: #66cc66;}
.source-sql .st0 {color: #ff0000;}
.source-sql .nu0 {color: #cc66cc;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Null (SQL)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




The Greek lowercase omega (ω) character is used to represent Null in database theory.


Null is a special marker used in Structured Query Language (SQL) to indicate that a data value does not exist in the database. Introduced by the creator of the relational database model, E. F. Codd, SQL Null serves to fulfill the requirement that all true relational database management systems (RDBMS) support a representation of "missing information and inapplicable information". Codd also introduced the use of the lowercase Greek omega (ω) symbol to represent Null in database theory. NULL is also an SQL reserved keyword used to identify the Null special marker.
Null has been the focus of controversy and a source of debate because of its associated Three-Valued Logic (3VL), special requirements for its use in SQL joins, and the special handling required by aggregate functions and SQL grouping operators. Although special functions and predicates are provided to properly handle Nulls, opponents feel that resolving these issues introduces unnecessary complexity and inconsistency into the relational model of databases.




Contents


1 History
2 Three-valued logic (3VL)

2.1 Data typing
2.2 Data Manipulation Language
2.3 CASE expressions
2.4 Check constraints
2.5 Procedural extensions


3 Joins
4 Mathematical and string concatenation
5 Aggregate functions
6 Grouping and sorting
7 Effect of NULL on index operation
8 Null-handling functions

8.1 COALESCE
8.2 NULLIF


9 Controversy

9.1 Common mistakes
9.2 Criticisms
9.3 Closed world assumption
9.4 Law of the Excluded Middle
9.5 Boolean datatype inconsistency


10 See also
11 References
12 Further reading
13 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
Null was introduced by E. F. Codd as a method of representing missing data in the relational model. Codd later reinforced his requirement that all RDBMS' support Null to indicate missing data in a two-part series published in ComputerWorld magazine.[1][2] Codd also introduced a ternary (three-valued) logic, consisting of the truth values True, False, and Unknown, which is closely tied to the concept of Null. The Unknown truth value is generated whenever Null is compared with any data value, or with another Null.
Codd indicated in his 1990 book The Relational Model for Database Management, Version 2 that the single Null mandated by the SQL standard was inadequate, and should be replaced by two separate Null-type markers to indicate the reason why data is missing. These two Null-type markers are commonly referred to as 'A-Values' and 'I-Values', representing 'Missing But Applicable' and 'Missing But Inapplicable', respectively.[3] Codd's recommendation would have required SQL's logic system be expanded to accommodate a four-valued logic system. Because of this additional complexity, the idea of multiple Null-type values has not gained widespread acceptance.

[edit] Three-valued logic (3VL)
Since Null is not a member of any data domain, it is not considered a "value", but rather a marker (or placeholder) indicating the absence of value. Because of this, comparisons with Null can never result in either True or False, but always in a third logical result, Unknown.[4] The logical result of the expression below, which compares the value 10 to Null, is Unknown:


10 = NULL       -- Results in Unknown

However, certain operations on Null can return values if the value of Null is not relevant to the outcome of the operation. Consider the following example in which the OR statement is evaluated in short-circuited form:


TRUE OR NULL   -- Results in True

In this case, the fact that the value on the right of OR is unknowable is irrelevant, because the outcome of the OR operation would be True regardless of the value on the right.
SQL implements three logical results, so SQL implementations must provide for a specialized three-valued logic (3VL). The rules governing SQL three-valued logic are shown in the tables below (p and q represent logical states)"[5]





p AND q
p


True
False
Unknown


q
True
True
False
Unknown


False
False
False
False


Unknown
Unknown
False
Unknown






p OR q
p


True
False
Unknown


q
True
True
True
True


False
True
False
Unknown


Unknown
True
Unknown
Unknown






p
NOT p


True
False


False
True


Unknown
Unknown






p = q
p


True
False
Unknown


q
True
True
False
Unknown


False
False
True
Unknown


Unknown
Unknown
Unknown
Unknown





Basic SQL comparison operators always return Unknown when comparing anything with Null, so the SQL standard provides for two special Null-specific comparison predicates. The IS NULL and IS NOT NULL predicates test whether data is, or is not, Null.[6]

[edit] Data typing
Null is untyped in SQL, meaning that it is not designated as an integer, character, or any other specific data type.[4] Because of this, it is sometimes mandatory (or desirable) to explicitly convert Nulls to a specific data type. For example, if overloaded functions are supported by the RDBMS, SQL might not be able to automatically resolve to the correct function without knowing the data types of all parameters, including those for which Null is passed.

[edit] Data Manipulation Language
SQL three-valued logic is encountered in Data Manipulation Language (DML) in comparison predicates of DML statements and queries. The WHERE clause causes the DML statement to act on only those rows for which the predicate evaluates to True. Rows for which the predicate evaluates to either False or Unknown are not acted on by INSERT, UPDATE, or DELETE DML statements, and are discarded by SELECT queries. Interpreting Unknown and False as the same logical result is a common error encountered while dealing with Nulls.[5] The following simple example demonstrates this fallacy:


SELECT * 
FROM t 
WHERE i = NULL;

The example query above logically always returns zero rows because the comparison of the i column with Null always returns Unknown, even for those rows where i is Null. The Unknown result causes the SELECT statement to summarily discard each and every row. (However, in practice, some SQL tools will retrieve rows using a comparison with Null.)

[edit] CASE expressions
SQL CASE expressions operate under the same rules as the DML WHERE clause rules for Null. Because it can be evaluated as a series of equality comparison conditions, a simple CASE expression cannot check for the existence of Null directly. A check for Null in a simple CASE expression always results in Unknown, as in the following:


SELECT CASE i WHEN NULL THEN 'Is Null'  -- This will never be returned
              WHEN    0 THEN 'Is Zero'  -- This will be returned when i = 0
              WHEN    1 THEN 'Is One'   -- This will be returned when i = 1
              END
FROM t;

Because the expression i = NULL evaluates to Unknown no matter what value column i contains (even if it contains Null), the string 'Is Null' will never be returned.
A searched CASE expression also returns the first value for which the result of the comparison predicate evaluates to True, including comparisons using the IS NULL and IS NOT NULL comparison predicates. The following example shows how to use a searched CASE expression to properly check for Null:


SELECT CASE WHEN i IS NULL THEN 'Null Result'  -- This will be returned when i is NULL
            WHEN     i = 0 THEN 'Zero'         -- This will be returned when i = 0
            WHEN     i = 1 THEN 'One'          -- This will be returned when i = 1
            END
FROM t;

In the searched CASE expression, the string 'Null Result' is returned for all rows in which i is Null.

[edit] Check constraints
The primary place in which SQL three-valued logic intersects with SQL Data Definition Language (DDL) is in the form of check constraints. A check constraint placed on a column operates under a slightly different set of rules than those for the DML WHERE clause. While a DML WHERE clause must evaluate to True for a row, a check constraint must not evaluate to False. This means that a check constraint will succeed if the result of the check is either True or Unknown. The following example table with a check constraint will prohibit any integer values from being inserted into column i, but will allow Null to be inserted since the result of the check will always evaluate to Unknown for Nulls.[7]


CREATE TABLE t (
     i INTEGER,
     CONSTRAINT ck_i CHECK ( i < 0 AND i = 0 AND i > 0 ) );

In order to constrain a column to reject Nulls, the NOT NULL constraint can be applied, as shown in the example below. The NOT NULL constraint is semantically equivalent to a check constraint with an IS NOT NULL predicate.


CREATE TABLE t ( i INTEGER NOT NULL );


[edit] Procedural extensions
SQL/PSM (SQL Persistent Stored Modules) defines procedural extensions for SQL, such as the IF statement. However, the major SQL vendors have historically included their own proprietary procedural extensions. Procedural extensions for looping and comparisons operate under Null comparison rules similar to those for DML statements and queries. The following code fragment, in ISO SQL standard format, demonstrates the use of Null 3VL in an IF statement.


IF i = NULL THEN
      SELECT 'Result is True'
ELSEIF NOT(i = NULL) THEN
      SELECT 'Result is False'
ELSE
      SELECT 'Result is Unknown';

The IF statement performs actions only for those comparisons that evaluate to True. For statements that evaluate to False or Unknown, the IF statement passes control to the ELSEIF clause, and finally to the ELSE clause. The result of the code above will always be the message 'Result is Unknown' since the comparisons with Null always evaluate to Unknown.

[edit] Joins




Example SQL outer join query with Null placeholders in the result set. The Null markers are represented by the word NULL in place of data in the results. Results are from Microsoft SQL Server, as shown in SQL Server Management Studio.


SQL outer joins, including left outer joins, right outer joins, and full outer joins, automatically produce Nulls as placeholders for missing values in related tables. For left outer joins, for instance, Nulls are produced in place of rows missing from the table appearing on the right-hand side of the LEFT OUTER JOIN operator. The following simple example uses two tables to demonstrate Null placeholder production in a left outer join.
The first table (Employee) contains employee ID numbers and names, while the second table (PhoneNumber) contains related employee ID numbers and phone numbers, as shown below.




Employee

ID
LastName
FirstName


1
Johnson
Joe


2
Lewis
Larry


3
Thompson
Thomas


4
Patterson
Patricia





PhoneNumber

ID
Number


1
555-2323


3
555-9876





The following sample SQL query performs a left outer join on these two tables.


SELECT e.ID, e.LastName, e.FirstName, pn.Number
FROM Employee e
LEFT OUTER JOIN PhoneNumber pn
ON e.ID = pn.ID;

The result set generated by this query demonstrates how SQL uses Null as a placeholder for values missing from the right-hand (PhoneNumber) table, as shown below.

Query Result

ID
LastName
FirstName
Number


1
Johnson
Joe
555-2323


2
Lewis
Larry
NULL


3
Thompson
Thomas
555-9876


4
Patterson
Patricia
NULL


Inner joins and cross joins, also available in standard SQL, do not generate Null placeholders for missing values in related tables.
Care must be taken when using nullable columns in SQL join criteria. Because a Null is not equal to any other Null, Nulls in a column of one table will not join to Nulls in the related column of another table using the standard equality comparison operators. The SQL COALESCE function or CASE expressions can be used to "simulate" Null equality in join criteria, and the IS NULL and IS NOT NULL predicates can be used in the join criteria as well.
The following predicate tests for equality of the values A and B and treats Nulls as being equal. The IFNULL operator is required since A = B returns a Null value if at least one of A or B is Null and NULL OR FALSE is Null itself.


IFNULL( A = B, FALSE ) OR ( A IS NULL AND B IS NULL )


[edit] Mathematical and string concatenation
Because Null is not a data value, but a marker for an unknown value, using mathematical operators on Null results in an unknown value, which is represented by Null.[8] In the following example, multiplying 10 by Null results in Null:


10 * NULL          -- Result is NULL

This can lead to unanticipated results. For instance, when an attempt is made to divide Null by zero, platforms may return Null instead of throwing an expected "data exception - division by zero".[8] Though this behavior is not defined by the ISO SQL standard many DBMS vendors treat this operation similarly. For instance, the Oracle, PostgreSQL, MySQL Server, and Microsoft SQL Server platforms all return a Null result for the following:


NULL / 0

String concatenation operations, which are common in SQL, also result in Null when one of the operands is Null.[9] The following example demonstrates the Null result returned by using Null with the SQL || string concatenation operator.


'Fish ' || NULL || 'Chips'   -- Result is NULL

This is not true for all database implementations. In an Oracle RDBMS for example NULL and the empty string are considered the same thing and therefore 'Fish ' || NULL || 'Chips' results in 'Fish Chips'.

[edit] Aggregate functions
SQL defines aggregate functions to simplify server-side aggregate calculations on data. Almost all aggregate functions perform a Null-elimination step, so that Null values are not included in the final result of the calculation.[10] This implicit Null elimination, however, can have an impact on aggregate function results.
The following example table results in different results being returned for each column when the SQL AVG (average) aggregate function is applied:

Table

i
j


150
150


200
200


350
350


NULL
0


The SQL AVG aggregate function returns 233 when applied to column i, but returns 175 when applied to column j. The aggregate function's Null-elimination step accounts for the difference in these results. The only aggregate function that does not implicitly eliminate Null is the COUNT(*) function.

[edit] Grouping and sorting
Because SQL:2003 defines all Null markers as being unequal to one another, a special definition was required in order to group Nulls together when performing certain operations. SQL defines "any two values that are equal to one another, or any two Nulls", as "not distinct".[11] This definition of not distinct allows SQL to group and sort Nulls when the GROUP BY clause (and other keywords that perform grouping) are used.
Other SQL operations, clauses, and keywords use "not distinct" in their treatment of Nulls. These include the following:

PARTITION BY clause of ranking and windowing functions like ROW_NUMBER
UNION, INTERSECT, and EXCEPT operator, which treat NULLs as the same for row comparison/elimination purposes
DISTINCT keyword used in SELECT queries
Unique constraints on nullable columns, which allow only a single Null value to be stored in the column

The SQL standard does not explicitly define a default sort order for Nulls. Instead, on conforming systems, Nulls can be sorted before or after all data values by using the NULLS FIRST or NULLS LAST clauses of the ORDER BY list, respectively. Not all DBMS vendors implement this functionality, however. Vendors who do not implement this functionality may specify different treatments for Null sorting in the DBMS.[7]

[edit] Effect of NULL on index operation
Some SQL products do not index keys containing NULL values. For instance, the PostgreSQL documentation for a B-Tree index states that

B-trees can handle equality and range queries on data that can be sorted into some ordering. In particular, the PostgreSQL query planner will consider using a B-tree index whenever an indexed column is involved in a comparison using one of these operators: < <= = >= > Constructs equivalent to combinations of these operators, such as BETWEEN and IN, can also be implemented with a B-tree index search. (But note that IS NULL is not equivalent to = and is not indexable.)[12]

In cases where the index enforces uniqueness, NULL values are excluded from the index and uniqueness is not enforced between NULL values. Again, quoting from the PostgreSQL documentation:

When an index is declared unique, multiple table rows with equal indexed values will not be allowed. Null values are not considered equal. A multicolumn unique index will only reject cases where all of the indexed columns are equal in two rows.[13]

This is consistent with the SQL:2003-defined behavior of scalar Null comparisons.
Another method of indexing Nulls involves handling them as not distinct in accordance with the SQL:2003-defined behavior. For example, Microsoft SQL Server documentation states the following:

For indexing purposes, NULL values compare as equal. Therefore, a unique index, or UNIQUE constraint, cannot be created if the key values are NULL in more than one row. Select columns that are defined as NOT NULL when columns for a unique index or unique constraint are chosen.[14]

Both of these indexing strategies are consistent with the SQL:2003-defined behavior of Nulls. Because indexing methodologies are not explicitly defined by the SQL:2003 standard, indexing strategies for Nulls are left entirely to the vendors to design and implement.

[edit] Null-handling functions
SQL defines two functions to explicitly handle Nulls: COALESCE and NULLIF. Both functions are abbreviations for searched CASE expressions.[15]

[edit] COALESCE
The COALESCE function accepts a list of parameters, returning the first non-Null value from the list:


COALESCE(value1, value2, value3, ...)

COALESCE is defined as shorthand for the following SQL CASE expression:


CASE WHEN value1 IS NOT NULL THEN value1
     WHEN value2 IS NOT NULL THEN value2
     WHEN value3 IS NOT NULL THEN value3
     ...
     END

Some SQL DBMSs implement vendor-specific functions similar to COALESCE. Some systems implement an ISNULL function, or other similar functions that are functionally similar to COALESCE.

[edit] NULLIF
The NULLIF function accepts two parameters. If the first parameter is equal to the second parameter, NULLIF returns Null. Otherwise, the value of the first parameter is returned.


NULLIF(value1, value2)

Thus, NULLIF is an abbreviation for the following CASE expression:


CASE WHEN value1 = value2 THEN NULL ELSE value1 END


[edit] Controversy

[edit] Common mistakes
Misunderstanding of how Null works is the cause of a great number of errors in SQL code, both in ISO standard SQL statements and in the specific SQL dialects supported by real-world database management systems. These mistakes are usually the result of confusion between Null and either 0 (zero) or an empty string (a string value with a length of zero, represented in SQL as ''). Null is defined by the ISO SQL standard as different from both an empty string or the numerical value 0, however. While Null indicates the absence of any value, the empty string and numerical zero both represent actual values.
For example, a WHERE clause or conditional statement might compare a column's value with a constant. It is often incorrectly assumed that a missing value would be "less than" or "not equal to" a constant if that field contains Null, but, in fact, such expressions return Unknown. An example is below:


SELECT *
FROM sometable
WHERE num <> 1;  -- Rows where num is NULL will not be returned, 
                 -- contrary to many users' expectations.

Similarly, Null values are often confused with empty strings. Consider the LENGTH function, which returns the number of characters in a string. When a Null is passed into this function, the function returns Null. This can lead to unexpected results, if users are not well versed in 3-value logic. An example is below:


SELECT * 
FROM sometable
WHERE LENGTH(string) < 20; -- Rows where string is NULL will not be returned.

This is complicated by the fact that in some database interface programs, NULL is reported as an empty string, and empty strings may incorrectly stored as NULL.

[edit] Criticisms
The ISO SQL implementation of Null is the subject of criticism, debate and calls for change. In The Relational Model for Database Management: Version 2, Codd suggested that the SQL implementation of Null was flawed and should be replaced by two distinct Null-type markers. The markers he proposed were to stand for "Missing but Applicable" and "Missing but Inapplicable", known as A-values and I-values, respectively. Codd's recommendation, if accepted, would have required the implementation of a four-valued logic in SQL.[3] Others have suggested adding additional Null-type markers to Codd's recommendation to indicate even more reasons that a data value might be "Missing", increasing the complexity of SQL's logic system. At various times, proposals have also been put forth to implement multiple user-defined Null markers in SQL. Because of the complexity of the Null-handling and logic systems required to support multiple Null markers, none of these proposals have gained widespread acceptance.
Chris Date and Hugh Darwen, authors of The Third Manifesto, have suggested that the SQL Null implementation is inherently flawed and should be eliminated altogether[16], pointing to inconsistencies and flaws in the implementation of SQL Null-handling (particularly in aggregate functions) as proof that the entire concept of Null is flawed and should be removed from the Relational Model.[17] Others, like author Fabian Pascal, have stated a belief that "how the function calculation should treat missing values is not governed by the relational model."

[edit] Closed world assumption
Another point of conflict concerning Nulls is that they violate the closed world assumption model of relational databases by introducing an open world assumption into it.[18] The Closed World Assumption, as it pertains to databases, states that "Everything stated by the database, either explicitly or implicitly, is true; everything else is false."[19] This view assumes that the knowledge of the world stored within a database is complete. Nulls, however, operate under the Open World Assumption, in which some items stored in the database are considered unknown, making the databases's stored knowledge of the world incomplete.

[edit] Law of the Excluded Middle
SQL allows three logical choices, true, false, and unknown, which means that SQL necessarily ignores the law of the excluded middle. Put simply the Law of the Excluded Middle essentially states that when given any Boolean result, the opposite of the result can be obtained by applying the logical "not" operator. This does not apply to SQL nulls, however. Under the precepts of the law of the excluded middle, a Boolean expression like the following can be simplified:


SELECT * FROM stuff WHERE ( x = 10 ) OR NOT ( x = 10 );

The law of the excluded middle allows for simplification of the WHERE clause predicate, which would result in a statement like the following:


SELECT * FROM stuff;
-- This is (because of 3VL) equivalent to:
SELECT * FROM stuff WHERE ( x = 10 ) OR NOT ( x = 10 ) OR x IS NULL;

This will not work in SQL, since the x column could contain nulls which would result in some rows not being returned. To correctly simplify the first statement in SQL requires that we return all rows in which x is not null.


SELECT * FROM stuff WHERE x IS NOT NULL;

While ignoring the law of the excluded middle does introduce additional complexity to SQL logic, attempts to apply this rule to SQL's 3VL results in a false dichotomy.

[edit] Boolean datatype inconsistency
The ISO SQL:1999 standard introduced the Boolean datatype to SQL.[20] The Boolean datatype, as defined by the standard, can hold the truth values TRUE, FALSE, and UNKNOWN. Null is defined in this one instance as equivalent to the truth value UNKNOWN.
This "null equals UNKNOWN truth value" proposition introduces an inconsistency into SQL 3VL. One major problem is that it contradicts a basic property of nulls, the property of propagation. Nulls, by definition, propagate through all SQL expressions. The Boolean truth values do not have this property. Consider the following scenarios in SQL:1999, in which two Boolean truth values are combined into a compound predicate. According to the rules of SQL 3VL, and as shown in the 3VL truth table shown earlier in this article, the following statements hold:

( TRUE OR UNKNOWN ) → TRUE
( FALSE AND UNKNOWN ) → FALSE

However, because nulls propagate, treating null as UNKNOWN results in the following logical inconsistencies in SQL 3VL:

( TRUE OR NULL ) → NULL ( = UNKNOWN )
( FALSE AND NULL ) → NULL ( = UNKNOWN )

The SQL:1999 standard does not define how to deal with this inconsistency, and results could vary between implementations. Because of these inconsistencies and lack of support from vendors the SQL Boolean datatype did not gain widespread acceptance. Most SQL DBMS platforms now offer their own platform-specific recommendations for storing Boolean-type data.
Note that in the PostgreSQL implementation of SQL, the null value is used to represent all UNKNOWN results and the following evaluations occur:

( TRUE OR NULL ) → TRUE
( FALSE AND NULL ) → FALSE
( FALSE OR NULL ) IS NULL → TRUE
( TRUE AND NULL ) IS NULL → TRUE

MySQL behaves similarly to PostgreSQL in this regard (with the minor exception that MySQL regards TRUE and FALSE as no different from the ordinary integers 1 and 0).

[edit] See also

SQL
SQL:2003
Tutorial D


Ternary logic
Data Manipulation Language
Codd's 12 rules
Check Constraint
Relational Database Management System
Join (SQL)
The Third Manifesto


[edit] References


^ Codd, E.F. (1985). "Is Your Database Really Relational?". ComputerWorld. 
^ Codd, E.F. (1985). "Does Your DBMS Run By The Rules?". ComputerWorld. 
^ a b Codd, E.F. (1990). The Relational Model for Database Management (Version 2 ed.). Addison Wesley Publishing Company. ISBN 0-201-14192-2. 
^ a b ISO/IEC (2003). ISO/IEC 9075-1:2003, "SQL/Framework". ISO/IEC. Section 4.4.2: The null value. http://www.iso.org. 
^ a b Coles, Michael (June 27, 2005). "Four Rules for Nulls". SQL Server Central (Red Gate Software). http://www.sqlservercentral.com/columnists/mcoles/fourrulesfornulls.asp. 
^ ISO/IEC (2003). ISO/IEC 9075-2:2003, "SQL/Foundation". ISO/IEC. Section 8.7: null predicate. 
^ a b Coles, Michael (February 26, 2007). "Null Versus Null?". SQL Server Central (Red Gate Software). http://www.sqlservercentral.com/columnists/mcoles/2829.asp. 
^ a b ISO/IEC (2003). ISO/IEC 9075-2:2003, "SQL/Foundation". ISO/IEC. Section 6.2.6: numeric value expressions. .
^ ISO/IEC (2003). ISO/IEC 9075-2:2003, "SQL/Foundation". ISO/IEC. Section 6.2.8: string value expression. .
^ ISO/IEC (2003). ISO/IEC 9075-2:2003, "SQL/Foundation". ISO/IEC. Section 4.15.4: Aggregate functions. .
^ ISO/IEC (2003). ISO/IEC 9075-2:2003, "SQL/Foundation". ISO/IEC. Section 3.1.6.8: Definitions: distinct. 
^ "PostgreSQL 8.0.14 Documentation: Index Types}". PostgreSQL. http://www.postgresql.org/docs/8.0/interactive/indexes-types.html. Retrieved on 6 November 2008. 
^ "PostgreSQL 8.0.14 Documentation: Unique Indexes". PostgreSQL. http://www.postgresql.org/docs/8.0/interactive/indexes-unique.html. Retrieved on November 6 2008. 
^ "Creating Unique Indexes". PostfreSQL. September 2007. http://msdn2.microsoft.com/en-us/library/ms175132.aspx. Retrieved on November 6 2008. 
^ ISO/IEC (2003). ISO/IEC 9075-2:2003, "SQL/Foundation". ISO/IEC. Section 6.11: case expression. .
^ Darwen, Hugh; Chris Date. "The Third Manifesto". http://www.thethirdmanifesto.com/. Retrieved on May 29 2007. 
^ Darwen, Hugh. "The Askew Wall" (PDF). http://www.dcs.warwick.ac.uk/~hugh/TTM/TTM-TheAskewWall-printable.pdf. Retrieved on Nay 29 2007. 
^ Date, Chris (May 2005). Database in Depth: Relational Theory for Practitioners. O'Reilly Media, Inc.. p. 73. ISBN 0-5961-0012-4. 
^ Date, Chris. "Abstract: The Closed World Assumption". Data Management Association, San Francisco Bay Area Chapter. Archived from the original on 2007-05-19. http://web.archive.org/web/20070519134146/http://www.sfdama.org/ChrisDate_20070110.htm. Retrieved on May 29 2007. 
^ "ISO/IEC 9075-1:1999 SQL Standard" (PDF). ISO. 1999. http://www.ncb.ernet.in/education/modules/dbms/SQL99/ansi-iso-9075-1-1999.pdf. Retrieved on November 6 2008. 



[edit] Further reading

Codd, E.F. (1970). "A Relational Model of Data for Large Shared Data Banks". Communications of the ACM 13 (6): 377–387. doi:10.1145/362384.362685. http://www.acm.org/classics/nov95/toc.html. 
National Academy of Sciences (1999). "Chapt. 6: The Rise of Relational Databases". Funding a Revolution: Government Support for Computing Research. Washington DC, USA: National Academy Press. http://www.nap.edu/readingroom/books/far/ch6.html. 
Date, C.J. (2000). The Database Relational Model: A Retrospective Review and Analysis: A Historical Account and Assessment of E. F. Codd's Contribution to the Field of Database Technology. Addison Wesley Longman. ISBN 0-201-61294-1. 


[edit] External links

Oracle NULLs
The Third Manifesto
Implications of NULLs in sequencing of data
Java bug report about jdbc not distinguishing null and empty string, which Sun closed as "not a bug"
TheIntegrationEngineer explains how NULL works and the logic behind it.








v • d • e

Database management systems





Database models · Database normalization · Database storage · Distributed DBMS · Referential integrity · Relational algebra · Relational calculus · Relational database · Relational DBMS · Relational model · Object-relational database · Transaction processing





Concepts

Database · ACID · CRUD · Null · Candidate key · Foreign key · Primary key · Superkey · Surrogate key






Objects

Trigger · View · Table · Cursor · Log · Transaction · Index · Stored procedure · Partition






SQL

Select · Insert · Update · Merge · Delete · Join · Union · Create · Drop · Begin work · Commit · Rollback · Truncate · Alter






Components

Concurrency control · Data dictionary · JDBC · ODBC · Query language · Query optimizer · Query plan






Database products: Object-oriented (comparison) · Relational (comparison) · Document-oriented








Retrieved from "http://en.wikipedia.org/wiki/Null_(SQL)"
Categories: Database management systems | SQL keywords | Articles with example SQL code 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Português
Русский
中文
Español









 This page was last modified on 14 February 2009, at 00:32 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
