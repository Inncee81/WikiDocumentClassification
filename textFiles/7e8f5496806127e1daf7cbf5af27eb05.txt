













Software engineering - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Software_engineering";
		var wgTitle = "Software engineering";
		var wgAction = "view";
		var wgArticleId = "27010";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281940907;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Software engineering

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




The new Airbus A-380 uses a substantial amount of software to create a "paperless" cockpit. Software engineering successfully maps and plans the millions of lines of code within the plane's software.


Software engineering is the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software, and the study of these approaches; that is, the application of engineering to software.[1]
The term software engineering first appeared in the 1968 NATO Software Engineering Conference and was meant to provoke thought regarding the current "software crisis" at the time.[2] Since then, it has continued as a profession and field of study dedicated to creating software that is of higher quality, cheaper, maintainable, and quicker to build. Since the field is still relatively young compared to its sister fields of engineering, there is still much work and debate around what software engineering actually is, and if it deserves the title engineering. It has grown organically out of the limitations of viewing software as just programming. Software development is a term sometimes preferred by practitioners in the industry who view software engineering as too heavy-handed and constrictive to the malleable process of creating software.
Yet, in spite of its youth as a profession, the field's future looks bright as Money Magazine and Salary.com rated software engineering as the best job in America in 2006. [3]




Contents


1 History
2 Profession

2.1 Employment
2.2 Certification
2.3 Impact of globalization


3 Education
4 Sub-disciplines
5 Related disciplines

5.1 Computer science
5.2 Project management
5.3 Systems engineering


6 See also
7 References
8 Further reading
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
When the modern digital computer first appeared in 1941, the instructions to make it operate were wired into the machine. Practitioners quickly realized that this design was not flexible and came up with the "stored program architecture" or von Neumann architecture. Thus the first division between "hardware" and "software" began with abstraction being used to deal with the complexity of computing.
Programming languages started to appear in the 1950s and this was also another major step in abstraction. Major languages such as Fortran, Algol, and Cobol were released in the late 1950s to deal with scientific, algorithmic, and business problems respectively. E. W. Dijsktra wrote his seminal paper, "Go To Statement Considered Harmful", [4] in 1968 and David Parnas introduced the key concept of modularity and information hiding in 1972[5] to help programmers deal with the ever increasing complexity of software systems. A software system for managing the hardware called an operating system was also introduced, most notably by Unix in 1969. In 1967, the Simula language introduced the object-oriented programming paradigm.
These advances in software were met with more advances in computer hardware. In the mid 1970s, the microcomputer was introduced, making it economical for hobbyists to obtain a computer and write software for it. This in turn lead to the now famous Personal Computer or PC and Microsoft Windows. The Software Development Life Cycle or SDLC was also starting to appear as a consensus for centralized construction of software in the mid 1980s. The late 1970s and early 1980s saw the introduction of several new Simula-inspired object-oriented programming languages, including C++, Smalltalk, and Objective C.
Open-source software started to appear in the early 90s in the form of Linux and other software introducing the "bazaar" or decentralized style of constructing software [6]. Then the Internet and World Wide Web hit in the mid 90s changing the engineering of software once again. Distributed Systems gained sway as a way to design systems and the Java programming language was introduced as another step in abstraction having its own virtual machine. Programmers collaborated and wrote the Agile Manifesto that favored more light weight processes to create cheaper and more timely software.
The current definition of software engineering is still being debated by practitioners today as they struggle to come up with ways to produce software that is "cheaper, bigger, quicker".





The examples and perspective in this article is mostly from the US may not represent a worldwide view of the subject. Please improve this article or discuss the issue on the talk page.



[edit] Profession
Main article: Software engineer
While some areas, such as Ontario, Canada [7], license software engineers; most places in the world have no laws regarding the profession of software engineers. Yet there are some guides from the IEEE Computer Society and the ACM, the two main professional organizations of software engineering. The IEEE's Guide to the Software Engineering Body of Knowledge - 2004 Version or SWEBOK defines the field and gives a coverage of the knowledge practicing software engineers should know. There is also an IEEE "Software Engineering Code of Ethics". [8] In addition, there is a Software and Systems Engineering Vocabulary (SEVOCAB) [9], published on-line by the IEEE Computer Society.
In the UK, the British Computer Society licenses software engineers and members of the society can also become Chartered Engineers (CEng). But there is no legal requirement to have these qualifications.

[edit] Employment
In 2004, the U. S. Bureau of Labor Statistics counted 760,840 software engineers holding jobs in the U.S.; in the same time period there were some 1.4 million practitioners employed in the U.S. in all other engineering disciplines combined.[10] Due to its relative newness as a field of study, formal education in software engineering is often taught as part of a computer science curriculum, and as a result most software engineers hold computer science degrees.[11]
Most software engineers work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work for themselves as freelancers. Some organizations have specialists to perform each of the tasks in the software development process. Other organizations require software engineers to do many or all of them. In large projects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Specializations include: in industry (analysts, architects, developers, testers, technical support, managers) and in academia (educators, researchers).
There is considerable debate over the future employment prospects for software engineers and other IT Professionals. For example, an online futures market called the "ITJOBS Future of IT Jobs in America"[12] attempts to answer whether there will be more IT jobs, including software engineers, in 2012 than there were in 2002.

[edit] Certification
Professional certification of software engineers is a contentious issue. Some see it as a tool to improve professional practice; "The only purpose of licensing software engineers is to protect the public" [13]
The ACM had a professional certification program in the early 1980s,[citation needed] which was discontinued due to lack of interest. The ACM examined the possibility of professional certification of software engineers in the late 1990s, but eventually decided that such certification was inappropriate for the professional industrial practice of software engineering.[14] As of 2006[update], the IEEE had certified over 575 software professionals.[15] In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP)[16]. The Software Engineering Institute offers certification on specific topic such as Security, Process improvement and Software architecture[17].
Most certification programs in the IT industry are oriented toward specific technologies, and are managed by the vendors of these technologies.[18] These certification programs are tailored to the institutions that would employ people who use these technologies.

[edit] Impact of globalization
Many students in the developed world have avoided degrees related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers.[19] Although government statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected.[20][21] Often one is expected to start out as a computer programmer before being promoted to software engineer. Thus, the career path to software engineering may be rough, especially during recessions.
Some career counselors suggest a student also focus on "people skills" and business skills rather than purely technical skills because such "soft skills" are allegedly more difficult to offshore.[22] It is the quasi-management aspects of software engineering that appear to be what has kept it from being impacted by globalization.[23]

[edit] Education
A knowledge of programming is the main pre-requisite to becoming a software engineer, but it is not sufficient. Many software engineers have degrees in Computer Science due to the lack of software engineering programs in higher education. However, this has started to change with the introduction of new software engineering degrees, especially in post-graduate education. A standard international curriculum for undergraduate software engineering degrees was defined by the CCSE.
In 1998, the US Naval Postgraduate School (NPS) established the first doctorate program in Software Engineering in the world.[citation needed] Steve McConnell opines that because most universities teach computer science rather than software engineering, there is a shortage of true software engineers.[24] In 2004 the IEEE Computer Society produced the SWEBOK, which has become an ISO standard describing the body of knowledge covered by a software engineer[citation needed].

[edit] Sub-disciplines




While Grace Hopper was working on the Harvard Mark II Computer at Harvard University, her associates discovered this moth stuck in a relay and thereby impeding operation, whereupon she remarked that they were "debugging" the system. Thus starting the popularity of the term software bug.


Software engineering can be divided into ten subdisciplines. They are:[1]

Software requirements: The elicitation, analysis, specification, and validation of requirements for software.
Software design: The design of software is usually done with Computer-Aided Software Engineering (CASE) tools and use standards for the format, such as the Unified Modeling Language (UML).
Software development: The construction of software through the use of programming languages.
Software testing
Software maintenance: Software systems often have problems and need enhancements for a long time after they are first completed. This subfield deals with those problems.
Software configuration management: Since software systems are very complex, their configuration (such as versioning and source control) have to be managed in a standardized and structured method.
Software engineering management: The management of software systems borrows heavily from project management, but there are nuances encountered in software not seen in other management disciplines.
Software development process: The process of building software is hotly debated among practitioners with the main paradigms being agile or waterfall.
Software engineering tools, see Computer Aided Software Engineering
Software quality


[edit] Related disciplines
Software engineering is related to the disciplines of computer science, project management, and systems engineering.[25][26]

[edit] Computer science
Software engineering is considered a subfield of computer science by many academics. Many of the foundations of software engineering come from computer science.

[edit] Project management
The building of a software system is usually considered a project and the management of it borrows many principles from the field of Project management.

[edit] Systems engineering
Systems engineers have been dealing with the complexity of large systems for many decades and their knowledge is applied to many software engineering problems.

[edit] See also






Association for Computing Machinery
IEEE Computer Society
Software Engineering Institute
Software development
Software Craftsmanship
List of basic software engineering topics
List of software engineering conferences
List of software engineering publications
List of software engineering topics
Bachelor of Software Engineering









Engineering portal







Software portal







Software Testing portal









[edit] References


^ a b Pierre Bourque and Robert Dupuis, ed (2004). Guide to the Software Engineering Body of Knowledge - 2004 Version. ISBN 0-7695-2330-7. http://www.swebok.org. 
^ Peter, Naur; Brian Randell (7–11 October 1968). "Software engineering: Report of a conference sponsored by the NATO Science Committee" (PDF)., Garmisch, Germany: Scientific Affairs Division, NATO. Retrieved on 2008-12-26. 
^ Kalwarski, Tara; Daphne Mosher, Janet Paskin and Donna Rosato (2006). "Best Jobs in America". MONEY Magazine. CNN. http://money.cnn.com/magazines/moneymag/bestjobs/2006/. Retrieved on 2006-04-20. 
^ Dijkstra, E. W. (March 1968). "Go To Statement Considered Harmful". Communications of the ACM 11 (3): 147-148. http://www.acm.org/classics/oct95/. Retrieved on 2008-12-26. 
^ Parnas, David (December 1972). "On the Criteria To Be Used in Decomposing Systems into Modules". Communications of the ACM 15 (12): 1053-1058. http://www.acm.org/classics/may96/. Retrieved on 2008-12-26. 
^ Raymond, Eric S. The Cathedral and the Bazaar. ed 3.0. 2000.
^ Williams, N.S.W. (19-21 Feb 2001). "Professional Engineers Ontario's approach to licensing software engineering practitioners". Software Engineering Education and Training, 2001 Proceedings. 14th Conference on: 77 - 78, Charlotte, NC: IEEE. 
^ Software Engineering Code of Ethics
^ [1]
^ Bureau of Labor Statistics, U.S. Department of Labor, USDL 05-2145: Occupational Employment and Wages, November 2004, Table 1.
^ "Software Engineering". http://computingcareers.acm.org/?page_id=12. Retrieved on 2008-02-01. 
^ Future of IT Jobs in America
^ Kruchten, Philippe, "Licensing Software Engineers?", IEEE SOFTWARE nov/dec 2008
^ ACM (July 17, 2000). "A Summary of the ACM Position on Software Engineering as a Licensed Engineering Profession". Association for Computing Machinery (ACM). http://www.cs.wm.edu/~coppit/csci690-spring2004/papers/selep_main.pdf. Retrieved on 2009-03-03.  "At its meeting in May 2000, the Council further concluded that the framework of a licensed professional engineer, originally developed for civil engineers, does not match the professional industrial practice of software engineering. Such licensing practices would give false assurances of competence even if the body of knowledge were mature; and would preclude many of the most qualified software engineers from becoming licensed." 
^ IEEE Computer Society. "2006 IEEE computer society report to the IFIP General Assembly" (PDF). http://www.ifip.org/minutes/GA2006/Tab18b-US-IEEE.pdf. Retrieved on 2007-04-10. 
^ Canadian Information Processing Society. "I.S.P. Designation". http://www.cips.ca/standards/isp. Retrieved on 2007-03-15. 
^ SEI certification page
^ Wyrostek, Warren (March 14, 2008). "The Top 10 Problems with IT Certification in 2008". InformIT. http://www.informit.com/articles/article.aspx?p=1180991. Retrieved on 2009-03-03. 
^ As outsourcing gathers steam, computer science interest wanes
^ Computer Programmers
^ Software developer growth slows in North America | InfoWorld | News | 2007-03-13 | By Robert Mullins, IDG News Service
^ Hot Skills, Cold Skills
^ Dual Roles: The Changing Face of IT
^ McConnell, Steve (July 10, 2003. Professional Software Development: Shorter Schedules, Higher Quality Products, More Successful Projects, Enhanced Careers. ISBN 978-0321193674.
^ Ian Sommerville (2004). Software Engineering. 7th edition. Chapter 1. Bezien 20 Okt 2008.
^ Table 2 in Chapter 1,"Guide to the Software Engineering Body of Knowledge". February 6, 2004. http://www.swebok.org/swebokcontents-ch1.html#ch1. Retrieved on 2008-02-21. 



[edit] Further reading

Pressman, Roger S (2005). Software Engineering: A Practitioner's Approach (6th ed. ed.). Boston, Mass: McGraw-Hill. ISBN 0072853182. 
Sommerville, Ian (2007) [1982]. Software Engineering (8th ed. ed.). Harlow, England: Pearson Education. ISBN 0-321-31379-8. http://www.pearsoned.co.uk/HigherEducation/Booksby/Sommerville/. 
Jalote, Pankaj (2005) [1991]. An Integrated Approach to Software Engineering (3th ed. ed.). Springer. ISBN 0-387-20881-X. http://www.springer.com/east/home?SGWisbn=5-102-22-52090005-0&changeHeader=true. 
Ghezzi, Carlo (2003) [1991]. Fundamentals of Software Engineering (2nd (International) ed. ed.). Pearson Education @ Prentice-Hall. 


[edit] External links



Wikimedia Commons has media related to: Software engineering 



Guide to the Software Engineering Body of Knowledge
Computer Software Engineers - Definition and statistics from the U.S. Bureau of Labor Statistics
IEEE Software Engineering Online
A Student's Guide to Software Engineering Projects - a free online guide for students taking SE project courses








v • d • e

Software engineering





Fields

Requirements analysis • Software design • Computer programming • Formal methods • Software testing • Software deployment • Software maintenance






Concepts

Data modeling • Enterprise architecture • Functional specification • Modeling language • Programming paradigm • Software • Software architecture • Software development methodology • Software development process • Software quality • Software quality assurance • Structured analysis






Orientations

Agile • Aspect-oriented • Object orientation • Ontology • Service orientation • SDLC






Models

Development models: Agile • Iterative model • RUP • Scrum • Spiral model • Waterfall model • XP • V-Model
Other models: CMMI • Data model • Function model • IDEF • Information model • Metamodeling • Object model • View model • UML






Software
engineers

Kent Beck • Grady Booch • Fred Brooks • Barry Boehm • Ward Cunningham • Ole-Johan Dahl • Tom DeMarco • Edsger W. Dijkstra • Martin Fowler • C. A. R. Hoare • Watts Humphrey • Michael A. Jackson • Ivar Jacobson • Craig Larman • James Martin • Bertrand Meyer • David Parnas • Winston W. Royce • James Rumbaugh • Niklaus Wirth • Edward Yourdon






Related fields

Computer science • Computer engineering • Enterprise engineering • History • Management • Mathematics • Project management • Quality management • Software ergonomics • Systems engineering













v • d • e

Major fields of computer science





Theory of computation

Automata · Computability · Computational complexity · Quantum Computing






Algorithms and data structures

Analysis of algorithms · Algorithm design · Computational geometry · Interface






Programming languages

Theory · Compilers / Parsers / Interpreters · Programming paradigms (Declarative · Imperative · Logic · Procedural) · SDLC · Software Distribution






Types of Computation

Cloud computing · Cluster Computing · Distributed computing · Grid computing · Parallel computing






System architecture

Computer architecture · Computer organization · Operating systems · Management information system · Information systems






Telecomm & Networking

Broadcasting · Network topology · OSI model · Cryptography · World Wide Web · Semantic Web · Internetworking · PSTN / SONET · IEEE 802






Security

Intelligence · Encryption · Protocols · Spam · VPN · Online predator · Identity theft · Internet privacy · Trusted Computing · Advertising Ethics · Computer forensics · Computer surveillance · DoD






Databases

Database theory · Data mining · Data modeling · OLAP · Geographic information system






Computer graphics

CGI  · Visualization · Image processing






Scientific computing

Artificial life · Bioinformatics · Cognitive Science · Computational chemistry · Computational neuroscience · Computational physics · Numerical algorithms · Symbolic mathematics






Artificial intelligence

Automated reasoning · Computational linguistics · Computer vision · Evolutionary computation · Machine learning · Natural language processing · Robotics · Cybernetics






BCI / HCI / MMI

Computer accessibility · User interfaces · Wearable computing · Ubiquitous computing · Mixed reality






NOTE: Computer science can also be split up into different topics or fields according to the ACM Computing Classification System.












v • d • e

Technology





Applied science

Archaeology · Artificial intelligence · Ceramic engineering · Computing · Electronics · Energy · Energy storage · Engineering physics · Environmental Engineering Science · Environmental technology · Fisheries science · Materials science and engineering · Microtechnology · Nanotechnology · Nuclear technology · Optics · Particle physics · Zoography






Information

Communication · Graphics · Information technology · Music · Speech recognition · Visual technology · Systematics · Informatics






Industry

Construction · Financial engineering · Fishing · Industrial technology · Manufacturing · Machinery · Mining · Business informatics






Military

Ammunition · Bombs · Combat engineering · Military technology · Military technology and equipment · Naval engineering






Domestic

Educational technology · Domestic appliances · Domestic technology · Food technology






Engineering

Aerospace · Agricultural · Architectural · Audio · Automotive · Biological · Biochemical · Biomedical · BioTech · Broadcast · Building officials · Ceramic · Chemical · Civil · Computer · Construction · Control · Cryogenic · Electrical · Electronic · Engineering technology · Enterprise · Environmental · Food · Genetic · Hydraulics · Industrial · Materials · Mechanical · Mechatronics · Metallurgical · Mining · Naval · Network · Nuclear · Ocean · Ontology · Optical · Petroleum · Radio Frequency · Software · Structural · Systems · Technician · Textile · Tissue · Transport · Traffic






Health / safety

Biomedical · Bioinformatics · Biotechnology · Cheminformatics · Fire protection engineering · Health technologies · Medical technology · Nutrition · Pharmaceuticals · Safety engineering · Sanitary engineering






Transport

Aerospace · Aerospace engineering · Automotive engineering · Marine engineering · Motor vehicles · Space technology









Retrieved from "http://en.wikipedia.org/wiki/Software_engineering"
Categories: Software engineeringHidden categories: Articles with limited geographic scope | All articles with unsourced statements | Articles with unsourced statements since March 2009 | Articles containing potentially dated statements from 2006 | All articles containing potentially dated statements | Articles with unsourced statements since June 2007 | Articles with unsourced statements since August 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
አማርኛ
العربية
Asturianu
Bosanski
Català
Česky
Dansk
Deutsch
Español
Euskara
فارسی
Français
Gaeilge
Galego
हिन्दी
한국어
Hrvatski
Bahasa Indonesia
Íslenska
Italiano
עברית
Latviešu
Lietuvių
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Shqip
Slovenčina
Српски / Srpski
Basa Sunda
Suomi
Svenska
Tagalog
தமிழ்
ไทย
Tiếng Việt
Türkçe
ייִדיש
中文









 This page was last modified on 5 April 2009, at 18:45.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
