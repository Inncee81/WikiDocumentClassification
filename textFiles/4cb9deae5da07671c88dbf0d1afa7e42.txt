













Flyweight pattern - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Flyweight_pattern";
		var wgTitle = "Flyweight pattern";
		var wgAction = "view";
		var wgArticleId = "140538";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 278088495;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Flyweight pattern

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article includes a list of references or external links, but its sources remain unclear because it lacks inline citations. Please improve this article by introducing more precise citations where appropriate. (May 2008)


Flyweight is a software design pattern. A Flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory. Often some parts of the object state can be shared and it's common to put them in external data structures and pass them to the flyweight objects temporarily when they are used.
A classic example usage of the flyweight pattern are the data structures for graphical representation of characters in a word processor. It would be nice to have, for each character in a document, a glyph object containing its font outline, font metrics, and other formatting data, but it would amount to hundreds or thousands of bytes for each character. Instead, for every character there might be a reference to a flyweight glyph object shared by every instance of the same character in the document; only the position of each character (in the document and/or the page) would need to be stored externally.




Contents


1 Examples

1.1 Java
1.2 C#
1.3 C++


2 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Examples
The following programs illustrate the document example given above: the flyweights are called FontData in the Java example and GraphicChar in the C# example.
The examples illustrate the Flyweight pattern used to reduce memory by loading only the data necessary to perform some immediate task from a large Font object into a much smaller FontData (Flyweight) object.

[edit] Java


public enum FontEffect {
    BOLD, ITALIC, SUPERSCRIPT, SUBSCRIPT, STRIKETHROUGH
}
 
public final class FontData {
    /**
     * A weak hash map will drop unused references to FontData.
     * Values have to be wrapped in WeakReferences, 
     * because value objects in weak hash map are held by strong references.
     */
    private static final WeakHashMap<FontData, WeakReference<FontData>> FLY_WEIGHT_DATA =
        new WeakHashMap<FontData, WeakReference<FontData>>();
    private final int pointSize;
    private final String fontFace;
    private final Color color;
    private final Set<FontEffect> effects;
 
    private FontData(int pointSize, String fontFace, Color color, EnumSet<FontEffect> effects) {
        this.pointSize = pointSize;
        this.fontFace = fontFace;
        this.color = color;
        this.effects = Collections.unmodifiableSet(effects);
    }
 
    public static FontData create(int pointSize, String fontFace, Color color,
        FontEffect... effects) {
        EnumSet<FontEffect> effectsSet = EnumSet.noneOf(FontEffect.class);
        for (FontEffect fontEffect : effects) {
            effectsSet.add(fontEffect);
        }
        // We are unconcerned with object creation cost, we are reducing overall memory consumption
        FontData data = new FontData(pointSize, fontFace, color, effectsSet);
        if (!FLY_WEIGHT_DATA.containsKey(data)) {
            FLY_WEIGHT_DATA.put(data, new WeakReference<FontData> (data));
        }
        // return the single immutable copy with the given values
        return FLY_WEIGHT_DATA.get(data).get();
    }
 
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof FontData) {
            if (obj == this) {
                return true;
            }
            FontData other = (FontData) obj;
            return other.pointSize == pointSize && other.fontFace.equals(fontFace)
                && other.color.equals(color) && other.effects.equals(effects);
        }
        return false;
    }
 
    @Override
    public int hashCode() {
        return (pointSize * 37 + effects.hashCode() * 13) * fontFace.hashCode();
    }
 
    // Getters for the font data, but no setters. FontData is immutable.
}


[edit] C#


using System;
using System.Text;
using System.Collections.Generic;
 
 
class GraphicChar
{
    char c;
    string fontFace;
    public GraphicChar(char c, string fontFace) { this.c = c; this.fontFace = fontFace; }
    public static void printAtPosition(GraphicChar c, int x, int y)
    {
        Console.WriteLine("Printing '{0}' in '{1}' at position {2}:{3}.", c.c, c.fontFace, x, y);
    }
}
 
class GraphicCharFactory
{
    Dictionary<string, GraphicChar> pool = new Dictionary<string, GraphicChar>();
 
    public int getNum() { return pool.Count; }
 
    public GraphicChar get(char c, string fontFace)
    {
        GraphicChar gc;
        string key = c.ToString() + fontFace;
        if (!pool.TryGetValue(key, out gc)) {
            gc = new GraphicChar(c, fontFace);
            pool.Add(key, gc);
        }
        return gc;
    }
}
 
class FlyWeightExample
{
    public static void Main(string[] args)
    {
        GraphicCharFactory cf = new GraphicCharFactory();
 
        // Compose the text by storing the characters as objects.
        List<GraphicChar> text = new List<GraphicChar>();
        text.Add(cf.get('H', "Arial"));    // 'H' and "Arial" are called intrinsic information
        text.Add(cf.get('e', "Arial"));    // because it is stored in the object itself.
        text.Add(cf.get('l', "Arial"));
        text.Add(cf.get('l', "Arial"));
        text.Add(cf.get('o', "Times"));
        text.Add(cf.get(' ', "Times"));
        text.Add(cf.get('w', "Times"));
        text.Add(cf.get('o', "Times"));
        text.Add(cf.get('r', "Times"));
        text.Add(cf.get('l', "Times"));
        text.Add(cf.get('d', "Times"));
 
        // See how the Flyweight approach is beginning to save space:
        Console.WriteLine("CharFactory created only {0} objects for {1} characters.", cf.getNum(), text.Count);
 
        int x = 0, y = 0;
        foreach (GraphicChar c in text)
        {             // Passing position as extrinsic information to the objects,
            GraphicChar.printAtPosition(c, x++, y);   // as a top-left 'A' is not different from a top-right one.
        }
 
        Console.ReadLine();
    }
}


[edit] C++
Please note this is just a simple demo of flyweight concept in c++. You could easily use the Boost Flyweight library instead.


#include <iostream>
#include <string>
#include <map>
#include <list>
#include <memory>
#include <algorithm>
using namespace std;
 
class GraphicChar
{
public:
	friend class Character;
	GraphicChar(char c, const string fontFace):m_c(c), m_fontFace(fontFace){}
protected:
private:
	char	m_c;
	string  m_fontFace;
};
 
class GraphicCharFactory
{
	typedef std::map<string, GraphicChar*>::iterator poolIter;
public:
	virtual ~GraphicCharFactory()
	{
		for (poolIter beg = m_pool.begin(); beg != m_pool.end(); ++beg)
			delete beg->second;
		m_pool.clear();
	}
 
	GraphicChar* get(char c, const string fontFace)
	{
		string key = c + fontFace;
		poolIter posit;
		if (( posit = m_pool.find(key))!= m_pool.end())
			return posit->second;
		else
			return (*((m_pool.insert(make_pair(key, new GraphicChar(c, fontFace)))).first)).second;
	}
 
	int count()
	{
		return m_pool.size();
	}
 
protected:
private:
	std::map<string, GraphicChar*>	m_pool;
};
 
class Character
{
public:
	Character(int a,int b,const GraphicChar* gra):m_x(a),m_y(b),m_Grap(gra){}
 
	void print()
	{
		cout << "Printing " << m_Grap->m_c << " in " << m_Grap->m_fontFace << " at position" << m_x << " : " << m_y << endl;
	}
 
protected:
private:
	int				   m_x, m_y;
	const GraphicChar* m_Grap;
};
 
int _tmain(int argc, _TCHAR* argv[])
{
	typedef std::list<Character> article;
	article simpArticle;
	std::auto_ptr<GraphicCharFactory> cf(new GraphicCharFactory);
	int x = 0, y = 0;
	simpArticle.push_back(Character(x,   y, cf->get('H', "Arial")) );
	simpArticle.push_back(Character(++x, y, cf->get('e', "Arial")) );
	simpArticle.push_back(Character(++x, y, cf->get('l', "Arial")) );
	simpArticle.push_back(Character(++x, y, cf->get('l', "Arial")) );
	simpArticle.push_back(Character(++x, y, cf->get('o', "Arial")) );
	simpArticle.push_back(Character(++x, y, cf->get(' ', "Arial")) );
	simpArticle.push_back(Character(++x, y, cf->get('w', "Times")) );
	simpArticle.push_back(Character(++x, y, cf->get('o', "Arial")) );
	simpArticle.push_back(Character(++x, y, cf->get('r', "Times")) );
	simpArticle.push_back(Character(++x, y, cf->get('l', "Arial")) );
	simpArticle.push_back(Character(++x, y, cf->get('d', "Times")) );
	std::for_each(simpArticle.begin(),simpArticle.end(), std::mem_fun_ref(&Character::print));
	cout <<"CharFactory created only "<< cf->count() <<" objects for " << simpArticle.size() <<" characters."  << endl;
	return 0;
}

Console output:

Printing H in Arial at position0 : 0
Printing e in Arial at position1 : 0
Printing l in Arial at position2 : 0
Printing l in Arial at position3 : 0
Printing o in Arial at position4 : 0
Printing   in Arial at position5 : 0
Printing w in Times at position6 : 0
Printing o in Arial at position7 : 0
Printing r in Times at position8 : 0
Printing l in Arial at position9 : 0
Printing d in Times at position10 : 0
CharFactory created only 8 objects for 11 characters.


[edit] External links

Flyweight in UML and in LePUS3 (a formal modelling language)
Article "Make your apps fly - Implement Flyweight to improve performance" by David Geary
Article "Enhancing Web Application Performance with Caching" by Neal Ford
Article "The Flyweight Pattern" by Alberto Bar-Noy
Sample Chapter "C# Design Patterns: The Flyweight Pattern" by James W. Cooper
Section "Flyweight Text Entry Fields (archive.org)" from the RIDES Reference Manual by Allen Munro and Quentin A. Pizzini
Description from Portland's Pattern Repository
Overview
Sourdough Design
Structural Patterns - Flyweight Pattern
Class::Flyweight - implement the flyweight pattern in OO perl
Boost.Flyweight - A generic C++ implemention









v • d • e

Design patterns in the book Design Patterns





Creational

Abstract factory · Builder · Factory · Prototype · Singleton






Structural

Adapter · Bridge · Composite · Decorator · Facade · Flyweight · Proxy






Behavioral

Chain of responsibility · Command · Interpreter · Iterator · Mediator · Memento · Observer · State · Strategy · Template method · Visitor









Retrieved from "http://en.wikipedia.org/wiki/Flyweight_pattern"
Categories: Software design patterns | Articles with example Java codeHidden categories: Articles lacking in-text citations 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
한국어
Italiano
日本語
Polski
Português
Русский
Tiếng Việt









 This page was last modified on 18 March 2009, at 12:28.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
