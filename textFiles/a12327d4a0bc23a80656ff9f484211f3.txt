













Watir - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Watir";
		var wgTitle = "Watir";
		var wgAction = "view";
		var wgArticleId = "7034145";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 284230647;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Watir

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Watir

Latest release
1.6.2 / November 6, 2008


Type
Web Application Testing in Ruby


License
BSD license


Website
http://wtr.rubyforge.org/







This article contains instructions, advice, or how-to content. The purpose of Wikipedia is to present facts, not to train. Please help improve this article either by rewriting the how-to content or by moving it to Wikiversity or Wikibooks.


WATIR, pronounced "Water", is an acronym standing for "Web Application Testing in Ruby".[1] Watir is a toolkit used to automate browser-based tests during web application development. This automated test tool uses the Ruby scripting language to drive the Internet Explorer web browser, and is available as a Ruby Gem. Watir was primarily developed by Bret Pettichord and Paul Rogers.




Software Testing portal







Contents


1 Functionality
2 Installation
3 Examples

3.1 The google example
3.2 Handling pop-ups
3.3 View Browser Objects
3.4 Capture Timings
3.5 Write Output to Excel (as CSV)
3.6 Write Output to Excel (as XLS)


4 Recording Scripts
5 WET Web Tester
6 WatiN
7 Watij
8 See also
9 References
10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Functionality
Watir makes use of the fact that Ruby has built in OLE capabilities. As such it is possible to drive the Microsoft Internet Explorer browser programmatically. Watir operates differently than HTTP based test tools, which operate by simulating a browser. Instead Watir directly drives the browser through the Object Linking and Embedding protocol, which is implemented over the Component Object Model (COM) architecture.
The COM permits interprocess communication (such as between Ruby and IE) and dynamic object creation and manipulation (which is what the Ruby program does to the Internet Explorer browser.) Microsoft calls this OLE automation, and calls the manipulating program an automation controller. Technically, the IE process is the server and serves the automation objects, exposing their methods; while the Ruby program then becomes the client which manipulates the automation objects.

[edit] Installation
WATIR is dependent upon Ruby, therefore both must be accessed. Ruby can be accessed at the RubyForge 1 Click Installer page. The current stable version is 1.9.1 stable, but unless otherwise stated you should use 1.8.6.
WATIR can also be accessed at RubyForge. The current standard version is 1.6.2. This version is to be preferred if you do not need to handle security popups or modal dialogs.
Development work on WATIR moved from the Rubyforge area after the 1.4.1 release in August 2005. It is now located at OpenQA.org. Once the WATIR 1.5 development branch is completed, it should be released back to Rubyforge here: WTR at RubyForge
To install the current 1.5 Ruby Gem, go to OpenQA Development Builds and download the gem.
Ruby should be installed first. Simply execute the ruby184-20.exe self extracting installer and let it run. This file will install Ruby, RubyGems, a Ruby IDE called FreeRIDE, the SciTE text editor, and various documentation. It will install in C:\ruby. RubyGems are the Ruby libraries. Type ‘gem list’ to see all installed in a command window.
Playing around with Ruby can be done within a command window by running the irb. Or do ‘Start/All Programs/Ruby-184-20/FreeRide. It takes a few seconds for this to launch. But once it is started you may execute Ruby code. Output goes to the output view pane, or by going to ‘Edit/Preferences’ and checking ‘Run process in terminal’ in ‘Debugger/Run’ it will appear in a command window. (This is preferable; otherwise not all output might be displayed.) So do this.
WATIR should be installed next. Assuming you are installing the current development gem, do the following.

Open a command window
Change to directory where the gem was downloaded (assume C:\Watir)
Type in: “gem install watir”

You should see something like this:

C:\Watir>gem install watir
Successfully installed watir, version 1.5.1.1100
Installing ri documentation for watir-1.5.1.1100...
Installing RDoc documentation for watir-1.5.1.1100...

To uninstall this in the future, you will have to use the gem unistaller, because this installation does not add anything to your programs menu.
You can validate that WATIR is installed by executing ‘gem list’ to see your installed gems. In the list you should now see something like this:

watir (1.5.1.1100)
Automated testing tool for web applications.

If you accessed the development version from the link, you might also download the zip file titled "Bonus.zip". I suggest dropping it in the same directory where you placed the gem.

[edit] Examples

[edit] The google example


 # Here we see a very simple WATIR script to drive to google and validate a page
 require 'watir'                          # use watir gem
 test_site = 'http://www.google.com'      # set a variable
 ie = Watir::IE.new                       # open the IE browser
 ie.goto(test_site)                       # load url, go to site
 ie.text_field(:name, "q").set("pickaxe") # load text "pickaxe" into search field named "q"
 ie.button(:name, "btnG").click           # "btnG" is the name of the Search button, click it
 
 if ie.text.include?("Programming Ruby")  
   puts "Test Passed. Found the test string: 'Programming Ruby'."
 else
   puts "Test Failed! Could not find: 'Programming Ruby'" 
 end

The previous commands can be executed in the Interactive Ruby Shell (irb), or in a Ruby IDE such as FreeRIDE that is installed when Ruby is installed with the once click installer.

[edit] Handling pop-ups


require 'watir'
require 'watir/dialog'
 
link = 'http://www.w3schools.com/js/tryit_view.asp?filename=tryjs_alert'
 
ie = Watir::IE.start(link)
 
# ensure popup won't block Watir
ie.button(:value, 'Display alert box').click_no_wait   
 
dialog = Watir::Dialog.new
 
# Need to be able to poll window to exist
sleep 0.4
 
# Remember that the only button to click is OK!
dialog.button('OK').click  
 
# Wait for dialog to do its stuff
# and wait for IE to return to live
ie.waitForIE

This example extends upon the w3cshools try-it page for alert box, by ensuring the 'Display alert box' button click will not wait for the popup. This approach will handle most annoying popups, however it may be necessary to download and install the current development Watir gem rather than using the standard Watir release.

[edit] View Browser Objects
Suppose you want to be able to see the various objects within the browser? The following are useful:


# To see objects within the browser
ie.frame("top_frame").text_fields.each { |t| puts t.to_s }
ie.frame("top_frame").spans.each { |s| puts s.to_s }
ie.frame("top_frame").tables.each { |t| puts t.to_s }
ie.frame("top_frame").links.each { |l| puts l.to_s }
ie.frame("top_frame").select_lists.each { |s| puts s.to_s }
ie.frame("top_frame").labels.each { |l| puts l.to_s }

In the above example, this also shows you how you would access information from within a frame. If there were no frame involved, then drop the "frame("top_frame")." part of the commands.

[edit] Capture Timings
Suppose you want to capture timing information, because you are running a performance test.


ie.button(:value, 'OK').click
p ie.down_load_time

This approach will time a single response. If you want to collect the time for a series of events, use this approach:


# Performance test timing
begin_time = Time.now
=begin
*****************************
* Body of script goes here
*****************************
=end
end_time = Time.now
p (end_time - begin_time).to_s

Be aware that anything enclosed by an "=begin" and "=end" (on their own lines) is treated as a multi line comment. Typically you might wrap the final button click to submit a page in these commands, and the timing information will then just show you the time from submission to page response.

[edit] Write Output to Excel (as CSV)
It may useful to be able to repeatedly record output to an Excel spreadsheet. Data written to a workbook can be displayed graphically in charts. (How to do this will not be provided here, but see the external link called "Ruby and Excel")
Suppose you want to record a sequence of 4 screen to screen transition timings. You might then add the following to your script:


#Read test data input file
arr = IO.readlines("env.txt")
executionEnvironment = arr[0]
acceptableScreen1 = arr[1].to_f
acceptableScreen2 = arr[2].to_f
acceptableScreen3 = arr[3].to_f
acceptableScreen4 = arr[4].to_f
#Result OK or not
resultValue = "OK"
#Strip line return from tested environment string
executionEnvironment = executionEnvironment.chomp
#open spreadsheet - new one each day this script is run
timeSpreadsheet = File.new( "../PC/" + Time.now.strftime("%d-%b-%y") + ".csv", "a")
=begin
**************************
* Add commands to load data to screen
* Initialize timing variables as in "Capture Timings" example
* Submit the "click" to submit from browser to web server
* Update timing variable as in "Capture Timings" example
**************************
=end
if acceptableScreen1 < actualTime
   resultValue = "NotOK"
end
#Log results
timeSpreadsheet.puts executionEnvironment + ",Expected screen 1 time," + acceptableScreen1.to_s 
+ ",Actual screen 1 time," + (endTime - beginTime).to_s + "," + resultValue
=begin
**************************
* Repeat this 3 times, once for each of the other 3 screens
* Remember to reinitialize resultValue, endTime, and beginTime each time
**************************
=end
#Close the browser
ie.close if ie
#Close the workbook
timeSpreadsheet.close

Some points about this example. First, the commented parts depend upon the previous examples above.
Second, an input file is read to extract test case information. The information should be written on 5 separate lines. The first line contains a reference to the environment in which this test is run, e.g., "dev", "test", "int_test", etc. This first line is loaded into the variable executionEnvironment. The line feed must be chopped off the end of the string, otherwise when written to Excel this will be on its own line, and the other data would go to the next line -- we want everything in the same row in the worksheet.
Third, the acceptableScreen# variables hold a number -- the expected maximum number of seconds for screen to screen response time. These numbers might all be the same, or different, depending on your test. The values are from lines 2 through 5 in the input file.
Fourth and finally, the line above where the spreadsheet is written has a line break in it for formatting for this site, so if you copy the above you see that it is on two lines -- you would want to put it all on one line.

[edit] Write Output to Excel (as XLS)
So the above example is very simple, and may be all that is needed, but if you want to format the speadsheet it really needs to be in Excel format. In which case, the opening of the file and the writing to the file needs to be a bit different. Try this modification:


#open spreadsheet
excel = WIN32OLE::new('excel.Application')
workbook = excel.Workbooks.Add
worksheet = workbook.Worksheets(1)
worksheet.SaveAs("spreadsheet.xls")
#Log results
worksheet.range("a1").value = executionEnvironment
worksheet.range("b1").value = "Acceptable Screen1 time"
worksheet.range("c1").value = acceptableScreen1.to_s
worksheet.range("d1").value = "Actual Screen1 time"
worksheet.range("e1").value = actualScreen1.to_s
worksheet.range("f1").value = resultValue
#
# Etcetera...assume the above happens 4 times, for 4 screens...
#
#Format workbook columns
worksheet.range("b1:b4").Interior['ColorIndex'] = 36 #pale yellow
worksheet.columns("b:b").AutoFit
#close the workbook
workbook.save
workbook.close
excel.Quit

So this will permit you to not only write to Excel workbooks, but format the data as well. However here the writing is on a cell by cell basis rather than to an entire row as can be done in a CSV file.

[edit] Recording Scripts
There exists a very simple Ruby script called WatirMaker. See the External Link labeled "WatirMaker" to download it. Usage is very simple. Download it, remove the ".txt" suffix, then execute like:

#Execute WatirMaker
ruby WatirMaker.rb > c:\temp\rscript.rb

That's it. Be aware that it will generate plenty of errors on any complex site. But some quick and judicious editing and you may find this little recorder to be very useful for you. Just don't expect it to compare to a commercial tool. It is merely a time saver to help you produce the framework for your script, which you can then polish up programmatically.
WatirMarker recently was renamed WatirRecorder. It's easier to use, remaining useful for creating the framework of a testing script. WatirRecorder can't record all of what you do on your site, so many recorded scripts will require editing or further coding.

[edit] WET Web Tester
Main article: WET Web Tester
WET is a powertool for Watir. WET stands for Watir Extension Toolkit. Because the WET classes inherit from the Watir classes, WET provides all of the Watir functionality plus additional features, including powerful pop-up handling mechanisms.

[edit] WatiN
WatiN (pronounced What-in) is a similar tool as Watir for .NET. Tests can be written in C# (or any other .NET language like VB.NET, F# or IronPython) and are executed using Internet Explorer. Version 2.0 of WatiN will support Mozilla Firefox as well.

[edit] Watij
Watij (pronounced "wattage") stands for Web Application Testing in Java. Watij is a pure Java API created to allow for the automation of web applications. Based on the simplicity of Watir and enhanced by the power of Java, Watij automates functional testing of web applications through a real browser. Currently Watij supports automating Internet Explorer on Windows only.

[edit] See also

Ruby (programming language)
RubyGems
Ruby on Rails
iMacros
WatiN .NET version
Java (programming language)


[edit] References

^ http://wtr.rubyforge.org/


[edit] External links

Watir Home Page
Watir Tutorial
Watir Wiki
Home page of WET
The Ruby Homepage
Ruby Gems User Guide
WatirMaker
WatiN Home Page
start - Watij
Win-control - similar capability for Scheme




Retrieved from "http://en.wikipedia.org/wiki/Watir"
Categories: Ruby programming language | GUI automationHidden categories: Articles containing how-to sections 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Русский
Svenska









 This page was last modified on 16 April 2009, at 16:07 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
