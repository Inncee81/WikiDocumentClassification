













Advanced Encryption Standard - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Advanced_Encryption_Standard";
		var wgTitle = "Advanced Encryption Standard";
		var wgAction = "view";
		var wgArticleId = "1260";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281493437;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Advanced Encryption Standard

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

AES






The SubBytes step, one of four stages in a round of AES


General


Designers
Vincent Rijmen, Joan Daemen


First published
1998


Derived from
Square


Successors
Anubis, Grand Cru


Certification
AES winner, CRYPTREC, NESSIE, NSA


Cipher detail


Key sizes
128, 192 or 256 bits[1]


Block sizes
128 bits[2]


Structure
Substitution-permutation network


Rounds
10, 12 or 14 (depending on key size)


Best public cryptanalysis


A related-key attack can break up to 9 rounds of 256-bit AES. A chosen-plaintext attack can break 8 rounds of 192- and 256-bit AES, and 7 rounds of 128-bit AES, although the workload is impractical at 2^128 - 2^119. (Ferguson et al, 2000).


In cryptography, the Advanced Encryption Standard (AES) is an encryption standard adopted by the U.S. government. The standard comprises three block ciphers, AES-128, AES-192 and AES-256, adopted from a larger collection originally published as Rijndael. Each AES cipher has a 128-bit block size, with key sizes of 128, 192 and 256 bits, respectively. The AES ciphers have been analyzed extensively and are now used worldwide, as was the case with its predecessor,[3] the Data Encryption Standard (DES).
AES was announced by National Institute of Standards and Technology (NIST) as U.S. FIPS PUB 197 (FIPS 197) on November 26, 2001 after a 5-year standardization process in which fifteen competing designs were presented and evaluated before Rijndael was selected as the most suitable (see Advanced Encryption Standard process for more details). It became effective as a standard May 26, 2002. As of 2009[update], AES is one of the most popular algorithms used in symmetric key cryptography.[citation needed] It is available in many different encryption packages. AES is the first publicly accessible and open cipher approved by the NSA for top secret information (see Security of AES, below).
The Rijndael cipher was developed by two Belgian cryptographers, Joan Daemen and Vincent Rijmen, and submitted by them to the AES selection process. Rijndael is a portmanteau of the names of the two inventors and is pronounced [rɛindaːl].[4]




Contents


1 Description of the cipher

1.1 High-level description of the algorithm
1.2 The SubBytes step
1.3 The ShiftRows step
1.4 The MixColumns step
1.5 The AddRoundKey step
1.6 Optimization of the cipher


2 Security

2.1 Side-channel attacks


3 FIPS validation
4 Test vectors
5 Implementations

5.1 Libraries

5.1.1 Actionscript 3
5.1.2 C/ASM library
5.1.3 C++ library
5.1.4 C# /.NET
5.1.5 Java
5.1.6 JavaScript
5.1.7 Delphi
5.1.8 LISP
5.1.9 Other languages


5.2 Applications

5.2.1 Archive and compression tools
5.2.2 Disk encryption
5.2.3 Security for communications in Local Area Networks
5.2.4 Misc




6 See also
7 Notes
8 References
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Description of the cipher
AES is fast in both software and hardware,[5] is relatively easy to implement, and requires little memory.[citation needed] Unlike its predecessor DES, AES does not use a Feistel network.
AES has a fixed block size of 128 bits and a key size of 128, 192, or 256 bits, whereas Rijndael can be specified with block and key sizes in any multiple of 32 bits, with a minimum of 128 bits and a maximum of 256 bits.
Assuming one byte equals 8 bits, the fixed block size of 128 bits is 128 ÷ 8 = 16 bytes. AES operates on a 4×4 array of bytes, termed the state (versions of Rijndael with a larger block size have additional columns in the state). Most AES calculations are done in a special finite field.
The AES cipher is specified as a number of repetitions of transformation rounds that convert the input plain-text into the final output of cipher-text. Each round consists of several processing steps, including one that depends on the encryption key. A set of reverse rounds are applied to transform cipher-text back into the original plain-text using the same encryption key.

[edit] High-level description of the algorithm

KeyExpansion using Rijndael's key schedule
Initial Round


AddRoundKey


Rounds


SubBytes—a non-linear substitution step where each byte is replaced with another according to a lookup table.
ShiftRows—a transposition step where each row of the state is shifted cyclically a certain number of steps.
MixColumns—a mixing operation which operates on the columns of the state, combining the four bytes in each column
AddRoundKey—each byte of the state is combined with the round key; each round key is derived from the cipher key using a key schedule.


Final Round (no MixColumns)


SubBytes
ShiftRows
AddRoundKey


[edit] The SubBytes step




In the SubBytes step, each byte in the state is replaced with its entry in a fixed 8-bit lookup table, S; bij = S(aij).


In the SubBytes step, each byte in the array is updated using an 8-bit substitution box, the Rijndael S-box. This operation provides the non-linearity in the cipher. The S-box used is derived from the multiplicative inverse over GF(28), known to have good non-linearity properties. To avoid attacks based on simple algebraic properties, the S-box is constructed by combining the inverse function with an invertible affine transformation. The S-box is also chosen to avoid any fixed points (and so is a derangement), and also any opposite fixed points.

[edit] The ShiftRows step




In the ShiftRows step, bytes in each row of the state are shifted cyclically to the left. The number of places each byte is shifted differs for each row.


The ShiftRows step operates on the rows of the state; it cyclically shifts the bytes in each row by a certain offset. For AES, the first row is left unchanged. Each byte of the second row is shifted one to the left. Similarly, the third and fourth rows are shifted by offsets of two and three respectively. For the block of size 128 bits and 192 bits the shifting pattern is the same. In this way, each column of the output state of the ShiftRows step is composed of bytes from each column of the input state. (Rijndael variants with a larger block size have slightly different offsets). In the case of the 256-bit block, the first row is unchanged and the shifting for second, third and fourth row is 1 byte, 3 bytes and 4 bytes respectively - although this change only applies for the Rijndael cipher when used with a 256-bit block, which is not used for AES.

[edit] The MixColumns step




In the MixColumns step, each column of the state is multiplied with a fixed polynomial c(x).


In the MixColumns step, the four bytes of each column of the state are combined using an invertible linear transformation. The MixColumns function takes four bytes as input and outputs four bytes, where each input byte affects all four output bytes. Together with ShiftRows, MixColumns provides diffusion in the cipher. Each column is treated as a polynomial over GF(28) and is then multiplied modulo x4 + 1 with a fixed polynomial c(x) = 3x3 + x2 + x + 2. The MixColumns step can also be viewed as a multiplication by a particular MDS matrix in Finite field. This process is described further in the article Rijndael mix columns.

[edit] The AddRoundKey step




In the AddRoundKey step, each byte of the state is combined with a byte of the round subkey using the XOR operation (⊕).


In the AddRoundKey step, the subkey is combined with the state. For each round, a subkey is derived from the main key using Rijndael's key schedule; each subkey is the same size as the state. The subkey is added by combining each byte of the state with the corresponding byte of the subkey using bitwise XOR.

[edit] Optimization of the cipher





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (December 2008)


On systems with 32-bit or larger words, it is possible to speed up execution of this cipher by combining SubBytes and ShiftRows with MixColumns, and transforming them into a sequence of table lookups. This requires four 256-entry 32-bit tables, which utilizes a total of four kilobytes (4096 bytes) of memory—one kilobyte for each table. A round can now be done with 16 table lookups and 12 32-bit exclusive-or operations, followed by four 32-bit exclusive-or operations in the AddRoundKey step.
If the resulting four kilobyte table size is too large for a given target platform, the table lookup operation can be performed with a single 256-entry 32-bit table by the use of circular rotates.
Using a byte-oriented approach it is possible to combine the SubBytes, ShiftRows, and MixColumns steps into a single round operation.

[edit] Security
As of 2006, the only successful attacks against AES implementations have been side-channel attacks.[citation needed] The National Security Agency (NSA) reviewed all the AES finalists, including Rijndael, and stated that all of them were secure enough for US Government non-classified data. In June 2003, the US Government announced that AES may be used to protect classified information:

The design and strength of all key lengths of the AES algorithm (i.e., 128, 192 and 256) are sufficient to protect classified information up to the SECRET level. TOP SECRET information will require use of either the 192 or 256 key lengths. The implementation of AES in products intended to protect national security systems and/or information must be reviewed and certified by NSA prior to their acquisition and use."[6]

AES has 10 rounds for 128-bit keys, 12 rounds for 192-bit keys, and 14 rounds for 256-bit keys. By 2006, the best known attacks were on 7 rounds for 128-bit keys, 8 rounds for 192-bit keys, and 9 rounds for 256-bit keys.[7]
For cryptographers, a cryptographic "break" is anything faster than an exhaustive search, thus an attack against a 128-bit-key AES requiring 2120 operations (compared to 2128 possible keys) would be considered a break. The largest successful publicly-known brute force attack has been against a 64-bit RC5 key by distributed.net.
Other debates center around the mathematical structure of AES. Unlike most other block ciphers, AES has a very neat algebraic description.[8] During the AES process, developers of competing algorithms wrote of Rijndael, "...we are concerned about [its] use...in security-critical applications."[9] However, at the end of the AES process, Bruce Schneier, a developer of Twofish, wrote that while he thought academic attacks on Rijndael would be developed someday, "I do not believe that anyone will ever discover an attack that will allow someone to read Rijndael traffic."[10]
In 2002, a theoretical attack, termed the "XSL attack", was announced by Nicolas Courtois and Josef Pieprzyk, showing a potential weakness in the AES algorithm.[11] Several cryptography experts have found problems in the underlying mathematics of the proposed attack, suggesting that the authors may have made a mistake in their estimates. Whether this line of attack can be made to work against AES remains an open question.

[edit] Side-channel attacks
Side-channel attacks do not attack the underlying cipher and so have nothing to do with its security as described here, but attack implementations of the cipher on systems which inadvertently leak data. There are several such known attacks on certain implementations of AES.
In April 2005, D.J. Bernstein announced a cache-timing attack that he used to break a custom server that used OpenSSL's AES encryption.[12] The custom server was designed to give out as much timing information as possible (the server reports back the number of machine cycles taken by the encryption operation), and the attack required over 200 million chosen plaintexts. Some say the attack is not practical over the internet with a distance of one or more hops;[13] Bruce Schneier called the research a "nice timing attack."[14]
In October 2005, Dag Arne Osvik, Adi Shamir and Eran Tromer presented a paper demonstrating several cache-timing attacks against AES.[15] One attack was able to obtain an entire AES key after only 800 operations triggering encryptions, in a total of 65 milliseconds. This attack requires the attacker to be able to run programs on the same system that is performing AES.
Tadayoshi Kohno wrote a paper entitled "Attacking and Repairing the WinZip Encryption Scheme"[16] showing possible attacks against the WinZip implementation (the zip archive's metadata isn't encrypted).

[edit] FIPS validation




AES-CBC vs AES-CFB in time trials with a 128-bit block.


The Cryptographic Module Validation Program (CMVP) is operated jointly by the United States Government's National Institute of Standards and Technology (NIST) Computer Security Division and the Communications Security Establishment (CSE) of the Government of Canada. The use of validated cryptographic modules is required by the United States Government for all unclassified uses of cryptography. The Government of Canada also recommends the use of FIPS 140 validated cryptographic modules in unclassified applications of its departments.
Although NIST publication 197 ("FIPS 197") is the unique document that covers the AES algorithm, vendors typically approach the CMVP under FIPS 140 and ask to have several algorithms (such as Triple DES or SHA1) validated at the same time. Therefore, it is rare to find cryptographic modules that are uniquely FIPS 197 validated and NIST itself does not generally take the time to list FIPS 197 validated modules separately on its public web site. Instead, FIPS 197 validation is typically just listed as an "FIPS approved: AES" notation (with a specific FIPS 197 certificate number) in the current list of FIPS 140 validated cryptographic modules.
FIPS validation is challenging to achieve both technically and fiscally. There is a standardized battery of tests as well as an element of source code review that must be passed over a period of several days. The cost to perform these tests through an approved laboratory can be significant (e.g., well over $10,000 US) and does not include the time it takes to write, test, document and prepare a module for validation. After validation, modules must be resubmitted and reevaluated if they are changed in any way.

[edit] Test vectors
Test vectors are a set of known ciphers for a given input and key. For example, for the 128-bit key "00010203050607080A0B0C0D0F101112" (16 bytes represented as two hexadecimal characters per byte), and an input "506812A45F08C889B97F5980038B8359" the AES-128 cipher output should be "D8F532538289EF7D06B506A4FD5BE9C9".

[edit] Implementations

[edit] Libraries





This article's external links may not follow Wikipedia's content policies or guidelines. Please improve this article by removing excessive or inappropriate external links. (March 2009)






AES speed at 128, 192 and 256-bit key sizes.


Rijndael is free for any use public or private, commercial or non-commercial. The authors of Rijndael used to provide a homepage[17] for the algorithm. Care should be taken when implementing AES in software. Like most encryption algorithms, Rijndael was designed on big-endian systems. For this reason, little-endian systems return correct test vector results only through considerable byte-swapping, with efficiency reduced as a result.[citation needed]
The algorithm operates on plaintext blocks of 16 bytes. Encryption of shorter blocks is possible only by padding the source bytes, usually with null bytes. This can be accomplished via several methods, the simplest of which assumes that the final byte of the cipher identifies the number of Null bytes of padding added.
Careful choice must be made in selecting the mode of operation of the cipher. The simplest mode encrypts and decrypts each 128-bit block separately. In this mode, called "electronic code book (ECB)", blocks that are identical will be encrypted identically. This will make some of the plaintext structure visible in the ciphertext. Selecting other modes, such as empressing a sequential counter over the block prior to encryption (CTR mode) and removing it after decryption avoids this problem.

Current list of FIPS 197 validated cryptographic modules (hosted by NIST)
Current list of FIPS 140 validated cryptographic modules with validated AES implementations (hosted by NIST) - Most of these involve a commercial implementation of AES algorithms. Look for "FIPS-approved algorithms" entry in the "Level / Description" column followed by "AES" and then a specific certificate number.


[edit] Actionscript 3

BSD licensed cryptography library that provides several common algorithms including AES-128, AES-192 and AES-256


[edit] C/ASM library

GPL-licensed Nettle library also includes an AES implementation
LGPL-licensed written in C
A compact byte-oriented AES-256 implementation (C, OpenBSD license)
A byte-oriented public domain in C
BSD licensed from Brian Gladman
Public-domain from D.J. Bernstein
Public domain C from Philip J. Erdelsky
Cryptographic Application Programming Interface or CAPI, Microsoft's Cryptography API
A simple commented implementation in C/C++ aimed at beginners


[edit] C++ library

Botan has implemented Rijndael since its very first release in 2001
Crypto++ A comprehensive C++ semi-public-domain implementation of encryption and hash algorithms. FIPS validated
Chris Lomont's version of AES under the zlib License


[edit] C# /.NET

"Keep Your Data Secure with the New Advanced Encryption Standard" A detailed explanation with C# implementation by James D. McCaffrey.
As of version 3.5 of the .NET Framework, the System.Security.Cryptography namespace contains both a fully managed implementation of AES and a managed wrapper around the CAPI AES implementation.
Bouncy Castle Crypto Library


[edit] Java

Java Cryptography Extension, integrated in the Java Runtime Environment since version 1.4.2 (see example code)
Bouncy Castle Crypto Library


[edit] JavaScript

Clipperz Crypto Library, includes an efficient implementation.
Direct implementation of standard transparently coded, with counter mode of operation
Calculator showing intermediate values
Simple 128/192/256-bit AES with hexadecimal inputs
Gibberish Library, OpenSSL compatible with CBC operation, and very efficient. MIT Licensed
SlowAES, JavaScript and Python implementation. Apache 2.0 Licensed
pidCrypt Crypto Library, both CTR and CBC mode of operation. ISC Licensed


[edit] Delphi

Martin Offenwanger's GPL-licensed AES source code written in Delphi
Arnaud Bouchez's another AES source code written in Delphi and i386 assembler
David Barton's implementation in Delphi, as part of a suite of hashes and ciphers called DCPcrypt: OIS-Certified open source


[edit] LISP

ironclad, Common Lisp cryptography library.
Common Lisp AES implementations using 8 and 32 bits arithmetic.
Emacs Lisp


[edit] Other languages

LGPL 128bit Implementation in PHP (Registration required)
phpseclib LGPL implementation in PHP supporting 128, 192, and 256-bit keys.
Rijndael Inspector Program made in Flash to encrypt/decrypt using AES-128.
AES CryptText A VB5/6 Source-Code (cls) implementation of the AES-Rijndael Block Cipher.
Crypt::Rijndael for Perl
Crypto for Erlang implements AES (binding for Openssl)
Mcrypt for PHP
dcrypt for the D (programming language) implements AES


[edit] Applications

[edit] Archive and compression tools

7z
WinZip
PKZIP
RAR


[edit] Disk encryption

DiskCryptor
FileVault
FreeOTFE
LUKS
TrueCrypt
Disk Utility (Mac OS X)
GELI & GBDE (FreeBSD)
Many disk drives incorporate AES encryption in firmware.


[edit] Security for communications in Local Area Networks

IEEE 802.11i, an amendment to the original IEEE 802.11 standard specifying security mechanisms for wireless networks, uses AES.
The ITU-T G.hn standard, which provides a way to create a high-speed (up to 1 Gigabit/s) Local area network using existing home wiring (power lines, phone lines and coaxial cables), uses AES for encryption.


[edit] Misc

OpenSSL includes AES cipher support as of version 0.9.7 (released in 2002) and is dual-licensed under the terms of the OpenSSL License and the original SSLeay license. FIPS validated via IBM
Peter Selingers ccrypt file encryption utility for UNIX, GPL-licensed
GPG, GPL-licensed, includes AES, AES-192, and AES-256 as options.
The Wizard's Toolkit, ImageMagick license
SmartFTP's AES CTR Encryption Tool, Free
IronKey Uses AES Encryption
Pidgin (software) Has a plugin that allows for AES Encryption: Pidgin-Encryption


[edit] See also

Full Disk Encryption
Data Encryption Standard (DES) - AES has replaced this standard
Triple DES - AES has replaced this standard
Advanced Encryption Standard process
Whirlpool - hash function also co-created by Vincent Rijmen


[edit] Notes


^ Key sizes of 128, 160, 192, 224, and 256 bits are supported by the Rijndael algorithm, but only the 128, 192, and 256-bit key sizes are specified in the AES standard.
^ Block sizes of 128, 160, 192, 224, and 256 bits are supported by the Rijndael algorithm, but only the 128-bit block size is specified in the AES standard.
^ "NIST reports measurable success of Advanced Encryption Standard". http://www.findarticles.com/p/articles/mi_m0IKZ/is_3_107?pnum=2&opg=90984479. 
^ "'Rijndael' pronunciation". http://rijndael.info/audio/rijndael_pronunciation.wav. 
^ Bruce Schneier, John Kelsey, Doug Whiting, David Wagner, Chris Hall, Niels Ferguson, Tadayoshi Kohno, Mike Stay (May 2000). "The Twofish Team’s Final Comments on AES Selection". http://www.schneier.com/paper-twofish-final.pdf. 
^ Lynn Hathaway (June 2003). "National Policy on the Use of the Advanced Encryption Standard (AES) to Protect National Security Systems and National Security Information" (PDF). http://www.cnss.gov/Assets/pdf/cnssp_15_fs.pdf. Retrieved on 2008-11-02. 
^ John Kelsey, Stefan Lucks, Bruce Schneier, Mike Stay, David Wagner, and Doug Whiting, Improved Cryptanalysis of Rijndael, Fast Software Encryption, 2000 pp213–230 [1]
^ "Sean Murphy". University of London. http://www.isg.rhul.ac.uk/~sean/. Retrieved on 2008-11-02. 
^ Niels Ferguson, Richard Schroeppel, Doug Whiting (2001). "A simple algebraic representation of Rijndael" (PDF/PostScript). Proceedings of Selected Areas in Cryptography, 2001, Lecture Notes in Computer Science: pp. 103–111, Springer-Verlag. Retrieved on 2006-10-06. 
^ Bruce Schneier, AES Announced, October 15, 2000
^ Bruce Schneier. "AES News, Crypto-Gram Newsletter, September 15, 2002". http://www.schneier.com/crypto-gram-0209.html. Retrieved on 2007-07-27. 
^ "Index of formal scientific papers". Cr.yp.to. http://cr.yp.to/papers.html#cachetiming. Retrieved on 2008-11-02. 
^ Louis Scheffer (2005-04-16). "Re: Successful remote AES key extraction". sci.crypt. (Web link).
^ Bruce Schneier. "AES Timing Attack". http://www.schneier.com/blog/archives/2005/05/aes_timing_atta_1.html. Retrieved on 2007-03-17. 
^ Dag Arne Osvik1 (2005-11-20) (PDF). Cache Attacks and Countermeasures: the Case of AES. http://www.wisdom.weizmann.ac.il/~tromer/papers/cache.pdf. Retrieved on 2008-11-02. 
^ Tadayoshi Kohno (PDF). Attacking and Repairing the WinZip Encryption Scheme. http://www.cs.washington.edu/homes/yoshi/papers/WinZip/winzip.pdf. Retrieved on 2008-11-02. 
^ Original homepage and archived copy



[edit] References

Nicolas Courtois, Josef Pieprzyk, "Cryptanalysis of Block Ciphers with Overdefined Systems of Equations". pp267–287, ASIACRYPT 2002.
Joan Daemen and Vincent Rijmen, "The Design of Rijndael: AES - The Advanced Encryption Standard." Springer-Verlag, 2002. ISBN 3-540-42580-2.


[edit] External links

FIPS PUB 197: the official AES standard (PDF file)
AES Algorithm (Rijndael) Information
Rijndael Specification (original submission)
Explanation of the AES algorithm
Animation of the AES encryption process
Coding AES in C

















v • d • e

 
Block ciphers







Common algorithms: AES | Blowfish | DES | Triple DES | Serpent | Twofish









Other algorithms: 3-Way | ABC | Akelarre | Anubis | ARIA | BaseKing | BassOmatic | BATON | BEAR and LION | C2 | Camellia | CAST-128 | CAST-256 | CIKS-1 | CIPHERUNICORN-A | CIPHERUNICORN-E | CLEFIA | CMEA | Cobra | COCONUT98 | Crab | CRYPTON | CS-Cipher | DEAL | DES-X | DFC | E2 | FEAL | FEA-M | FROG | G-DES | GOST | Grand Cru | Hasty Pudding cipher | Hierocrypt | ICE | IDEA | IDEA NXT | Intel Cascade Cipher | Iraqi | KASUMI | KeeLoq | KHAZAD | Khufu and Khafre | KN-Cipher | Ladder-DES | Libelle | LOKI97 | LOKI89/91 | Lucifer | M6 | M8 | MacGuffin | Madryga | MAGENTA | MARS | Mercy | MESH | MISTY1 | MMB | MULTI2 | MultiSwap | New Data Seal | NewDES | Nimbus | NOEKEON | NUSH | Q | RC2 | RC5 | RC6 | REDOC | Red Pike | S-1 | SAFER | SAVILLE | SC2000 | SEED | SHACAL | SHARK | Skipjack | SMS4 | Spectr-H64 | Square | SXAL/MBAL | Threefish | TEA | Treyfer | UES | Xenon | xmx | XTEA | XXTEA | Zodiac









Design: Feistel network | Key schedule | Product cipher | S-box | P-box | SPN









Attack (Cryptanalysis): Brute force | Linear | Differential | Integral | Impossible Differential | Boomerang | Mod n | Related-key | Slide | XSL









Standardization: AES process | CRYPTREC | NESSIE









Misc: Avalanche effect | Block size | IV | Key size | Modes of operation | Piling-up lemma | Weak key | EFF DES cracker | Key whitening



















v • d • e

 
Cryptography






History of cryptography · Cryptanalysis · Cryptography portal · Topics in cryptography







Symmetric-key algorithm · Block cipher · Stream cipher · Public-key cryptography · Cryptographic hash function · Message authentication code · Random numbers · Steganography












Retrieved from "http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
Categories: Block ciphers | Advanced Encryption StandardHidden categories: Articles containing potentially dated statements from 2009 | All articles containing potentially dated statements | All articles with unsourced statements | Articles with unsourced statements since March 2009 | Articles needing additional references from December 2008 | Wikipedia external links cleanup | Articles with unsourced statements since January 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
العربية
Česky
Dansk
Deutsch
Español
Esperanto
Euskara
Français
Galego
한국어
Hrvatski
Bahasa Indonesia
Italiano
עברית
ქართული
Lietuvių
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Simple English
Suomi
Svenska
Tiếng Việt
Тоҷикӣ
Türkçe
Українська
中文









 This page was last modified on 3 April 2009, at 13:05.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
