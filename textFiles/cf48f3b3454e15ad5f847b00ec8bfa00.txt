













Dynamic programming language - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Dynamic_programming_language";
		var wgTitle = "Dynamic programming language";
		var wgAction = "view";
		var wgArticleId = "234079";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 275770230;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Dynamic programming language

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article is in need of attention from an expert on the subject. WikiProject Computer science or the Computer science Portal may be able to help recruit one. (February 2009)



This article is about a class of programming languages, for the method for reducing the runtime of algorithms, see Dynamic programming.

Dynamic programming language is a term used broadly in computer science to describe a class of high-level programming languages that execute at runtime many common behaviors that other languages might perform during compilation, if at all. These behaviors could include extension of the program, by adding new code, by extending objects and definitions, or by modifying the type system, all during program execution. These behaviors can be emulated in nearly any language of sufficient complexity, but dynamic languages provide direct tools to make use of them.
Most dynamic languages are dynamically typed, but not all.




Contents


1 Limitations and ambiguity in the definition
2 Implementation

2.1 Eval

2.1.1 Higher-order functions


2.2 Object runtime alteration
2.3 Functional programming

2.3.1 Closures
2.3.2 Continuations


2.4 Reflection
2.5 Macros


3 Languages
4 See also
5 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Limitations and ambiguity in the definition
The definition of a dynamic language is ambiguous because it attempts to make distinctions between code and data as well as between compilation and runtime which are not universal. Virtual machines, just-in-time compilation, and the ability of many programming languages on some systems to directly modify machine code make the distinction abstract. In general, the assertion that a language is dynamic is more an assertion about the ease of use of dynamic features than it is a clear statement of the capabilities of the language.

[edit] Implementation
There are several mechanisms closely associated with the concept of dynamic programming. None are essential to the classification of a language as dynamic, but most can be found in a wide variety of such languages.

[edit] Eval
Eval is a term which was introduced in Lisp, and refers to expression evaluation, the process of executing instructions which are represented by data structures called S-expressions. In its modern sense, eval or evalling refers to the mechanism or process of executing any sort of instructions that are available to the program as text or non-machine code data. The evaluation of new program text is a common aspect of many languages that, unlike Lisp, do not make a distinction between reading text and transforming it into an internal form and further transforming that internal form into actions to be taken. These languages are often called interpreted languages when the process of normal program execution is an eval.

[edit] Higher-order functions
However, Erik Meijer and Peter Drayton caution that any language capable of loading executable code at runtime is capable of eval in some respect, even when that code is in the form of dynamically linked shared libraries of machine code. They suggest that higher-order functions are the true measure of dynamic programming, and some languages "use eval as a poor man's substitute for higher-order functions."[1]

[edit] Object runtime alteration
A type or object system can typically be modified during runtime in a dynamic language. This can mean generating new objects from a runtime definition or based on mixins of existing types or objects. This can also refer to changing the inheritance or type tree, and thus altering the way that existing types behave (especially with respect to the invocation of methods).

[edit] Functional programming
Functional programming concepts are a feature of many dynamic languages, and also derive from Lisp.

[edit] Closures
One of the most widely used aspects of functional programming in dynamic languages is the closure, which allows creating a new instance of a function which retains access to the context in which it was created. A simple example of this is generating a function for scanning text for a word:

function new_scanner (word)
  temp_function = function (input)
    scan_for_text (input, word)
  end function
  return temp_function
end function

Note that the inner function has no name, and is instead stored in the variable temp_function. Each time new_scanner is executed, it will return a new function which remembers the value of the word parameter that was passed in when it was defined.
Closures[2] are one of the core tools of functional programming, and many languages support at least this degree of functional programming.

[edit] Continuations
Another feature of some dynamic languages is the continuation. Continuations represent execution state that can be re-invoked. For example, a parser might return an intermediate result and a continuation that, when invoked, will continue to parse the input. Continuations interact in very complex ways with scoping, especially with respect to closures. For this reason, many dynamic languages do not provide continuations.

[edit] Reflection
Reflection is common in many dynamic languages, and typically involves analysis of the types and metadata of generic or polymorphic data. It can, however, also include full evaluation and modification of a program's code as data, such as the features that Lisp provides in analyzing S-expressions.

[edit] Macros
A limited number of dynamic programming languages provide features which combine code introspection and eval in a feature called macros. Most programmers today who are aware of the term macro have encountered them in C or C++, where they are a static feature which are built in a small subset of the language, and are capable only of string substitutions on the text of the program. In dynamic languages, however, they provide access to the inner workings of the compiler, and full access to the interpreter, virtual machine, or runtime, allowing the definition of language-like constructs which can optimize code or modify the syntax or grammar of the language.

[edit] Languages


APL
Befunge
C# (≥4.0)
ChucK
Clipper
ColdFusion
Curl
D
dBASE (dBL)
ECMAScript

ActionScript
DMDScript
E4X
JavaScript
JScript


Eiffel
Erlang
Forth
Groovy
Harbour
HyperCard/HyperTalk and Derivatives

HyperCard/HyperTalk
Revolution/Transcript
SuperCard/SuperTalk


Io
Lisp

Common Lisp
Dylan
Emacs Lisp
Logo
Lisp Machine Lisp
Scheme


Logtalk
Lua
Maude system
MUMPS
Oberon
Objective-C
Perl
PHP
Pliant
POP-11
Poplog
Pike
Prolog
Python
R
REALbasic
REBOL
Ruby
Scala
Scratch
Smalltalk

Bistro
Self
Slate
Squeak
StrongTalk


Snobol
Squirrel
SuperCollider
Tcl

XOTcl


TeX macro language
VBScript
Visual Basic 9 or 10
Visual FoxPro
Water
Windows PowerShell
xHarbour


Assembly, C, C++, early Java, and FORTRAN do not generally fit into this category.

[edit] See also

Comparison of programming languages
Name binding


[edit] References

^ Meijer, Erik and Peter Drayton (2005). "Static Typing Where Possible, Dynamic Typing When Needed: The End of the Cold War Between Programming Languages". Microsoft Corporation. http://pico.vub.ac.be/~wdmeuter/RDL04/papers/Meijer.pdf. 
^ See example of use on p.330 of Larry Wall's Programming Perl ISBN 0-596-00027-8









v • d • e

Types of programming languages






Array · Aspect-oriented · Assembly · Class-based · Compiled · Concurrent · Curly bracket · Data-oriented · Data-structured · Dataflow · Declarative · Domain-specific · Dynamic · Esoteric · Event-driven · Extensible · Functional · High-level · Imperative · Interpreted · Logic · Low-level · Machine · Macro · Metaprogramming · Multi-paradigm · Non-English-based · Object-oriented · Off-side rule · Pipeline · Procedural · Prototype-based · Reflective · Rule-based · Scripting · Synchronous · Visual









Retrieved from "http://en.wikipedia.org/wiki/Dynamic_programming_language"
Categories: Programming evaluationHidden categories: Computer science articles needing expert attention | Articles needing expert attention since February 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


বাংলা
Français
日本語
Polski
Русский
Українська
中文









 This page was last modified on 8 March 2009, at 08:01 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
