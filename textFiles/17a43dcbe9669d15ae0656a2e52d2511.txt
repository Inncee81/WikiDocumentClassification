













Tool-assisted speedrun - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Tool-assisted_speedrun";
		var wgTitle = "Tool-assisted speedrun";
		var wgAction = "view";
		var wgArticleId = "1018614";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 272727790;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Tool-assisted speedrun

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




BisqBot, a robot designed to aid the creation of tool-assisted speedruns, finds the shortest path towards a desired powerup in Mega Man


A tool-assisted speedrun (abbreviated TAS) is a speedrun movie or performance of a video game produced by means of emulation and using features unavailable to regular players, such as slow motion or frame-by-frame advance of the gameplay, and re-recording of previous portions of a performance. The idea is that such "tools" compensate for human limitations in skill and reflex, facilitating gameplay techniques that are otherwise impossible or prohibitively difficult. Producers of tool-assisted speedruns do not compete with so-called "unassisted" speedrunners of video games.




Contents


1 History

1.1 1999–2001
1.2 2003–present


2 Method

2.1 Re-recording emulators
2.2 Rationale


3 Separation from unassisted runs

3.1 Timing conventions
3.2 Degree of glitch abuse
3.3 Entertainment factor


4 Glossary
5 See also
6 External links

6.1 References

6.1.1 Journal, newspaper and magazine articles
6.1.2 General informative sources


6.2 Footnotes and citations
6.3 External links







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History

[edit] 1999–2001
The term was originally coined during the early days of Doom speedrunning, during which the first of these runs were made (although they were sometimes also referred to as "built demos"). When Andy "Aurican" Kempling released a modified version of the Doom source code that made it possible to record demos in slow motion and in several sessions, it was possible for the first players to start recording tool-assisted demos. A couple of months afterwards, in June 1999, Esko Koskimaa, Peo Sjoblom and Joonatan Donner opened the first site to share these demos, which they aptly called "Tools-Assisted Speedruns".[1]
Like many other tool-assisted speedrun communities, the maintainers of the site stressed the fact that their demos were for entertainment purposes rather than skill competitions, although the attempt to attain the fastest time possible with tools itself became a competition as well.[2] The site became a success, updating usually several times a week with demos recorded by its maintainers and submitted by its readers. After a short while, when version 2.03 of Lee Killough's Marine's Best Friend Doom source port was released (based on the Boom source port), it became even easier for people to record these demos, adding the functionality of re-recording without having to replay the demo until it reached the point where you wanted to continue.
The site was active until August 10, 2001, at which point Yonathan Donner posted a news message stating that their site would be an archive from now on, and pointing towards The Doomed Speed Demos Archive, a site mainly for non-assisted speedruns, of which the author agreed to take over the posting of tool-assisted speedruns. Although popularity had dwindled since then, built demos have still been submitted until as late as November 2005, and are currently usually being made with PrBoom.[3]

[edit] 2003–present
In 2003, a video of a Japanese player called Morimoto beating the NES game Super Mario Bros. 3 in 11 minutes and performing some other incredible stunts as well started floating around the internet. It was a very controversial video because not many people knew about tool-assisted speedruns back then, especially for the NES. Many people felt like they had been cheated when they found out it was done using an emulator. That video, however, gave the inspiration to Joel "Bisqwit" Yliluoma to start a website called NESvideos, which was dedicated to tool-assisted speedruns for the NES. At first it hosted videos only for the NES, but as the community grew, members of the community managed to add the features required for tool-assisted speedrunning into other emulators for other systems. Later the name of the site was changed to TASvideos [3]. As of 2006, TASVideos is the largest English-language webcommunity which produces and hosts tool-assisted speedruns.
Tool-assisted speedruns have been made for some notable ROM hacks as well as for published games.[4]
A joke personification of tool-assisted speedruns, called TAS-san (Mr. TAS), has become popular among Japanese internet users. Tool-assisted speedruns uploaded to video sites like Nico Nico Douga or Youtube may be described as a new world record by TAS-san, who is said to have the superhuman memory and reflexes needed to execute such a speedrun in real time.

[edit] Method




A route planning sheet of Joel Yliluoma's Mega Man speedrun. Redundant routes have been scrapped and the most feasible one has been noted down in detail.


Creating a tool-assisted speed run is the process of finding the ideal set of inputs to complete a given criterion - usually completing a game as fast as possible. No limits are imposed on the tools used for this search, but the result has to be a set of timed key-presses that, when played back on the actual console, achieves the target criterion. The basic method used to construct such a set of inputs is to record one's input while playing the game on an emulator, using saving and loading the emulator's state repeatedly to test out various possibilities and only keep the best result. To make this more precise, the game is slowed down. Initially, it was common to slow down to some low fraction (e.g. 5%) of normal speed. However, due to advances in the field, it is now expected that frame-advance, manually stepping through emulation one frame at a time, is used. A tool-assisted speed run done without this technique may be criticised for sloppy play.
Frame-advance also facilitates another common technique, luck manipulation, which is the practice of exploiting the game's use of player input in its pseudo-random number generation to make favorable outfalls happen. Using a savestate from before some event, it is possible to experiment with small input variations until the event has the desired outcome. Depending on the game and event, this can be a very time consuming process, at times requiring much backtracking, and can as such take up a large portion of the total time spent making a tool-assisted speed run. Making the ideal piece drop next in Tetris, or getting a rare drop the first time one kills an enemy, are examples of luck-manipulation.
A rarely used tool is brute-force searching for ideal inputs by making a computer play the game, trying all possible inputs. In theory, this process could find the ideal set of inputs for any game, but since the space of all possible inputs grows exponentially with the length of the sequence, this is only viable for optimizing very small portions of the speed run.
Another rarely used technique is to disassemble the game executable. By exposing the game logic, this can make it possible to manipulate luck without trial and error, or reveal bugs in the game engine. A more common, related technique, is to monitor the memory addresses responsible for certain effects to learn why and when they change.
All these techniques involve direct interaction with the game state in ways not possible without emulation, but the final result, the set of inputs that makes up the speed run, does not depend on such manipulation of the state of the emulated machine. The tool use in tool-assisted speed running is therefore different from the sort of state manipulation tools like Gameshark provide, since such manipulation would not be expressible as a sequence of timed inputs.

[edit] Re-recording emulators
Tool-assisted speedrunning relies on the same series of inputs being played back at different times always giving the same results. In a manner of speaking, the emulation must be deterministic with regard to the saved inputs (e.g. random seeds must not change from run to run). Otherwise, a movie that was optimal on one playback might not even complete it on a second playback. This loss of synchronization, or "desync", occurs when the state of the emulated machine at a particular time index no longer corresponds with that which existed at the same point in the movie's production. Desyncs can also be caused by incomplete savestates, with which the emulated machine is restored in a state different from that which existed when it was saved.
Problems with emulation, such as nondeterminism and incomplete savestates, are often only discovered under the precise frame-by-frame conditions of tool-assisted speedrunning. Emulator developers often do not give speedrunning issues high priority because they have little effect on regular gameplay; consequentially the community has forked several emulators to make them suitable for the task. These include Snes9X improvement, Gens rerecording, VBA rerecording and Mupen rerecording. If a forked emulator is used to produce a TAS, playback on the normal, unmodified version of the emulator will usually result in a desync.
Emulators that currently feature the tools necessary to create tool-assisted speedruns include the Nintendo emulators Famtasia, FCE Ultra [4], Nintendulator and VirtuaNES, the Super Nintendo emulators Snes9x [5] and ZSNES [6], the Genesis emulator Gens [7], the Game Boy Advance emulator Visual Boy Advance [8], and the Nintendo 64 emulator Mupen64 [9][5].

[edit] Rationale
Tool-assisted speedruns are created for many reasons, the major ones being noted below:

To find a game's theoretical limit — runners are interested to find out what the fastest possible completion time for a game is under "perfect play," and tool-assisted speedruns allow for that.
To provide entertainment — tool-assisted speedruns (and speedruns in general) are fun to watch for many casual gamers.


[edit] Separation from unassisted runs
Tool-assisted speedruns are timed in a distinct category from unassisted runs, for reasons of fairness. In unassisted runs, a difficult path is often avoided in favour of an easier, but slower one, in order to avoid the risk of dying and having to start over. Depending on the game, the time differences between possible routes, along with other advantages from frame-by-frame precision, tool-assisted speedruns surpass their unassisted counterparts by a few seconds to entire hours. For example, the fastest Super Mario Bros. TAS currently stands at 04:58.18 (4'57" using Speed Demos Archive Timing), while the fastest unassisted run stands at 5'00". A trick in A Link to the Past allowing for walking through walls has allowed for an extremely short 3'45" TAS, but because the trick is impossible to reproduce in real time using a standard controller, the fastest unassisted run is over an hour long. Because unassisted speedruns can be made in much less time than tool-assisted speedruns, discovery of a time-saving trick may mean the fastest unassisted speedrun is faster than the fastest tool-assisted run. From August 13 to 21, 2007, the fastest unassisted speedrun of Pokémon Blue was 4 minutes faster than the best TAS, due to a new trick that allowed walking through walls. On August 21st, however, a TAS was submitted that was 20 minutes faster than the unassisted run.

[edit] Timing conventions
Tool-assisted runs are timed by input, i.e. from game power-on to the last input necessary such that the ending scene and/or game credits can not be prevented. Any introductory cutscenes, game-loading screens, and trailing dialogues after the last boss battle (if input is necessary to scroll through the text) are included in the final times. The times are exact (to the nearest frame), a level of precision that is not possible with unassisted runs because it cannot be determined from a recording when exactly the input ended. Speed Demos Archive and Twin Galaxies measure only the length of the gameplay proper, and begin timing when the player gains control of the character and ends timing when the player loses it. These differences in timing conventions can result in seemingly discrepant times between unassisted and tool-assisted runs. For example, the most recent Super Mario Bros. speedrun by Andrew G., an even five minutes by SDA timing, seems to be only 1.82 seconds slower than the current tool-assisted world record of 4 minutes and 58.18 seconds, but his run actually contains 5 minutes and 3 seconds of input.

[edit] Degree of glitch abuse
One of the most important differences between a tool-assisted and unassisted run, is the use of glitches in the game. Though glitch use is not uncommon in unassisted runs, many are negative towards them, some considering glitch use cheating. In tool-assisted speedrunning, glitches are held in much higher regard, to the degree that the term "glitch abuse" has positive connotations, and tool-assisted speedruns often make heavy use of them. This may in part be because the majority of glitches are very difficult to exploit without frame-precision and re-recording.



Tool-assisted speedruns usually extensively abuse glitches, such as this zipping trick which makes travelling through walls possible




[edit] Entertainment factor
These differences also lead to different expectations from tool-assisted and unassisted speedruns. Taking damage when doing so does not save time and/or is not required may look sloppy in a tool-assisted run, while being hit by the occasional hard-to-avoid enemy in a relatively long unassisted speedrun would not prevent the runner from holding his world record title. After the advent of frame-advance, frame-precise movement has also come to be expected, the lack of which may be characterized as sloppy play. Another difference is in the standards of use of waiting time in the speedrun: in situations where it is not possible to make the game move faster, and the player has to wait, such as in autoscrolling or any other areas of a game in which the runner does not have control over the speed, the runner is advised in TASvideos guidelines to do something entertaining for the viewers. An example of this is the gathering of 99 extra lives in the autoscrolling sections of the famous Super Mario Bros. 3 speedrun. In unassisted runs, however, players usually would not risk dying and having to start over to entertain the viewer.

[edit] Glossary
In the context of tool-assisted speedrunning, many common terms, usually neologisms, have been created. These terms are necessary to understand most general discussions about the phenomenon. This list covers the most ubiquitous terminology. Note that some words may have a different typical meaning outside of the lexicon of tool-assisted speedrunning; for example, frame applies to movies as well as to video games, but only the latter has relevance in this case.

Category


A particular intention or set of rules with which to record a speedrun, such as playing with different characters, collecting all items or achieving the best ending. Sometimes, when a glitch is found that allows extremely fast completion of a game, it will be considered a separate "category" as people may find the old way of doing it to be more enjoyable or otherwise interesting.


Emulator


Software which allows console games to run on modern platforms (computer architecture and/or operating system) and provides the runner with the common toolset, such as save states. Emulators that currently feature the tools necessary to create these tool-assisted speedruns include the Nintendo emulators Famtasia, FCE Ultra [10], Nintendulator and VirtuaNES, the Super Nintendo emulators Snes9x [11] and ZSNES [12], the Genesis emulator Gens [13], the Game Boy Advance emulator Visual Boy Advance [14], and the Nintendo 64 emulator Mupen64 [15].


Input


The data that is inserted into the game, either by the actions of a player (both during normal play and during speedrunning) or by an input file. The data can for example represent button presses/releases and joystick positions (e.g. with the Nintendo 64) on the controller, and even the reset button of the console if the emulator's input file format records these events.


Input file


A computer file that, among various other data, contains the analog or digital states of all buttons during every frame of a tool-assisted speedrun movie. This data is needed to reconstruct actions in a game, using an emulator. It may also contain a save state that is loaded at the beginning of the movie unless the movie starts from console power-on or reset (as is the case with most movies on the TASVideos website).


Frame


One of the still images composing the animation of a video game. Most gaming systems (and thus, emulators) update the screen 50 (PAL) or 60 (NTSC) times per second (although sometimes only every second or third frame is rendered on some systems, lag notwithstanding). Every update is called a frame. Almost all console systems check the input (which buttons are pressed on the controller) once per frame, which is therefore the highest possible resolution of input in tool-assisted speedrunning.


Frame advance


An emulation feature which allows for the manual progression of frames by pressing a button. It is similar to slow motion; however, the game is effectively paused until the player decides to resume the emulation for one frame. This is used in order to create input at exactly a specific time, seen as how one can find a particular moment simply by checking every frame at one's leisure.


Glitch


An unintentional feature in a game ― usually considered an error. Many games contain glitches, some very small and hardly notable but others very significant. Glitches are usually result of accidental or intentional sloppy programming. Because many console games are run on rather slow CPU power, perfect programming (such as pixel-perfect collision checks) would often be too slow. As a result, programming “shortcuts” have to be taken. See Speedrun#Glitch_usage for further information.


Hex editing, Binary editing


The act of editing the raw data that composes a binary file (usually done with a tool that displays the file data in hexadecimal numbers, hence the name hex editing). This is usually done in order to modify input files, such as to change small errors or to copy and paste parts of a movie. Due to its difficulty, it is fairly scarcely done.


Lag


The effect experienced when the game runs slower than its normal speed due to an excess of instructions for the CPU to calculate in the time of one frame. Thus, the CPU will spread the calculations over multiple frames. Because it cannot show the results of the calculations when expected, there will be identically rendered frames while it is working. Often, during lag, the game will ignore the player's input until the calculations are finished. There might also appear graphical anomalies, such as Head-Up Displays appearing in the wrong place. Note that lag often refers to delays experienced in computing communications, such as during online gaming.


Luck manipulation


The act of recording a beneficial pseudo-randomly generated result. Console gaming systems are actually computers; computers are actually calculators; calculators perform calculations; calculations are always predictable and repeatable with identical results. When a player “manipulates” his luck, he abuses the fact that with save states, he can try different methods of input to see how a game will react. Pseudo-randomly generated results in the context of video games (such as some instances of artificial intelligence or the obtaining of random power ups) may be examined and retried until the most opportune one is found.


Re-record, Re-recording


An instance of the usage of a savestate while recording a tool-assisted speedrun or the act of doing so. This is an essential and very typical part of tool-assisted speedrunning. See Re-recording (video gaming) for further information.


ROM


The read-only memory of a game cartridge dumped as a binary file on a separate file storage medium. It contains all data of a game cartridge, such as the programming as well as the graphics and music. Loading a ROM image of a game in an emulator is the usual method to play such games.


Savestate


A snapshot of the emulated system's state at that current moment. Restoring a saved savestate will revert the console and the game to that exact state, including the game's future outcomes of pseudo-random generators. This is known as a re-record when performed during the recording of a movie (input file).


Slow motion


The slowing down of an emulated system to make it easier to create input (thus increasing the potential precision). The usage of slow motion is crucial to tool-assisted speedrunning, as many of the esoteric techniques are impossible to perform without it due to mechanical and human limitations. Frame advance is the most accurate kind of slow motion.


TAS


Common abbreviation of tool-assisted speedrun. The word TAS is used in the tool-assisted speedrun community exactly like the word “run” is used in the unassisted speedrun community. (See Speedrun, § Glossary.)


Timeattack


Tool-assisted speedruns are sometimes called "timeattack". This most likely stems from the Japanese term “タイムアタック” (“taimuatakku”). In the English community, this term has mostly fallen out of favor.


[edit] See also

Speedrun — play-through of a computer or video game, in which the whole game or a select part of it, such as a single level, is played with the intent of completing it as quickly as possible, optionally with certain prerequisites
Re-recording — the act of using a save state while recording a tool-assisted speedrun
Time attack — a mode which allows the player to finish a game (or a part of it) as fast as possible, saving record times
Score attack — the attempt to reach a record logged point value in a game
Game demo — a freely distributed demonstration or preview of an upcoming or recently released computer or video game
Electronic sports — a general term used to describe computer and video games which are played as competitive sports


[edit] External links



Look up tool-assisted speedrun in
Wiktionary, the free dictionary.



[edit] References

[edit] Journal, newspaper and magazine articles

Turner, B. (2005). "Smashing the Clock". 1UP.com. http://www.1up.com/do/feature?cId=3142599&did=1. Retrieved on August 13 2005. 


Very extensive article about speedrunning, both tool-assisted and unassisted, in general.


Totilo, S. (2006). "Gamers Divided Over Freakish Feats Achieved With Tool-Assisted Speed Runs". MTV News. http://www.mtv.com/news/articles/1528811/20060417/index.jhtml. Retrieved on April 29 2006. 


Very well-informed article on the differences between unassisted and tool-assisted speedrunners and the reason why this causes controversy between the two camps.


Slashdot contributors (2004). "'Perfect' Zelda NES Speed Record Beaten". Slashdot. http://games.slashdot.org/article.pl?sid=04/04/24/2130200. Retrieved on May 25 2006. 


Posting of a tool-assisted speedrun on Slashdot, a news website and Internet forum.


Grohé, M., Coté, P. (2005). "Interview of Phil for September 2005 issue of GEE". NESVideos. http://bisqwit.iki.fi/nesvideos/Interviews/Phil/GEE2005.html. Retrieved on May 25 2006. 


Interview of a tool-assisted speedrunner about speedrunning in general.


Grohé, M., Yliluoma, J. (2005). "Interview of Bisqwit for September 2005 issue of GEE". NESVideos. http://bisqwit.iki.fi/nesvideos/Interviews/Bisqwit/GEE2005.html. Retrieved on May 25 2006. 


Interview of Joel Yliluoma, webmaster of TASVideos, currently the largest tool-assisted speedrunning website.


Orland K., Yliluoma, J. (2005). "Interview of Bisqwit for GameCritics". NESVideos. http://tasvideos.org/Interviews/Bisqwit/GameCritics2004.html. Retrieved on May 25 2006. 


Another interview of Joel Yliluoma, conducted in 2005, about speedrunning in general.


[edit] General informative sources

NESVideos contributors (2006). "Common Tricks". NESVideos. http://bisqwit.iki.fi/nesvideos/CommonTricks.html. Retrieved on October 16 2005. 


Documentation on commonly used tricks in tool-assisted speedruns.


TASVideos contributors (2006). "Glossary". TASVideos. http://tasvideos.org/Glossary.html. Retrieved on July 2 2006. 


An extensive glossary documenting all of the common terminology in the context of tool-assisted speedrunning.


[edit] Footnotes and citations


^ Doom tool-assisted speedrunning is sometimes referred to as "tools-assisted speedrunning", with the plural of tool. This was the name of the site that shared these demos. A news post after the creation of the site, however, read "Indeed, I was wrong and the site should be called 'Tool-Assisted Speedruns' rather than 'Tools-Assisted Speedruns'. I'm not going to redo the logo though."
^ Koskimaa, E., Sjoblom, P., & Donner, Y. (1999). "Information about Tools-Assisted Speedruns". http://www.doomworld.com/tas/about.html. Retrieved on April 8 2006. 
^ Merril, D. (2005). "The Doomed Speed Demos Archive". http://www.doomworld.com/sda/doom_sda.htm. Retrieved on April 8 2006. 
^ Some notable ROM hacks are speedrunned, such as the popular Super Demo World - The Legend Continues hack of Super Mario World. This is not considered 'cheating' in any sense, since the hacks themselves are different in layout from the original games. [1]
^ Raiscan hosts a list of the TASvideos community's recommended emulators for tool-assisted speedrunning at [2]



[edit] External links

TASVideos - A site hosting tool-assisted speedruns and TAS-related resources
Common tricks page on Bisqwit's TASVideos site, actively documenting techniques that may be used in tool-assisted speedruns.
GamesTech - Finalfighter's Rockman series tool-assisted speedrun planning site
SpeedRun videos - SpeedRun videos




Retrieved from "http://en.wikipedia.org/wiki/Tool-assisted_speedrun"
Categories: Video game gameplay | Competitive video gaming 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


日本語
Suomi









 This page was last modified on 23 February 2009, at 15:02 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
