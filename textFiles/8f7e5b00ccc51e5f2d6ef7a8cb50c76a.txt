













JavaServer Pages - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "JavaServer_Pages";
		var wgTitle = "JavaServer Pages";
		var wgAction = "view";
		var wgArticleId = "42910";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279745216;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-xml {line-height: normal;}
.source-xml li, .source-xml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for xml
 * CSS class: source-xml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-xml .de1, .source-xml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-xml  {}
.source-xml .head {}
.source-xml .foot {}
.source-xml .imp {font-weight: bold; color: red;}
.source-xml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-xml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-xml li.li2 {font-weight: bold;}
.source-xml .coMULTI {color: #808080; font-style: italic;}
.source-xml .es0 {color: #000099; font-weight: bold;}
.source-xml .br0 {color: #66cc66;}
.source-xml .st0 {color: #ff0000;}
.source-xml .nu0 {color: #cc66cc;}
.source-xml .sc0 {color: #00bbdd;}
.source-xml .sc1 {color: #ddbb00;}
.source-xml .sc2 {color: #339933;}
.source-xml .sc3 {color: #009900;}
.source-xml .re0 {color: #000066;}
.source-xml .re1 {font-weight: bold; color: black;}
.source-xml .re2 {font-weight: bold; color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); JavaServer Pages

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article includes a list of references or external links, but its sources remain unclear because it lacks inline citations. Please improve this article by introducing more precise citations where appropriate. (November 2007)







This article needs reorganization to meet Wikipedia's quality standards. There is good information here, but it is poorly organized; editors are encouraged to be bold and make changes to the overall structure to improve this article. (November 2007)


JavaServer Pages (JSP) is a Java technology that allows software developers to create dynamically-generated web sites, with HTML, XML, or other document types, in response to a Web client request. The technology allows Java code and certain pre-defined actions to be embedded into static content.
The JSP syntax adds additional XML-like tags, called JSP actions, to be used to invoke built-in functionality. Additionally, the technology allows for the creation of JSP tag libraries that act as extensions to the standard HTML or XML tags. Tag libraries provide a platform independent way of extending the capabilities of a Web server.
JSPs are compiled into Java Servlets by a JSP compiler. A JSP compiler may generate a servlet in Java code that is then compiled by the Java compiler, or it may generate byte code for the servlet directly. JSPs can also be interpreted on-the-fly, reducing the time taken to reload changes.




Contents


1 JSP and Servlets

1.1 JSP syntax
1.2 JSP scripting elements and objects

1.2.1 JSP implicit objects
1.2.2 Scripting elements


1.3 JSP actions

1.3.1 Examples of tags

1.3.1.1 jsp:include
1.3.1.2 jsp:forward
1.3.1.3 jsp:plugin




1.4 JSP Tag Libraries
1.5 JSP Standard Tag Library (JSTL)
1.6 JSP Technology in the Java EE 5 Platform


2 Internationalization
3 JSP 2.0
4 Model-view-controller paradigm
5 Example
6 See also
7 Further reading
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] JSP and Servlets
Architecturally, JSP may be viewed as a high-level abstraction of servlets that is implemented as an extension of the Servlet 2.1 API. Both servlets and JSPs were originally developed at Sun Microsystems. Starting with version 1.2 of the JSP specification, JavaServer Pages have been developed under the Java Community Process. JSR 53 defines both the JSP 1.2 and Servlet 2.3 specifications and JSR 152 defines the JSP 2.0 specification. As of May 2006 the JSP 2.1 specification has been released under JSR 245 as part of Java EE 5.

[edit] JSP syntax
A JavaServer Page may be broken down into the following pieces:

static data such as HTML
JSP directives such as the include directive
JSP scripting elements and variables
JSP actions
custom tags with correct library.

JSP directives control how the JSP compiler generates the servlet. The following directives are available:

include 
The include directive informs the JSP compiler to include a complete file into the current file. It is as if the contents of the included file were pasted directly into the original file. This functionality is similar to the one provided by the C preprocessor. Included files generally have the extension "jspf" (for JSP Fragment):


<%@ include file="somefile.jspf" %> 


page 
The page directive has several attributes.

import 
Results in a Java import statement being inserted into the resulting file.
contentType 
specifies the content that is generated. This should be used if HTML is not used or if the character set is not the default character set.
errorPage 
Indicates the page that will be shown if an exception occurs while processing the HTTP request.
isErrorPage 
If set to true, it indicates that this is the error page. Default value is false.
isThreadSafe 
Indicates if the resulting servlet is thread safe.
autoFlush 
To autoflush the contents. A value of true, the default, indicates that the buffer should be flushed when it is full. A value of false, rarely used, indicates that an exception should be thrown when the buffer overflows. A value of false is illegal when also using buffer="none".
session
To maintain session. A value of true (the default) indicates that the predefined variable session (of type HttpSession) should be bound to the existing session if one exists, otherwise a new session should be created and bound to it. A value of false indicates that no sessions will be used, and attempts to access the variable session will result in errors at the time the JSP page is translated into a servlet.
buffer
To set Buffer Size. The default is 8k and it is advisable that you increase it.
isELIgnored
Defines whether EL expressions are ignored when the JSP is translated.
language
Defines the scripting language used in scriptlets, expressions and declarations. Right now, the only possible value is "java".
extends
Defines the superclass of the class this JSP will become. You won't use this unless you REALLY know what you're doing - it overrides the class hierarchy provided by the Container.
info
Defines a String that gets put into the translated page, just so that you can get it using the generated servlet's inherited getServletInfo() method.
pageEncoding
Defines the character encoding for the JSP. The default is "ISO-8859-1"(unless the contentType attribute already defines a character encoding, or the page uses XML document syntax).




<%@ page import="java.util.*" %> <%-- example import --%>
<%@ page contentType="text/html" %> <%-- example contentType --%>
<%@ page isErrorPage="false" %> <%-- example for non error page --%>
<%@ page isThreadSafe="true" %> <%-- example for a thread safe JSP --%>
<%@ page session="true" %> <%-- example for using session binding --%>
<%@ page autoFlush="true" %> <%-- example for setting autoFlush --%>
<%@ page buffer="20kb" %> <%-- example for setting Buffer Size --%>


Note: Only the "import" page directive can be used multiple times in the same JSP.
taglib 
The taglib directive indicates that a JSP tag library is to be used. The directive requires that a prefix be specified (much like a namespace in C++) and the URI for the tag library description.


<%@ taglib prefix="myprefix" uri="taglib/mytag.tld" %>


[edit] JSP scripting elements and objects

[edit] JSP implicit objects
The following JSP implicit objects are exposed by the JSP container and can be referenced by the programmer:

out 
The JspWriter used to write the data to the response stream(output page).
page 
The servlet itself.
pageContext 
A PageContext instance that contains data associated with the whole page. A given HTML page may be passed among multiple JSPs.
request 
The HttpServletRequest object that provides HTTP request information.
response 
The HttpServletResponse object that can be used to send data back to the client.
session 
The HttpSession object that can be used to track information about a user from one request to another.
config 
Provides servlet configuration data.
application 
Data shared by all JSPs and servlets in the application.
exception 
Exceptions not caught by application code.


[edit] Scripting elements
There are three basic kinds of scripting elements that allow java code to be inserted directly into the servlet.

A declaration tag places a variable definition inside the body of the java servlet class. Static data members may be defined as well. Also inner classes should be defined here.


<%! int serverInstanceVariable = 1; %>

Declaration tags also allow methods to be defined.

<%!
   /** 
    * Converts the Object into a string or if
    * the Object is null, it returns the empty string.
    */
   public String toStringOrBlank( Object obj ){
       if(obj != null){
           return obj.toString();
       }
       return "";
   }
%>


A scriptlet tag places the contained statements inside the _jspService() method of the java servlet class.


<% int localStackBasedVariable = 1;
out.println(localStackBasedVariable); %>


An expression tag places an expression to be evaluated inside the java servlet class. Expressions should not be terminated with a semi-colon .


<%= "expanded inline data " + 1 %>


Also we can use the following tag to give comments in jsp:


<%-- Give your comments here --%>


[edit] JSP actions
JSP actions are XML tags that invoke built-in web server functionality. They are executed at runtime. Some are standard and some are custom (which are developed by Java developers). The following list contains the standard ones:

jsp:include 
Similar to a subroutine, the Java servlet temporarily hands the request and response off to the specified JavaServer Page. Control will then return to the current JSP, once the other JSP has finished. Using this, JSP code will be shared between multiple other JSPs, rather than duplicated.
jsp:param 
Can be used inside a jsp:include, jsp:forward or jsp:params block. Specifies a parameter that will be added to the request's current parameters.
jsp:forward 
Used to hand off the request and response to another JSP or servlet. Control will never return to the current JSP.
jsp:plugin 
Older versions of Netscape Navigator and Internet Explorer used different tags to embed an applet. This action generates the browser specific tag needed to include an applet.
jsp:fallback 
The content to show if the browser does not support applets.
jsp:getProperty 
Gets a property from the specified JavaBean.
jsp:setProperty 
Sets a property in the specified JavaBean.
jsp:useBean 
Creates or re-uses a JavaBean available to the JSP page.


[edit] Examples of tags

[edit] jsp:include


 <html>
    <head></head>
    <body>
        <jsp:include page="mycommon.jsp" >
            <jsp:param name="extraparam" value="myvalue" />
        </jsp:include>
        name:<%=request.getParameter("extraparam")%>
    </body>
 </html>


[edit] jsp:forward


 <jsp:forward page="subpage.jsp" >
    <jsp:param name="forwardedFrom" value="this.jsp" />
 </jsp:forward>

In this forwarding example, the request is forwarded to "subpage.jsp". The request handling does not return to this page.

[edit] jsp:plugin


 <jsp:plugin type=applet height="100%" width="100%"
 archive="myjarfile.jar,myotherjar.jar"
 codebase="/applets"
 code="com.foo.MyApplet" >
 <jsp:params>
 <jsp:param name="enableDebug" value="true" />
 </jsp:params>
 <jsp:fallback>
 Your browser does not support applets.
 </jsp:fallback>
 </jsp:plugin>

The plugin example illustrates a <html> uniform way of embedding applets in a web page. Before the advent of the <OBJECT> tag, there was no common way of embedding applets. Currently, the jsp:plugin tag does not allow for dynamically called applets. For example, jsp:params cannot be used with a charting applet that requires the data points to be passed in as parameters unless the number of data points is constant. You cannot, for example, loop through a ResultSet to create the jsp:param tags. Each jsp:param tag must be hand-coded. However, each of those jsp:param tags can have a dynamic name and a dynamic value.

[edit] JSP Tag Libraries
In addition to the pre-defined JSP actions, developers may add their own custom actions using the JSP Tag Extension API. Developers write a Java class that implements one of the Tag interfaces and provide a tag library XML description file that specifies the tags and the java classes that implement the tags.
Consider the following JSP.

<%@ taglib uri="mytaglib.tld" prefix="myprefix" %>
…
<myprefix:myaction> <%-- The start tag %>
…
</myprefix:myaction> <%-- The end tag %>
…

The JSP compiler will load the mytaglib.tld XML file and see that the tag 'myaction' is implemented by the java class 'MyActionTag'. The first time the tag is used in the file, it will create an instance of 'MyActionTag'. Then (and each additional time that the tag is used), it will invoke the method doStartTag() when it encounters the starting tag. It looks at the result of the start tag, and determines how to process the body of the tag. The body is the text between the start tag and the end tag. The doStartTag() method may return one of the following:

SKIP_BODY 
The body between the tag is not processed.
EVAL_BODY_INCLUDE 
Evaluate the body of the tag.
EVAL_BODY_TAG 
Evaluate the body of the tag and push the result onto stream (stored in the body content property of the tag).

Note: If tag extends the BodyTagSupport class, the method doAfterBody() will be called when the body has been processed just prior to calling the doEndTag(). This method is used to implement looping constructs.
When it encounters the end tag, it invokes the doEndTag() method. The method may return one of two values:

EVAL_PAGE 
This indicates that the rest of the JSP file should be processed.
SKIP_PAGE 
This indicates that no further processing should be done. Control leaves the JSP page. This is what is used for the forwarding action.

The myaction tag above would have an implementation class that looked like something below:


 public class MyActionTag extends TagSupport {
    // Releases all instance variables.
    public void release() {…}
 
    public MyActionTag() { … }
 
    // Called for the start tag
    public int doStartTag() { … }
 
    // Called at the end tag
    public int doEndTag(){ … }
 }

Add Body Tag description.
If you want to iterate the body a few times, then the java class (tag handler) implements IterationTag interface. It returns EVAL_BODY_AGAIN - which means to invoke the body again.

[edit] JSP Standard Tag Library (JSTL)
The JavaServer Pages Standard Tag Library (JSTL) is a component of the Java EE Web application development platform. It extends the JSP specification by adding a tag library of JSP tags for common tasks, such as XML data processing, conditional execution, loops and internationalization.

[edit] JSP Technology in the Java EE 5 Platform
The focus of Java EE 5 has been ease of development by making use of Java language annotations that were introduced by J2SE 5.0. JSP 2.1 supports this goal by defining annotations for dependency injection on JSP tag handlers and context listeners.
Another key concern of the Java EE 5 specification has been the alignment of its webtier technologies, namely JavaServer Pages (JSP), JavaServer Faces (JSF), and JavaServer Pages Standard Tag Library (JSTL).
The outcome of this alignment effort has been the Unified Expression Language (EL), which integrates the expression languages defined by JSP 2.0 and JSF 1.1.
The main key additions to the Unified EL that came out of the alignment work have been:
A pluggable API for resolving variable references into Java objects and for resolving the properties applied to these Java objects, Support for deferred expressions, which may be evaluated by a tag handler when needed, unlike their regular expression counterparts, which get evaluated immediately when a page is executed and rendered, and Support for lvalue expression, which appear on the left hand side of an assignment operation. When used as an lvalue, an EL expression represents a reference to a data structure, for example: a JavaBeans property, that is assigned some user input. The new Unified EL is defined in its own specification document, which is delivered along with the JSP 2.1 specification.
Thanks to the Unified EL, JSTL tags, such as the JSTL iteration tags, can now be used with JSF components in an intuitive way.
JSP 2.1 leverages the Servlet 2.5 specification for its web semantics

[edit] Internationalization
Internationalization in JSP is accomplished the same way as in a normal Java application, that is by using resource bundles.

[edit] JSP 2.0
The new version of the JSP specification includes new features meant to improve programmer productivity. Namely:

An Expression Language (EL) which allows developers to create Velocity-style templates (among other things).
A faster/easier way to display parameter values.


Hello, ${param.visitor} <%-- Same as: Hello, <%=request.getParameter("visitor")%> --%>


A clearer way to navigate nested beans


// Consider some beans.
 class Person {
    String name;
    // Person nests an organization bean.
    Organization organization;

    public String getName() { return this.name; }
    public Organization getOrganization() { return this.organization; }
 }

 class Organization {
    String name;
    public String getName() { return this.name; }
 }


// Then, if an instance of Person was to be placed onto a request attribute under the name "person"
<!-- The JSP would have -->
 Hello, ${person.name}, of company ${person.organization.name}
 <%-- Second expression same as 
    <% Person p = (Person) request.getAttribute("person");
        if (p != null) {
            Organization o = p.getOrganization();
            if (o != null) {
                out.print(o.getName());
            }
        }
    %>
 --%>


[edit] Model-view-controller paradigm
Sun recommends that the Model-view-controller pattern be used with the JSP files in order to split the presentation from request processing and computer data storage. Either regular servlets or separate JSP files are used to process the request. After the request processing has finished, control is passed to a JSP used only for creating the output. There are several platforms based on Model-view-controller pattern for web tiers (such as Barracuda, Apache Struts, Stripes or Spring MVC framework).

[edit] Example
Regardless of whether the JSP compiler generates Java source code for a servlet or emits the byte code directly, it is helpful to understand how the JSP compiler transforms the page into a Java servlet. For example, consider the following input JSP and its resulting generated Java Servlet.
Input JSP

 <%@ page errorPage="myerror.jsp" %>
 <%@ page import="com.foo.bar" %>
 
 <html>
 <head>
 <%! int serverInstanceVariable = 1;%>
 
 <% int localStackBasedVariable = 1; %>
 <table>
 <tr><td><%= toStringOrBlank( "expanded inline data " + 1 ) %></td></tr>

Resulting servlet


 package jsp_servlet;
 import java.util.*;
 import java.io.*;
 import javax.servlet.*;
 import javax.servlet.http.*;
 import javax.servlet.jsp.*;
 import javax.servlet.jsp.tagext.*;
 
 import com.foo.bar; // Imported as a result of <%@ page import="com.foo.bar" %>
 import …
 
 class _myservlet implements javax.servlet.Servlet, javax.servlet.jsp.HttpJspPage {
    // Inserted as a
    // result of <%! int serverInstanceVariable = 1;%>
    int serverInstanceVariable = 1;
    …
 
    public void _jspService( javax.servlet.http.HttpServletRequest request,
    javax.servlet.http.HttpServletResponse response )
    throws javax.servlet.ServletException,
    java.io.IOException
    {
        javax.servlet.ServletConfig config = …; // Get the servlet config
        Object page = this;
        PageContext pageContext = …;            // Get the page context for this request
        javax.servlet.jsp.JspWriter out = pageContext.getOut();
        HttpSession session = request.getSession( true );
        try {
            out.print( "<html>\r\n" );
            out.print( "<head>\r\n" );
            …
            // From <% int localStackBasedVariable = 1; %>
            int localStackBasedVariable = 1;
            …
            out.print( "<table>\r\n" );
            out.print( " <tr><td>" );
            // From <%= toStringOrBlank( "expanded inline data " + 1 ) %>
            out.print( toStringOrBlank( "expanded inline data " + 1 ) );
            out.print( " </td></tr>\r\n" );
            …
        } catch ( Exception _exception ) {
            // Clean up and redirect to error page in <%@ page errorPage="myerror.jsp" %>
        }
    }
 }


[edit] See also

JSTL
Java EE
JavaServer Faces
Java Servlet
WAR (Sun file format)
EAR (file format)
JAR (file format)
Apache Tomcat
Sun Java System Web Server
ASP
CFM


[edit] Further reading

Bergsten, Hans (2003). JavaServer Pages (3rd Edition ed.). O'Reilly Media. ISBN 978-0-596-00563-4. 
Kathy, Sierra; Bert Bates & Bryan Basham. Head First Servlets & JSP. O'Reilly Media. ISBN 978-0-596-00540-5. 


[edit] External links

JSP Questions
Sun's JSP product description
Learn JSP Tutorial - step by step
JSR 245 (JSP 2.1)
JSR 152 (JSP 2.0)
JSR 53 (JSP 1.2)
JSP 1.1 and 1.0
Free JSP training/learning materials
Quick JSP tutorial
Beginners JSP tutorial
Core Servlets and JavaServer Pages









v • d • e

Java





Java platform

Java ME · Java SE · Java EE · Java Card







Sun technologies

Java programming language · Squawk · Java Development Kit · OpenJDK · Java Virtual Machine · JavaFX






Major third-party technologies

JRockit · GNU Classpath · Kaffe · TopLink · Apache Harmony · Apache Struts · Spring framework · Hibernate · JBoss application server · Processing · Tapestry · Thinwire






History

Java version history · Criticism of Java · Java Community Process · Sun Microsystems · Free Java implementations






Language features

Bytecode · Syntax · Applets · Servlets · MIDlets · jsp · Web Start (jnlp)






Scripting languages

Java Tcl · Jython · JRuby · BeanShell · Groovy · Judoscript · Sleep · Bean Scripting Framework · Yoix · Rhino






Java conferences

JavaOne









Retrieved from "http://en.wikipedia.org/wiki/JavaServer_Pages"
Categories: Wikipedia articles needing reorganization | Java enterprise platform | Java specification requests | Template enginesHidden categories: Articles lacking in-text citations 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Català
Dansk
Deutsch
Español
Esperanto
Français
Galego
한국어
Hrvatski
Bahasa Indonesia
Italiano
עברית
Lietuvių
Magyar
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Simple English
Svenska
ไทย
Türkçe
Tiếng Việt
中文









 This page was last modified on 26 March 2009, at 05:17.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
