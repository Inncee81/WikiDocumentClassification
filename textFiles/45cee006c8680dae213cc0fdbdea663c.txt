













JavaScript syntax - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "JavaScript_syntax";
		var wgTitle = "JavaScript syntax";
		var wgAction = "view";
		var wgArticleId = "3824186";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 290688274;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); JavaScript syntax

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


This article is part of
the JavaScript series.



JavaScript


JavaScript syntax


ECMAScript


JavaScript topics



This box: view • talk • edit



The syntax of JavaScript is a set of rules that defines what constitutes a valid program in the JavaScript language.
 Note: The examples below often use an alert function to return standard text output. The JavaScript standard library lacks an official standard text output function. However, given that JavaScript is mainly used as a client-side scripting language within modern web browsers, and that almost all web browsers provide access to the alert function, alert is included in our examples.




Contents


1 Origin of Syntax
2 Syntax Basics

2.1 Case sensitivity
2.2 Whitespace and semicolons
2.3 Comments


3 Variables
4 Primitive data types

4.1 Numbers
4.2 Arrays
4.3 Strings


5 Operators

5.1 Arithmetic
5.2 Assignment
5.3 Comparison
5.4 Boolean
5.5 Bitwise
5.6 String


6 Control structures

6.1 If ... else
6.2 Conditional operator
6.3 Switch statement
6.4 For loop
6.5 For ... in loop
6.6 While loop
6.7 Do ... while
6.8 With


7 Functions
8 Objects

8.1 Creating objects
8.2 Constructors
8.3 Methods
8.4 Inheritance


9 Exceptions
10 See also
11 Notes
12 External links

12.1 Reference Material







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Origin of Syntax
Brendan Eich summarized the ancestry of the syntax in the first paragraph of the JavaScript 1.1 specification as follows:


“
JavaScript borrows most of its syntax from Java, but also inherits from Awk and Perl, with some indirect influence from Self in its object prototype system.”


[edit] Syntax Basics

[edit] Case sensitivity
JavaScript is case sensitive. It is common to start object names with a capitalised letter and functions or variables with a lower-case letter.

[edit] Whitespace and semicolons
Spaces, tabs and newlines used outside of string constants are called whitespace. Unlike C, whitespace in JavaScript source can directly impact semantics. Because of a technique called "semicolon insertion", some statements that are well formed when a newline is parsed will be considered complete (as if a semicolon were inserted just prior to the newline). Programmers are advised to supply statement-terminating semicolons explicitly although it degrades readability because it may lessen unintended effects of the automatic semicolon insertion.[citation needed]


return
a + b;
 
// Returns undefined. Treated as:
//   return;
//   a + b;

But:


a = b + c
(d + e).foo()
 
// No semicolon insertion. Treated as:
//   a = b + c(d + e).foo()


[edit] Comments
Comment syntax is the same as in C++ and many other languages.


// comment
 
/* multi-line
   comment */

Note that JavaScript explicitly forbids nesting of comments, e.g.


/* You can't do
   /* this */
*/


[edit] Variables
Variables in standard JavaScript have no type attached, and any value can be stored in any variable. Variables can be declared with a var statement. These variables are lexically scoped and once a variable is declared, it may be accessed anywhere inside the function where it is declared. Variables declared outside any function, and variables first used within functions without being declared with 'var', are global. Here is an example of variable declarations and global values:


x = 0; // A global variable
var y = 'Hello!'; // Another global variable
 
function f(){
  var z = 'foxes'; // A local variable
  twenty = 20; // Global because keyword var is not used
  return x; // We can use x here because it is global
}
// The value of z is no longer available


[edit] Primitive data types
The JavaScript language provides a handful of primitive data types. Some of the primitive data types also provide a set of named values that represent the extents of the type boundaries. These named values are described within the appropriate sections below.

[edit] Numbers
Numbers in JavaScript are represented in binary as IEEE-754 Doubles, which provides an accuracy to about 14 or 15 significant digits JavaScript FAQ 4.2. Because they are floating point numbers, they do not always exactly represent real numbers, including fractions.
This becomes an issue when formatting numbers. For example:


alert(0.94 - 0.01); // displays 0.9299999999999999

As a result, the toFixed() method should be used to round numbers whenever they are formatted for output.
Numbers may be specified in any of these notations:


345;    // an "integer", although there is only one numeric type in JavaScript
34.5;   // a floating-point number
3.45e2; // another floating-point, equivalent to 345
0377;   // an octal integer equal to 255
0xFF;   // a hexadecimal integer equal to 255, digits represented by the letters A-F may be upper or lowercase

In some ECMAScript implementations such as ActionScript, RGB color values are sometimes specified with hexadecimal integers:


var colorful = new Color( '_root.shapes' );
colorful.setRGB( 0x003366 );

The extents of the number type may also be described by named constant values:


Infinity;  // Construct equivalent to positive Infinity
-Infinity; // Negated Infinity construct, equal to negative Infinity
NaN;       // The Not-A-Number value, often returned as a failure in string-to-number conversions
<source>
 
The Number constructor, or a unary + or -, may be used to perform explicit numeric conversion:
<source lang="JavaScript">
var myString = "123.456";
var myNumber1 = Number( myString );
var myNumber2 = + myString ;

When used as a constructor, a numeric wrapper object is created, (though it is of little use):


myNumericWrapper = new Number( 123.456 );


[edit] Arrays
An Array is a native JavaScript type specifically designed to store data values indexed by integer keys. Arrays, unlike the basic Object type, are prototyped with methods and properties to aid the programmer in routine tasks (e.g., join, slice, and push).
While arrays can be used creatively in JavaScript, as compared to other languages in the C family (see below), by default they use a zero-based indexing scheme: the first data value added to an empty array with the helper push method would occupy the 0th index.


var myArray = [] // Point the variable myArray to a newly created, empty Array
myArray.push("hello world"); // Fill the next empty index, in this case 0
alert(myArray[0]); // returns "hello world"

Arrays have a length property that is guaranteed to always be larger than the largest integer index used in the array. It is automatically updated if one creates a property with an even larger index. Writing a smaller number to the length property will remove larger indices.
Elements of Arrays may be accessed using normal object property access notation:


myArray[1];
myArray["1"];

The above two are equivalent. It's not possible to use the "dot"-notation or strings with alternative representations of the number:


myArray.1;     // syntax error
myArray["01"]; // not the same as myArray[1]

Declaration of an array can use either an Array literal or the Array constructor:


myArray = [0,1,,,4,5];            // array with length 6 and 6 elements, including 2 undefined elements
myArray = new Array(0,1,2,3,4,5); // array with length 6 and 6 elements
myArray = new Array(365);         // an empty array with length 365

Arrays are implemented so that only the elements defined use memory; they are "sparse arrays". Setting myArray[10] = 'someThing' and myArray[57] = 'somethingOther' only uses space for these two elements, just like any other object. The length of the array will still be reported as 58.
You can use the object declaration literal to create objects that behave much like associative arrays in other languages:


dog = {"color":"brown", "size":"large"};
dog["color"]; // this gives you "brown"
dog.color; // this also gives you "brown"

You can use the object and array declaration literals to quickly create arrays that are associative, multidimensional, or both.


cats = [{"color":"brown", "size":"large"},
        {"color":"black", "size":"small"}];
cats[0]["size"]; // this gives you "large"
 
dogs = {"rover":{"color":"brown", "size":"large"},
        "spot":{"color":"black", "size":"small"}};
dogs["spot"]["size"]; // this gives you "small"


[edit] Strings
Strings in Javascript are a sequence of characters. Strings in JavaScript can be created directly by placing the series of characters between double or single quotes.


var greeting = "Hello, world!";
var another_greeting = 'Greetings, people of Earth.';

You can access individual characters within a string using the charAt() method (provided by String.prototype). This is the preferred way when accessing individual characters within a string, as it also works in Mozilla-based browsers:


var h = greeting.charAt(0); // Now h contains 'H' - Works in both Internet Explorer 
                            // and Mozilla based browsers

In Mozilla based browsers, individual characters within a string can be accessed (as strings with only a single character) through the same notation as arrays:


var h = greeting[0]; // Now h contains 'H' - Works in Mozilla based browsers

But, for Internet Explorer, however, JavaScript strings are immutable:


greeting[0] = "H"; // ERROR

Applying the equality operator ("==") to two strings returns true if the strings have the same contents, which means: of same length and same cases (for alphabets). Thus:


var x = "world";
var compare1 = ("Hello, " + x == "Hello, world"); // Now compare1 contains true
var compare2 = ("Hello, " + x == "hello, world"); // Now compare2 contains false since the
                                                  // first characters of both operands are
                                                  // not of the same case


[edit] Operators
The '+' operator is overloaded; it is used for string concatenation and arithmetic addition and also to convert strings to numbers. It also has special meaning when used in a regular expression.


// Concatenate 2 strings
var a = 'This';
var b = ' and that';
alert(a + b);  // displays 'This and that'
 
// Add two numbers
var x = 2;
var y = 6;
alert(x + y); // displays 8
 
// Adding a string and a number results in concatenation
alert(x + '2'); // displays 22
 
// Convert a string to a number
var z = '4';   // z is a string (the digit 4)
alert(z + x); // displays 42
alert(+z + x);// displays 6


[edit] Arithmetic
Binary operators

+     Addition
-     Subtraction
*     Multiplication
/     Division (returns a floating-point value)
%     Modulus (returns the integer remainder)

Unary operators

-     Unary negation (reverses the sign)
++    Increment (can be prefix or postfix)
--    Decrement (can be prefix or postfix)


[edit] Assignment

=     Assign
+=    Add and assign
-=    Subtract and assign
*=    Multiply and assign
/=    Divide and assign
%=    Modulus and assign



var x = 1;
x *= 3;
alert( x );  // displays: 3
x /= 3;
alert( x );  // displays: 1
x -= 1;
alert( x );  // displays: 0


[edit] Comparison

==    Equal
!=    Not equal
>     Greater than
>=    Greater than or equal to
<     Less than
<=    Less than or equal to

===   Identical (equal and of the same type)
!==   Not identical


[edit] Boolean
JavaScript has three logical boolean operators: && (logical AND), || (logical OR), and ! (logical NOT).
In the context of a boolean operation, all JavaScript values evaluate to true unless the value is the boolean false itself, the number 0, a string of length 0 (empty string), or one of the special values null, undefined, or NaN. The Boolean function can be used to explicitly perform this conversion:


Boolean( false );     // returns false
Boolean( 0 );         // returns false
Boolean( 0.0 );       // returns false
Boolean( "" );        // returns false
Boolean( null );      // returns false
Boolean( undefined ); // returns false
Boolean( NaN );       // returns false
// ONLY empty strings return false
Boolean("false");     // returns true
Boolean("0");         // returns true

The unary NOT operator ! first evaluates its operand in a boolean context, and then returns the opposite boolean value:


var a = 0;
var b = 9;
!a; // evaluates to true,  just as (Boolean( a ) == false)
!b; // evaluates to false, just as (Boolean( b ) == false)

A double use of the ! operator can be used to normalize a boolean value:


var arg = null;
arg = !!arg; // arg is now the value false, rather than null
 
arg = "finished"; // non-empty string
arg = !!arg; // arg is now the value true

In the earliest implementations of JavaScript and JScript, the && and || operators behaved in the same manner as their counterparts in other C derived programming languages, in that they always returned a boolean value:


x && y; // returns true if x AND y evaluate to true: (Boolean( x ) == Boolean( y ) == true), false otherwise
x || y; // returns true if x OR y evaluates to true, false otherwise

In the newer implementations, these operators return one of their operands:


expr1 && expr2; // returns expr1 if it evaluates to false, otherwise it returns expr2
expr1 || expr2; // returns expr1 if it evaluates to true, otherwise it returns expr2

This novel behavior is little known even among experienced JavaScripters, and can cause problems if one expects an actual boolean value.

Short-circuit logical operations means the expression will be evaluated from left to right until the answer can be determined. For example:

a || b is automatically true if a is true. There is no reason to evaluate b. a && b is false if a is false. There is no reason to evaluate b.

&&    and
||    or
!     not (logical negation)


[edit] Bitwise
Binary operators

&     And
|     Or
^     Xor

<<    Shift left  (zero fill)
>>    Shift right (sign-propagating); copies of the leftmost bit (sign bit) are shifted in from the
      left.
>>>   Shift right (zero fill)

      For positive numbers, >> and >>> yield the same result.

Unary operators

~     Not (inverts the bits)


[edit] String

=     Assignment
+     Concatenation
+=    Concatenate and assign

Examples


str = "ab" + "cd";   // "abcd"
str += "e";          // "abcde"


[edit] Control structures

[edit] If ... else


 if (expr)
 {
   //statements;
 }
 else if (expr2)
 {
   //statements;
 }
 else
 {
   //statements;
 }


[edit] Conditional operator
The conditional operator creates an expression that evaluates as one of two expressions depending on a condition. This is similar to the if statement that selects one of two statements to execute depending on a condition. I.e., the conditional operator is to expressions what if is to statements.


 var result = (condition) ? expression : alternative;

is the same as:


 if (condition)
 {
   result = expression;
 }
 else
 {
   result = alternative;
 }

Unlike the if statement, the conditional operator cannot omit its "else-branch".

[edit] Switch statement


 switch (expr) {
   case SOMEVALUE: 
     //statements;
     break;
   case ANOTHERVALUE: 
     //statements;
     break;
   default:
     //statements;
     break;
 }


break; is optional; however, it's recommended to use it in most cases, since otherwise code execution will continue to the body of the next case block.
Add a break statement to the end of the last case as a precautionary measure, in case additional cases are added later.
Strings can be used for the case values.
Braces are required.


[edit] For loop


 for (initial;condition;loop statement) {
   /*
     statements will be executed every time
     the for{} loop cycles, while the
     condition is satisfied
   */
 }

or


 for (initial;condition;loop statement) // one line of statements


[edit] For ... in loop


 for (var property-name in object-name) {
   //statements using object-name[property-name];
 }


Iterates through all enumerable properties of an object.
Sources differ on whether this is usable for arrays[1].
There are differences between the various web browsers with regard to which properties will be reflected with the for...in loop statement. In theory, this is controlled by an internal state property defined by the ECMAscript standard called "DontEnum", but in practice each browser returns a slightly different set of properties during introspection.


[edit] While loop


 while (condition) {
   statements;
 }


[edit] Do ... while


 do {
   statements;
 } while (condition);


[edit] With


 with(document) {
   var a = getElementById('a');
   var b = getElementById('b');
   var c = getElementById('c');
 };


Note the absence of document. before each getElementById() invocation.


[edit] Functions
A function is a block with a (possibly empty) parameter list that is normally given a name. A function may contain local variables return a value.


function gcd(segmentA, segmentB) {
  var diff = segmentA - segmentB
  if (diff == 0) return segmentA
  if (diff > 0) 
     return gcd(segmentB, diff)
  else
     return gcd(setgmentA, -diff)
}
alert(gcd(60, 40)); // 20

The number of arguments given when calling a function may not necessarily correspond to the number of arguments in the function definition; a named argument in the definition that does not have a matching argument in the call will have the value undefined. Within the function, the arguments may also be accessed through the arguments object; this provides access to all arguments using indices (e.g. arguments[0], arguments[1], ... arguments[n]), including those beyond the number of named arguments. Note that while the arguments list has a .length property, it is not an instance of Array; it does not have methods such as .slice(), .sort(), etc.
All parameters are passed by value (for objects it is the reference to the object that is passed).


var obj1 = {a:1}
var obj2 = {b:2}
function foo(p) {
  p = obj2; // ignores actual parameter
  p.b = arguments[1]
}
foo(obj1, 3) // Does not affect obj1 at all.  3 is additional parameter
alert(obj1.a + " " + obj2.b); // writes 1 3

Functions can be declared inside other functions, and access the outer function's local variables. Furthermore they impelement closures by remembering the outer function's local variables even after the outer function has exited.


var v = "top"
var bar
function foo() {
  var v = "foo"
  bar = function() {alert(v)}
}
foo()
bar() // writes "foo", not "top" even though foo() has exited.


[edit] Objects
For convenience, Types are normally subdivided into primitives and objects. Objects are entities that have an identity (they are only equal to themselves) and that map property names to values, ("slots" in prototype-based programming terminology). Objects may be thought of as associative arrays or hashes, and are often implemented using these data structures. However, objects have additional features, such as a prototype chain, which ordinary associative arrays do not have.
JavaScript has several kinds of built-in objects, namely Array, Boolean, Date, Function, Math, Number, Object, RegExp and String. Other objects are "host objects", defined not by the language but by the runtime environment. For example, in a browser, typical host objects belong to the DOM (window, form, links etc.).

[edit] Creating objects
Objects can be created using a constructor or an object literal. The constructor can use either the built-in Object function or a custom function. It is a convention that constructor functions are given a name that starts with a capital letter:


// Constructor
var anObject = new Object();
 
// Object literal
var objectA = {};
var objectB = {index1:'value 1', index2:'value 2'};
 
// Custom constructor (see below)

Object literals and array literals allow one to easily create flexible data structures:


var myStructure = {
  name: {
    first: "Mel",
    last: "Smith"
  },
  age: 33,
  hobbies: [ "chess", "jogging" ]
};

This is the basis for JSON, which is a simple notation that uses JavaScript-like syntax for data exchange.

[edit] Constructors
Constructor functions simply assign values to slots of a newly created object. The values may be values or other functions.
Unlike other object oriented languages, javascript objects do not really have a type other than their values. The constructor function that happened to be used to create them is not remembered. Thus the constructor function does not really correspond to a "class" in other languages. It just assigns the new object's slots and prototype.
Functions are objects themselves, which can be used produce an effect similar to "static properties" (using C++/Java terminology) as shown below. (The function object also has a special prototype property, as discussed in the Inheritance section below.)
Object deletion is rarely used as the scripting engine will garbage collect objects that are no longer being referenced.
Example: Manipulating an object


function MyObject(attributeA, attributeB) {
  this.attributeA = attributeA;
  this.attributeB = attributeB;
}
 
MyObject.staticC = " blue"; // On MyObject Function, not obj
alert(MyObject.staticC); // blue
 
obj = new MyObject(' red', 1000);
 
alert(obj.attributeA); // red
alert(obj["attributeB"]); // 1000
 
alert(obj.staticC); // undefined
 
obj.attributeC = new Date(); // add a new property
 
delete obj.attributeB; // remove a property of obj
alert(obj.attributeB); // undefined
 
delete obj; // remove the whole Object (rarely used)
alert(obj.attributeA); // throws an exception


[edit] Methods
A method is simply a function that is assigned to the value of an object's slot. Unlike many object-oriented languages, there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling; a function can be called as a method.
Note that in the example below, Foo is simply assigning values to slots, some of which are functions. Thus it can assign different functions to different instances. There is no prototyping in this example.


function y2() {return this.xxx + "2 ";}
 
function Foo(xz) {
  this.xxx = "yyy-";
  if (xz > 0) 
    this.xx = function() {return this.xxx +"X ";};
  else 
    this.xx = function() {return this.xxx +"Z ";};
  this.yy = y2;
}
 
var foo1 = new Foo(1);
var foo2 = new Foo(0);
 
foo1.y3 = y2; // Assigns the function itself, not its evaluated result, i.e. not y2()
foo2.xxx = "aaa-";
 
alert("foo1/2 " + foo1.xx() + foo2.xx());
// foo1/2 yyy-X aaa-Z 
 
var baz={"xxx": "zzz-"}
baz.y4 = y2 // No need for a constructor to make an object.
 
alert("yy/y3/y4 " + foo1.yy() + foo1.y3() + baz.y4());
// yy/y3/y4 yyy-2 yyy-2 zzz-2
 
foo1.y2(); // Throws an exception, because foo1.y2 doesn't exist.


[edit] Inheritance
JavaScript supports inheritance hierarchies through prototyping in the manner of Self.
In the following example, the Derive class inherits from the Base class. When d is created as a Derive, the reference to the base instance of Base is copied to d. base.
Derive does not contain a value for aBaseFunction, so it is retrieved from Base when aBaseFunction is accessed. This is made clear by changing the value of base.aBaseFunction, which is reflected in the value of d.aBaseFunction.
Some implementations allow the prototype to be accessed or set explicitly using the __proto__ slot as shown below.


function Base() {
  this.anOverride = function() {alert("Base::anOverride()");};
 
  this.aBaseFunction = function() {alert("Base::aBaseFunction()");};
}
 
function Derive() {
  this.anOverride = function() {alert("Derive::anOverride()");};
}
 
base = new Base();
Derive.prototype = base; // Must be before new Derive()
 
d = new Derive(); // Copies Derive.prototype to d instance's hidden prototype slot.
 
base.aBaseFunction = function() {alert("Base::aNEWBaseFunction()")}
 
d.anOverride(); // Derive::anOverride()
d.aBaseFunction(); // Base::aNEWBaseFunction()
alert(d.aBaseFunction == Derive.prototype.aBaseFunction); // true
 
alert(d.__proto__ == base); // true in Mozilla-based implementations but false in many other implementations

The following shows clearly how references to prototypes are copied on instance creation, but that changes to a prototype can affect all instances that refer to it.


function m1() {return "One ";}
function m2() {return "Two ";}
function m3() {return "Three ";}
 
function Base() {}
 
Base.prototype.yyy = m2;
bar = new Base();
alert("bar.yyy " + bar.yyy()); // bar.yyy Two 
 
function Top(){this.yyy = m3}
ttt = new Top();
 
foo = new Base();
Base.prototype = ttt;
  // No effect on foo, the *reference* to ttt is copied.
alert("foo.yyy " + foo.yyy()); // foo.yyy Two 
 
baz = new Base();
alert("baz.yyy " + baz.yyy()); // baz.yyy Three 
 
ttt.yyy = m1; // Does affect baz, and any other derived classes.
alert("baz.yyy1 " + baz.yyy()); // baz.yyy1 One

In practice many variations of these themes are used, and it can be both powerful and confusing.

[edit] Exceptions
Newer versions of JavaScript (as used in Internet Explorer 5 and Netscape 6) include a try ... catch ... finally exception handling statement to handle run-time errors.[citation needed]
The try ... catch ... finally statement catches exceptions resulting from an error or a throw statement. Its syntax is as follows:


try {
  // Statements in which exceptions might be thrown
} catch(errorValue) {
  // Statements that execute in the event of an exception
} finally {
  // Statements that execute afterward either way
}

Initially, the statements within the try block execute. If an exception is thrown, the script's control flow immediately transfers to the statements in the catch block, with the exception available as the error argument. Otherwise the catch block is skipped. The Catch block can throw(errorValue) if it does not want to handle a specific error.
In any case the statements in the finally block are always executed. This can be used to free resources, although memory is automatically garbage collected.
Either the catch or the finally clause may be omitted. The catch argument is also required.
The Mozilla implementation allows for multiple catch statements, as an extension to the ECMAScript standard. They follow a syntax similar to that used in Java:


try { statement; }
catch ( e if e == "InvalidNameException"  ) { statement; }
catch ( e if e == "InvalidIdException"    ) { statement; }
catch ( e if e == "InvalidEmailException" ) { statement; }
catch ( e ) { statement; }

In a browser, the onerror event is more commonly used to trap exceptions.


function handleErr(errorValue,url,lineNr){...; return true;}
onerror=handleErr;


[edit] See also

JavaScript
ECMAScript
JScript
Comparison of Javascript-based source code editors


[edit] Notes

^ The issue is whether it would iterate not only through the array indices, but also through other visible properties. An article in the Microsoft Developer Network websitespecifically states that For...In can be used for "stepping through ... all the elements of an array". The MSDN article refers to JScript, which is, effectively, what is used by Internet Explorer for JavaScript script. An example in the W3Schools website gives arrays as an example of the use of For...In. An article in the Mozilla Developer Centre explains more about the problem: "Although it may be tempting to use this as a way to iterate over Array elements, because the for...in statement iterates over user-defined properties in addition to the array elements, if you modify the Array object, such as adding custom properties or methods, the for...in statement will return the name of your user-defined properties in addition to the numeric indexes. Thus it is better to use a traditional for loop with a numeric index when iterating over arrays."


[edit] External links

[edit] Reference Material

David Flanagan, Paula Ferguson: JavaScript: The Definitive Guide, O'Reilly & Associates, ISBN 0-596-10199-6
Danny Goodman: JavaScript Bible, Wiley, John & Sons, ISBN 0-7645-3342-8
Thomas A. Powell, Fritz Schneider: JavaScript: The Complete Reference, McGraw-Hill Companies, ISBN 0-07-219127-9
Emily Vander Veer: JavaScript For Dummies, 4th Edition, Wiley, ISBN 0-7645-7659-3
Mozilla JavaScript Language Documentation
A re-introduction to JavaScript - Mozilla Developer Center
Interactive JavaScript Lessons - example-based
JavaScript on About.com: lessons and explanation
ECMAScript standard references: ECMA-262
Mozilla Developer Center Core References for JavaScript versions 1.5, 1.4, 1.3 and 1.2




Wikibooks has a book on the topic of
Programming:JavaScript






Retrieved from "http://en.wikipedia.org/wiki/JavaScript_syntax"
Categories: JavaScript programming languageHidden categories: All articles with unsourced statements | Articles with unsourced statements since June 2008 | Articles with unsourced statements since May 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Français









 This page was last modified on 18 May 2009, at 10:28 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
