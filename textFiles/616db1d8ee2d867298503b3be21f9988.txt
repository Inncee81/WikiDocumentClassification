













Change management (engineering) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Change_management_(engineering)";
		var wgTitle = "Change management (engineering)";
		var wgAction = "view";
		var wgArticleId = "4780628";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 286651920;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Change management (engineering)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
This article is about Change Management in systems Engineering.  For other uses, see Change Management.
The Change Management process in Systems Engineering is the process of requesting, determining attainability, planning, implementing and evaluation of changes to a system. It has two main goals : supporting the processing of changes – which is mainly discussed here – and enabling traceability of changes, which should be possible through proper execution of the process described here.[1]




Contents


1 Introduction
2 The process and its deliverables

2.1 Activities
2.2 Deliverables
2.3 Examples


3 Change management in industrial plants
4 See also
5 References
6 Further reading





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Introduction
There is considerable overlap and confusion between change management, change control and configuration management. The definition below does not yet integrate these.
Change management is an important process, because it can deliver vast benefits (by improving the system and thereby satisfying "customer needs"), but also enormous problems (by ruining the system and/or mixing up the change administration). Furthermore, at least for the Information Technology domain, more funds and work are put into system maintenance (which involves change management) than to the initial creation of a system.[2] Typical investment by organizations during initial implementation of large ERP systems is 15-20% of overall budget.
In the same vein, Hinley [3] describes two of Lehman’s laws of software evolution: the law of continuing change (i.e. systems that are used must change or automatically become less useful) and the law of increasing complexity (i.e. through changes the structure of a system becomes ever more complex and more resources are needed to simplify it).
The field of manufacturing is nowadays also confronted with many changes due to increasing and worldwide competition, technological advances and demanding customers.[4] Therefore, (efficient and effective) change management is also of great importance in this area.
It is not unthinkable that the above statements are true for other domains as well, because usually, systems tend to change and evolve as they are used. Below, a generic change management process and its deliverables are discussed, followed by some examples of instances of this process.
Notes: In the process below, it is arguable that the change committee should be responsible not only for accept/reject decisions, but also prioritization, which influences how change requests are batched for processing.

[edit] The process and its deliverables
For the description of the change management process, the meta-modeling technique is used. Figure 1 depicts the process-data diagram, which is explained in this section.


[edit] Activities
There are six main activities, which jointly form the change management process. They are: Identify potential change, Analyze change request, Evaluate change, Plan change, Implement change and Review and close change. These activities are executed by four different roles, which are discussed in Table 1. The activities (or their sub-activities, if applicable) themselves are described in Table 2.

Table 1: Role descriptions for the change management process

Role
Description


Customer
The customer is the role that requests a change due to problems encountered or new functionality requirements; this can be a person or an organizational entity and can be in- or external to the company that is asked to implement the change.


Project manager
The project manager is the owner of the project that the CHANGE REQUEST concerns. In some cases there is a distinct change manager, who in that case takes on this role.


Change committee
The change committee decides whether a CHANGE REQUEST will be implemented or not. Sometimes this task is performed by the project manager as well.


Change builder
The change builder is the person who plans and implements the change; it could be argued that the planning component is (partially) taken on by the project manager.



Table 2: Activity descriptions for the change management process

Activity
Sub-activity
Description


Identify potential change
Require new functionality[5]
A customer desires new functionality and formulates a REQUIREMENT.



Encounter problem[5]
A customer encounters a problem (e.g. a bug) in the system and this leads to a PROBLEM REPORT.



Request change
A customer proposes a change through creation of a CHANGE REQUEST.


Analyze change request
Determine technical feasibility
The project manager determines the technical feasibility of the proposed CHANGE REQUEST, leading to a CHANGE TECHNICAL FEASIBILITY.



Determine costs and benefits
The project manager determines the costs and benefits of the proposed CHANGE REQUEST, resulting in CHANGE COSTS AND BENEFITS. This and the above sub-activity can be done in any order and they are independent of each other, hence the modeling as unordered activities.


Evaluate change

Based on the CHANGE REQUEST, its CHANGE TECHNICAL FEASIBILITY and CHANGE COSTS AND BENEFITS, the change committee makes the go/no-go decision. This is modeled as a separate activity because it is an important process step and has another role performing it. It is modeled as a sub-activity (without any activity containing it) as recommended by Remko Helms (personal communication).


Plan change
Analyze change impact
The extent of the change (i.e. what other items the change effects) is determined in a CHANGE IMPACT ANALYSIS. It could be argued that this activity leads to another go/no-go decision, or that it even forms a part of the Analyze change request activity. It is modeled here as a planning task for the change builder because of its relationship with the activity Propagate change.



Create planning
A CHANGE PLANNING is created for the implementation of the change. Some process descriptions (e.g. Mäkäräinen, 2000) illustrate that is also possible to ‘save’ changes and process them later in a batch. This activity could be viewed as a good point to do this.


Implement change
Execute change
The change is ‘programmed’; this activity has a strong relationship with Propagate change, because sometimes the change has to be adapted to other parts of the system (or even other systems) as well.



Propagate change
The changes resulting from Execute change have to be propagated to other system parts that are influenced by it. Because this and the above sub-activity are highly dependent on each other, they have been modeled as concurrent activities.



Test change
The change builder tests whether what (s)he has built actually works and satisfies the CHANGE REQUEST. As depicted in the diagram, this can result in an iterative process together with the above two sub-activities.



Update documentation
The DOCUMENTATION is updated to reflect the applied changes.



Release change
A new SYSTEM RELEASE, which reflects the applied change, is made public.


Review and close change
Verify change
The implementation of the change in the new SYSTEM RELEASE is verified for the last time, now by the project manager. Maybe this has to happen before the release, but due to conflicting literature sources and diagram complexity considerations it was chosen to model it this way and include this issue.



Close change
This change cycle is completed, i.e. the CHANGE LOG ENTRY is wrapped up.



[edit] Deliverables
Besides activities, the process-data diagram (Figure 1) also shows the deliverables of each activity, i.e. the data. These deliverables or concepts are described in Table 3; in this context, the most important concepts are: CHANGE REQUEST and CHANGE LOG ENTRY.
A few concepts are defined by the author (i.e. lack a reference), because either no (good) definitions could be found, or they are the obvious result of an activity. These concepts are marked with an asterisk (‘*’). Properties of concepts have been left out of the model, because most of them are trivial and the diagram could otherwise quickly become too complex. Furthermore, some concepts (e.g. CHANGE REQUEST, SYSTEM RELEASE) lend themselves for the versioning approach as proposed by Weerd [6], but this has also been left out due to diagram complexity constraints.

Table 3: Concept descriptions for the change management process

Concept
Description


REQUIREMENT
A required functionality of a component (or item; NASA, 2005).


PROBLEM REPORT
Document describing a problem that cannot be solved by a level 1 help desk employee; contains items like date, contact info of person reporting the problem, what is causing the problem, location and description of the problem, action taken and disposition, but this is not depicted in the diagram (Dennis, et al., 2002).


CHANGE REQUEST
Document that describes the requested change and why it is important; can originate from PROBLEM REPORTS, system enhancements, other projects, changes in underlying systems and senior management, here summarized as REQUIREMENTS (Dennis, et al., 2002). Important attribute: ‘go/no-go decision’, i.e. is the change going to be executed or not?


CHANGE LOG ENTRY*
Distinct entry in the collection of all changes (e.g. for a project); consists of a CHANGE REQUEST, CHANGE TECHNICAL FEASIBILITY, CHANGE COSTS AND BENEFITS, CHANGE IMPACT ANALYSIS, CHANGE PLANNING, TEST REPORT and CHANGE VERIFICATION. Not all these have to be included if the process is terminated earlier (i.e. if the change is not implemented).


CHANGE TECHNICAL FEASIBILITY
Concept that indicates whether or not “reliable hardware and software, technical resources capable of meeting the needs of a proposed system [i.e. change request] can be acquired or developed by an organization in the required time” (Vogl, 2004).


CHANGE COSTS AND BENEFITS
The expected effort required to implement and the advantages (e.g. cost savings, increased revenue) gained by implementing the change. Also named economic feasibility (Vogl, 2004).


CHANGE IMPACT ANALYSIS
An assessment of the extent of the change (Rajlich, 1999).


CHANGE PLANNING
“A scheme, method or design for the attainment of some objective or to achieve something [i.e. the change]” (Georgetown University, n.d.), in this case the change.


ITEM
“A non-specific term used to denote any product, including systems, subsystems, assemblies, subassemblies, units, sets, accessories, computer programs, computer software or parts” (Rigby, 2003); has (overlapping) subtypes ADDED ITEM and CHANGED ITEM.


ADDED ITEM*
Self-explanatory: a newly created ITEM; subtype of ITEM.


CHANGED ITEM*
Self-explanatory: an ITEM that already existed, but has been altered; subtype of ITEM.


TEST REPORT
“A document that describes the conduct and results of the testing carried out for a system or component [affected by the change]” (IEEE, 1991).


DOCUMENTATION
According to the Pennsylvania State University Libraries (2004) definition, DOCUMENTATION is “[p]rinted material which accompanies other materials (usually non-book), and which explains, gives instructions for use, or otherwise functions as a guide to the major materials.” In this context, it can also be digital materials or even training, as long as it relates to (pieces of) the system.


SYSTEM RELEASE
“[M]erchandise issued for sale or public showing” (Princeton University, 2003). Consists of one or more ITEMS and the accompanying DOCUMENTATION.


CHANGE VERIFICATION
A determination of whether or not the result of the change implementation fulfills the requirements established earlier (Rigby, 2003).


Besides just ‘changes’, one can also distinguish deviations and waivers.[7] A deviation is an authorization (or a request for it) to depart from a requirement of an item, prior to the creation of it. A waiver is essentially the same, but than during or after creation of the item. These two approaches can be viewed as minimalistic change management (i.e. no real solution to the problem at hand).

[edit] Examples
A good example of the change management process in action can be found in software development. Often users report bugs or desire new functionality from their software programs, which leads to a change request. The product software company then looks into the technical and economical feasibility of implementing this change and consequently it decides whether the change will actually be realized. If that indeed is the case, the change has to be planned, for example through the usage of function points. The actual execution of the change leads to the creation and/or alteration of software code and when this change is propagated it probably causes other code fragments to change as well. After the initial test results seem satisfactory, the documentation can be brought up to date and be released, together with the software. Finally, the project manager verifies the change and closes this entry in the change log.

Another typical area for change management in the way it is treated here, is the manufacturing domain. Take for instance the design and production of a car. If for example the vehicle’s air bags are found to automatically fill with air after driving long distances, this will without a doubt lead to customer complaints (or hopefully problem reports during the testing phase). In turn, these produce a change request (see Figure 2 on the right), which will probably justify a change. Nevertheless, a – most likely simplistic – cost and benefit analysis has to be done, after which the change request can be approved. Following an analysis of the impact on the car design and production schedules, the planning for the implementation of the change can be created. According to this planning, the change can actually be realized, after which the new version of the car is hopefully thoroughly tested before it is released to the public.

[edit] Change management in industrial plants
Since complex processes can be very sensitive to even small changes, proper management of change to industrial facilities and processes is recognized as critical to safety. In the US, OSHA has regulations that govern how changes are to be made and documented. The main requirement is that a thorough review of a proposed change be performed by a multi-disciplinary team to ensure that as many possible viewpoints are used to minimize the chances of missing a hazard. In this context, change management is known as Management of Change, or MOC. It is just one of many components of Process Safety Management, section 1910.119(l).1

[edit] See also

Change control
Change management
PRINCE2
ITIL
Versioning
Release Management
Software life cycle
Application Lifecycle Management
Systems engineering
Issue tracking system


[edit] References

^ Crnkovic, Asklund & Persson-Dahlqvist, 2003
^ Dennis, Wixom & Tegarden, 2002.
^ Hinley 1996.
^ Huang & Mak, 1999.
^ a b Actually, not both Require new functionality and Encounter problem have to occur in order to get a CHANGE REQUEST; usually only one of the two will. Modeling them as unordered activities approximately approaches this meaning; an alternative would be to create two separate ‘starting points’ (i.e. initial states), both pointing to Request change.
^ Weerd 2006
^ Scott & Nisse, 2001.


[edit] Further reading

Crnkovic I., Asklund, U. & Persson-Dahlqvist, A. (2003). Implementing and Integrating Product Data Management and Software Configuration Management. London: Artech House.
Dennis, A., Wixom, B.H. & Tegarden, D. (2002). System Analysis & Design: An Object-Oriented Approach with UML. Hoboken, New York: John Wiley & Sons, Inc.
Georgetown University (n.d.). Data Warehouse: Glossary. Retrieved April 13, 2006 from: http://uis.georgetown.edu/departments/eets/dw/GLOSSARY0816.html.
Hinley, D.S. (1996). Software evolution management: a process-oriented perspective. Information and Software Technology, 38, 723-730.
Huang, G.H. & Mak, K.L. (1999). Current practices of engineering change management in UK manufacturing industries. International Journal of Operations & Production Management, 19(1), 21-37.
IEEE (1991). Standard Glossary of Software Engineering Terminology (ANSI). The Institute of Electrical and Electronics Engineers Inc. Retrieved April 13, 2006 from: http://www.ee.oulu.fi/research/ouspg/sage/glossary/#reference_6.
Mäkäräinen, M. (2000). Software change management processes in the development of embedded software. PhD dissertation. Espoo: VTT Publications. Available online: http://www.vtt.fi/inf/pdf/publications/2000/P416.pdf.
NASA (2005). NASA IV&V Facility Metrics Data Program - Glossary and Definitions. Retrieved March 4, 2006 from: http://mdp.ivv.nasa.gov/mdp_glossary.html.
Pennsylvania State University Libraries (2004). CCL Manual: Glossary of Terms and Acronyms. Retrieved April 13, 2006 from: http://www.libraries.psu.edu/tas/ cataloging/ccl/glossary.htm.
Princeton University (2003). WordNet 2.0. Retrieved April 13, 2006 from: http://dictionary.reference.com/search?q=release.
Rajlich, V. (1999). Software Change and Evolution. In Pavelka, J., Tel, G. & Bartošek, M. (Eds.), SOFSEM'99, Lecture Notes in Computer Science 1725, 189-202.
Rigby, K. (2003). Managing Standards: Glossary of Terms. Retrieved April, 1, 2006 from: http://sparc.airtime.co.uk/users/wysywig/gloss.htm.
Scott, J.A. & Nisse, D. (2001). Software Configuration Management, Guide to Software Engineering Body of Knowledge, Chapter 7, IEEE Computer Society Press.
Vogl, G. (2004). Management Information Systems: Glossary of Terms. Retrieved April 13, 2006 from Uganda Martyrs University website: http://www.321site.com/greg/courses/mis1/glossary.htm.
Weerd, I. van de (2006). Meta-modeling Technique: Draft for the course Method Engineering 05/06. Retrieved March 1, 2006 from: https://bscw.cs.uu.nl/bscw/bscw.cgi/d1009019/Instructions for the process-data diagram.pdf [restricted access].




Retrieved from "http://en.wikipedia.org/wiki/Change_management_(engineering)"
Categories: Change Management | Systems engineering 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


中文









 This page was last modified on 28 April 2009, at 14:31 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
