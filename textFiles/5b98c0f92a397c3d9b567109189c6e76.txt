













Path (computing) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Path_(computing)";
		var wgTitle = "Path (computing)";
		var wgAction = "view";
		var wgArticleId = "403357";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 278351520;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Path (computing)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other meanings for this term, see Path.





This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (July 2008)


A path is the general form of a file or directory name, specifying a unique location in a file system. A path points to a file system location by following the directory tree hierarchy expressed in a string of characters in which path components, separated by a delimiting character, represent each directory. The delimiting character is most commonly the slash ("/"), the backslash character ("\"), or colon (":"), though some operating systems may use a different delimiter. Paths are used extensively in computer science to represent the directory/file relationships common in modern operating systems, and are essential in the construction of Uniform Resource Locators (URLs).
A path can be either absolute or relative. A full path or absolute path is a path that points to the same location on one file system regardless of the working directory or combined paths. It is usually written in reference to a root directory.
A relative path is a path relative to the working directory of the user or application, so the full absolute path may not need to be given.




Contents


1 Representations of paths by operating system and shell
2 Uniform Naming Convention
3 Example

3.1 Unix style
3.2 MS-DOS/Microsoft Windows style


4 See also
5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Representations of paths by operating system and shell


Operating System
Shell
Root Directory
Directory Separator
Parent Directory
Examples


Unix-like OS
Unix shell
/
/
..
/home/user/docs/Letter.txt


DOS
COMMAND.COM
[drive letter]:\
/ or \
..
C:\USER\DOCS\LETTER.TXT
A:PICTURE.JPG


OS/2
cmd.exe
[drive letter]:\
/ or \
..
C:\user\docs\Letter.txt
A:Picture.jpg


Microsoft Windows
cmd.exe
[drive letter]:/ or [drive letter]:\ note: for CD command, / treated as relative path (same as [drive letter]:.\)
/ or \ note: for CD command, / treated as relative path (same as .\)
..
C:\user\docs\Letter.txt
A:Picture.jpg


Microsoft Windows
Windows PowerShell
[drive name]:/ or [drive name]:\ or
[PSSnapIn name]\[PSProvider name]::[PSDrive root]

/ or \
..
C:\user\docs\Letter.txt
UserDocs:/Letter.txt
Variable:PSVersionTable
Registry::HKEY_LOCAL_MACHINE\SOFTWARE\
Microsoft.PowerShell.Security\Certificate::CurrentUser\


TOPS-20
DCL
[device name]:
.

PS:<USER.DOCS>LETTER.TXT,4


RSX-11
DCL
[device name]:


DR0:[30,12]LETTER.TXT;4


OpenVMS
DCL
[device name]: or
[NODE"accountname password"]::[device name]:

.
[-]
SYS$SYSDEVICE:[USER.DOCS]LETTER.TXT;4


Classic Mac OS

[drive name]:
:




AmigaOS
Amiga CLI / AmigaShell
[drive, volume or assign name]:
/
/



RISC OS
Task window
[fs type]::[drive number or disc name].$
.




Symbian OS
File manager
\
\

\user\docs\Letter.txt


Domain/OS
Shell
//
/




MenuetOS/KolibriOS
CMD
/
/




Stratus VOS
VOS command-line interpreter
%[system_name]#[module_name]>
>
<



On Japanese and Korean versions of Windows it may often look like the '¥' character or the '₩' character is the path separator. This is not true however, instead the code for backslash is being drawn as these characters. Very early versions of MS-DOS replaced the backslash with these glyphs on the display to make it possible to display them by programs that only understood 7-bit ASCII (other characters such as the square brackets were replaced as well, see ISO 646, Windows Codepage 932 (Japanese Shift JIS), and Codepage 949 (Korean)). This predates the addition of paths in MS-DOS 2 and is a good indication that Microsoft never intended backslash to be the path separator, as a normal slash would display correctly. Although even the first version of Windows supported the 8-bit ISO-8859-1 character set which has the Yen sign at U+00A5, and modern versions of Windows supports Unicode which has the Won sign at U+20A9, much software will continue to display backslashes found in ASCII files this way to preserve backwards compatibility.
Mac OS X is UNIX-based and thus uses UNIX paths internally. However, to preserve compatibility for software and familiarity for users, many portions of the GUI switch "/" typed by the user to ":" internally, and switch them back when displaying filenames (a ":" entered by the user is also changed into "/" but the inverse translation does not happen).

[edit] Uniform Naming Convention
The UNC, short for Universal Naming Convention or Uniform Naming Convention, specifies a common syntax to describe the location of a network resource, such as a shared file, directory, or printer. The UNC syntax for Windows systems is as follows:

\\ComputerName\SharedFolder\Resource

Note: The UNC syntax is sometimes written with forward slashes. In Windows the forward slashes and back slashes are equivalent, but many programs will accept only backward slashes, and some will only accept double backslashes (i.e. \\\\ComputerName\\SharedFolder), especially in quoted string constants, due to the standard use of backslash as an escape character.
The "SharedFolder" is not necessarily the same as what a program on the server would see if it tried to open "\SharedFolder". Instead it is an arbitrary name assigned to the folder when it was "shared".
Some Microsoft Windows interfaces also accept the "Long UNC":

\\?\UNC\ComputerName\SharedFolder\Resource

The types of paths in Windows are local file system (LFS), such as C:\File, uniform naming convention (UNC), such as \\Server\Volume\File, and Long UNC or UNCW, such as \\?\C:\File or \\?\UNC\Server\Volume\File. In earlier versions of Windows only the APIs that accept "Long UNC" were able to accept more than 260 characters.
Unix-like systems occasionally use a similar syntax [1]. POSIX says that a path beginning with two slashes is treated in an implementation-defined manner [2], though in other cases multiple slashes must be treated as single slashes [3]. Many applications on Unix-like systems, for example, scp, rcp, rsync, use resource definitions such as

hostname:/directorypath/resource

or, like URLs with the service name (here 'smb'):

smb://hostname/directorypath/resource


[edit] Example

[edit] Unix style
Here is an example with a Unix style file system as it would appear from a terminal or terminal application (command-line window):
Your current working directory (cwd) is:

/users/mark/

You want to change your current working directory to:

/users/mark/bobapples

At that moment, the relative path for the directory you want is:

./bobapples

and the absolute path for the directory you want is

/users/mark/bobapples

Because bobapples is the relative path for the directory you want, you may type the following at the command prompt to change your current working directory to bobapples:

cd bobapples

Two dots ("..") are used for moving up in the hierarchy, to indicate the parent directory; one dot (".") represents the directory itself. Both can be components of a complex relative path (e.g., "../mark/./bobapples"), where "." alone or as the first component of such a relative path represents the working directory. (Using "./foo" to refer to a file "foo" in the current working directory can sometimes be useful to distinguish it from a resource "foo" to be found in a default directory or by other means; for example, to view a specific version of a man page instead of the one installed in the system.)

[edit] MS-DOS/Microsoft Windows style
Contrary to popular belief, the Windows system API accepts slash, and thus all the above Unix examples should work. But many applications on Windows interpret a slash for other purposes or treat it as an invalid character, and thus require you to enter backslash. One of the prime examples is the cmd.exe shell (often called the "terminal" as it is typically run in a terminal window). Note that many other shells available for Windows, such as tcsh and Windows PowerShell, allow the forward slash.
In addition "\" does not indicate a single root, but instead the root of the "current disk". Indicating a file on a disk other than the current one requires prefixing a drive letter and colon. This is not ambiguous because colon is not a valid character in an MS-DOS filename, and thus one cannot have a file called "A:" in the current directory.
Here are some examples of MS-DOS/Windows style paths, with backslashes used to match the most common syntax:

A:\Temp\File.txt

This path points to a file whose name is File.txt, which is located in the directory Temp, which in turn is located in the root directory of the drive A:.

C:..\File.txt

This path refers to a file called File.txt located in the parent directory of the current directory on drive C:.

Folder\SubFolder\File.txt

This path denotes a file called File.txt located in SubFolder directory which in turn is located in Folder directory which is located in the current directory of the current drive (since no drive specification is present in this example).

File.txt

This rather simple path points to a file named File.txt located in the current directory (since no directory specification is present) on the current drive (since no drive specification is present).

\\.\COM1

This path refers to the first serial port (COM1).

C:\>more < C:/Windows/system.ini
; for 16-bit app support
[386Enh]
woafont=dosapp.fon
EGA80WOA.FON=EGA80WOA.FON
EGA40WOA.FON=EGA40WOA.FON
CGA80WOA.FON=CGA80WOA.FON
CGA40WOA.FON=CGA40WOA.FON
...

This example uses a path containing forward slashes as directory separator. The content of the file is redirected to more.

E:\>dir "/Folder/SubFolder/" /Q
Volume in drive E is Data
Volume Serial Number is 07BE-0B10

Directory of E:\Folder\SubFolder

10/18/2008 08:15 AM <DIR> DOMAIN\user .
10/18/2008 08:15 AM <DIR> DOMAIN\user ..
10/18/2008 08:15 AM <DIR> DOMAIN\user File.txt
1 File(s) 8 bytes
2 Dir(s) 19,063,000 bytes free

A path containing forward slashes often needs to be surrounded by double quotes to disambiguate it from command line switches.

note: CD does not work this way:

CD "[drive letter]:/Program Files" will only work from the root ([drive letter]:\) directory. This appears to be be treating all forward slashes the same as .\.
For example:

CD "C:.\Program Files"

works the same as

CD "C:/Program Files"

Also, from a root folder:

CD "C:.\Program Files.\Internet Explorer"

would be treated the same as

CD "C:/Program Files/Internet Explorer"

If there is no relative path to the directory name specified with forward slashes you will get the following error:

The system cannot find the path specified.


[edit] See also

Filename
Filesystem Hierarchy Standard (FHS)
Uniform Resource Locator (URL)
Device file
basename
Path (variable)


[edit] References
This article was originally based on material from the Free On-line Dictionary of Computing, which is licensed under the GFDL.


^ UNC Definition: TechEncyclopedia from TechWeb
^ POSIX pathname resolution specification
^ POSIX pathname definition



[edit] External links

Path Definition - by The Linux Information Project (LINFO)




Retrieved from "http://en.wikipedia.org/wiki/Path_(computing)"
Categories: Computer file systemsHidden categories: Articles needing additional references from July 2008 | Wikipedia articles incorporating text from FOLDOC 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Italiano
Polski
Українська









 This page was last modified on 19 March 2009, at 16:17 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
