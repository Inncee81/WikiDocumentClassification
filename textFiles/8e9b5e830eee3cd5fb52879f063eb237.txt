













Unified Modeling Language - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Unified_Modeling_Language";
		var wgTitle = "Unified Modeling Language";
		var wgAction = "view";
		var wgArticleId = "32169";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282035796;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Unified Modeling Language

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




A collage of UML diagrams.


Unified Modeling Language (UML) is a standardized general-purpose modeling language in the field of software engineering.
UML includes a set of graphical notation techniques to create abstract models of specific systems.




Contents


1 Overview
2 History

2.1 Before UML 1.x
2.2 UML 1.x
2.3 Development toward UML 2.0


3 Unified Modeling Language topics

3.1 Software Development Methods
3.2 Modeling
3.3 Diagrams overview

3.3.1 Structure diagrams
3.3.2 Behavior diagrams

3.3.2.1 Interaction diagrams




3.4 Meta modeling


4 Criticisms
5 See also
6 References
7 Further reading
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
The Unified Modeling Language (UML) is an open method used to specify, visualise, construct and document the artifacts of an object-oriented software-intensive system under development.[1] UML offers a standard way to write a system's blueprints, including conceptual components such as:

actors,
business processes and
system's components, and activities

as well as concrete things such as:

programming language statements,
database schemas, and
reusable software components.[2]

UML combines the best practice from data modeling concepts such as entity relationship diagrams, business modeling (work flow), object modeling and component modeling. It can be used with all processes, throughout the software development life cycle, and across different implementation technologies.[3] UML has succeeded the concepts of the Booch method, the Object-modeling technique (OMT) and Object-oriented software engineering (OOSE) by fusing them into a single, common and widely usable modeling language. UML aims to be a standard modeling language which can model concurrent and distributed systems. UML is not an industry standard, but is taking shape under the auspices of the Object Management Group (OMG). OMG has initially called for information on object-oriented methodologies, that might create a rigorous software modeling language. Many industry leaders have responded in earnest to help create the standard.[1]
UML models may be automatically transformed to other representations (e.g. Java) by means of QVT-like transformation languages, supported by the OMG. UML is extensible, offering the following mechanisms for customization: profiles and stereotype. The semantics of extension by profiles have been improved with the UML 1.0 major revision.

[edit] History




History of object-oriented methods and notation.



[edit] Before UML 1.x
After Rational Software Corporation hired James Rumbaugh from General Electric in 1994, the company became the source for the two most popular object-oriented modeling approaches of the day: Rumbaugh's OMT, which was better for object-oriented analysis (OOA), and Grady Booch's Booch method, which was better for object-oriented design (OOD). Together Rumbaugh and Booch attempted to reconcile their two approaches and started work on a Unified Method.
They were soon assisted in their efforts by Ivar Jacobson, the creator of the object-oriented software engineering (OOSE) method. Jacobson joined Rational in 1995, after his company, Objectory, was acquired by Rational. The three methodologists were collectively referred to as the Three Amigos, since they were well known to argue frequently with each other regarding methodological preferences.
In 1996 Rational concluded that the abundance of modeling languages was slowing the adoption of object technology, so repositioning the work on a unified method, they tasked the Three Amigos with the development of a non-proprietary Unified Modeling Language. Representatives of competing object technology companies were consulted during OOPSLA '96; they chose boxes for representing classes over Grady Booch's Booch method's notation that used cloud symbols.
Under the technical leadership of the Three Amigos, an international consortium called the UML Partners was organized in 1996 to complete the Unified Modeling Language (UML) specification, and propose it as a response to the OMG RFP. The UML Partners' UML 1.0 specification draft was proposed to the OMG in January 1997. During the same month the UML Partners formed a Semantics Task Force, chaired by Cris Kobryn and administered by Ed Eykholt, to finalize the semantics of the specification and integrate it with other standardization efforts. The result of this work, UML 1.1, was submitted to the OMG in August 1997 and adopted by the OMG in November 1997.[4]

[edit] UML 1.x
As a modeling notation, the influence of the OMT notation dominates (e. g., using rectangles for classes and objects). Though the Booch "cloud" notation was dropped, the Booch capability to specify lower-level design detail was embraced. The use case notation from Objectory and the component notation from Booch were integrated with the rest of the notation, but the semantic integration was relatively weak in UML 1.1, and was not really fixed until the UML 2.0 major revision.
Concepts from many other OO methods were also loosely integrated with UML with the intent that UML would support all OO methods. For example CRC Cards (circa 1989 from Kent Beck and Ward Cunningham), and OORam were retained. Many others also contributed, with their approaches flavoring the many models of the day, including: Tony Wasserman and Peter Pircher with the "Object-Oriented Structured Design (OOSD)" notation (not a method), Ray Buhr's "Systems Design with Ada", Archie Bowen's use case and timing analysis, Paul Ward's data analysis and David Harel's "Statecharts"; as the group tried to ensure broad coverage in the real-time systems domain. As a result, UML is useful in a variety of engineering problems, from single process, single user applications to concurrent, distributed systems, making UML rich but also large.
The Unified Modeling Language is an international standard:

ISO/IEC 19501:2005 Information technology — Open Distributed Processing — Unified Modeling Language (UML) Version 1.4.2


[edit] Development toward UML 2.0
UML has matured significantly since UML 1.1. Several minor revisions (UML 1.3, 1.4, and 1.5) fixed shortcomings and bugs with the first version of UML, followed by the UML 2.0 major revision that was adopted by the OMG in 2005[5]. There are four parts to the UML 2.x specification: the Superstructure that defines the notation and semantics for diagrams and their model elements; the Infrastructure that defines the core metamodel on which the Superstructure is based; the Object Constraint Language (OCL) for defining rules for model elements; and the UML Diagram Interchange that defines how UML 2 diagram layouts are exchanged. The current versions of these standards follow: UML Superstructure version 2.1.2, UML Infrastructure version 2.1.2, OCL version 2.0, and UML Diagram Interchange version 1.0[6].
Although many UML tools support some of the new features of UML 2.x, the OMG provides no test suite to objectively test compliance with its specifications.

[edit] Unified Modeling Language topics

[edit] Software Development Methods
UML is not a development method by itself,[7] however, it was designed to be compatible with the leading object-oriented software development methods of its time (for example OMT, Booch method, Objectory). Since UML has evolved, some of these methods have been recast to take advantage of the new notations (for example OMT), and new methods have been created based on UML. The best known is IBM Rational Unified Process (RUP). There are many other UML-based methods like Abstraction Method, Dynamic Systems Development Method, and others, designed to provide more specific solutions, or achieve different objectives.

[edit] Modeling
It is very important to distinguish between the UML model and the set of diagrams of a system. A diagram is a partial graphical representation of a system's model. The model also contains a "semantic backplane" — documentation such as written use cases that drive the model elements and diagrams.
UML diagrams represent two different views of a system model[8]:

Static (or structural) view: Emphasizes the static structure of the system using objects, attributes, operations and relationships. The structural view includes class diagrams and composite structure diagrams.
Dynamic (or behavioral) view: Emphasizes the dynamic behavior of the system by showing collaborations among objects and changes to the internal states of objects. This view includes sequence diagrams, activity diagrams and state machine diagrams.

UML models can be exchanged among UML tools by using the XMI interchange format.

[edit] Diagrams overview
UML 2.0 has 13 types of diagrams divided into three categories.[9] Six diagram types represent the structure application, seven represent general types of behavior, including four that represent different aspects of interactions. These diagrams can be categorized hierarchically as shown in the following class diagram:



UML does not restrict UML element types to a certain diagram type. In general, every UML element may appear on almost all types of diagrams. This flexibility has been partially restricted in UML 2.0.
In keeping with the tradition of engineering drawings, a comment or note explaining usage, constraint, or intent is allowed in a UML diagram.

[edit] Structure diagrams
Structure diagrams emphasize what things must be in the system being modeled:

Class diagram: describes the structure of a system by showing the system's classes, their attributes, and the relationships among the classes.
Component diagram: depicts how a software system is split up into components and shows the dependencies among these components.
Composite structure diagram: describes the internal structure of a class and the collaborations that this structure makes possible.
Deployment diagram serves to model the hardware used in system implementations, and the execution environments and artifacts deployed on the hardware.
Object diagram: shows a complete or partial view of the structure of a modeled system at a specific time.
Package diagram: depicts how a system is split up into logical groupings by showing the dependencies among these groupings.










Class diagram









Component diagram









Composite structure diagrams









Deployment diagram











Object diagram









Package diagram






Since structure diagrams represent the structure of a system, they are used extensively in documenting the architecture of software systems.

[edit] Behavior diagrams
Behavior diagrams emphasize what must happen in the system being modeled:

Activity diagram: represents the business and operational step-by-step workflows of components in a system. An activity diagram shows the overall flow of control.
State machine diagram: standardized notation to describe many systems, from computer programs to business processes.
Use case diagram: shows the functionality provided by a system in terms of actors, their goals represented as use cases, and any dependencies among those use cases.










UML Activity Diagram









State Machine diagram









Use case diagram






Since behaviour diagrams illustrate the behaviour of system, they are used extensively to describe the functionality of software systems.

[edit] Interaction diagrams
Interaction diagrams, a subset of behavior diagrams, emphasize the flow of control and data among the things in the system being modeled:

Communication diagram: shows the interactions between objects or parts in terms of sequenced messages. They represent a combination of information taken from Class, Sequence, and Use Case Diagrams describing both the static structure and dynamic behavior of a system.
Interaction overview diagram: are a type of activity diagram in which the nodes represent interaction diagrams.
Sequence diagram: shows how objects communicate with each other in terms of a sequence of messages. Also indicates the lifespans of objects relative to those messages.
Timing diagrams: are a specific type of interaction diagram, where the focus is on timing constraints.










Communication diagram









Interaction overview diagram









Sequence diagram






The Protocol State Machine is a sub-variant of the State Machine. It may be used to model network communication protocols.

[edit] Meta modeling




Illustration of the Meta-Object Facility.


The Object Management Group (OMG) has developed a metamodeling architecture to define the Unified Modeling Language (UML), called the Meta-Object Facility (MOF). The Meta-Object Facility is a standard for model-driven engineering, designed as a four-layered architecture, see image. It provides a meta-meta model at the top layer, called the M3 layer. This M3-model is the language used by Meta-Object Facility to build metamodels, called M2-models. The most prominent example of a Layer 2 Meta-Object Facility model is the UML metamodel, the model that describes the UML itself. These M2-models describe elements of the M1-layer, and thus M1-models. These would be, for example, models written in UML. The last layer is the M0-layer or data layer. It is used to describe real-world objects.
Beyond the M3-model, the Meta-Object Facility describes the means to create and manipulate models and metamodels by defining CORBA interfaces that describe those operations. Because of the similarities between the Meta-Object Facility M3-model and UML structure models, Meta-Object Facility metamodels are usually modeled as UML class diagrams. A supporting standard of Meta-Object Facility is XMI, which defines an XML-based exchange format for models on the M3-, M2-, or M1-Layer.

[edit] Criticisms
Although UML is a widely recognized and used modeling standard, it is frequently criticized for the following deficiencies:

Language bloat
UML is often criticized as being gratuitously large and complex.[10] It contains many diagrams and constructs that are redundant or infrequently used. This criticism is more frequently directed at UML 2.0 than UML 1.0, since newer revisions include more design-by-committee compromises.[citation needed]


Weak visualization
[neutrality disputed] UML employs many line styles that are graphically very similar; the meaning resides in permutations of line (dotted or solid) and arrow head (open or closed, filled or empty). The same line style can mean different things in different diagram types.[dubious – discuss] The asterisk is used to signify iteration in behavioural models and parallel multiplicity in structural models.[dubious – discuss] The multiplicity of an association is shown by an annotation disconnected from a line (unlike conventional data model notations).


Problems in learning and adopting
The problems cited above can make learning and adopting UML problematic, especially when required of engineers lacking the prerequisite skills.[11] In practice, people often draw diagrams with the symbols provided by their CASE tool, but without the meanings those symbols are intended to provide.


Only the code is in sync with the code
UML has value in approaches that compile the models to generate source or executable code. This however, may still not be sufficient since it is not clear that UML 2.0's Action Semantics exhibit Turing completeness.[citation needed]


Cumulative Impedance/Impedance Mismatching
As with any notational system, UML is able to represent some systems more concisely or efficiently than others. Thus a developer gravitates toward solutions that reside at the intersection of the capabilities of UML and the implementation language. This problem is particularly pronounced if the implementation language does not adhere to orthodox object-oriented doctrine, as the intersection set between UML and implementation language may be that much smaller.


Aesthetically Inconsistent
This argument states that the adhoc mixing of abstract notation (2-D ovals, boxes, etc) make UML appear jarring and that more effort could have been made to construct uniform and aesthetically pleasing representations.[neutrality disputed]


Tries to be all things to all programmers
UML is a general purpose modeling language that tries to achieve compatibility with every possible implementation language.[dubious – discuss] In the context of a specific project, the most applicable features of UML may be tailored to accomplish the specific goal but the means of tailoring the scope of UML to a particular domain is through formalisms (stereotypes and profiles) that are not completely formed.[12]


Dysfunctional interchange format
While the XMI (XML Metadata Interchange) standard is designed to facilitate the interchange of UML models, it has been largely ineffective in the practical interchange of UML 2.x models. Defining a UML 2.x model in one tool and then importing it into another tool typically leads to loss of information.[citation needed] This interoperability ineffectiveness is attributable to two reasons. Firstly, XMI 2.x is large and complex in its own right, since it purports to address a technical problem more ambitious than exchanging UML 2.x models. In particular, it attempts to provide a mechanism for facilitating the exchange of any arbitrary modeling language defined by the OMG's Meta-Object Facility (MOF). Secondly, the UML 2.x Diagram Interchange specification lacks sufficient detail to facilitate reliable interchange of UML 2.x notations between modeling tools. Since UML is a visual modeling language, this shortcoming is substantial for modelers who don't want to redraw their diagrams.[13]

Modeling experts have written sharp criticisms of UML, including Bertrand Meyer's "UML: The Positive Spin",[10] and Brian Henderson-Sellers in "Uses and Abuses of the Stereotype Mechanism in UML 1.x and 2.0".[12]

[edit] See also




Screenshot of Umbrello UML Modeller.



Glossary of Unified Modeling Language terms
Agile Modeling
Entity-relationship model
Executable UML
UML eXchange Format
Fundamental modeling concepts
List of UML tools
Meta-modeling
Model-based testing
Model-driven integration
Software blueprint
SysML
UN/CEFACT's Modeling Methodology


[edit] References
This article was originally based on material from the Free On-line Dictionary of Computing, which is licensed under the GFDL.


^ a b FOLDOC (2001). Unified Modeling Language last updated 2002-01-03. Accessed 6 feb 2009.
^ Grady Booch, Ivar Jacobson & Jim Rumbaugh (2000) OMG Unified Modeling Language Specification, Version 1.3 First Edition: March 2000. Retrieved 12 August 2008.
^ Satish Mishra (1997). "Visual Modeling & Unified Modeling Language (UML) : Introduction to UML". Rational Software Corporation. Accessed 9 Nov 2008.
^ UML Specification version 1.1 (OMG document ad/97-08-11)
^ http://www.omg.org/spec/UML/2.0/
^ OMG. "Catalog of OMG Modeling and Metadata Specifications". http://www.omg.org/technology/documents/modeling_spec_catalog.htm. Retrieved on 2008-03-31. 
^ John Hunt (2000). The Unified Process for Practitioners: Object-oriented Design, UML and Java. Springer, 2000. ISBN 1852332751. p.5.door
^ Jon Holt Institution of Electrical Engineers (2004). UML for Systems Engineering: Watching the Wheels IET, 2004 ISBN 0863413544. p.58
^ Armin Zimmermann (2007). Stochastic Discrete Event Systems: Modeling, Evaluation, Applications. Springer, 2007. ISBN 3540741720. p.52.
^ a b Bertrand Meyer. "UML: The Positive Spin". http://archive.eiffel.com/doc/manuals/technology/bmarticles/uml/page.html. Retrieved on 2008-03-31. 
^ See the ACM article "Death by UML Fever" for an amusing account of such issues.
^ a b B. Henderson-Sellers; C. Gonzalez-Perez (2006). "Uses and Abuses of the Stereotype Mechanism in UML 1.x and 2.0". in: Model Driven Engineering Languages and Systems. Springer Berlin / Heidelberg.
^ UML Forum. "UML FAQ". http://www.uml-forum.com/FAQ.htm. Retrieved on 2008-03-31. 



[edit] Further reading

Ambler, Scott William (2004). The Object Primer: Agile Model Driven Development with UML 2. Cambridge University Press. ISBN 0-521-54018-6. http://www.ambysoft.com/books/theObjectPrimer.html. 
Chonoles, Michael Jesse; James A. Schardt (2003). UML 2 for Dummies. Wiley Publishing. ISBN 0-7645-2614-6. 
Fowler, Martin. UML Distilled: A Brief Guide to the Standard Object Modeling Language (3rd ed. ed.). Addison-Wesley. ISBN 0-321-19368-7. 
Jacobson, Ivar; Grady Booch; James Rumbaugh (1998). The Unified Software Development Process. Addison Wesley Longman. ISBN 0-201-57169-2. 
Martin, Robert Cecil (2003). UML for Java Programmers. Prentice Hall. ISBN 0-13-142848-9. 
Noran, Ovidiu S.. "Business Modelling: UML vs. IDEF" (PDF). http://www.cit.gu.edu.au/~noran/Docs/UMLvsIDEF.pdf. Retrieved on 2005-12-28. 
Penker, Magnus; Hans-Erik Eriksson (2000). Business Modeling with UML. John Wiley & Sons. ISBN 0-471-29551-5. 


[edit] External links



Wikimedia Commons has media related to: Unified Modeling Language



UML Resource Page of the Object Management Group – Resources that include the latest version of the UML specification








v • d • e

Unified Modeling Language





Actors

Organizations: Object Management Group • UML Partners • Persons: Grady Booch • Ivar Jacobson • James Rumbaugh






Concepts

Object oriented: Object-oriented programming • Object-oriented analysis and design
Structure: Actor • Attribute • Artifact • Class • Component • Interface • Object • Package
Behavior: Activity • Event • Message • Method • State • Use case
Relationships: Aggregation • Association • Composition • Dependency • Generalization (or Inheritance)
Extensibility: Profile • Stereotype • Other concepts: Multiplicity






Structure diagrams

Class diagram • Component diagram • Composite structure diagram • Deployment diagram • Object diagram • Package diagram






Behavior diagrams

Activity diagram • State Machine diagram • Use case diagram






Interaction diagrams

Communication diagram • Sequence diagram • Interaction overview diagram • Timing diagram






Other topics

Glossary of UML terms • IBM Rational Unified Process • List of UML tools • Systems Modeling Language • UML colors • XMI













v • d • e

Software engineering





Fields

Requirements analysis • Software design • Computer programming • Formal methods • Software testing • Software deployment • Software maintenance






Concepts

Data modeling • Enterprise architecture • Functional specification • Modeling language • Programming paradigm • Software • Software architecture • Software development methodology • Software development process • Software quality • Software quality assurance • Structured analysis






Orientations

Agile • Aspect-oriented • Object orientation • Ontology • Service orientation • SDLC






Models

Development models: Agile • Iterative model • RUP • Scrum • Spiral model • Waterfall model • XP • V-Model
Other models: CMMI • Data model • Function model • IDEF • Information model • Metamodeling • Object model • View model • UML






Software
engineers

Kent Beck • Grady Booch • Fred Brooks • Barry Boehm • Ward Cunningham • Ole-Johan Dahl • Tom DeMarco • Edsger W. Dijkstra • Martin Fowler • C. A. R. Hoare • Watts Humphrey • Michael A. Jackson • Ivar Jacobson • Craig Larman • James Martin • Bertrand Meyer • David Parnas • Winston W. Royce • James Rumbaugh • Niklaus Wirth • Edward Yourdon






Related fields

Computer science • Computer engineering • Enterprise engineering • History • Management • Mathematics • Project management • Quality management • Software ergonomics • Systems engineering









Retrieved from "http://en.wikipedia.org/wiki/Unified_Modeling_Language"
Categories: Unified Modeling Language | ISO standards | Data modeling languages | Specification languagesHidden categories: All articles with unsourced statements | Articles with unsourced statements since April 2008 | All pages needing cleanup | Articles with minor POV problems from February 2009 | Articles with disputed statements from February 2009 | Articles with unsourced statements since February 2009 | Articles with unsourced statements since May 2008 | Wikipedia articles incorporating text from FOLDOC 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
العربية
Bosanski
Български
Català
Česky
Dansk
Deutsch
Ελληνικά
Español
Esperanto
Euskara
Français
Galego
Bahasa Indonesia
Italiano
עברית
Lietuvių
Magyar
Македонски
Bahasa Melayu
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Slovenčina
Slovenščina
Српски / Srpski
Suomi
Svenska
ไทย
Tiếng Việt
Türkçe
Українська
中文









 This page was last modified on 6 April 2009, at 04:28.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
