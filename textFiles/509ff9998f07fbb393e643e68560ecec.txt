













Locality sensitive hashing - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Locality_sensitive_hashing";
		var wgTitle = "Locality sensitive hashing";
		var wgAction = "view";
		var wgArticleId = "11634012";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281939179;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Locality sensitive hashing

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Locality Sensitive Hashing (LSH) is a method of performing probabilistic dimension reduction of high-dimensional data. The basic idea is to hash the input items so that similar items are mapped to the same buckets with high probability (the number of buckets being much smaller than the universe of possible input items).




Contents


1 Definition
2 Applications
3 Methods

3.1 Bit Sampling For Hamming Distance
3.2 Min-Wise Independent Permutations
3.3 Random Projection
3.4 Stable Distributions


4 LSH Algorithm for the Nearest Neighbor Search
5 See also
6 Related Papers





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Definition
An LSH family  is defined for a metric space , a threshold R > 0 and an approximation factor c > 1. An LSH family [1] [2]  is a family of functions  satisfying the following conditions for any two points , and a function h chosen uniformly at random from :

if , then h(p) = h(q) (i.e.,p and q collide) with probability at least P1,
if , then h(p) = h(q) with probability at most P2.

A family is interesting when P1 > P2. Such a family  is called (R,cR,P1,P2)-sensitive.
An alternative definition[3] is defined with respect to a universe of items U that have a similarity function . An LSH scheme is a family of hash functions H coupled with a probability distribution D over the functions such that a function  chosen according to D satisfies the property that  for any .

[edit] Applications
LSH has been applied to several problem domains including

Near Duplicate Detection
Image Similarity Identification
Gene Expression Similarity Identification
Audio Similarity Identification


[edit] Methods

[edit] Bit Sampling For Hamming Distance
One of the easiest ways to construct an LSH family is by bit sampling [2]. This approach works for the Hamming distance over d-dimensional vectors {0,1}d. Here, the family  of hash functions is simply the family of all the projections of points on one of the d coordinates, i.e., , where xi is the ith coordinate of x. A random function h from  simply selects a random bit from input point. This family has the following parameters: P1 = 1 − R / d, P2 = 1 − cR / d.

[edit] Min-Wise Independent Permutations
Suppose U is composed of subsets of some ground set of enumerable items S and the similarity function of interest is the Jaccard index J. If π is a permutation on the indices of S, for  let . Each possible choice of π defines a single hash function h mapping input sets to integers.
Define the function family H to be the set of all such functions and let D be the uniform distribution. Given two sets  the event that h(A) = h(B) corresponds exactly to the event that the minimizer of π lies inside . As h was chosen uniformly at random,  and  define an LSH scheme for the Jaccard index.
Because the symmetric group on n elements has size n!, choosing a truly random permutation from the full symmetric group is infeasible for even moderately sized n. Because of this fact, there has been significant work on finding a family of permutations that is "min-wise independent" - a permutation family for which each element of the domain has equal probability of being the minimum under a randomly chosen π. It has been established that a min-wise independent family of permutations is at least of size [4] and that this boundary is tight[5].
Because min-wise independent families are too big for practical applications, two variant notions of min-wise independence are introduced: restricted min-wise independent permutations families, and approximate min-wise independent families. Restricted min-wise independence is the min-wise independence property restricted to certain sets of cardinality at most k [6]. Approximate min-wise independence differs from the property by at most a fixed ε[7].

[edit] Random Projection
The random projection method of LSH is designed to approximate the cosine distance between vectors. The basic idea of this technique is to choose a random hyperplane (defined by a normal unit vector r) at the outset and use the hyperplane to hash input vectors.
Given an input vector v and a hyperplane defined by r, we let . That is,  depending on which side of the hyperplane v lies.
Each possible choice of r defines a single function. Let H be the set of all such functions and let D be the uniform distribution once again. It is not difficult to prove that, for two vectors u,v, , where θ(u,v) is the angle between u and v.  is closely related to cos(θ(u,v)).
In this instance hashing produces only a single bit. Two vectors' bits match with probability proportional to the cosine of the angle between them.

[edit] Stable Distributions
The hash function [8]  maps a d dimensional vector  onto a set of integers. Each hash function in the family is indexed by a choice of random  and b where  is a d dimensional vector with entries chosen independently from a stable distribution and b is a real number chosen uniformly from the range [0,r]. For a fixed  the hash function  is given by .

[edit] LSH Algorithm for the Nearest Neighbor Search
One of the main application of LSH is to provide efficient nearest neighbor search algorithms. Consider any LSH family . The algorithm has two main parameters: the width parameter k and the number of hash tables L.
In the first step, we define a new family  of hash functions g, where each function g is obtained by concatenating k functions h1,...,hk from , i.e., g(p) = [h1(p),...,hk(p)]. In other words, a random hash function g is obtained by concatenating k randomly chosen hash functions from . The algorithm then constructs L hash tables, each corresponding to a different randomly chosen hash function g.
In the preprocessing step we hash all n points from the data set S into each of the L hash tables. Given that the resulting hash tables have only n non-zero entries, one can reduce the amount of memory used per each hash table to O(n) using standard hash functions.
Given a query point q, the algorithm iterates over the L hash functions g. For each g considered, it retrieves the data points that are hashed into the same bucket as q. The process is stopped as soon as a point within distance cR from q is found.
Given the parameters k and L, the algorithm has the following performance guarantees:

preprocessing time: O(nLkt), where t is the time to evaluate a function  on an input point p;
space: O(nL), plus the space for storing data points;
query time: ;
the algorithm succeeds in finding a point within distance cR from q (if it exists) with probability at least .

For a fixed approximation ratio c = 1 + ε and probabilities P1 and P2, one can set  and L = nρ, where . Then one obtains the following performance guarantees:

preprocessing time: O(n1 + ρkt);
space: O(n1 + ρ), plus the space for storing data points;
query time: O(nρ(kt + d));



[edit] See also

Nearest neighbor search


[edit] Related Papers


^ Gionis, A.; Indyk, P., Motwani, R. (1999). ", Similarity Search in High Dimensions via Hashing". Proceedings of the 25th Very Large Database (VLDB) Conference. http://people.csail.mit.edu/indyk/vldb99.ps ,. 
^ a b Indyk, Piotr.; Motwani, Rajeev. (1998). ", Approximate Nearest Neighbors: Towards Removing the Curse of Dimensionality.". Proceedings of 30th Symposium on Theory of Computing. http://people.csail.mit.edu/indyk/nndraft.ps ,. 
^ Charikar, Moses S.. (2002). "Similarity Estimation Techniques from Rounding Algorithms". Proceedings of the 34th Annual ACM Symposium on Theory of Computing 2002: (ACM 1–58113–495–9/02/0005)…. doi:10.1145/509907.509965. http://portal.acm.org/citation.cfm?id=509965. Retrieved on 2007-12-21. 
^ Broder, A.Z.; Charikar, M.; Frieze, A.M.; Mitzenmacher, M. (1998). "Min-wise independent permutations". Proceedings of the thirtieth annual ACM symposium on Theory of computing: 327–336. doi:10.1145/276698.276781. http://www.cs.princeton.edu/~moses/papers/minwise.ps. Retrieved on 2007-11-14. 
^ "An optimal construction of exactly min-wise independent permutations". Technical Report COMP98-62, IEICE, 1998. 
^ Matoušek, J.; Stojakovic, M. (2002). "On Restricted Min-Wise Independence of Permutations". Preprint. http://citeseer.ist.psu.edu/689217.html. Retrieved on 2007-11-14. 
^ Saks, M.; Srinivasan, A.; Zhou, S.; Zuckerman, D. (2000). "Low discrepancy sets yield approximate min-wise independent permutation families". Information Processing Letters 73 (1-2): 29–32. doi:10.1016/S0020-0190(99)00163-5. http://citeseer.ist.psu.edu/saks99low.html. Retrieved on 2007-11-14. 
^ Datar, M.; Immorlica, N., Indyk, P., Mirrokni, V.S. (2004). "Locality-Sensitive Hashing Scheme Based on p-Stable Distributions". Proceedings of the Symposium on Computational Geometry. http://theory.csail.mit.edu/~mirrokni/pstable.ps. 



Alex Andoni's LSH homepage
LSHKIT: A C++ Locality Sensitive Hashing Library




Retrieved from "http://en.wikipedia.org/wiki/Locality_sensitive_hashing"
Categories: Search algorithms | Classification algorithms 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Français
Italiano









 This page was last modified on 5 April 2009, at 18:35 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
