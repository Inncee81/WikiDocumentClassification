













init - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Init";
		var wgTitle = "Init";
		var wgAction = "view";
		var wgArticleId = "1551363";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280127838;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); init

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
init (short for initialization) is the program on Unix and Unix-like systems that spawns all other processes. It runs as a daemon and typically has PID 1.
The functionality diverged, in Unixes such as System III and System V, from the functionality provided by the init in Research Unix and its BSD derivatives. The usage on most Linux distributions is compatible with System V, but some distributions, such as Arch and Slackware, use a BSD-style and others, such as Gentoo, have their own customized version. Ubuntu[1][2] and some other Linux distros now use upstart[3] as a replacement[4] for the traditional Init process.




Contents


1 BSD-style
2 SysV-style

2.1 Runlevels
2.2 Default runlevels


3 Skipping init
4 Other styles
5 See also
6 External links
7 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] BSD-style
BSD init runs the initialization shell script located in '/etc/rc', then launches getty on text-based terminals or a windowing system such as X on graphical terminals. There are no runlevels; the 'rc' file determines how init is to be run.
Advantages: Simple and easy to edit manually.
Problems: If a 3rd-party package needs to have an initialization script run during the boot procedure, it needs to edit one of the existing boot scripts, but a simple mistake in that process could lead to an unbootable system.
Note that modern *BSD variants have long supported a site-specific 'rc.local' file that is run in a sub-shell near the end of the boot sequence to mitigate the risks of making the system unbootable, and later, a local 'rc.d' directory where packages could install their own independent start/stop scripts (usually provided by the ports collection/pkgsrc). FreeBSD and NetBSD now use by default (as of version 5.0 and 1.5, respectively) the rc.d framework where the whole userland boot sequence is fragmented into smaller scripts, similarly to SysV. rcorder is used to determine in which order scripts are run, based on dependency information contained in the rc.d scripts.

[edit] SysV-style
System V init examines the '/etc/inittab' file for an 'initdefault' entry, which tells init whether there is a default runlevel. If there is no default runlevel, then the user is dumped to a system console, where a runlevel must be entered manually.
Advantages: Flexibility and scalability.
Problems: Complexity.

[edit] Runlevels
The runlevels in System V describe certain states of a machine, characterized by the processes run. There are generally 8 runlevels. These are the runlevels 0 to 6 and S or s, which are aliased to the same runlevel. Of these eight, 3 are so-called "reserved" runlevels:

0. Halt
1. Single user mode
6. Reboot

Aside from runlevels 0, 1, and 6, every Unix and Unix-like system treats runlevels a little differently. The common denominator is the /etc/inittab file, which defines what each runlevel does (if they do anything at all).

[edit] Default runlevels


OS
Default runlevel


AIX
2


Arch Linux
3


Cent OS
3


Debian GNU/Linux
2 [5]


Gentoo Linux
3


Mandriva Linux
5


Mac OS X
3


Red Hat Linux / Fedora Core
3 or 5


Slackware Linux
3


Solaris
3 [6]


SUSE Linux
5 [7]


Ubuntu (Server and Desktop)
2 [8]


On the two Linux distributions defaulting to runlevel 5 in the table above, runlevel 5 is a multiuser graphical environment running the X Window System, usually with a display manager. However, in the Solaris operating system, runlevel 5 is typically reserved to shut down and automatically power off the machine.
On most systems users can check the current runlevel with either of the following commands:
$ runlevel
$ who -r
The current runlevel is typically changed by root running the telinit or init commands. The default runlevel is set in the /etc/inittab file with the :initdefault: entry.

[edit] Skipping init
In Linux systems, with most modern bootloaders (such as LILO or GRUB), users can change which process the kernel spawns at the end of its initialization from the normal default of /sbin/init. This is generally done by typing init=/foo/bar at the bootloader's prompt. Appending init=/bin/bash, for example, will bring up a single root shell, without a password.
For BSD variants, on most platforms, the bootstrap program can be interrupted and given the boot -s command to boot into single-user mode. Single-user mode does not technically skip init; it still executes /sbin/init, but it will make init ask for the path to a program to exec() (the default being /bin/sh) instead of doing the regular multi-user boot sequence. If the tty the kernel was booted from was marked as "insecure" in the /etc/ttys file (on some systems, the current "securelevel" might also matter), init will first ask for the root password before allowing this (or fallback to multi-user mode if the user hits CTRL+D). If this program is exited, the kernel will restart init in multi-user mode. The same things will happen if the system is switched from multi-user to single-mode while running. If init cannot be started after the kernel booted, it will panic and the system will be unusable. Changing the path to init itself is done differently on different variants (boot -a on NetBSD, the init_path loader variable on FreeBSD).

[edit] Other styles
Various efforts have been made to replace the traditional init daemons with something better. Below is a list of these alternatives in no particular order.

SystemStarter, superseded by launchd — Apple Mac OS X's process spawner
Initng, a full replacement of init designed to start processes asynchronously
Upstart, a full replacement of init designed to start processes asynchronously initiated by Ubuntu
Service Management Facility, a complete full replacement/redesign of init from the ground up in Solaris starting with Solaris 10
runit, a cross platform full replacement for init with parallel starting of services
BootScripts in GoboLinux
Mudur, an init replacement written in Python and designed to start process asynchronously in use by the Pardus Linux distribution.

The following list are links to projects that are not (yet) in widespread use.

eINIT, a full replacement of init designed to start processes asynchronously, but with the potential of doing it without shell-scripts
svscan from daemontools used as process 1 - seems to be superseded by runit
cinit
twsinit, partly written in x86 assembler, more a proof of concept
minit
OpenRC


[edit] See also

pidof or killall5, another program from the System V set used in many distributions


[edit] External links

Linux init man page
FreeBSD init man page
boot-scripts
runit
minit
rc.d
busybox
smf and milestones in Solaris 10
cinit
twsinit
Mudur


[edit] References


^ http://help.ubuntu.com/community/KnowThyUbuntu
^ http://www.linuxquestions.org/questions/ubuntu-63/since-we-have-no-etcinittab-506281/
^ http://www.netsplit.com/2006/08/26/upstart-in-universe/
^ http://linuxplanet.com/linuxplanet/reports/6366/1/
^ http://www.debianadmin.com/debian-and-ubuntu-linux-run-levels.html
^ http://docs.sun.com/app/docs/doc/817-1985/6mhm8o5ru
^ http://www.novell.com/documentation/sles10/pdfdoc/sles_admin/sles_admin.pdf
^ http://www.debianadmin.com/debian-and-ubuntu-linux-run-levels.html





Retrieved from "http://en.wikipedia.org/wiki/Init"
Categories: Unix | Process (computing) 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Euskara
Français
Italiano
日本語
Polski
Português
Русский
Suomi
Українська









 This page was last modified on 28 March 2009, at 01:33.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
