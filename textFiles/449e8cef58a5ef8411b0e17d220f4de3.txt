













Comet (programming) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Comet_(programming)";
		var wgTitle = "Comet (programming)";
		var wgAction = "view";
		var wgArticleId = "4533952";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281225587;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Comet (programming)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other uses, see Comet (disambiguation).







This article or section has multiple issues. Please help improve the article or discuss these issues on the talk page.

Its quality may be compromised by peacock terms. Tagged since June 2008.
It may contain original research or unverifiable claims. Tagged since June 2008.
It is written like an advertisement and needs to be rewritten from a neutral point of view. Tagged since May 2008.
It may require general cleanup to meet Wikipedia's quality standards. Tagged since June 2008.
It may contain improper references to self-published sources. Tagged since June 2008.





In web development, Comet is a neologism to describe a web application model in which a long-held HTTP request allows a web server to push data to a browser, without the browser explicitly requesting it. Comet is an umbrella term for multiple techniques for achieving this interaction. All these methods rely on features included by default in browsers, such as Javascript, rather than on non-default plugins.[original research?]
In theory, the Comet approach differs from the original model of the web, in which a browser requests a complete web page or chunks of data to update a web page. However in practice, Comet applications typically use Ajax with long polling to detect new information on the server. The concept predates the coining of the neologism, and is known by several other names, including Ajax Push,[1][2] Reverse Ajax,[3] Two-way-web,[4] HTTP Streaming[4] and HTTP server push[5] among others.[6]




Contents


1 Implementations

1.1 Streaming

1.1.1 Hidden IFrame
1.1.2 XMLHttpRequest


1.2 Ajax with long polling

1.2.1 XMLHttpRequest long polling
1.2.2 Script tag long polling




2 History

2.1 Early Java applets
2.2 Early push applications
2.3 First Comet applications


3 Alternatives
4 See also
5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Implementations





This section is in need of attention from an expert on the subject. WikiProject Technology or the Technology Portal may be able to help recruit one. (October 2008)


Comet is an umbrella term for technologies that attempt to eliminate both the limitations of the page-by-page web model and traditional polling. Comet-like applications offer real-time interaction by relying on a persistent HTTP connection (or where not possible a long lasting HTTP connection) to provide the browser with updates as designated by the web application. Since browsers and proxies are not designed with server events in mind, web application developers have tried to work around several unintended side-effects to implement Comet-like behavior, each with different benefits and drawbacks. In particular, the HTTP 1.1 specification states that a browser should not have more than 2 simultaneous connections with a web server.[7] However, holding one connection open for real-time events has a negative impact on browser usability. The browser may be blocked from sending a new request while it still loads, for example, a series of images. This can be worked around by creating a distinct hostname for real-time information, which is an alias for the same physical server.
Specific methods of implementing Comet fall into two major categories: streaming and long polling.

[edit] Streaming
In an application using streaming Comet, the browser opens a single persistent connection to the server for all Comet events, which is handled incrementally on the browser side. Each time the server sends a new event, the browser interprets it, but neither side closes the connection. Specific techniques for accomplishing streaming Comet include the following.

[edit] Hidden IFrame
A basic technique for dynamic web application is to use a hidden IFrame HTML element (an inline frame, which allows a website to embed one HTML document inside another). This invisible IFrame is sent as a chunked block, which implicitly declares it as infinitely long (sometimes called “forever frame”). As events occur, the iframe is gradually filled with script tags, containing JavaScript to be executed in the browser. Because browsers render HTML pages incrementally, each script tag is executed as it is received.[8]
One benefit of the IFrame method is that it works in every common browser. Two downsides of this technique are the lack of a reliable error handling method, and the impossibility of tracking the state of the request calling process.[8]

[edit] XMLHttpRequest
The XMLHttpRequest (XHR) object, the main tool used by Ajax applications for browser–server communication, can also be pressed into service for server–browser Comet messaging, in a few different ways.
In 1995, Netscape Navigator added a feature called “server push”, which allowed servers to send new versions of an image or HTML page to that browser, as part of a multipart HTTP response (see History section, below), using the content type multipart/x-mixed-replace. Since 2004, Gecko-based browsers such as Firefox accept multipart responses to XHR, which can therefore be used as a streaming Comet transport.[9] On the server side, each message is encoded as a separate portion of the multipart response, and on the client, the callback function provided to the XHR onreadystatechange function will be called as each message arrives. This functionality is only included in Gecko-based browsers, though there is discussion of adding it to Webkit.[10]
Instead of creating a multipart response, and depending on the browser to transparently parse each event, it is also possible to generate a custom data format for an XHR response, and parse out each event using browser-side JavaScript, relying only on the browser firing the onreadystatechange callback each time it receives new data.

[edit] Ajax with long polling
None of the above streaming transports works across all modern browsers without causing negative side-effects in any—forcing Comet developers to implement several complex streaming transports, switching between them depending on the browser. Consequently many Comet applications instead opt for long polling, which is easier to implement on the browser side, and works, at minimum, in every browser that supports XHR. As the name suggests, long polling requires the client to poll the server for an event (or set of events). The browser makes an Ajax-style request to the server, which is kept open until the server has new data to send to the browser, which is sent to the browser in a complete response. The browser initiates a new long polling request in order to obtain subsequent events.
Specific technologies for accomplishing long-polling include the following.

[edit] XMLHttpRequest long polling
For the most part, XMLHttpRequest long polling works like any standard use of XHR. The browser makes an asynchronous request of the server, which may wait for data to be available before responding. The response can contain encoded data (typically XML or JSON) or javascript to be executed by the client. At the end of the processing of the response, the browser creates and sends another XHR, to await the next event. Thus the browser always keeps a request outstanding with the server, to be answered as each event occurs.

[edit] Script tag long polling
While any Comet transport can be made to work across subdomains, none of the above transports can be used across different second-level domains (SLDs), due to browser security policies designed to prevent cross-site scripting attacks.[11] That is, if the main web page is served from one SLD, and the Comet server is located at another SLD, Comet events cannot be used to modify the HTML and DOM of the main page, using those transports. This problem can be side-stepped by creating a proxy server in front of one or both sources, making them appear to originate from the same domain. However, this is often undesirable for complexity or performance reasons.
Unlike IFrames or XMLHttpRequest objects, script tags can be pointed at any URI, and JavaScript code in the response will be executed in the current HTML document. This creates a potential security risk for both servers involved, and though the risk to the data provider (in our case, the Comet server) can be avoided using JSONP.
A long-polling Comet transport can be created by dynamically creating script elements, and setting their source to the location of the Comet server, which then sends back JavaScript (or JSONP) with some event as its payload. Each time the script request is completed, the browser opens a new one, just as in the XHR long polling case. This method has the advantage of being cross-browser while still allowing cross-domain implementations.[11]

[edit] History

[edit] Early Java applets
The ability to embed Java applets into browsers made available richer real-time options.[when?] An applet can open a raw TCP socket to the server from which it has loaded. This socket can remain open as long as the browser is at the document hosting the applet. Event notifications can be sent in any format — text or binary — and decoded by the applet.

[edit] Early push applications
Circa 2000, developers began creating the first push applications using client-side JavaScript inside a frame/iFrame[original research?]. Pushlets, a framework created by the Dutchman Just van den Broecke, were one of the first[original research?] open source implementations. Pushlets were based on server-side Java servlets, and a client-side JavaScript library.[12] Bang Networks — a Silicon Valley start-up backed by Netscape co-founder Marc Andreessen — had a lavishly-financed attempt to create a real-time push standard for the entire web[13].

[edit] First Comet applications
In March 2006, software engineer Alex Russell coined the term Comet in a post on his personal blog[14]. The new term was a play on Ajax (Ajax and Comet both being common household cleansers)[15]. This umbrella term for previously existing concepts attracted some enthusiasts, that since then advocate its use in web-related technology conferences and websites.[16][17]
In 2006, while not really using the term Comet, some applications exposed those techniques to a wider audience: Meebo’s multi-protocol web-based chat application enables users to connect to AOL, Yahoo, and Microsoft chat platforms through the browser; Google added web-based chat to Gmail; JotSpot, a startup since acquired by Google, built Comet-based real-time collaborative document editing; and Comet-based chat is the centerpiece of the event-planning site Renkoo.[18] New Comet companies and enterprise solutions were created, such as the Java-based ICEfaces JSF framework (although they prefer the term "Ajax Push"[2]). Others that had previously used Java-applet based transports switched instead to pure-JavaScript implementations.[19]

[edit] Alternatives
Browser-native technologies are inherent in the term Comet. Attempts to improve non-polling HTTP communication have come from multiple sides:

The HTML 5 draft specification produced by the Web Hypertext Application Technology Working Group (WHATWG) specifies so called server-sent events[20], it offers a new HTML element, event-source and a new data format called DOM event stream.
The Bayeux protocol by the Dojo Foundation. It leaves browser-specific transports in place, and defines a higher-level protocol for communication between browser and server, with the aim of allowing re-use of client-side JavaScript code with multiple Comet servers, and allowing the same Comet server to communicate with multiple client-side JavaScript implementations. Bayeux is based on a publish/subscribe model, so servers supporting Bayeux have publish/subscribe built-in.[21]
The BOSH protocol by the XMPP standards foundation. It emulates a bidirectional stream between browser and server by using multiple synchronous HTTP connections.
The JSONRequest object, proposed by Douglas Crockford, would be an alternative to the XHR object.[22]
Use of plugins, such as Java applets or the proprietary Adobe Flash (Java BlazeDS is a server plugin which streams events to Flash applications). These have the advantage of working identically across all browsers with the appropriate plugin installed, need not rely on HTTP connections, and face none of the security restrictions placed on browser-native transports[clarification needed].


[edit] See also

Push technology
Pull technology


[edit] References


^ Egloff, Andreas. "Ajax Push (a.k.a. Comet) with Java Business Integration (JBI)" JavaOne 2007, San Francisco, California (2007-05-05). Retrieved on 2008-06-10.
^ a b "Ajax Push" (in English) (html). ICEfaces.org. http://www.icefaces.org/main/product/ajaxpush.iface. Retrieved on 2008-07-21. 
^ Crane, Dave; McCarthy, Phil (July 2008) (in English). Comet and Reverse Ajax: The Next Generation Ajax 2.0. Apress. ISBN 1590599985. 
^ a b Mahemoff, Michael (June 2006). "Web Remoting" (in English). Ajax Design Patterns. O'Reilly Media. pp. 19; 85. ISBN 0596101805. 
^ Double, Chris (2005-11-05). "More on Ajax and server push". Different ways of doing server push. http://www.bluishcoder.co.nz/2005/11/more-on-ajax-and-server-push.html. Retrieved on 2008-05-05. 
^ Nesbitt, Bryce (2005-11-01). "The Slow Load Technique/Reverse AJAX". Simulating Server Push in a Standard Web Browser. http://www.obviously.com/tech_tips/slow_load_technique. Retrieved on 2008-05-05. 
^ HTTP 1.1 specification, section 8.1.4. W3C. Retrieved 30 November 2007
^ a b Holdener III, Anthony T. (January 2008). "Page Layout with Frames that Aren't". Ajax: The Definitive Guide. O'Reilly Media. p. 320. ISBN 0596528388. 
^ Johnny Stenback, et al. (March–April 2004). “Bug 237319 – Add support for server push using multipart/x-mixed-replace with XMLHttpRequest”. Mozilla bug tracking. Retrieved 29 November 2007. Also see:
Alex Russell (6 August 2005). “Toward server-sent data w/o iframes”. Alex Russell’s blog. Retrieved 29 November 2007.
^ Rob Butler, et al. (June 2006). “Bug 14392: Add support for multipart/x-mixed-replace to XMLHttpRequest”. Webkit bug tracking. Retrieved 29 November 2007.
^ a b Flanagan, David (2006-08-17). "13.8.4 Cross-Site Scripting" (in English). JavaScript the Definitive Guide. The Definitive Guide. O'Reilly Media. p. 994. ISBN 0596101996. 
^ Just van den Broecke (3 January 2007). “Pushlets: Send events from servlets to DHTML client browsers”. JavaWorld. Retrieved 14 December 2007.
^ Borland, John (2001-04-01). "Will the "refresh" button become obsolete?" (in English) (html). CNET Networks. http://news.cnet.com/2100-1023-255088.html. Retrieved on 2008-07-22. 
^ Alex Russell (3 March 2006). “Comet: Low Latency Data for the Browser”. Alex Russell’s blog. Retrieved 29 November 2007.
^ K. Taft, Darryl (2006-05-12). "Microsoft Scrubs Comet from AJAX Tool Set" (html). eWEEK.com. http://www.eweek.com/c/a/Application-Development/Microsoft-Scrubs-Comet-from-AJAX-Tool-Set/. Retrieved on 2008-07-21. 
^ Orbited: Enabling Comet for the Masses: OSCON 2008 - O'Reilly Conferences, July 21 - 25, 2008, Portland, Oregon
^ Enterprise Comet & Web 2.0 Live Presentation
^ Dion Almaer (29 September 2005). “Jotspot Live: Live, group note-taking” (interview with Abe Fettig). Ajaxian. Retrieved 15 December 2007.
Matt Marshall (15 December 2006). “Renkoo launches event service — in time to schedule holiday cocktails”. Venture Beat. Retrieved 15 December 2007.
^ Clint Boulton (27 December 2005). “Startups Board the AJAX Bandwagon”. DevX News. Retrieved 18 February 2008.
^ "6.2 Server-sent DOM events". HTML 5 - Call For Comments. WHATWG. 2007-10-27. http://www.whatwg.org/specs/web-apps/2007-10-26/multipage/section-server-sent-events.html#server-sent-events. Retrieved on 2008-10-07. 
^ Alex Russell, et al. (2007). "Bayeux Protocol - Bayeux 1.0draft1.". Dojo Foundation. http://svn.cometd.org/trunk/bayeux/bayeux.html. Retrieved on 2007-12-14. 
^ Crockford, Douglas (2006-04-17). "JSONRequest Duplex". An alternative to XMLHttpRequest for long lasting server initiated push of data. http://www.json.org/JSONRequest.html. Retrieved on 2008-05-05. 



[edit] External links

Comet Daily – a website dedicated to articles on Comet techniques
HTTP Streaming at Ajax Patterns




Retrieved from "http://en.wikipedia.org/wiki/Comet_(programming)"
Categories: Ajax (programming) | Buzzwords | Web development | Web 2.0 neologismsHidden categories: Articles with peacock terms | Articles that may contain original research since June 2008 | Wikipedia articles needing style editing from May 2008 | All articles needing style editing | Cleanup from June 2008 | All pages needing cleanup | Accuracy disputes from June 2008 | All articles that may contain original research | Articles that may contain original research since March 2009 | Technology articles needing expert attention | Articles needing expert attention since October 2008 | Vague or ambiguous time | Articles that may contain original research since October 2008 | Wikipedia articles needing clarification from October 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Español
Français
Magyar
日本語
Македонски
Português
Русский









 This page was last modified on 2 April 2009, at 04:14 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
