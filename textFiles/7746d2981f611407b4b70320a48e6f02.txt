













Karplus-Strong string synthesis - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Karplus-Strong_string_synthesis";
		var wgTitle = "Karplus-Strong string synthesis";
		var wgAction = "view";
		var wgArticleId = "44714";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 273764843;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 


wgOggPlayer.msg = {"ogg-play": "Play", "ogg-pause": "Pause", "ogg-stop": "Stop", "ogg-no-player": "Sorry, your system does not appear to have any supported player software.\nPlease \x3ca href=\"http://www.mediawiki.org/wiki/Extension:OggHandler/Client_download\"\x3edownload a player\x3c/a\x3e.", "ogg-player-videoElement": "Native browser support", "ogg-player-oggPlugin": "Browser plugin", "ogg-player-cortado": "Cortado (Java)", "ogg-player-vlc-mozilla": "VLC", "ogg-player-vlc-activex": "VLC (ActiveX)", "ogg-player-quicktime-mozilla": "QuickTime", "ogg-player-quicktime-activex": "QuickTime (ActiveX)", "ogg-player-totem": "Totem", "ogg-player-kaffeine": "Kaffeine", "ogg-player-kmplayer": "KMPlayer", "ogg-player-mplayerplug-in": "mplayerplug-in", "ogg-player-thumbnail": "Still image only", "ogg-player-selected": "(selected)", "ogg-use-player": "Use player:", "ogg-more": "More…", "ogg-download": "Download file", "ogg-desc-link": "About this file", "ogg-dismiss": "Close", "ogg-player-soundthumb": "No player", "ogg-no-xiphqt": "You do not appear to have the XiphQT component for QuickTime.\nQuickTime cannot play Ogg files without this component.\nPlease \x3ca href=\"http://www.mediawiki.org/wiki/Extension:OggHandler/Client_download\"\x3edownload XiphQT\x3c/a\x3e or choose another player."};
wgOggPlayer.cortadoUrl = "http://upload.wikimedia.org/jars/cortado.jar";
wgOggPlayer.extPathUrl = "/w/extensions/OggHandler";


.ogg-player-options {
	border: solid 1px #ccc;
	padding: 2pt;
	text-align: left;
	font-size: 10pt;
}
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Karplus-Strong string synthesis

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Karplus-Strong string synthesis is a method of physical modelling synthesis that loops a short waveform through a filtered delay line to simulate the sound of a hammered or plucked string or some types of percussion. Although it is useful to view this as a subtractive synthesis technique based on a feedback loop similar to that of a comb filter for z-transform analysis, it is better viewed as the simplest of a class of wavetable-modification algorithms now known as digital waveguide synthesis, as the delay line acts to store one period of the signal.
Alexander Strong invented the algorithm, and Kevin Karplus did the first analysis of how it worked. Together they developed software and hardware implementations of the algorithm, including a custom VLSI chip. They named the algorithm "Digitar" synthesis, as an abbreviation for "digital guitar".





Contents


1 How it works
2 Tuning the string
3 Refinements to the algorithm
4 References
5 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] How it works




A short excitation waveform (of length L samples) is generated. In the original algorithm, this was a burst of white noise, but it can also include any wideband signal, such as a rapid sine wave frequency sweep or a single cycle of a sawtooth wave or square wave.
This excitation is output and simultaneously fed back into a delay line L samples long.
The output of the delay line is fed through a filter. The gain of the filter must be less than 1 at all frequencies, and the filter is usually a first-order lowpass filter (as pictured). In the original algorithm, the filter consisted of averaging two adjacent samples, a particularly cheap filter that can be done without a multiplier (just shift and add operations).
The filtered output is simultaneously mixed back into the output and fed back into the delay line.


[edit] Tuning the string
The period of the resulting signal is the period of the delay line plus the average group delay of the filter; the fundamental frequency, as usual, is the reciprocal of the period. The required delay D for a given fundamental frequency F1 is therefore calculated according to D = Fs/F1 where Fs is the sampling frequency.
The length of any digital delay line is a whole-number multiple of the sampling period. In order to obtain a fractional delay, interpolating filters are used with parameters selected to obtain an appropriate group delay at the fundamental frequency. Either IIR or FIR filters may be used, however FIR have the advantage that transients are suppressed if the fractional delay is changed over time. The most elementary fractional delay is the linear interpolation between two samples (e.g., s(4.2) = 0.8s(4) + 0.2s(5)). If the group delay varies too much with frequency, harmonics may be sharpened or flattened relative to the fundamental frequency. The original algorithm used equal weighting on two adjacent samples, as this can be achieved without multiplication hardware, allowing extremely cheap implementations.
Z-transform analysis can be used to get the pitches and decay times of the harmonics more precisely, as explained in the 1983 paper that introduced the algorithm.
A demonstration of the Karplus-Strong algorithm can be heard in the following Vorbis file. The algorithm used a loop gain of 0.98 with increasingly attenuating first order lowpass filters. The pitch of the note was A2, or 220 Hz.










Karplus-Strong #1









F1 = 220Hz









Problems listening to this file? See media help.


Holding the period (= length of the delay line) constant produces vibrations similar to those of a string or bell. Increasing the period sharply after the transient input produces drum-like sounds.

[edit] Refinements to the algorithm
Alex Strong and Kevin Karplus realized that the Karplus-Strong algorithm was physically analogous to a sampling of the transversal wave on a string instrument, with the filter in the feedback loop representing the total string losses over one period. Julius O. Smith III [1] and others generalized the algorithm to digital waveguide synthesis, which could also be used to model acoustic waves in tubes and on drum membranes.
Alex Strong developed a superior wavetable-modification method for plucked-string synthesis, but only published it as a patent.

[edit] References

Kevin Karplus, Alex Strong (1983). "Digital Synthesis of Plucked String and Drum Timbres". Computer Music Journal (MIT Press) 7 (2): 43–55. doi:10.2307/3680062. 


David A. Jaffe, Julius O. Smith (1983). "Extensions of the Karplus-Strong Plucked String Algorithm". Computer Music Journal (MIT Press) 7 (2): 56–69. doi:10.2307/3680063. 


US4,649,783 (PDF version) (1987-03-17) Alexander R. Strong, Kevin J. Karplus, Wavetable Modification Instrument and Method for Generating Musical Sound. 


US4,622,877 (PDF version) (1986-11-18) Alexander R. Strong, Independently controlled wavetable-modification instrument and method for generating musical sound. 


Moore, F. Richard. Elements of Computer Music. Upper Saddle River: Prentice-Hall, 1990. ISBN 0-13-252552-6.


[edit] External links

The Karplus-Strong Algorithm
Sound Examples
More sound examples under CC license
Flash application implementing a guitar








v • d • e

Sound synthesis types





Frequency modulation synthesis | Phase distortion synthesis | Scanned synthesis | Subtractive synthesis | Additive synthesis | HCM synthesis | Distortion synthesis | Linear Arithmetic synthesis





Sample-based synthesis

Wavetable synthesis | Granular synthesis  | Vector synthesis






Physical modelling synthesis

Digital waveguide synthesis | Karplus-Strong string synthesis | Formant synthesis









Retrieved from "http://en.wikipedia.org/wiki/Karplus-Strong_string_synthesis"
Categories: Sound technology | Sound synthesis types | Sound production technology 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Italiano









 This page was last modified on 27 February 2009, at 23:54 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
