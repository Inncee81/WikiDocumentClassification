













Model-driven architecture - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Model-driven_architecture";
		var wgTitle = "Model-driven architecture";
		var wgAction = "view";
		var wgArticleId = "401169";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 270188253;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Model-driven architecture

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Model-driven architecture (MDA) is a software design approach for the development of software systems. It provides a set of guidelines for the structuring of specifications, which are expressed as models. Model-driven architecture is a kind of domain engineering, and supports model-driven engineering of software systems. It was launched by the Object Management Group (OMG) in 2001.[1]




Contents


1 Overview

1.1 Related standards
1.2 Trademark


2 Model-driven architecture topics

2.1 MDA approach
2.2 MDA tools
2.3 MDA concerns


3 Conferences
4 Code generation controversy
5 See also
6 References
7 Further reading
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
The Model-Driven Architecture approach defines system functionality using a platform-independent model (PIM) using an appropriate domain-specific language.
Then, given a platform definition model (PDM) corresponding to CORBA, .NET, the Web, etc., the PIM is translated to one or more platform-specific models (PSMs) that computers can run. (EDIT: This requires mappings and transformations and should be modeled too.)
The PSM may use different Domain Specific Languages, or a General Purpose Language like Java, C#, PHP, Python, etc.[citation needed]. Automated tools generally perform this translation.
The OMG organization provides rough specifications rather than implementations, often as answers to Requests for Proposals (RFPs). Implementations come from private companies or open source groups.
MDA principles can also apply to other areas such as business process modeling where the PIM is translated to either automated or manual processes[citation needed].

[edit] Related standards
The MDA model is related to multiple standards, including the Unified Modeling Language (UML), the Meta-Object Facility (MOF), XML Metadata Interchange (XMI), Enterprise Distributed Object Computing (EDOC), the Software Process Engineering Metamodel (SPEM), and the Common Warehouse Metamodel (CWM). Note that the term “architecture” in Model-driven architecture does not refer to the architecture of the system being modeled, but rather to the architecture of the various standards and model forms that serve as the technology basis for MDA.
Executable UML is another specific approach to implement MDA

[edit] Trademark
The Object Management Group holds trademarks on MDA, as well as several similar terms including Model Driven Development (MDD), Model Driven Application Development, Model Based Application Development, Model Based Programming, and others. The main acronym that has not yet been deposited by OMG until now is MDE. As a consequence, the research community uses MDE to refer to general model engineering ideas, without committing to strict OMG standards.[citation needed]

[edit] Model-driven architecture topics

[edit] MDA approach
OMG focuses Model-driven architecture on forward engineering, i.e. producing code from abstract, human-elaborated modelling diagrams (eg class diagrams)[citation needed]. OMG's ADTF (Analysis and Design Task Force) group leads this effort. With some humour, the group chose ADM (MDA backwards) to name the study of reverse engineering. ADM decodes to Architecture-Driven Modernization. The objective of ADM is to produce standards for model-based reverse engineering of legacy systems [2]. Knowledge Discovery Metamodel (KDM) is the furthest along of these efforts, and describes information systems in terms of various assets (programs, specifications, data, test files, database schemas, etc.).
One of the main aims of the MDA is to separate design from architecture. As the concepts and technologies used to realize designs and the concepts and technologies used to realize architectures have changed at their own pace, decoupling them allows system developers to choose from the best and most fitting in both domains. The design addresses the functional (use case) requirements while architecture provides the infrastructure through which non-functional requirements like scalability, reliability and performance are realized. MDA envisages that the platform independent model (PIM), which represents a conceptual design realizing the functional requirements, will survive changes in realization technologies and software architectures.
Of particular importance to model-driven architecture is the notion of model transformation. A specific standard language for model transformation has been defined by OMG called QVT.

[edit] MDA tools
The OMG organization provides rough specifications rather than implementations, often as answers to Requests for Proposals (RFPs). The OMG documents the overall process in a document called the MDA Guide.
Basically, an MDA tool is a tool used to develop, interpret, compare, align, measure, verify, transform, etc. models or metamodels.[3] In the following section "model" is interpreted as meaning any kind of model (e.g. a UML model) or metamodel (e.g. the CWM metamodel). In any MDA approach we have essentially two kinds of models: initial models are created manually by human agents while derived models are created automatically by programs. For example an analyst may create a UML initial model from its observation of some loose business situation while a Java model may be automatically derived from this UML model by a Model transformation operation.
An MDA tool may be one or more of the following types[citation needed]:

Creation Tool: A tool used to elicit initial models and/or edit derived models.
Analysis Tool: A tool used to check models for completeness, inconsistencies, or error and warning conditions. Also used to calculate metrics for the model.
Transformation Tool: A tool used to transform models into other models or into code and documentation.
Composition Tool: A tool used to compose (i.e. to merge according to a given composition semantics) several source models, preferably conforming to the same metamodel.
Test Tool: A tool used to "test" models as described in Model-based testing.
Simulation Tool: A tool used to simulate the execution of a system represented by a given model. This is related to the subject of model execution.
Metadata Management Tool: A tool intended to handle the general relations between different models, including the metadata on each model (e.g. author, date of creation or modification, method of creation (which tool? which transformation? etc.)) and the mutual relations between these models (i.e. one metamodel is a version of another one, one model has been derived from another one by a transformation, etc.)
Reverse Engineering Tool: A tool intended to transform particular legacy or information artifact portfolios into full-fledged models.

Some tools perform more than one of the functions listed above. For example, some creation tools may also have transformation and test capabilities. There are other tools that are solely for creation, solely for graphical presentation, solely for transformation, etc.
One of the characteristics of MDA tools is that they mainly take models (e.g. MOF models or metamodels) as input and generate models as output[citation needed]. In some cases however the parameters may be taken outside the MDA space like in model to text or text to model transformation tools.
Implementations of the OMG specifications come from private companies or open source groups. One important source of implementations for OMG specifications is the Eclipse Foundation. Many implementations of OMG modeling standards may be found in the Eclipse Modeling Framework (EMF) or Graphical Modeling Framework (GMF), the Eclipse foundation is also developing other tools of various profiles as GMT. Eclipse's compliance to OMG specifications is often not strict. This is true for example for OMG's EMOF standard, which Eclipse approximates with its ECORE implementation. More examples may be found in the M2M project implementing the QVT standard or in the M2T project implementing the MOF2Text standard.
Power RAD is being developed by Outline Systems Inc. Microsoft is proposing the DSL tools approach which is a similar approach, not based on OMG standards. Another open source project called AndroMDA provides an extensible framework for generating code using virtually any technology/platform (e.g., .NET, Java, etc.) and is meant to be used repeatedly as part of the build process (i.e., instead of just generating starter code once at the beginning of a project).
One should be careful not to confuse the List of MDA Tools and the List of UML tools, the former being much broader. This distinction can be made more general by distinguishing 'variable metamodel tools' and 'fixed metamodel tools'. A UML CASE tool is typically a 'fixed metamodel tool' since it has been hard-wired to work only with a given version of the UML metamodel (e.g. UML 2.1). On the contrary, other tools have internal generic capabilities allowing them to adapt to arbitrary metamodels or to a particular kind of metamodels.
Usually MDA tools focus rudimentary architecture specification, although in some cases the tools are architecture-independent (or platform independent).
Simple examples of architecture specifications include:

Selecting one of a number of supported reference architectures like Java EE or Microsoft .NET,
Specifying the architecture at a finer level including the choice of presentation layer technology, business logic layer technology, persistence technology and persistence mapping technology (e.g. object-relational mapper).
Metadata: information about data.


[edit] MDA concerns
Some key concepts that underpin the MDA approach (launched in 2001) were first elucidated by the Shlaer-Mellor method during the late 1980s. Indeed a key absent technical standard of the MDA approach (that of an action language syntax for Executable UML) has been bridged by some vendors by adapting the original Shlaer-Mellor Action Language (modified for UML)[citation needed]. However during this period the MDA approach has not gained mainstream industry acceptance; with the Gartner Group still identifying MDA as an "on the rise" technology in its 2006 "Hype Cycle"[4], and Forrester Research declaring MDA to be "D.O.A." in 2006[5]. Potential concerns that have been raised with the OMG MDA approach include:

Incomplete Standards: The MDA approach is underpinned by a variety of technical standards, some of which are yet to be specified (e.g. an action semantic language for xtUML), or are yet to be implemented in a standard manner (e.g. a QVT transformation engine or a PIM with a virtual execution environment).[6][7]
Vendor Lock-in: Although MDA was conceived as an approach for achieving (technical) platform independence, current MDA vendors have been reluctant to engineer their MDA toolsets to be interoperable. Such an outcome could result in vendor lock-in for those pursuing an MDA approach.[citation needed]
Idealistic: MDA is conceived as a forward engineering approach in which models that incorporate Action Language programming are transformed into implementation artifacts (e.g. executable code, database schema) in one direction via a fully or partially automated "generation" step. This aligns with OMG's vision that MDA should allow modelling of a problem domain's full complexity in UML (and related standards) with subsequent transformation to a complete (executable) application[8]. This approach does, however, imply that changes to implementation artifacts (e.g. database schema tuning) are not supported . This constitutes a problem in situations where such post-transformation "adapting" of implementation artifacts is seen to be necessary. Evidence that the full MDA approach may be too idealistic for some real world deployments has been seen in the rise of so-called "pragmatic MDA"[9]. Pragmatic MDA blends the literal standards from OMG's MDA with more traditional model driven mechanisms such as round-trip engineering that provides support for adapting implementation artifacts.
Specialised Skillsets: Practitioners of MDA based software engineering are (as with other toolsets) required to have a high level of expertise in their field. Current expert MDA practitioners (often referred to as Modeller/Architects) are scarce relative to the availability of traditional developers.[10]
OMG Track Record: The OMG consortium who sponsor the MDA approach (and own the MDA trademark) also introduced and sponsored the CORBA standard which itself failed to materialise as a widely utilised standard[11].
Uncertain Value Proposition: As discussed, the vision of MDA allows for the specification of a system as an abstract model, which may be realized as a concrete implementation (program) for a particular computing platform (i.e. .NET). Thus an application that has been successfully developed via a pure MDA approach could theoretically be ported to a newer release .NET platform (or even a Java platform) in a deterministic manner – although significant questions remain as to real-world practicalities during translation (such as user interface implementation). Whether this capability represents a significant value proposition remains a question for particular adopters. Regardless, adopters of MDA who are seeking value via an "alternative to programming" should be very careful when assessing this approach. The complexity of any given problem domain will always remain, and the programming of business logic needs to be undertaken in MDA as with any other approach. The difference with MDA is that the programming language used (e.g. xtUML) is more abstract (than, say, Java or C#) and exists interwoven with traditional UML artifacts (e.g. class diagrams). Whether programming in a language that is more abstract than mainstream 3GL languages will result in systems of better quality, cheaper cost or faster delivery, is a question that has yet to be adequately answered.


[edit] Conferences
Among the various conferences on this topic we may mention ECMDA, the European Conference on MDA and also MoDELS, former firmed as <<UML>> conference series (till 2004), the Italian Forum on MDA in collaboration with the OMG. There are also several conferences and workshops (at OOPSLA, ECOOP mainly) focusing on more specific aspects of MDA like model transformation, model composition, and generation.

[edit] Code generation controversy
Code generation means, that the user creates UML diagrams, which have some connoted model data, and the UML tool derives from the diagrams parts or all of the source code for the software system. In some tools, the user can provide a skeleton of the program source code, in the form of a source code template where predefined tokens are then replaced with program source code parts during the code generation process.
There is some debate among software developers about how useful code generation as such is. It certainly depends on the specific problem domain and how far code generation should be applied. There are well known areas where code generation is an established practice, not limited to the field of UML.
The idea of completely leaving the "code level" and start "programming" on the UML diagram level (i.e., design level) is quite debated among developers. That is the vision for MDA. This idea is not in such widespread use compared to other software development tools like compilers or software configuration management systems.
An often cited criticism is that the UML diagrams just lack the detail which is needed to contain the same information as is covered with the program source. Some developers even claim that "the Code is the design" [12][13].

[edit] See also

Algebra of Systems
ATLAS Transformation Language
Code generation
CodeGear ECO
Customer Relationship Management * Compiere
Domain-driven design
Enterprise Resource Planning
Executable UML
Jean-Marc Jézéquel
Meta-Object Facility
Metamodeling
Model-driven engineering
Model-driven integration
Model Transformation Language
Modeling Maturity Levels
openCRX
Platform Independent Model
Platform Specific Model
Software factory
Unified Modeling Language
QVT
Web engineering
WebML


[edit] References


^ "OMG pursues new strategic direction to build on success of past efforts"
^ adm website http://adm.omg.org
^ Bézivin, J, Gérard, S, Muller, P-A, and Rioux, L (2003). MDA components: Challenges and Opportunities. In: Metamodelling for MDA. http://www.sciences.univ-nantes.fr/lina/atl/www/papers/MDAComponents-ChallengesOpportunities.V1.3.PDF. 
^ "Hype Cycle for Emerging Technologies, 2006" $495.00
^ "MDA Is DOA, Partly Thanks To SOA"
^ "UML - Unified or Universal Modeling Language? UML2, OCL, MOF, EDOC - The Emperor Has Too Many Clothes"
^ "MDA: Nice Idea. Shame about the..."
^ "Bringing MDA to Eclipse, using a pragmatic approach"
^ "A Response to Forrester"
^ "Are You Ready For the MDA?"
^ "The Rise and Fall of CORBA"
^ http://www.developerdotstar.com/mag/articles/reeves_design_main.html by Jack W. Reeves
^ Bleading-Edge



[edit] Further reading

David S. Frankel. Model Driven Architecture: Applying MDA to Enterprise Computing. John Wiley & Sons, ISBN 0-471-31920-1
Meghan Kiffer The MDA Journal: Model Driven Architecture Straight From The Masters. ISBN 0-929652-25-8
Anneke Kleppe (2003). MDA Explained, The Model Driven Architecture: Practice and Promise. Addison-Wesley. ISBN 0-321-19442-X
Steve Mellor (2004). MDA Distilled, Principles of Model Driven Architecture. Addison-Wesley Professional. ISBN 0-201-78891-8
Chris Raistrick. Model Driven Architecture With Executable UML. Cambridge University Press, ISBN 0-521-53771-1
Stanley J. Sewall. Executive Justification for MDA


[edit] External links





This article's external links may not follow Wikipedia's content policies or guidelines. Please improve this article by removing excessive or inappropriate external links.



MDA FAQ at OMG Website
Mendix:Provider of Model Driven application platform
The official MDA Guide Version 1.0.1
OMG's MDA Web site
An Introduction to Model Driven Architecture at ibm.com
Animated Introduction - MDA Explained (4 minutes) at PathfinderMDA.com
OMG's list of MDA tools and products
Understanding the Model Driven Architecture (MDA)
When Model Driven Architecture turn out right by Giancarlo Frison
Domain-Specific Modeling and Model Driven Architecture by Steve Cook
Domain Specific Modeling in IoC Frameworks
Planet MDE's list of MDA tools
Model-Driven Architecture: Vision, Standards And Emerging Technologies at omg.org
On the Unification Power of Models.
Acceleo - OpenSource MDA Code generator based on Eclipse and EMF
BLU AGE(tm) - 100% Application Generator based on UML/OCL/MDA technologies
ECO - Model-Driven Development framework from CodeGear (Borland) company
configX - MDA framework for creating web applications
Executive Justification for MDA
Select Business Solutions - Select Solution for MDA based on Select Architect's UML and code synchronization capabilities
Discussion of Compiere, an MDA enterprise application environment, which directly executes the model (without code generation)
International School on Model-Driven Design for Distributed, Realtime, Embedded Systems (MDD4DRES)









v • d • e

Unified Modeling Language





Actors

Organizations: Object Management Group • UML Partners • Persons: Grady Booch • Ivar Jacobson • James Rumbaugh






Concepts

Object oriented: Object-oriented programming • Object-oriented analysis and design
Structure: Actor • Attribute • Artifact • Class • Component • Interface • Object • Package
Behavior: Activity • Event • Message • Method • State • Use case
Relationships: Aggregation • Association • Composition • Dependency • Generalization (or Inheritance)
Extensibility: Profile • Stereotype • Other concepts: Multiplicity






Structure diagrams

Class diagram • Component diagram • Composite structure diagram • Deployment diagram • Object diagram • Package diagram






Behavior diagrams

Activity diagram • State Machine diagram • Use case diagram






Interaction diagrams

Communication diagram • Sequence diagram • Interaction overview diagram • Timing diagram






Other topics

Glossary of UML terms • IBM Rational Unified Process • List of UML tools • Systems Modeling Language • UML colors • XMI









Retrieved from "http://en.wikipedia.org/wiki/Model-driven_architecture"
Categories: Systems engineering | Unified Modeling LanguageHidden categories: All articles with unsourced statements | Articles with unsourced statements since February 2007 | Wikipedia external links cleanup 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
فارسی
Français
Galego
Bahasa Indonesia
Italiano
Nederlands
日本語
Polski
Português
Русский
Tiếng Việt
中文









 This page was last modified on 12 February 2009, at 09:21.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
