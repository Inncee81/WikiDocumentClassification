













Spreadsheet - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Spreadsheet";
		var wgTitle = "Spreadsheet";
		var wgAction = "view";
		var wgArticleId = "27686";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282406262;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Spreadsheet

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (March 2008)


A spreadsheet is a computer application that simulates a paper worksheet. It displays multiple cells that together make up a grid consisting of rows and columns, each cell containing either alphanumeric text or numeric values. A spreadsheet cell may alternatively contain a formula that defines how the contents of that cell is to be calculated from the contents of any other cell (or combination of cells) each time any cell is updated. Spreadsheets are frequently used for financial information because of their ability to re-calculate the entire sheet automatically after a change to a single cell is made.
The related term spreadmart describes the situation that occurs when one or more business analysts develop a system of linked spreadsheets to perform a business analysis, then grow it to a size and degree of complexity that makes it nearly impossible to maintain. Re-implementing the analysis using a datamart architecture often improves both the reliability of the analysis and its maintainability.
Visicalc is usually considered the first electronic spreadsheet (although this has been challenged), and it helped turn the Apple II computer into a success and greatly assisted in their widespread application. Lotus 1-2-3 was the leading spreadsheet when DOS was the dominant operating system. Excel is now considered to have the largest market share on the Windows and Macintosh platforms.




Contents


1 History

1.1 Paper spreadsheets
1.2 Early implementations

1.2.1 Batch spreadsheet report generators
1.2.2 LANPAR spreadsheet compiler
1.2.3 Autoplan/Autotab spreadsheet programming language
1.2.4 Interactive spreadsheets
1.2.5 APLDOT modeling language


1.3 VisiCalc
1.4 Lotus 1-2-3 and other MS-DOS spreadsheets
1.5 Microsoft Excel
1.6 Apple Numbers
1.7 OpenOffice.org Calc
1.8 Gnumeric
1.9 Web based spreadsheets
1.10 Other spreadsheets
1.11 Other products


2 Concepts

2.1 Cells

2.1.1 Values
2.1.2 Automatic recalculation
2.1.3 Real time update
2.1.4 Formula
2.1.5 Locked cell
2.1.6 Data format
2.1.7 Text format
2.1.8 Named cells
2.1.9 Cell reference
2.1.10 Cell Ranges


2.2 Sheets
2.3 Remote Spreadsheet
2.4 Charts
2.5 Multi-dimensional Spreadsheets
2.6 Logical Spreadsheets


3 Programming issues
4 Shortcomings
5 See also
6 References
7 External links

7.1 History of spreadsheets
7.2 General information







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History

[edit] Paper spreadsheets
The word "spreadsheet" came from "spread" in its sense of a newspaper or magazine item (text and/or graphics) that covers two facing pages, extending across the center fold and treating the two pages as one large one. The compound word "spread-sheet" came to mean the format used to present book-keeping ledgers—with columns for categories of expenditures across the top, invoices listed down the left margin, and the amount of each payment in the cell where its row and column intersect—which were, traditionally, a "spread" across facing pages of a bound ledger (book for keeping accounting records) or on oversized sheets of paper ruled into rows and columns in that format and approximately twice as wide as ordinary paper.

[edit] Early implementations

[edit] Batch spreadsheet report generators





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (March 2008)


The concept of an electronic spreadsheet was outlined in the 1961 paper "Budgeting Models and System Simulation" by Richard Mattessich.[1] The subsequent work by Mattessich (1964a, Chpt. 9, Accounting and Analytical Methods) and its companion volume, Mattessich (1964b, Simulation of the Firm through a Budget Computer Program) applied computerized spreadsheets to accounting and budgeting systems (on main-frame computers in FORTRAN IV). Batch Spreadsheets dealt primarily with the addition or subtraction of entire columns or rows - rather than individual cells.

[edit] LANPAR spreadsheet compiler
Key invention in the development of electronic spreadsheets was made by Rene K. Pardo and Remy Landau, who filed in 1971 U.S. patent 4,398,249  on spreadsheet automatic natural order recalculation algorithm in 1970. While the patent was initially rejected by the patent office as being a purely mathematical invention, following 12 years of Appeals, Pardo and Landau won a landmark court case at the CCPA (Predecessor Court of the Federal Circuit) overturning the Patent Office in 1983 - establishing that "something does not cease to become patentable merely because the point of novelty is in an algorithm."
The actual software was called LANPAR - LANguage for Programming Arrays at Random. This was conceived and entirely developed in the summer of 1969 following Pardo and Landau's recent graduation from Harvard University. Co-inventor Rene Pardo recalls that he felt that one manager at Bell Canada should not have to depend on programmers to program and modify budgeting forms, and he thought of letting users type out forms in any order and having computer calculating results in the right order. The software was developed in 1969.[2]
LANPAR was used by Bell Canada, AT&T and the 18 operating telcos nationwide for their local and national budgeting operations. LANPAR was also used by General Motors. Its uniqueness was the incorporation of natural order recalculation,[3] as opposed to left-to-right, top to bottom sequence for calculating the results in each cell that was used by Visicalc, Supercalc and the first version of Multiplan. Without natural order recalculation the users had to manually recalculate the spreadsheet as many times as necessary until the values in all the cells had stopped changing.
The LANPAR system was implemented on GE400 and Honeywell 6000 online timesharing systems enabling users to program remotely via computer terminals and modems. Data could be entered dynamically either by paper tape, specific file access, on line, or even external data bases. Sophisticated mathematical expressions including logical comparisons and "if/then" statements could be used in any cell, and cells could be presented in any order.

[edit] Autoplan/Autotab spreadsheet programming language





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (March 2008)


In 1968, three former employees from the General Electric computer company headquartered in Phoenix, Arizona set out to start their own software development house. A. Leroy Ellison, Harry N. Cantrell, and Russell E. Edwards found themselves doing a large number of calculations when making tables for the business plans that they were presenting to venture capitalists. They decided to save themselves a lot of effort and wrote a computer program that produced their tables for them. This program, originally conceived as a simple utility for their personal use, would turn out to be the first software product offered by the company that would become known as Capex Corporation. "AutoPlan" ran on GE’s Time-sharing service; afterward, a version that ran on IBM mainframes was introduced under the name "AutoTab". (National CSS offered a similar product, CSSTAB, which had a moderate timesharing user base by the early 70s. A major application was opinion research tabulation.) AutoPlan/AutoTab was not a WYSIWYG interactive spreadsheet program, it was a simple scripting language for spreadsheets. The user defined the names and labels for the rows and columns, then the formulas that defined each row or column.

[edit] Interactive spreadsheets
Interactive spreadsheets became possible when computer displays became available. Except for LANPAR- which allowed many users in real time and online to timesharing systems to simultaneously program or run their spreadsheets from their computer terminals across the country - earlier implementations were mainly designed around batch programs and certainly none of these batch programs allowed for forward referencing of cells or natural order recalculation. In the early 1970s text based computer displays began to be used as input/output devices for interactive transaction processes. This was sufficient for early interactive spreadsheets to be implemented. The lack of on-line historical material relating to such systems, and their limited coverage in academic and commercial publications, makes it hard to assess their level of innovation and ultimate impact.

[edit] APLDOT modeling language
An example of an early "industrial weight" spreadsheet was APLDOT, developed in 1976 at the United States Railway Association on an IBM 360/91, running at The Johns Hopkins University Applied Physics Laboratory in Laurel, MD.[4] The application was used successfully for many years in developing such applications as financial and costing models for the US Congress and for Conrail. APLDOT was dubbed a "spreadsheet" because financial analysts and strategic planners used it to solve the same problems they addressed with paper spreadsheet pads.

[edit] VisiCalc
The spreadsheet concept became widely known in the late 1970s and early 1980s because of Dan Bricklin's implementation of VisiCalc. VisiCalc was the first spreadsheet that combined all essential features of modern spreadsheet applications, such as WYSIWYG interactive user interface, automatic recalculation, status and formula lines, range copying with relative and absolute references, formula building by selecting referenced cells. PC World magazine has called VisiCalc the first electronic spreadsheet.[5]
Bricklin has spoken of watching his university professor create a table of calculation results on a blackboard. When the professor found an error, he had to tediously erase and rewrite a number of sequential entries in the table, triggering Bricklin to think that he could replicate the process on a computer, using the blackboard as the model to view results of underlying formulas. His idea became VisiCalc, the first application that turned the personal computer from a hobby for computer enthusiasts into a business tool.




Screenshot of VisiCalc, the first PC spreadsheet.


VisiCalc went on to become the first "killer app", an application that was so compelling, people would buy a particular computer just to own it. In this case the computer was the Apple II, and VisiCalc was no small part in that machine's success. The program was later ported to a number of other early computers, notably CP/M machines, the Atari 8-bit family and various Commodore platforms. Nevertheless, VisiCalc remains best known as "an Apple II program".

[edit] Lotus 1-2-3 and other MS-DOS spreadsheets
The acceptance of the IBM PC following its introduction in August, 1981, began slowly, because most of the programs available for it were ports from other 8-bit platforms. Things changed dramatically with the introduction of Lotus 1-2-3 in November, 1982, and release for sale in January, 1983. It became that platform's killer app, and drove sales of the PC due to the improvements in speed and graphics compared to VisiCalc.
Lotus 1-2-3, along with its competitor Borland Quattro, soon displaced VisiCalc. Lotus 1-2-3 was released on January 26, 1983, started outselling then-most-popular VisiCalc the very same year, and for a number of years was the leading spreadsheet for DOS.

[edit] Microsoft Excel
Microsoft had been developing Excel on the Macintosh platform for several years at this point, where it had developed into a fairly powerful system. A port of Excel to Windows 2.0 resulted in a fully functional Windows spreadsheet. The more robust Windows 3.x platforms of the early 1990s made it possible for Excel to take market share from Lotus. By the time Lotus responded with usable Windows products, Microsoft had started compiling their Office suite. Starting in the mid 1990s continuing through the present, Microsoft Excel has dominated the commercial electronic spreadsheet market.

[edit] Apple Numbers
Numbers is Apple Inc.'s spreadsheet software, part of iWork. It focuses on usability and the elegance of chart presentation. Numbers completed Apple's productivity suite, making it a viable competitor to Microsoft Office. It lacks features such as pivot tables.

[edit] OpenOffice.org Calc
OpenOffice.org Calc is a freely available, open-source program modelled after Microsoft Excel. Calc can both open and save in the Excel (XLS) file format[6]. Calc can be acquired as both an installation file and a portable program, capable of being run from a device such as a USB memory drive. It can be downloaded from the OpenOffice.org website.

[edit] Gnumeric
Gnumeric is a free spreadsheet program that is part of the GNOME desktop and has Windows installers available. It is intended to be a free replacement for proprietary spreadsheet programs such as Microsoft Excel, which it broadly and openly emulates. Gnumeric was created and developed by Miguel de Icaza, and the current maintainer is Jody Goldberg.
Gnumeric has the ability to import and export data in several file formats, including CSV, Microsoft Excel, HTML, LaTeX, Lotus 1-2-3, OpenDocument and Quattro Pro; its native format is the Gnumeric file format (.gnm or .gnumeric), an XML file compressed with gzip.[7] It includes all of the spreadsheet functions of the North American edition of Microsoft Excel and many functions unique to Gnumeric. Pivot tables and conditional formatting are not yet supported but are planned for future versions. Gnumeric's accuracy[8] [9] has helped it to establish a niche among people using it for statistical analysis and other scientific tasks.[citation needed] For improving the accuracy of Gnumeric, the developers are cooperating with the R Project.

[edit] Web based spreadsheets
With the advent of advanced web technologies such as Ajax circa 2005, a new generation of online spreadsheets has emerged. Equipped with a rich Internet application user experience, the best web based online spreadsheets have many of the features seen in desktop spreadsheet applications. Some of them have strong multi-user collaboration features. Some of them offer real time updates from remote sources such as stock prices and currency exchange rates.

[edit] Other spreadsheets

A list of current spreadsheet software

Lotus Symphony (2007)
KSpread
ZCubes-Calci
Resolver One


Discontinued spreadsheet software

Advantage
Lotus Improv[10]
Javelin Software
Lotus Jazz for Macintosh
MultiPlan
Borland's Quattro Pro
Silk
SuperCalc
Lotus Symphony (1984)
Wingz for Macintosh
Target Planner Calc for CP/M and TRS-DOS[11][12]




[edit] Other products
A number of companies have attempted to break into the spreadsheet market with programs based on very different paradigms. Lotus introduced what is likely the most successful example, Lotus Improv, which saw some commercial success, notably in the financial world where its powerful data mining capabilities remain well respected to this day. Spreadsheet 2000 attempted to dramatically simplify formula construction, but was generally not successful.

[edit] Concepts

[edit] Cells
A "cell" can be thought of as a box for holding a datum. A single cell is usually referenced by its column and row (A2 would represent the cell below containing the value 10). Its physical size can usually be tailored for its content by dragging its height or width at box intersections (or for entire columns or rows by dragging the column or rows headers).

My Spreadsheet


A
B
C
D


01
value1
value2
added
multiplied


02
10
20
30
200


An array of cells is called a "sheet" or "worksheet". It is analogous to an array of variables in a conventional computer program (although certain unchanging values, once entered, could be considered, by the same analogy, constants). In most implementations, many worksheets may be located within a single spreadsheet. A worksheet is simply a subset of the spreadsheet divided for the sake of clarity. Functionally, the spreadsheet operates as a whole and all cells operate as global variables within the spreadsheet ('read' access only except its own containing cell).
A cell may contain a value or a formula, or it may simply be left empty. By convention, formulas usually begin with = sign.

[edit] Values
A value can be entered from the computer keyboard by directly typing into the cell itself. Alternatively, a value can be based on a formula (see below), which might perform a calculation, display the current date or time, or retrieve external data such as a stock quote or a database value.

The Spreadsheet Value Rule Computer scientist Alan Kay used the term value rule to summarize a spreadsheet's operation: a cell's value relies solely on the formula the user has typed into the cell.[13] The formula may rely on the value of other cells, but those cells are likewise restricted to user-entered data or formulas. There are no 'side effects' to calculating a formula: the only output is to display the calculated result inside its occupying cell. There is no natural mechanism for permanently modifying the contents of a cell unless the user manually modifies the cell's contents. In the context of programming languages, this yields a limited form of first-order functional programming.[14]


[edit] Automatic recalculation
A standard of spreadsheets since the mid 80s[citation needed], this optional feature eliminates the need to manually request the spreadsheet program to recalculate values (nowadays typically the default option unless specifically 'switched off' for large spreadsheets, usually to improve performance). Some earlier spreadsheets required a manual request to recalculate, since recalculation of large or complex spreadsheets often reduced data entry speed. Many modern spreadsheets still retain this option.

[edit] Real time update
This feature refers to updating a cell's contents periodically when its value is derived from an external source - such as a cell in another "remote" spreadsheet. For shared, web-based spreadsheets, it applies to "immediately" updating cells that have been altered by another user. All dependent cells have to be updated also.

[edit] Formula




Animation of a simple spreadsheet that multiplies values in the left column by 2, then sums the calculated values from the right column to the bottom-most cell. In this example, only the values in the A column are entered (10, 20, 30), and the remainder of cells are formulas. Formulas in the B column multiply values from the A column using relative references, and the formula in B4 uses the SUM() function to find the sum of values in the B1:B3 range.


A formula identifies the calculation needed to place the result in the cell it is contained within. A cell containing a formula therefore has two display components; the formula itself and the resulting value. The formula is normally only shown when the cell is selected by "clicking" the mouse over a particular cell; otherwise it contains the result of the calculation.
A formula assigns values to a cell or range of cells, and typically has the format:


=expression


where the expression consists of:

values, such as 2, 9.14 or 6.67E-11;
references to other cells, such as, e.g., A1 for a single cell or B1:B3 for a range;
arithmetic operators, such as +, -, *, /, and others;
relational operators, such as >=, <, and others; and,
functions, such as SUM(), TAN(), and many others.

When a cell contains a formula, it often contains references to other cells. Such a cell reference is a type of variable. Its value is the value of the referenced cell or some derivation of it. If that cell in turn references other cells, the value depends on the values of those. References can be relative (e.g., A1, or B1:B3), absolute (e.g., $A$1, or $B$1:$B$3) or mixed row-wise or column-wise absolute/relative (e.g., $A1 is column-wise absolute and A$1 is row-wise absolute).
The available options for valid formulas depends on the particular spreadsheet implementation but, in general, most arithmetic operations and quite complex nested conditional operations can be performed by most of today's commercial spreadsheets. Modern implementations also offer functions to access custom-build functions, remote data, and applications.
A formula may contain a condition (or nested conditions) - with or without an actual calculation - and is sometimes used purely to identify and highlight errors. In the example below, it is assumed the sum of a column of percentages (A1 through A6) is tested for validity and an explicit message put into the adjacent right-hand cell.

=IF(SUM(A1:A6) > 100, "More than 100%", SUM(A1:A6))

A spreadsheet does not, in fact, have to contain any formulas at all, in which case it could be considered merely a collection of data arranged in rows and columns (a database) like a calendar, timetable or simple list. Because of its ease of use, formatting and hyperlinking capabilities, many spreadsheets are used solely for this purpose.

[edit] Locked cell
Once entered, selected cells (or the entire spreadsheet) can optionally be "locked" to prevent accidental overwriting. Typically this would apply to cells containing formulas but might be applicable to cells containing "constants" such as a kilogram/pounds conversion factor (2.20462262 to eight decimal places). Even though individual cells are marked as locked, the spreadsheet data is not protected until the feature is activated in the file preferences.

[edit] Data format
A cell or range can optionally be defined to specify how the value is displayed. The default display format is usually set by its initial content if not specifically previously set, so that for example "31/12/2007" or "31 Jan 2007" would default to the cell format of "date". Similarly adding a % sign after a numeric value would tag the cell as a percentage cell format. The cell contents are not changed by this format, only the displayed value.
Some cell formats such as "numeric" or "currency" can also specify the number of decimal places.
This can allow invalid operations (such as doing multiplication on a cell containing a date), resulting in illogical results without an appropriate warning.

[edit] Text format
Each cell (like its counterpart the "word" in a word processor) can be separately defined in terms of its displayed format. Any cell or range of cells can be highlighted in several different ways such as use of bold text, colour, font, text size and so on.
These attributes typically do not alter the data content in any way and some formatting may be lost or altered when copying spreadsheet data between different implementations or software versions. In some implementations, the format may be conditional upon the data within the cell - for example, a value may be displayed red if it is negative.

[edit] Named cells
In most implementations, a cell can be "named" so that even if the cell is "cut and pasted" to a new location within the spreadsheet, its reference always remains intact. Names must be unique within the spreadsheet and, once defined, can then be used instead of a "normal" cell reference. When using multiple sheets in a spreadsheet file, an identically named cell range on each sheet can be used if it is distinguised by adding the sheet name. A primary reason for this usage is for creating or running macros that repeat a command across many sheets.

[edit] Cell reference
A cell reference is the name of some cell in some spreadsheet. Most cell references indicate another cell in the same spreadsheet, but a cell reference can also refer to a cell in a different sheet within the same spreadsheet, or (depending on the implementation) to a cell in another spreadsheet entirely, or to a value from a remote application.
A typical cell reference in "A1" style consists of one or two case-insensitive letters to identify the column (if there are up to 256 columns: A-Z and AA-IV) followed by a row number (e.g. in the range 1-65536). Either part can be relative (it changes when the formula it is in is moved or copied), or absolute (indicated with $ in front of the part concerned of the cell reference). The older "R1C1" reference style consists of the letter R, the row number, the letter C, and the column number; relative row or column numbers are indicated by enclosing the number in square brackets. Most current spreadsheets use the A1 style, some providing the R1C1 style as a compatibility option.
When the computer calculates a formula in one cell to update the displayed value of that cell, cell reference(s) in that cell, naming some other cell(s), cause the computer to fetch the value of the named cell(s).
A cell on the same "sheet" is usually addressed as:-

=A1

A cell on a different sheet of the same spreadsheet is usually addressed as:-

=SHEET2!A1             (that is; the first cell in sheet 2 of same spreadsheet).

Some spreadsheet implementations allow a cell references to another spreadsheet (not the current open and active file) on the same computer or a local network. It may also refer to a cell in another open and active spreadsheet on the same computer or network that is defined as shareable. These references contain the complete filename, such as:-

='C:\Documents and Settings\Username\My spreadsheets\[main sheet]Sheet1!A1

In a spreadsheet, references to cells are automatically updated when new rows or columns are inserted or deleted. Care must be taken however when adding a row immediately before a set of column totals to ensure that the totals reflect the additional rows values - which often they do not!
A circular reference occurs when the formula in one cell has a reference that directly -- or indirectly, through a chain of references, each one pointing to another cell that has another reference to the next cell on the chain -- points to the one cell. Many common kinds of errors cause such circular references. However, there are some valid techniques that use such circular references. Such techniques, after many recalculations of the spreadsheet, (usually) converge on the correct values for those cells.

[edit] Cell Ranges
A reference to a range of cells is typically of the form (A1:A6) which specifies all the cells in the range A1 through to A6. A formula such as "=SUM(A1:A6)" would add all the cells specified and put the result in the cell containing the formula itself.

[edit] Sheets
In the earliest spreadsheets, cells were a simple two-dimensional grid. Over time, the model has been expanded to include a third dimension, and in some cases a series of named grids, called sheets. The most advanced examples allow inversion and rotation operations which can slice and project the data set in various ways.

[edit] Remote Spreadsheet
Whenever a reference is made to a cell or group of cells that are not located within the current physical spreadsheet file, it is considered as accessing a "remote" spreadsheet. The contents of the referenced cell may be accessed either on first reference with a manual update or more recently in the case of web based spreadsheets, as a near real time value with a specified automatic refresh interval.

[edit] Charts




An example histogram of the heights of 31 Black Cherry trees.


Many spreadsheet applications permit charts, graphs or histograms to be generated from specified groups of cells which are dynamically re-built as cell contents change. The generated graphic component can either be embedded within the current sheet or added as a separate object.

[edit] Multi-dimensional Spreadsheets
In the late 1980s and early 1990s, first Javelin Software and later Lotus Improv appeared and unlike models in a conventional spreadsheet, they utilized models built on objects called variables, not on data in cells of a report. These multi-dimensional spreadsheets enabled viewing data and algorithms in various self-documenting ways, including simultaneous multiple synchronized views. For example, users of Javelin could move through the connections between variables on a diagram while seeing the logical roots and branches of each variable. This is an example of what is perhaps its primary contribution of the earlier Javelin--the concept of traceability of a user's logic or model structure through its twelve views. A complex model can be dissected and understood by others who had no role in its creation, and this remains unique even today. Javelin was used primarily for financial modeling, but was also used to build instructional models in college chemistry courses, to model the world's economies, and by the military in the early Star Wars project. It is still in use by institutions for which model integrity is mission critical.
In these programs, a time series, or any variable, was an object in itself, not a collection of cells which happen to appear in a row or column. Variables could have many attributes, including complete awareness of their connections to all other variables, data references, and text and image notes. Calculations were performed on these objects, as opposed to a range of cells, so adding two time series automatically aligns them in calendar time, or in a user-defined time frame. Data were independent of worksheets—variables, and therefore data, could not be destroyed by deleting a row, column or entire worksheet. For instance, January's costs are subtracted from January's revenues, regardless of where or whether either appears in a worksheet. This permits actions later used in pivot tables, except that flexible manipulation of report tables was but one of many capabilities supported by variables. Moreover, if costs were entered by week and revenues by month, Javelin's program could allocate or interpolate as appropriate. This object design enabled variables and whole models to reference each other with user-defined variable names, and to perform multidimensional analysis and massive, but easily editable consolidations.

[edit] Logical Spreadsheets
Spreadsheets that have a formula language based upon upon logical expressions, rather than arithmetic expressions are known as logical spreadsheets. Such spreadsheets can be used to be reason deductively about their cell values.

[edit] Programming issues





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (March 2008)


Just as the early programming languages were designed to generate spreadsheet printouts, programming techniques themselves have evolved to process tables (also known as spreadsheets or matrices) of data more efficiently in the computer itself.
Spreadsheets have evolved to use powerful programming languages like VBA; specifically, they are functional, visual, and multiparadigm languages.
Many people find it easier to perform calculations in spreadsheets than by writing the equivalent sequential program. This is due to two traits of spreadsheets.

They use spatial relationships to define program relationships. Like all animals, humans have highly developed intuitions about spaces, and of dependencies between items. Sequential programming usually requires typing line after line of text, which must be read slowly and carefully to be understood and changed.
They are forgiving, allowing partial results and functions to work. One or more parts of a program can work correctly, even if other parts are unfinished or broken. This makes writing and debugging programs much easier, and faster[citation needed]. Sequential programming usually needs every program line and character to be correct for a program to run. One error usually stops the whole program and prevents any result.

A 'spreadsheet program' is designed to perform general computation tasks using spatial relationships rather than time as the primary organizing principle.[citation needed].
It is often convenient to think of a spreadsheet as a mathematical graph, where the nodes are spreadsheet cells, and the edges are references to other cells specified in formulas. This is often called the dependency graph of the spreadsheet. References between cells can take advantage of spatial concepts such as relative position and absolute position, as well as named locations, to make the spreadsheet formulas easier to understand and manage.
Spreadsheets usually attempt to automatically update cells when the cells on which they depend have been changed. The earliest spreadsheets used simple tactics like evaluating cells in a particular order, but modern spreadsheets compute a minimal recomputation order from the dependency graph. Later spreadsheets also include a limited ability to propagate values in reverse, altering source values so that a particular answer is reached in a certain cell. Since spreadsheet cells formulas are not generally invertible, though, this technique is of somewhat limited value.
Many of the concepts common to sequential programming models have analogues in the spreadsheet world. For example, the sequential model of the indexed loop is usually represented as a table of cells, with similar formulas (normally differing only in which cells they reference).

[edit] Shortcomings





This section needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (June 2008)







This article contains weasel words, vague phrasing that often accompanies biased or unverifiable information. Such statements should be clarified or removed. (February 2009)


While spreadsheets are a great step forward in quantitative modeling, they have deficiencies. At the level of overall user benefits, spreadsheets have four main shortcomings.

Spreadsheets have significant reliability problems. Research studies estimate that roughly 94% of spreadsheets deployed in the field contain errors, and 5.2% of cells in unaudited spreadsheets contain errors.[15]


The practical expressiveness of spreadsheets is limited. Several factors contribute to this limitation. Implementing a complex model requires implementing detailed layouts, cell-at-a-time. Authors have difficulty remembering the meanings of hundreds or thousands of cell addresses that appear in formulas.[citation needed]


Collaboration in authoring spreadsheet formulas is difficult because such collaboration must occur at the level of cells and cell addresses. By comparison, programming languages aggregate cells with similar meaning into indexed variables with names that indicate meaning. Although some spreadsheets have good collaboration features, authoring at the level of cells and cell formulas remains a significant obstacle to collaboration in authoring spreadsheet models. On the other hand, many people collaborate on entering numerical data and many people can use the same spreadsheet.


Productivity of spreadsheet modelers is reduced by the cell-level focus of spreadsheets. Even conceptually simple changes in spreadsheets (such as changing starting or ending time or time grain, adding new members or a level of hierarchy to a dimension, or changing one conceptual formula that is represented as hundreds of cell formulas) often require large numbers of manual cell-level operations (such as inserting or deleting cells/rows/columns, editing and copying formulas, re-laying out worksheets). Each of these manual corrections increases the risk of introducing further mistakes.

These four deficiencies in high-level benefits have deeper causes that, ironically, flow directly from the signature strength of spreadsheets (that they capture the structure of models in terms of WYSIWYG sheet layout for authors and report users).

Spreadsheets capture model logic in terms of sheet layout, especially contiguous layout of cells in a table. Spreadsheets have weak or nonexistent methods to capture higher level structures such as named variables, segmentation dimensions, and time series.


Formulas are subordinated to the cell layout. This forces the sheet layout to carry the structure of the model, not variables and formulas that relate variables. This also causes a large proliferation of cells, formulas and cell-level tasks even when only a few basic concepts are involved in a model. This forces authors to think and work at the level of cells instead of at the level of the natural concepts and structures of the model.


Formulas expressed in terms of cell addresses are hard to keep straight and hard to audit. Research shows that spreadsheet auditors who check numerical results and cell formulas find no more errors than auditors who only check numerical results [15].


Proliferation of error-prone manual cell-level operations contributes to all four of the high-level problems listed above.

Other problems associated with spreadsheets include:[16][17]

Some sources advocate the use of specialized software instead of spreadsheets for some applications (budgeting, statistics)[18][19][20]
Many spreadsheet software products, such as Excel (versions prior to 2007) and OpenOffice.org Calc, have a capacity limit of about 65,000 rows.[citation needed] This can present a problem for people using very large datasets, and may result in lost data.
Lack of auditing and revision control. This makes it difficult to determine who changed what and when. This can cause problems with regulatory compliance. Lack of revision control greatly increases the risk of errors due the inability to track, isolate and test changes made to a document.
Lack of security. Generally, if one has permission to open a spreadsheet, one has permission to modify any part of it. This, combined with the lack of auditing above, can make it easy for someone to commit fraud.
Because they are loosely structured, it is easy for someone to introduce an error, either accidentally or intentionally, by entering information in the wrong place or expressing dependencies among cells (such as in a formula) incorrectly.[21][22]
The results of a formula (example "=A1*B1") applies only to a single cell (that is, the cell the formula is actually located in - in this case perhaps C1), even though it can "extract" data from many other cells, and even real time dates and actual times. This means that to cause a similar calculation on an array of cells, an almost identical formula (but residing in its own "output" cell) must be repeated for each row of the "input" array. This differs from a "formula" in a conventional computer program which would typically have one calculation which would then apply to all of the input in turn. With current spreadsheets, this forced repetition of near identical formulas can have detrimental consequences from a quality assurance standpoint and is often the cause of many spreadsheet errors. Some spreadsheets have array formulas to address this issue.
Trying to manage the sheer volume of spreadsheets which sometimes exists within an organization without proper security, audit trails, the unintentional introduction of errors and other items listed above can become overwhelming.

While there are built-in and third-party tools for desktop spreadsheet applications that address some of these shortcomings, awareness and use of these is generally low.

[edit] See also



Look up spreadsheet in
Wiktionary, the free dictionary.



List of spreadsheets
List of online spreadsheets
Comparison of spreadsheet software
Summation in spreadsheets
Moving and copying in spreadsheets
Attribute-value system
Model Audit


[edit] References


^ Mattessich, Richard (1961). "Budgeting Models and System Simulation". The Accounting Review 36 (3): 384–397. http://www.jstor.org/pss/242869. Retrieved on 2009-02-09. 
^ Rene Pardo - Personal Web Page
^ http://www.renepardo.com/articles/spreadsheet.pdf
^ portal.acm.org – APLDOT
^ PC World - Three Minutes: Godfathers of the Spreadsheet
^ OpenOffice.org Calc product
^ Gnumeric XML File Format from The Gnumeric Manual.
^ “Fixing Statistical Errors in Spreadsheet Software: The Cases of Gnumeric and Excel”, B. D. McCullough, 2004 (http://www.csdassn.org/software_reports/gnumeric.pdf). (The most recent versions given a full analysis in this freely-available report are Microsoft Excel XP and Gnumeric 1.1.2., and the author has more-limited data on then-new Excel 2003).
^ “On the accuracy of statistical procedures in Microsoft Excel 2003”, B. D. McCullough, 2005 Computational Statistics & Data Analysis Volume 49, Issue 4, 15 June 2005, Pages 1244-1252. In this journal article, after a more complete analysis of Excel 2003, McCullough concludes that "Excel 2003 is an improvement over previous versions, but not enough has been done that its use for statistical purposes can be recommended."
^ http://web.archive.org/web/20020606140158/simson.net/clips/91.MIPS.ImprovPowerStep.html
^ http://query.nytimes.com/gst/fullpage.html?res=940DE4DF1138F930A25750C0A96E948260 THE EXECUTIVE COMPUTER; Lotus 1-2-3 Faces Up to the Upstarts By Peter H. Lewis Published: March 13, 1988
^ Linux Spreadsheets
^ Kay, Alan (September 1984). "Computer Software". Scientific American 251 (3): 52–59.  – Value Rule
^ Burnett, Margaret; Atwood, J., Walpole Djang, R., Reichwein, J., Gottfried, H., and Yang, S. (March 2001). "Forms/3: A first-order visual language to explore the boundaries of the spreadsheet paradigm". Journal of Functional Programming 11 (2): 155–206. http://journals.cambridge.org/action/displayAbstract?aid=72731. Retrieved on 2008-06-22.  – spreadsheets as functional programming
^ a b Stephen G. Powell, Kenneth R. Baker, Barry Lawson (2007-12-01). "A Critical Review of the Literature on Spreadsheet Errors". http://mba.tuck.dartmouth.edu/spreadsheet/product_pubs.html. Retrieved on 2008-04-18. 
^ Philip Howard (2005-04-22). "Managing spreadsheets". IT-Directors.com. http://www.it-director.com/article.php?articleid=12681. Retrieved on 2006-06-29. 
^ Raymond R. Panko (2005-01). "What We Know About Spreadsheet Errors". http://panko.shidler.hawaii.edu/ssr/Mypapers/whatknow.htm. Retrieved on 2006-09-22. 
^ Is Excel Budgeting a Mistake?
Excel's critics say that Excel is fundamentally unsuited for budgeting, forecasting, and other activities that involve collaboration or consolidation. Are they correct?
^ http://www.cs.uiowa.edu/~jcryer/JSMTalk2001.pdf Problems With Using Microsoft Excel for Statistics
^ Spreadsheet Addiction
^ Excel spreadsheets in School budgeting - a cautionary tale (2001)
^ Public reports of spreadsheet errors collated by the European Spreadsheet Risks Interest Group (EuSpRIG).



[edit] External links

[edit] History of spreadsheets

A Brief History of Spreadsheets by D.J. Power
A History of Spreadsheets at ICI in 1974 by Ken Dakin
The History of Mathematical Tables: From Sumer to Spreadsheets by Martin Campbell-Kelly, Mary Croarken, Raymond Flood, Eleanor Robson (Editors). (notice amazon.com)


[edit] General information

A Spreadsheet Programming article on DevX
comp.apps.spreadsheets FAQ by Russell Schulz
Extending the Concept of Spreadsheet by Jocelyn Paine
Linux Spreadsheets by Christopher Browne; much general information on spreadsheets, and some on related Linux issues
Spreadsheet at the Open Directory Project
Spreadsheet - Its First Computerization (1961-1964) by Richard Mattessich
CICS history and introduction of IBM 3270 by Bob Yelavich
Autoplan & Autotab article by Creative Karma
A Wikibooks tutorial on Microsoft EXCEL








v • d • e

Spreadsheet software





Open source

Gnumeric · KSpread · OpenOffice.org Calc  · NeoOffice






Freeware

Lotus Symphony






Retail

Apple Numbers · Corel Quattro Pro · Lotus 1-2-3 · Microsoft (Excel · Works)  · Quantrix  · StarCalc






Category  • Comparison  • List








Retrieved from "http://en.wikipedia.org/wiki/Spreadsheet"
Categories: Spreadsheet softwareHidden categories: Articles needing additional references from March 2008 | All articles with unsourced statements | Articles with unsourced statements since April 2007 | Articles with unsourced statements since January 2008 | Articles with unsourced statements since March 2008 | Articles needing additional references from June 2008 | Articles with weasel words from February 2009 | Articles with unsourced statements since April 2008 | Articles with unsourced statements since September 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
বাংলা
Català
Česky
Dansk
Deutsch
Español
Esperanto
Euskara
فارسی
Français
Galego
한국어
Bahasa Indonesia
Italiano
עברית
Lietuvių
Lingála
Magyar
Bahasa Melayu
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Simple English
Suomi
Svenska
தமிழ்
ไทย
Türkçe
Українська
ייִדיש









 This page was last modified on 7 April 2009, at 19:52 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
