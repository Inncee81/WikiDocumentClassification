













Microcontroller - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Microcontroller";
		var wgTitle = "Microcontroller";
		var wgAction = "view";
		var wgArticleId = "21017";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282125963;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Microcontroller

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article includes a list of references or external links, but its sources remain unclear because it has insufficient inline citations. Please help to improve this article by introducing more precise citations where appropriate. (July 2008)






The integrated circuit from an Intel 8742, an 8-bit microcontroller that includes a CPU running at 12 MHz, 128 bytes of RAM, 2048 bytes of EPROM, and I/O in the same chip.


A microcontroller (also MCU or µC) is a small computer on a single integrated circuit consisting of a relatively simple CPU combined with support functions such as a crystal oscillator, timers, watchdog, serial and analog I/O etc. Program memory in the form of NOR flash or OTP ROM is also often included on chip, as well as a, typically small, read/write memory.[1]
Microcontrollers are designed for small applications. Thus, in contrast to the microprocessors used in personal computers and other high-performance applications, simplicity is emphasized. Some microcontrollers may operate at clock frequencies as low as 32KHz, as this is adequate for many typical applications, enabling low power consumption (milliwatts or microwatts). They will generally have the ability to retain functionality while waiting for an event such as a button press or other interrupt; power consumption while sleeping (CPU clock and most peripherals off) may be just nanowatts, making many of them well suited for long lasting battery applications.
Microcontrollers are used in automatically controlled products and devices, such as automobile engine control systems, remote controls, office machines, appliances, power tools, and toys. By reducing the size and cost compared to a design that uses a separate microprocessor, memory, and input/output devices, microcontrollers make it economical to digitally control even more devices and processes.




Contents


1 Embedded design

1.1 Interrupts
1.2 Programs
1.3 Other microcontroller features


2 Higher integration
3 Volumes
4 Programming environments
5 Types of microcontrollers
6 Interrupt latency
7 History
8 See also
9 Notes
10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Embedded design
The majority of computer systems in use today are embedded in other machinery, such as automobiles, telephones, appliances, and peripherals for computer systems. These are called embedded systems. While some embedded systems are very sophisticated, many have minimal requirements for memory and program length, with no operating system, and low software complexity. Typical input and output devices include switches, relays, solenoids, LEDs, small or custom LCD displays, radio frequency devices, and sensors for data such as temperature, humidity, light level etc. Embedded systems usually have no keyboard, screen, disks, printers, or other recognizable I/O devices of a personal computer, and may lack human interaction devices of any kind.

[edit] Interrupts
It is mandatory that microcontrollers provide real time response to events in the embedded system they are controlling. When certain events occur, an interrupt system can signal the processor to suspend processing the current instruction sequence and to begin an interrupt service routine (ISR). The ISR will perform any processing required based on the source of the interrupt before returning to the original instruction sequence. Possible interrupt sources are device dependent, and often include events such as an internal timer overflow, completing an analog to digital conversion, a logic level change on an input such as from a button being pressed, and data received on a communication link. Where power consumption is important as in battery operated devices, interrupts may also wake a microcontroller from a low power sleep state where the processor is halted until required to do something by a peripheral event.

[edit] Programs
Microcontroller programs must fit in the available on-chip program memory, since it would be costly to provide a system with external, expandable, memory. Compilers and assembly language are used to turn high-level language programs into a compact machine code for storage in the microcontroller's memory. Depending on the device, the program memory may be permanent, read-only memory that can only be programmed at the factory, or program memory may be field-alterable flash or erasable read-only memory.

[edit] Other microcontroller features
Since embedded processors are usually used to control devices, they sometimes need to accept input from the device they are controlling. This is the purpose of the analog to digital converter. Since processors are built to interpret and process digital data, i.e. 1s and 0s, they won't be able to do anything with the analog signals that may be being sent to it by a device. So the analog to digital converter is used to convert the incoming data into a form that the processor can recognize. There is also a digital to analog converter that allows the processor to send data to the device it is controlling.
In addition to the converters, many embedded microprocessors include a variety of timers as well. One of the most common types of timers is the Programmable Interval Timer, or PIT for short. A PIT just counts down from some value to zero. Once it reaches zero, it sends an interrupt to the processor indicating that it has finished counting. This is useful for devices such as thermostats, which periodically test the temperature around them to see if they need to turn the air conditioner on, the heater on, etc.
Time Processing Unit or TPU for short. Is essentially just another timer, but more sophisticated. In addition to counting down, the TPU can detect input events, generate output events, and other useful operations.
Dedicated Pulse Width Modulation (PWM) block makes it possible for the CPU to control power converters, resistive loads, motors, etc., without using lots of CPU resources in tight timer loops.
Universal Asynchronous Receiver/Transmitter (UART) block makes it possible to receive and transmit data over a serial line with very little load on the CPU.
For those wanting ethernet one can use an external chip like Crystal Semiconductor CS8900A, Realtek RTL8019, or Microchip ENC 28J60. All of them allow easy interfacing with low pin count.

[edit] Higher integration
In contrast to general-purpose CPUs, microcontrollers may not implement an external address or data bus as they integrate RAM and non-volatile memory on the same chip as the CPU. Using fewer pins, the chip can be placed in a much smaller, cheaper package.
Integrating the memory and other peripherals on a single chip and testing them as a unit increases the cost of that chip, but often results in decreased net cost of the embedded system as a whole. Even if the cost of a CPU that has integrated peripherals is slightly more than the cost of a CPU + external peripherals, having fewer chips typically allows a smaller and cheaper circuit board, and reduces the labor required to assemble and test the circuit board.
A microcontroller is a single integrated circuit, commonly with the following features:

central processing unit - ranging from small and simple 4-bit processors to complex 32- or 64-bit processors
discrete input and output bits, allowing control or detection of the logic state of an individual package pin
serial input/output such as serial ports (UARTs)
other serial communications interfaces like I²C, Serial Peripheral Interface and Controller Area Network for system interconnect
peripherals such as timers, event counters, PWM generators, and watchdog
volatile memory (RAM) for data storage
ROM, EPROM, EEPROM or Flash memory for program and operating parameter storage
clock generator - often an oscillator for a quartz timing crystal, resonator or RC circuit
many include analog-to-digital converters
in-circuit programming and debugging support

This integration drastically reduces the number of chips and the amount of wiring and circuit board space that would be needed to produce equivalent systems using separate chips. Furthermore, and on low pin count devices in particular, each pin may interface to several internal peripherals, with the pin function selected by software. This allows a part to be used in a wider variety of applications than if pins had dedicated functions. Microcontrollers have proved to be highly popular in embedded systems since their introduction in the 1970s.
Some microcontrollers use a Harvard architecture: separate memory buses for instructions and data, allowing accesses to take place concurrently. Where a Harvard architecture is used, instruction words for the processor may be a different bit size than the length of internal memory and registers; for example: 12-bit instructions used with 8-bit data registers.
The decision of which peripheral to integrate is often difficult. The microcontroller vendors often trade operating frequencies and system design flexibility against time-to-market requirements from their customers and overall lower system cost. Manufacturers have to balance the need to minimize the chip size against additional functionality.
Microcontroller architectures vary widely. Some designs include general-purpose microprocessor cores, with one or more ROM, RAM, or I/O functions integrated onto the package. Other designs are purpose built for control applications. A microcontroller instruction set usually has many instructions intended for bit-wise operations to make control programs more compact.[2] For example, a general purpose processor might require several instructions to test a bit in a register and branch if the bit is set, where a microcontroller could have a single instruction to provide that commonly-required function.
Microcontrollers typically do not have a math coprocessor, so fixed point or floating point arithmetic are performed by program code.

[edit] Volumes
About 55% of all CPUs sold in the world are 8-bit microcontrollers and microprocessors. According to Semico, Over 4 billion 8-bit microcontrollers were sold in 2006.[3]
A typical home in a developed country is likely to have only four general-purpose microprocessors but around three dozen microcontrollers. A typical mid range automobile has as many as 30 or more microcontrollers. They can also be found in any electrical device: washing machines, microwave ovens, telephones etc.




A PIC 18F8720 microcontroller in an 80-pin TQFP package.


Manufacturers have often produced special versions of their microcontrollers in order to help the hardware and software development of the target system. Originally these included EPROM versions that have a "window" on the top of the device through which program memory can be erased by ultra violet light, ready for reprogramming after a programming ("burn") and test cycle. Since 1998, EPROM versions are rare and have been replaced by EEPROM and flash, which are easier to use (can be erased electronically) and cheaper to manufacture.
Other versions may be available where the ROM is accessed as an external device rather than as internal memory, however these are becoming increasingly rare due to the widespread availability of cheap microcontroller programmers.
The use of field-programmable devices on a microcontroller may allow field update of the firmware or permit late factory revisions to products that have been assembled but not yet shipped. Programmable memory also reduces the lead time required for deployment of a new product.
Where hundreds of thousands of identical devices are required, using parts programmed at the time of manufacture can be an economical option. These 'Mask Programmed' parts have the program laid down in the same way as the logic of the chip, at the same time.

[edit] Programming environments
Microcontrollers were originally programmed only in assembly language, but various high-level programming languages are now also in common use to target microcontrollers. These languages are either designed specially for the purpose, or versions of general purpose languages such as the C programming language. Compilers for general purpose languages will typically have some restrictions as well as enhancements to better support the unique characteristics of microcontrollers. Some microcontrollers have environments to aid developing certain types of applications. Microcontroller vendors often make tools freely available to make it easier to adopt their hardware.
Many microcontrollers are so quirky that they effectively require their own non-standard dialects of C, such as SDCC for the 8051, which prevent using standard tools (such as code libraries or static analysis tools) even for code unrelated to hardware features. Interpreters are often used to hide such low level quirks.
Interpreter firmware is also available for some microcontrollers. For example, BASIC on the early microcontrollers Intel 8052[4]; BASIC and FORTH on the Zilog Z8[5] as well as some modern devices. Typically these interpreters support interactive programming.
Simulators are available for some microcontrollers, such as in Microchip's MPLAB environment. These allow a developer to analyse what the behaviour of the microcontroller and their program should be if they were using the actual part. A simulator will show the internal processor state and also that of the outputs, as well as allowing input signals to be generated. While on the one hand most simulators will be limited from being unable to simulate much other hardware in a system, they can exercise conditions that may otherwise be hard to reproduce at will in the physical implementation, and can be the quickest way to debug and analyse problems.
Recent microcontrollers are often integrated with on-chip debug circuitry that when accessed by an In-circuit emulator via JTAG, allow debugging of the firmware with a debugger.

[edit] Types of microcontrollers



This section requires expansion.


See also: List of common microcontrollers
As of 2008 there are several common architectures:

MSP430 (16-bit)
CF (32-bit)
ARM
MIPS (32-bit PIC32)
S08
AVR
PIC (8-bit PIC16, PIC18, 16-bit dsPIC33 / PIC24)
V850
PowerPC ISE
PSoC (Programmable System-on-Chip)

Others typically are used in very narrow range of applications or are more like processors than microcontrollers.

[edit] Interrupt latency
In contrast to general-purpose computers, microcontrollers used in embedded systems often seek to minimize interrupt latency over instruction throughput.
When an electronic device causes an interrupt, the intermediate results, the registers, have to be saved before the software responsible for handling the interrupt can run, and then must be put back after it is finished. If there are more registers, this saving and restoring process takes more time, increasing the latency.
Low-latency MCUs generally have relatively few registers in their central processing units, or they have "shadow registers", a duplicate register set that is only used by the interrupt software.

[edit] History



This section requires expansion.


The first single chip microprocessor was the 4 bit Intel 4004 released in 1971, with other more capable processors available over the next several years.
These however all required external chip(s) to implement a working system, raising total system cost, and making it impossible to economically computerise appliances.
The first computer system on a chip optimised for control applications - microcontroller was the Intel 8048 released in 1975[citation needed], with both RAM and ROM on the same chip. This chip went on to be found in over a billion PC keyboards, and numerous applications.
Most microcontrollers at this time had two variants. One had an erasable EEPROM program memory, which was significantly more expensive than the PROM variant which was only programmable once.
In 1993, the introduction of EEPROM memory allowed microcontrollers (beginning with the Microchip PIC16x84) [1][citation needed]) to be electrically erased quickly without an expensive package as required for EPROM, allowing both rapid prototyping, and In System Programming.
The same year, Atmel introduced the first microcontroller using Flash memory. [6].
Other companies rapidly followed suit, with both memory types.
Cost has plummeted over time, with the cheapest microcontrollers being available for well under $0.25 in 2009 , and 32 bit microcontrollers under $5.
Nowadays microcontrollers are low cost and readily available for hobbyists, with large online communities around certain processors.

[edit] See also

Atmel AVR
Cypress Semiconductor
BASIC Stamp
Contiki
Energy Micro - EFM32
In-circuit emulator
List of common microcontrollers
Microarchitecture
Microbotics
PIC microcontrollers
Picotux
Programmable logic controller
PSoC
MSP430


[edit] Notes


^ "Embedded Systems Dictionary" by Jack Ganssle and Mike Barr, p.173
^ Easy Way to build a Microcontroller project
^ http://www.semico.com
^ "8052-Basic Microcontrollers" by Jan Axelson 1994
^ "Optimizing the Zilog Z8 Forth Microcontroller for Rapid Prototyping" by Robert Edwards 1987, page 3. http://www.ornl.gov/info/reports/1987/3445602791343.pdf
^ "Atmel’s Self-Programming Flash Microcontrollers" by Odd Jostein Svendsli 2003



[edit] External links



Wikibooks has a book on the topic of
Embedded Systems






Wikimedia Commons has media related to: Microcontrollers 



PIC Microcontroller Tutorial and Projects
Microcontroller at the Open Directory Project
Microcontroller.com - Embedded Systems industry website with tutorials and dedicated resources
Introduction to the MAXQ Architecture
Understanding DC Electrical Characteristics of Microcontrollers
Cornell ECE476 final project designs
Microcontroller Projects Every Day
Embedded Systems Design magazine








v • d • e

CPU technologies





Architecture

ISA : CISC  · EDGE  · EPIC · MISC  · OISC · RISC · VLIW · ZISC · Harvard architecture · Von Neumann architecture · 8-bit · 32-bit · 64-bit · 128-bit






Parallelism





Pipeline


Instruction pipelining · In-Order & Out-of-Order execution · Register renaming · Speculative execution







Level


Bit · Instruction · Superscalar · Data · Task







Threads


Multithreading · Simultaneous multithreading · Hyperthreading · Superthreading







Flynn's taxonomy


SISD · SIMD · MISD · MIMD









Types

Digital signal processor · Microcontroller · System-on-a-chip · Vector processor






Components

Arithmetic logic unit (ALU) · Barrel shifter · Floating-point unit (FPU) · Backside bus · Multiplexer · Demultiplexer · Registers · Memory management unit (MMU) · Translation lookaside buffer (TLB) · Cache · register file · microcode · control unit · CPU clock






Power management

APM · ACPI (states) · Dynamic frequency scaling · Dynamic voltage scaling · Clock gating













v • d • e

8-bit microcontroller families






AVR · PIC · COP8 · MCS-48 · MCS-51 · Z8 · eZ80 · HC08 · HC11 · H8 · PSoC













v • d • e

Computer sizes





Larger

Super · Minisuper · Mainframe · Mini · Supermini · Server









Micro

Personal · Workstation · Home · Desktop · SFF (Nettop) · Plug






Mobile





Portable / Desktop replacement computer · Laptop · Subnotebook · Tablet (Ultra-Mobile PC) · Portable / Mobile data terminal · Electronic organizer · E-book reader · Pocket computer · Handheld game console · Wearable computer







PDAs / IAs


Handheld PC · Pocket PC · Smartphone · PMPs · DAPs







Calculators


Graphing









Other

Single-board computer · Wireless sensor network · Microcontroller · Smartdust · Nanocomputer









Retrieved from "http://en.wikipedia.org/wiki/Microcontroller"
Categories: Digital electronics | Embedded systems | Microcontrollers | Central processing unitHidden categories: Articles lacking in-text citations from July 2008 | Articles to be expanded since September 2008 | All articles to be expanded | Articles to be expanded since June 2008 | All articles with unsourced statements | Articles with unsourced statements since January 2009 | Articles with unsourced statements since February 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
العربية
Bosanski
Català
Česky
Dansk
Deutsch
Español
فارسی
Français
Galego
한국어
हिन्दी
Bahasa Indonesia
Íslenska
Italiano
עברית
Magyar
Македонски
മലയാളം
Bahasa Melayu
Nederlands
日本語
‪Norsk (bokmål)‬
‪Norsk (nynorsk)‬
Polski
Português
Русский
සිංහල
Simple English
Slovenčina
Slovenščina
Српски / Srpski
Suomi
Svenska
Tiếng Việt
Türkçe
Українська
中文









 This page was last modified on 6 April 2009, at 15:30.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
