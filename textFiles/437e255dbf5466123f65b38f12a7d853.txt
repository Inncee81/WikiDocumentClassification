













Apache Ant - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Apache_Ant";
		var wgTitle = "Apache Ant";
		var wgAction = "view";
		var wgArticleId = "438891";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280881349;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-xml {line-height: normal;}
.source-xml li, .source-xml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for xml
 * CSS class: source-xml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-xml .de1, .source-xml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-xml  {}
.source-xml .head {}
.source-xml .foot {}
.source-xml .imp {font-weight: bold; color: red;}
.source-xml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-xml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-xml li.li2 {font-weight: bold;}
.source-xml .coMULTI {color: #808080; font-style: italic;}
.source-xml .es0 {color: #000099; font-weight: bold;}
.source-xml .br0 {color: #66cc66;}
.source-xml .st0 {color: #ff0000;}
.source-xml .nu0 {color: #cc66cc;}
.source-xml .sc0 {color: #00bbdd;}
.source-xml .sc1 {color: #ddbb00;}
.source-xml .sc2 {color: #339933;}
.source-xml .sc3 {color: #009900;}
.source-xml .re0 {color: #000066;}
.source-xml .re1 {font-weight: bold; color: black;}
.source-xml .re2 {font-weight: bold; color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Apache Ant

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Apache Ant (Another Neat Tool)




Developed by
Apache Software Foundation


Latest release
1.7.1 / 2008-06-27; 281 days ago


Written in
Java


Operating system
Cross-platform


Type
Build Tool


License
Apache License 2.0


Website
http://ant.apache.org


Apache Ant is a software tool for automating software build processes. It is similar to make but is implemented using the Java language, requires the Java platform, and is best suited to building Java projects.
The most immediately noticeable difference between Ant and make is that Ant uses XML to describe the build process and its dependencies, whereas make has its Makefile format. By default the XML file is named build.xml.
Ant is an Apache project. It is open source software, and is released under the Apache Software License.




Contents


1 History
2 Sample build.xml file
3 Extensions
4 Portability
5 Limitations
6 See also
7 Books
8 References
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
Ant was conceived by James Duncan Davidson while turning a product from Sun into open source. That product, Sun's reference JSP/Servlet engine, later became Apache Tomcat. A proprietary version of make was used to build it on the Solaris Operating Environment, but in the open source world there was no way of controlling which platform was used to build Tomcat. Ant was created as a simple platform-independent tool to build Tomcat from directives in an XML "build file". From this humble beginning, the tool has gone on to become more widespread than the Tomcat product for which it was created. Ant (version 1.1) was officially released as a stand-alone product on July 19, 2000. Today, Ant is the build tool used by most Java development projects [1]. For example, most open source developers include build.xml files with their distribution.
Because Ant made it trivial to integrate JUnit tests with the build process, Ant has made it easy for willing developers to adopt test-driven development, and even Extreme Programming.
Other Java-based build tools include Maven and JavaMake.[2]
The name is an acronym for "Another Neat Tool".[3]

[edit] Sample build.xml file
Below is listed a sample build.xml file for a simple Java "Hello, world" application. It defines four targets - clean, clobber, compile and jar, each of which has an associated description. The jar target lists the compile target as a dependency. This tells Ant that before it can start the jar target it must first complete the compile target.


<?xml version="1.0"?>
<project name="Hello" default="compile">
    <target name="clean" description="remove intermediate files">
        <delete dir="classes"/>
    </target>
    <target name="clobber" depends="clean" description="remove all artifact files">
        <delete file="hello.jar"/>
    </target>
    <target name="compile" description="compile the Java source code to class files">
        <mkdir dir="classes"/>
        <javac srcdir="." destdir="classes"/>
    </target>
    <target name="jar" depends="compile" description="create a Jar file for the application">
        <jar destfile="hello.jar">
            <fileset dir="classes" includes="**/*.class"/>
            <manifest>
                <attribute name="Main-Class" value="HelloProgram"/>
            </manifest>
        </jar>
    </target>
</project>

Within each target are the actions that Ant must take to build that target; these are performed using built-in tasks. For example, to build the compile target Ant must first create a directory called classes (Ant will only do so if it does not already exist) and then invoke the Java compiler. Therefore, the tasks used are mkdir and javac. These perform a similar task to the command-line utilities of the same name.
Another task used in this example is named jar:


 <jar destfile="hello.jar">

This ant task has the same name as the common java command-line utility, JAR, but is really a call to the ant program's built-in jar/zip file support. This detail is not relevant to most end users, who just get the JAR they wanted, with the files they asked for.
Many Ant tasks delegate their work to external programs, either native or Java. They use Ant's own <exec> and <java> tasks to set up the command lines, and handle all the details of mapping from information in the build file to the program's arguments -and interpreting the return value. Users can see which tasks do this (e.g. <cvs>, <signjar>, <chmod>, <rpm>), by trying to execute the task on a system without the underlying program on the path, or without a full Java Development Kit (JDK) installed.

[edit] Extensions
WOProject-Ant[4] is just one of many examples of a task extension written for Ant. These extensions are put to use by copying their jar files into ant's lib directory. Once this is done, these extension tasks can be invoked directly in the typical build.xml file. The WOProject extensions allow WebObjects developers to use ant in building their frameworks and applications, instead of using Apple's Xcode suite.
Antcontrib[5] provides a collection of tasks such as conditional statements and operations on properties as well as other useful tasks.[6]
Other task extensions exist for Perforce, .Net, EJB, and filesystem manipulations, just to name a few.[7]

[edit] Portability
One of the primary aims of Ant was to solve make's portability problems. In a Makefile the actions required to create a target are specified as shell commands which are specific to the current platform, usually a Unix shell. Ant solves this problem by providing a large amount of built-in functionality which it can then guarantee will behave (nearly) identically on all platforms.
For example, in the sample build.xml file above the clean target deletes the classes directory and everything in it. In a Makefile this would typically be done with the command:

rm -rf classes/

rm is a Unix specific command which will probably not be available if the Makefile is used in a non-Unix environment such as Microsoft Windows. In an Ant build file the same thing would be accomplished using a built in command:


 <delete dir="classes"/>

A common discrepancy between different platforms is the way in which directory paths are specified. Unix uses a forward slash (/) to delimit the components of a path, whereas Windows uses a backslash (\). Ant build files let authors choose their favorite convention, forward slashes or back slashes for directories, semicolon or colon for path separators. It converts everything to the appropriate format for the current platform.

[edit] Limitations

Ant build files are written in XML. For unfamiliar users, both XML itself and the complex structure (hierarchical, partly ordered, and pervasively cross-linked) of Ant documents can be a barrier to learning. A GUI called Antidote was available for a time, but never gained a following and has been retired from the Apache project. Moreover, the language of Ant is quite verbose, and the build files of large or complex projects become unmanageably large. Good design and modularization of build files can improve readability but not reduce size. Other build tools like Maven use more concise scripts at the expense of generality and flexibility.


Many of the older tasks—the core ones that are used every day, such as <javac>, <exec> and <java>—use default values for options that are not consistent with more recent tasks. Changing those defaults would break existing tasks.


When expanding properties in a string or text element, undefined properties are not raised as an error, but left as an unexpanded reference (e.g. ${unassigned.property}).


Ant has limited fault handling rules, and no persistence of state, so it cannot be used as a workflow tool for any workflow other than classic build and test processes.


The Ant target model does not treat artifacts as targets. In most build tools a target is an artifact created by the build -- a program, library, intermediate object file, PDF documentation, etc. -- and rules specify the dependencies between targets and the tasks to run to build a target when it is out of date. In Ant a target is a group of tasks rather than an artifact. This means that Ant is sometimes unable to determine the relationship between an artifact and the task sequence to build the artifact and this logic must be implemented by the programmer using Ant's control structures.


Once a property is defined it cannot be changed by any of the core tasks. Antcontrib provides a variable task to go around this problem.


Lazy property evaluation is not supported. For instance, when working within a <for> loop, a property cannot be re-evaluated for a sub-value which may be part of the iteration.


Reuse of build file fragment is hard. Ant 1.6 made it easier, with <import> and <macrodef>, which some might argue creates even more complexity for new Ant users.


In makefiles, any rule to create one file type from another file type can be written inline within the makefile. For example, you may transform an document into some other format by using rules to execute another tool. Creating a similar task in ant is both more powerful and complex. A separate task must be written in Java and included with the ant build file in order to handle the same type of functionality. This also enhances the readability of the build file by hiding some of the details of how a task is executed on each platform.

Some of these limitations may not apply on the most recent Ant versions. Also NetBeans IDE uses Ant for its build system, which greatly simplifies Ant use within the IDE (Ant scripts generated by NetBeans can be used outside of the IDE).

[edit] See also



Wikibooks has a book on the topic of
Apache Ant




Build Automation
Maven
Nant, Ant-like tool targeted at the .NET environment rather than Java
want, an Ant-like XML-based tool for building programs, written in Delphi, and targeted at Delphi
Ivy, a dependency manager which integrates tightly with Ant.
Ant Automation, a good handy example of automation with Ant.


[edit] Books

Steve Loughran,Erik Hatcher: Ant in Action (Second Edition of Java Development with Ant), Manning Publications 2007, ISBN 1-932394-80-X
Jessy Tilly, Eric M. Burke: Ant - The Definitive Guide, O'Reilly & Associates, ISBN 0-596-00184-3
Erik Hatcher, Steve Loughran: Java Development with Ant, Manning Publications, ISBN 1-930110-58-8
Glenn Niemeyer, Jeremy Poteet: Extreme Programming with Ant, Sams, ISBN 0-672-32562-4
Alan Williamson: Ant - Developer's Handbook, Sams, ISBN 0-672-32426-1
Bernd Matzke: Ant, Addison-Wesley, ISBN 3-8273-2066-6


[edit] References


^ Java Tools for eXtreme Programming, Wiley, 2002: 76
^ A Make Tool for the Java Language from experimentalstuff.com
^ Why do you call it Ant?, Apache Ant FAQ
^ WOProject-Ant - WOProject / WOLips - Confluence
^ Ant-Contrib Tasks
^ Ant-Contrib Tasks
^ Overview of Ant Tasks



[edit] External links

Official website of Apache Ant
Apache Ant wiki
WinAnt - Windows installer for Apache Ant
Introduction to Ant (slide show)
Linguine Maps visualization library will automatically produce easy to read diagrams from Ant build files.
make: The Evolution and Alternatives
antro - a profiler for Ant scripts


Wiki Book on learning Apache Ant
Ant tutorial
Phing Ant clone for PHP web applications








v • d • e

Apache Software Foundation





Top level projects

ActiveMQ · Ant · Apache HTTP Server · APR · Beehive · Buildr · Camel · Cayenne · Cocoon · Commons · CouchDB · CXF · Derby · Directory · Excalibur · Felix · Forrest · Geronimo · Gump · Hadoop · Harmony · HiveMind · iBATIS · Jackrabbit · James · Lenya · Maven · mod_perl · MyFaces · OFBiz · OpenEJB · OpenJPA · POI · Roller · Shale · SpamAssassin · stdcxx · Struts · Tapestry · Tomcat · Tuscany · Velocity · Wicket · XMLBeans






Other projects

Jakarta Project · Apache Lucene · Apache XML · Apache Incubator






Sub-projects

BCEL · BSF · Cactus · Chainsaw · JMeter · Slide · Xerces · Batik · FOP · Log4j · XAP · River · ServiceMix · Log4Net · Abdera · Ivy · ODE · JSPWiki






License: Apache License · Website: http://apache.org/








Retrieved from "http://en.wikipedia.org/wiki/Apache_Ant"
Categories: Apache Software Foundation | Java development tools | Compiling tools | XML | Build automation | Java libraries | Cross-platform software 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Dansk
Deutsch
Español
Français
Italiano
Lietuvių
Nederlands
日本語
Polski
Português
Русский
Svenska
தமிழ்
Türkçe
中文









 This page was last modified on 31 March 2009, at 15:54.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
