













Unicode - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Unicode";
		var wgTitle = "Unicode";
		var wgAction = "view";
		var wgArticleId = "31742";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282044356;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Unicode

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


This article contains special characters. Without proper rendering support, you may see question marks, boxes, or other symbols.






The Unicode Standard, Version 5.0




Unicode


Character encodings

Comparison
UTF-7, UTF-1
UTF-8, CESU-8
UTF-16/UCS-2
UTF-32/UCS-4
UTF-EBCDIC
SCSU, BOCU-1
Punycode (IDN)
GB 18030




UCS


Mapping


Bi-directional text


BOM


Han unification


Unicode and HTML


Unicode and E-mail


Unicode typefaces


Unicode is a computing industry standard allowing computers to consistently represent and manipulate text expressed in most of the world's writing systems. Developed in tandem with the Universal Character Set standard and published in book form as The Unicode Standard, Unicode consists of a repertoire of more than 100,000 characters, a set of code charts for visual reference, an encoding methodology and set of standard character encodings, an enumeration of character properties such as upper and lower case, a set of reference data computer files, and a number of related items, such as character properties, rules for normalization, decomposition, collation, rendering and bidirectional display order (for the correct display of text containing both right-to-left scripts, such as Arabic or Hebrew, and left-to-right scripts).[1]
The Unicode Consortium, the non-profit organization that coordinates Unicode's development, has the ambitious goal of eventually replacing existing character encoding schemes with Unicode and its standard Unicode Transformation Format (UTF) schemes, as many of the existing schemes are limited in size and scope and are incompatible with multilingual environments.
Unicode's success at unifying character sets has led to its widespread and predominant use in the internationalization and localization of computer software. The standard has been implemented in many recent technologies, including XML, the Java programming language, the Microsoft .NET Framework and modern operating systems.
Unicode can be implemented by different character encodings. The most commonly used encodings are UTF-8 (which uses 1 byte for all ASCII characters, which have the same code values as in the standard ASCII encoding, and up to 4 bytes for other characters), the now-obsolete UCS-2 (which uses 2 bytes for all characters, but does not include every character in the Unicode standard), and UTF-16 (which extends UCS-2, using 4 bytes to encode characters missing from UCS-2).




Contents


1 Origin and development

1.1 History of Unicode
1.2 Architecture and terminology
1.3 Standard
1.4 Scripts covered


2 Mapping and encodings

2.1 Unicode Transformation Format and Universal Character Set
2.2 Ready-made versus composite characters
2.3 Ligatures
2.4 Standardized subsets


3 Unicode in use

3.1 Operating systems
3.2 Input methods
3.3 E-mail
3.4 Web
3.5 Fonts
3.6 New lines


4 Issues

4.1 Philosophical and completeness criticisms
4.2 Mapping to legacy character sets
4.3 Indic scripts
4.4 Combining characters


5 See also
6 Notes
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Origin and development
Unicode has the explicit aim of transcending the limitations of traditional character encodings, such as those defined by the ISO 8859 standard, which find wide usage in various countries of the world but remain largely incompatible with each other. Many traditional character encodings share a common problem in that they allow bilingual computer processing (usually using Latin characters and the local script) but not multilingual computer processing (computer processing of arbitrary scripts mixed with each other).
Unicode, in intent, encodes the underlying characters — graphemes and grapheme-like units — rather than the variant glyphs (renderings) for such characters. In the case of Chinese characters, this sometimes leads to controversies over distinguishing the underlying character from its variant glyphs (see Han unification).
In text processing, Unicode takes the role of providing a unique code point — a number, not a glyph — for each character. In other words, Unicode represents a character in an abstract way and leaves the visual rendering (size, shape, font or style) to other software, such as a web browser or word processor. This simple aim becomes complicated, however, by concessions made by Unicode's designers in the hope of encouraging a more rapid adoption of Unicode.
The first 256 code points were made identical to the content of ISO 8859-1 so as to make it trivial to convert existing western text. Many essentially identical characters were encoded multiple times at different code points to preserve distinctions used by legacy encodings and therefore allow conversion from those encodings to Unicode (and back) without losing any information. For example, the "fullwidth forms" section of code points encompasses a full Latin alphabet that is separate from the main Latin alphabet section. In Chinese, Japanese and Korean (CJK) fonts, these characters are rendered at the same width as CJK ideographs rather than at half the width. For other examples, see Duplicate characters in Unicode.

[edit] History of Unicode
The origins of Unicode date back to 1987 when Joe Becker from Xerox and Lee Collins and Mark Davis from Apple started investigating the practicalities of creating a universal character set.[2] In August of the following year Joe Becker published a draft proposal for an "international/multilingual text character encoding system, tentatively called Unicode." In this document, entitled Unicode 88, he outlined a 16 bit character model:

Unicode is intended to address the need for a workable, reliable world text encoding. Unicode could be roughly described as "wide-body ASCII" that has been stretched to 16 bits to encompass the characters of all the world's living languages. In a properly engineered design, 16 bits per character are more than sufficient for this purpose.

His original 16 bit design was based on the assumption that only those scripts and characters in modern usage would need to be encoded:

Unicode gives higher priority to ensuring utility for the future than to preserving past antiquities. Unicode aims in the first instance at the characters published in modern text (e.g. in the union of all newspapers and magazines printed in the world in 1988), whose number is undoubtedly far below 214 = 16,384. Beyond those modern-use characters, all others may be defined to be obsolete or rare; these are better candidates for private-use registration than for congesting the public list of generally-useful Unicodes.

In fact this proved not to be the case, as many historic scripts and thousands of rarely-used or obsolete characters have now been encoded in Unicode, and work continues to encode even more historic scripts that it was never anticipated would need to be encoded (e.g. Egyptian Hieroglyphs).
In early 1989 the Unicode working group expanded to include Ken Whistler and Mike Kernaghan of Metaphor, Karen Smith-Yoshimura and Joan Aliprand of RLG, and Glenn Wright of Sun Microsystems, and in 1990 Michel Suignard and Asmus Freytag from Microsoft and Rick McGowan of NeXT joined the group. By the end of 1990 most of the work on mapping existing character encoding standards had been completed, and a final review draft of Unicode was ready. The Unicode consortium was incorporated on January 3, 1991 in the state of California, and in October 1991 the first volume of the Unicode standard was published. The second volume, covering Han ideographs, was published in June 1992.

[edit] Architecture and terminology
Unicode defines a codespace of 1,114,112 code points in the range 0hex to 10FFFFhex.[3] It is normal to reference a Unicode code point by writing "U+" followed by its hexadecimal number. For code points in the Basic Multilingual Plane (BMP), four digits are used (e.g. U+0058 for the character LATIN CAPITAL LETTER X); for code points outside the BMP, five or six digits are used, as required (e.g. U+E0001 for the character LANGUAGE TAG and U+10FFFD for the character PRIVATE USE CHARACTER-10FFFD). Older versions of the standard used similar notations, but with slightly different rules. For example, Unicode 3.0 used "U-" followed by eight digits, and allowed "U+" to be used only with exactly four digits to indicate a code unit, not a code point. The Unicode codespace is divided into seventeen planes, each comprising 65,536 code points or 256 rows of 256 code points:


Plane
Range
Description
Abbreviation


0
0000–FFFF
Basic Multilingual Plane
BMP


1
10000–1FFFF
Supplementary Multilingual Plane
SMP


2
20000–2FFFF
Supplementary Ideographic Plane
SIP


3 to 13
30000–DFFFF
currently unassigned



14
E0000–EFFFF
Supplementary Special-purpose Plane
SSP


15
F0000–FFFFF
Supplementary Private Use Area-A


16
100000–10FFFF
Supplementary Private Use Area-B


All code points in the BMP are accessed as a single code point in UTF-16 encoding, whereas the code points in Planes 1 through 16 (supplementary planes, or, informally, astral planes) are accessed as surrogate pairs in UTF-16.
Within each plane, characters are allocated in named blocks of related characters. Although blocks are an arbitrary size, they are always a multiple of 16 code points, and often a multiple of 128 code points. Characters required for a given script may be spread out over several different blocks.
The following categories of code points are defined:

Surrogate code points
Noncharacters
Reserved characters
Private use characters
Graphic characters
Format characters
Control code characters

Code points in the range U+D800..U+DBFF (1,024 code points) are known as high-surrogate code points, and code points in the range U+DC00..U+DFFF (1,024 code points) are known as low-surrogate code points. A high-surrogate code point (also known as a leading surrogate) followed by a low-surrogate code point (also known as a trailing surrogate) together form a surrogate pair that represents a code point outside the Basic Multilingual Plane in the UTF-16 encoding form. High and low surrogate code points are not valid by themselves, and are only valid as surrogate pairs in UTF-16 encoded texts. Thus the range of code points that are available for use as characters is U+0000..U+D7FF and U+E000..U+10FFFF (1,112,064 code points). The hexadecimal value of these code points (i.e. excluding surrogates) is sometimes referred to as the character's scalar value.
Noncharacters are code points that are guaranteed never to be used for encoding characters, although applications may make use of these code points internally if they wish. There are sixty-six noncharacters: U+FDD0..U+FDEF and any code point ending in the value FFFE or FFFF (i.e. U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, ... U+10FFFE, U+10FFFF). The set of noncharacters is stable, and no new noncharacters will ever be defined.[4]
Reserved code points are those code points which are available for use as encoded characters, but are not yet defined as characters by Unicode.
Private-use code points are considered to be assigned characters, but they have no interpretation specified by the Unicode standard[5] so any interchange of such characters requires an agreement between sender and receiver on their interpretation. There are three private-use areas in the Unicode codespace:

Private Use Area: U+E000..U+F8FF (6,400 characters)
Supplementary Private Use Area-A: U+F0000..U+FFFFD (65,534 characters)
Supplementary Private Use Area-B: U+100000..U+10FFFD (65,534 characters)

Graphic characters are characters defined by Unicode to have a particular semantic, and either have a visible glyph shape or represent a visible space. As of Unicode 5.1 there are 100,507 graphic characters.
Format characters are characters that do not have a visible appearance, but may have an effect on the appearance or behavior of neighboring characters. For example, U+200C ZERO WIDTH NON-JOINER and U+200D ZERO WIDTH JOINER may be used to change the default shaping behavior of adjacent characters (e.g. to inhibit ligatures or request ligature formation). There are 141 format characters in Unicode 5.1.
Sixty-five code points (U+0000..U+001F and U+007F.. U+009F) are reserved as control codes, and correspond to the C0 and C1 control codes defined in ISO/IEC 6429. Of these U+0009 (Tab), U+000A (Line Feed) and U+000D (Carriage Return) are widely used in Unicode-encoded texts.
Graphic characters, format characters, control code characters and private use characters are collectively known as assigned characters.
The set of graphic and format characters defined by Unicode does not correspond directly to the repertoire of abstract characters that is representable under Unicode. Unicode encodes characters by associating an abstract character with a particular code point.[6] However, not all abstract characters are encoded as a single Unicode character, and some abstract characters may be represented in Unicode by a sequence of two or more characters. For example, Latin Small Letter I With Ogonek And Dot Above And Acute, which is required in Lithuanian, is represented by the character sequence U+012F, U+0307, U+0301. Unicode maintains a list of uniquely named character sequences for abstract characters that are not directly encoded in Unicode.[7]
All graphic, format and private use characters have a unique and immutable name by which they may be identified. Although a Unicode character name may not be changed under any circumstances (historically this was not the case), in cases where the name is seriously defective and misleading or has a serious typographical error, a formal alias may be defined, and applications are encouraged to use the formal alias in place of the official character name. For example, U+A015 YI SYLLABLE WU has the formal alias YI SYLLABLE ITERATION MARK, and U+FE18 PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET has the formal alias PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRACKET.[8]

[edit] Standard
The Unicode Consortium, based in California, develops the Unicode standard. There are various levels of membership, and any company or individual willing to pay the membership dues may join this organization. Full members include most of the main computer software and hardware companies with any interest in text-processing standards, including Adobe Systems, Apple, Google, HP, IBM, Microsoft, Sun Microsystems and Yahoo.
The Consortium first published The Unicode Standard (ISBN 0-321-18578-1) in 1991, and continues to develop standards based on that original work. The latest major version of the standard, Unicode 5.0 (ISBN 0-321-48091-0), was published in 2007. The data files for the most recent minor version, Unicode 5.1, are available from the consortium's web site.
Unicode is developed in conjunction with the International Organization for Standardization and shares the character repertoire with ISO/IEC 10646: the Universal Character Set. Unicode and ISO/IEC 10646 function equivalently as character encodings, but The Unicode Standard contains much more information for implementers, covering — in depth — topics such as bitwise encoding, collation and rendering. The Unicode Standard enumerates a multitude of character properties, including those needed for supporting bidirectional text. The two standards do use slightly different terminology.
Thus far the following major and minor versions of the Unicode standard have been published (update versions, which do not include any changes to character repertoire, are omitted).[9]


Version
Date
Book
Corresponding ISO/IEC 10646 Edition
Scripts
Characters


#
Notable additions


1.0.0
October 1991
ISBN 0-201-56788-1 (Vol.1)

24
7,161
Initial repertoire covers these scripts: Arabic, Armenian, Bengali, Bopomofo, Cyrillic, Devanagari, Georgian, Greek and Coptic, Gujarati, Gurmukhi, Hangul, Hebrew, Hiragana, Kannada, Katakana, Lao, Latin, Malayalam, Oriya, Tamil, Telugu, Thai, and Tibetan.[10]


1.0.1
June 1992
ISBN 0-201-60845-6 (Vol.2)

25
28,359
The initial set of 20,902 CJK Unified Ideographs is defined.[11]


1.1
June 1993

ISO/IEC 10646-1:1993
24
34,233
4,306 more Hangul syllables added to original set of 2,350 characters. Tibetan removed.[12]


2.0
July 1996
ISBN 0-201-48345-9
ISO/IEC 10646-1:1993 plus Amendments 5, 6 and 7
25
38,950
Original set of Hangul syllables removed, and a new set of 11,619 Hangul syllables added at a new location. Tibetan added back in a new location and with a different character repertoire. Surrogate character mechanism defined, and Plane 15 and Plane 16 Private Use Areas allocated.[13]


2.1
May 1998

ISO/IEC 10646-1:1993 plus Amendments 5, 6 and 7, and two characters from Amendment 18
25
38,952
Euro sign added.[14]


3.0
September 1999
ISBN 0-201-61633-5
ISO/IEC 10646-1:2000
38
49,259
Cherokee, Ethiopic, Khmer, Mongolian, Myanmar, Ogham, Runic, Sinhala, Syriac, Thaana, Unified Canadian Aboriginal Syllabics, and Yi Syllables added, as well as a set of Braille patterns.[15]


3.1
March 2001

ISO/IEC 10646-1:2000
ISO/IEC 10646-2:2001

41
94,205
Deseret, Gothic and Old Italic added, as well as sets of symbols for Western music and Byzantine music, and 42,711 additional CJK Unified Ideographs.[16]


3.2
March 2002

ISO/IEC 10646-1:2000 plus Amendment 1
ISO/IEC 10646-2:2001

45
95,221
Philippine scripts Buhid, Hanunoo, Tagalog, and Tagbanwa added.[17]


4.0
April 2003
ISBN 0-321-18578-1
ISO/IEC 10646:2003
52
96,447
Cypriot syllabary, Limbu, Linear B, Osmanya, Shavian, Tai Le, and Ugaritic added, as well as Hexagram symbols.[18]


4.1
March 2005

ISO/IEC 10646:2003 plus Amendment 1
59
97,720
Buginese, Glagolitic, Kharoshthi, New Tai Lue, Old Persian, Syloti Nagri, and Tifinagh added, and Coptic was disunified from Greek. Ancient Greek numbers and musical symbols were also added.[19]


5.0
July 2006
ISBN 0-321-48091-0
ISO/IEC 10646:2003 plus Amendments 1 and 2, and four characters from Amendment 3
64
99,089
Balinese, Cuneiform, N'Ko, Phags-pa, and Phoenician added.[20]


5.1
April 2008

ISO/IEC 10646:2003 plus Amendments 1, 2, 3 and 4
75
100,713
Carian, Cham, Kayah Li, Lepcha, Lycian, Lydian, Ol Chiki, Rejang, Saurashtra, Sundanese, and Vai added, as well as sets of symbols for the Phaistos Disc, Mahjong tiles, and Domino tiles. There were also important additions for Myanmar, additions of letters and Scribal abbreviations used in medieval manuscripts, and the addition of capital ß.[21]


Unicode 5.2, corresponding to ISO/IEC 10646:2003 plus Amendments 1-6, is tentatively scheduled for release in Summer 2009.[22]

[edit] Scripts covered




Many modern applications can render a substantial subset of the myriad Unicode scripts, as demonstrated by this screenshot from the OpenOffice.org application.


Unicode covers almost all scripts (writing systems) in current use today.[23]
Although 75 scripts (covering alphabets, abugidas and syllabaries) are included in the latest version of Unicode, there remain more still awaiting encoding, particularly some used in historical, liturgical and academic contexts. Further additions of characters to the already-encoded scripts, as well as symbols, in particular for mathematics and music (in the form of notes and rhythmic symbols), also occur. The Unicode Roadmap Committee (Michael Everson, Rick McGowan, and Ken Whistler) maintain the list of scripts that are candidates or potential candidates for encoding and their tentative code block assignments on the Unicode Roadmap page of the Unicode Consortium Web site. For some scripts on the Roadmap, encoding proposals have been made and are working their way through the approval process. For others, such as Mayan, Rongorongo and Linear A, no proposal has yet been made, and they await agreement on character repertoire and other details from the user communities involved.
Among the scripts currently scheduled for encoding in Unicode 5.2 are Avestan, Bamum, Egyptian Hieroglyphics, Tai Tham, Tai Viet, Imperial Aramaic, Inscriptional Pahlavi, Inscriptional Parthian, Javanese, Kaithi, Lisu, Meetei Mayek, Old South Arabian, Old Turkic, and Samaritan.[24] Other scripts in the process of being encoded include Batak, Brahmi, Mandaic, Nushu and Tangut, but these will not be included in Unicode until at least the version after 5.2.
Modern invented scripts which do not qualify for inclusion in Unicode due to lack of real-world usage (e.g. Klingon), are listed in the ConScript Unicode Registry, along with unofficial but widely-used Private Use Area code assignments.

[edit] Mapping and encodings
See also: Mapping of Unicode characters
Several mechanisms have been specified for implementing Unicode; which one implementers choose depends on available storage space, source code compatibility, and interoperability with other systems.

[edit] Unicode Transformation Format and Universal Character Set
Unicode defines two mapping methods: the Unicode Transformation Format (UTF) encodings, and the Universal Character Set (UCS) encodings. An encoding maps (possibly a subset of) the range of Unicode code points to sequences of values in some fixed-size range, termed code values. The numbers in the names of the encodings indicate the number of bits in one code value (for UTF encodings) or the number of bytes per code value (for UCS) encodings. UTF-8 and UTF-16 are probably the most commonly used encodings. UCS-2 is an obsolete subset of UTF-16; UCS-4 and UTF-32 are functionally equivalent.
UTF encodings include:

UTF-1 — a retired predecessor of UTF-8, maximizes compatibility with ISO 2022, no longer part of The Unicode Standard
UTF-7 — a relatively unpopular 7-bit encoding, often considered obsolete (not part of The Unicode Standard but rather an RFC)
UTF-8 — an 8-bit, variable-width encoding, which maximizes compatibility with ASCII.
UTF-EBCDIC — an 8-bit variable-width encoding, which maximizes compatibility with EBCDIC. (not part of The Unicode Standard)
UTF-16 — a 16-bit, variable-width encoding
UTF-32 — a 32-bit, fixed-width encoding

UTF-8 uses one to four bytes per code point and, being compact for Latin scripts and ASCII-compatible, provides the de facto standard encoding for interchange of Unicode text. It is also used by most recent Linux distributions as a direct replacement for legacy encodings in general text handling.
The UCS-2 and UTF-16 encodings specify the Unicode Byte Order Mark (BOM) for use at the beginnings of text files, which may be used for byte ordering detection (or byte endianness detection). Some software developers have adopted it for other encodings, including UTF-8, which does not need an indication of byte order. In this case it attempts to mark the file as containing Unicode text. The BOM, code point U+FEFF has the important property of unambiguity on byte reorder, regardless of the Unicode encoding used; U+FFFE (the result of byte-swapping U+FEFF) does not equate to a legal character, and U+FEFF in other places, other than the beginning of text, conveys the zero-width no-break space (a character with no appearance and no effect other than preventing the formation of ligatures). Also, the units FE and FF never appear in UTF-8. The same character converted to UTF-8 becomes the byte sequence EF BB BF.
In UTF-32 and UCS-4, one 32-bit code value serves as a fairly direct representation of any character's code point (although the endianness, which varies across different platforms, affects how the code value actually manifests as an octet sequence). In the other cases, each code point may be represented by a variable number of code values. UTF-32 is widely used as internal representation of text in programs (as opposed to stored or transmitted text), since every Unix operating system which uses the gcc compilers to generate software uses it as the standard "wide character" encoding. Recent versions of the Python programming language (beginning with 2.2) may also be configured to use UTF-32 as the representation for unicode strings, effectively disseminating such encoding in high-level coded software.
Punycode, another encoding form, enables the encoding of Unicode strings into the limited character set supported by the ASCII-based Domain Name System. The encoding is used as part of IDNA, which is a system enabling the use of Internationalized Domain Names in all scripts that are supported by Unicode. Earlier and now historical proposals include UTF-5 and UTF-6.
GB18030 is another encoding form for Unicode, from the Standardization Administration of China. It is the official character set of the People's Republic of China (PRC). BOCU-1 and SCSU are Unicode compression schemes. The April Fools' Day RFC of 2005 specified two parody UTF encodings, UTF-9 and UTF-18.

[edit] Ready-made versus composite characters
Unicode includes a mechanism for modifying character shape and so greatly extending the supported glyph repertoire. This covers the use of combining diacritical marks. They get inserted after the main character (one can stack several combining diacritics over the same character). Unicode also contains precomposed versions of most letter/diacritic combinations in normal use. These make conversion to and from legacy encodings simpler and allow applications to use Unicode as an internal text format without having to implement combining characters. For example é can be represented in Unicode as U+0065 (Latin small letter e) followed by U+0301 (combining acute) but it can also be represented as the precomposed character U+00E9 (Latin small letter e with acute). So in many cases, users have many ways of encoding the same character. To deal with this, Unicode provides the mechanism of canonical equivalence.
An example of this arises with hangul, the Korean alphabet. Unicode provides the mechanism for composing hangul syllables with their individual subcomponents, known as hangul Jamo. However, it also provides all 11,172 combinations of precomposed hangul syllables.
The CJK ideographs currently have codes only for their precomposed form. Still, most of those ideographs comprise simpler elements (often called radicals in English), so in principle Unicode could have decomposed them just as it has happened with hangul. This would have greatly reduced the number of required code points, while allowing the display of virtually every conceivable ideograph (which might do away with some of the problems caused by the Han unification). A similar idea covers some input methods, such as Cangjie and Wubi. However, attempts to do this for character encoding have stumbled over the fact that ideographs do not actually decompose as simply or as regularly as it seems they should.
A set of radicals was provided in Unicode 3.0 (CJK radicals between U+2E80 and U+2EFF, KangXi radicals in U+2F00 to U+2FDF, and ideographic description characters from U+2FF0 to U+2FFB), but the Unicode standard (ch. 11.1 of Unicode 4.1) warns against using ideographic description sequences as an alternate representation for previously encoded characters:


This process is different from a formal encoding of an ideograph. There is no canonical description of unencoded ideographs; there is no semantic assigned to described ideographs; there is no equivalence defined for described ideographs. Conceptually, ideograph descriptions are more akin to the English phrase, “an ‘e’ with an acute accent on it,” than to the character sequence <U+006E, U+0301> [sic; 'e' should be U+0065].



[edit] Ligatures
Many scripts, including Arabic and Devanagari, have special orthographic rules which require that certain combinations of letterforms be combined into special ligature forms. The rules governing ligature formation can be quite complex, requiring special script-shaping technologies such as ACE (Arabic Calligraphic Engine by DecoType in the 1980s and used to generate all the Arabic examples in the printed editions of the Unicode Standard) which became the proof of concept for OpenType (by Adobe and Microsoft), Graphite (by SIL International), or AAT (by Apple). Instructions are also embedded in fonts to tell the operating system how to properly output different character sequences. A simple solution to the placement of combining marks or diacritics is assigning the marks a width of zero and placing the glyph itself to the left or right of the left sidebearing (depending on the direction of the script they are intended to be used with). A mark handled this way will appear over whatever character precedes it, but will not adjust its position relative to the width or height of the base glyph; it may be visually awkward and it may overlap some glyphs. Real stacking is impossible, but can be approximated in limited cases (for example, Thai top-combining vowels and tone marks can just be at different heights to start with). Generally this approach is only effective in monospaced fonts but can also be used as a fallback rendering method when more complex methods fail.

[edit] Standardized subsets
Several subsets of Unicode are standardized: Microsoft Windows since Windows NT 4.0 supports WGL-4 with 652 characters, which is considered to support all contemporary European languages using the Latin, Greek or Cyrillic script. Other standardized subsets of Unicode include the Multilingual European Subsets:[25] MES-1 (Latin scripts only, 335 characters), MES-2 (Latin, Greek and Cyrillic 1062 characters)[26] and MES-3A & MES-3B (two larger subsets, not shown here). Note that MES-2 includes every character in MES-1 and WGL-4.


WGL-4, MES-1 and MES-2


Row
Cells
Range(s)


00
20–7E
Basic Latin (00–7F)


A0–FF
Latin-1 Supplement (80–FF)


01
00–13, 14–15, 16–2B, 2C–2D, 2E–4D, 4E–4F, 50–7E, 7F
Latin Extended-A (00–7F)


8F, 92, B7, DE-EF, FA–FF
Latin Extended-B (80–FF …)


02
18–1B, 1E–1F
Latin Extended-B (… 00–4F)


59, 7C, 92
IPA Extensions (50–AF)


BB–BD, C6, C7, C9, D6, D8–DB, DC, DD, DF, EE
Spacing Modifier Letters (B0–FF)


03
74–75, 7A, 7E, 84–8A, 8C, 8E–A1, A3–CE, D7, DA–E1
Greek (70–FF)


04
00, 01–0C, 0D, 0E–4F, 50, 51–5C, 5D, 5E–5F, 90–91, 92–C4, C7–C8, CB–CC, D0–EB, EE–F5, F8–F9
Cyrillic (00–FF)


1E
02–03, 0A–0B, 1E–1F, 40–41, 56–57, 60–61, 6A–6B, 80–85, 9B, F2–F3
Latin Extended Additional (00–FF)


1F
00–15, 18–1D, 20–45, 48–4D, 50–57, 59, 5B, 5D, 5F–7D, 80–B4, B6–C4, C6–D3, D6–DB, DD–EF, F2–F4, F6–FE
Greek Extended (00–FF)


20
13–14, 15, 17, 18–19, 1A–1B, 1C–1D, 1E, 20–22, 26, 30, 32–33, 39–3A, 3C, 3E
General Punctuation (00–6F)


44, 4A, 7F, 82
Superscripts and Subscripts (70–9F)


A3–A4, A7, AC, AF
Currency Symbols (A0–CF)


21
05, 13, 16, 22, 26, 2E
Letterlike Symbols (00–4F)


5B–5E
Number Forms (50–8F)


90–93, 94–95, A8
Arrows (90–FF)


22
00, 02, 03, 06, 08-09, 0F, 11–12, 15, 19–1A, 1E–1F, 27-28, 29, 2A, 2B, 48, 59, 60–61, 64–65, 82–83, 95, 97
Mathematical Operators (00–FF)


23
02, 0A, 20–21, 29–2A
Miscellaneous Technical (00–FF)


25
00, 02, 0C, 10, 14, 18, 1C, 24, 2C, 34, 3C, 50–6C
Box Drawing (00–7F)


80, 84, 88, 8C, 90–93
Block Elements (80–9F)


A0–A1, AA–AC, B2, BA, BC, C4, CA–CB, CF, D8–D9, E6
Geometric Shapes (A0–FF)


26
3A–3C, 40, 42, 60, 63, 65–66, 6A, 6B
Miscellaneous Symbols (00–FF)


F0
(01–02)
Private Use Area (00–FF …)


FB
01–02
Alphabetic Presentation Forms (00–4F)


FF
FD
Specials


Rendering software which cannot process a Unicode character appropriately most often display it as only an open rectangle, or the Unicode “replacement character” (U+FFFD, �), to indicate the position of the unrecognized character. Some systems have made attempts to provide more information about such characters. The Apple LastResort font will display a substitute glyph indicating the Unicode range of the character and the SIL Unicode fallback font will display a box showing the hexadecimal scalar value of the character.

[edit] Unicode in use

[edit] Operating systems
Unicode has become the dominant scheme for internal processing and sometimes storage (though a lot of text is still stored in legacy encodings) of text. Early adopters tended to use UCS-2 and later moved to UTF-16 (as this was the least disruptive way to add support for non-BMP characters). The best known such system is Windows NT (and its descendants, Windows 2000, Windows XP and Windows Vista), which uses Unicode as the sole internal character encoding. The Java and .NET bytecode environments, Mac OS X, and KDE also use it for internal representation.
UTF-8 (originally developed for Plan 9) has become the main storage encoding on most Unix-like operating systems (though others are also used by some libraries) because it is a relatively easy replacement for traditional extended ASCII character sets.
Multilingual text-rendering engines which use Unicode include Uniscribe for Microsoft Windows, ATSUI for Mac OS X and Pango, a free software engine used by GTK+ (and hence the GNOME desktop).

[edit] Input methods
Main article: Unicode input
Because keyboard layouts cannot have simple key combinations for all characters, several operating systems provide alternative input methods that allow access to the entire repertoire.
ISO 14755[27], which standardises methods for entering Unicode characters from their codepoints, specifies several methods. There is the Basic method, where a beginning sequence is followed by the hexadecimal representation of the codepoint and the ending sequence. There is also a screen-selection entry method specified, where the characters are listed in a table in a screen, such as with a character map program.

[edit] E-mail
Main article: Unicode and e-mail
MIME defines two different mechanisms for encoding non-ASCII characters in e-mail, depending on whether the characters are in e-mail headers such as the "Subject:" or in the text body of the message. In both cases, the original character set is identified as well as a transfer encoding. For e-mail transmission of Unicode the UTF-8 character set and the Base64 or the Quoted-printable transfer encoding are recommended, depending on whether much of the message consists of ASCII-characters. The details of the two different mechanisms are specified in the MIME standards and are generally hidden from users of e-mail software.
The adoption of Unicode in e-mail has been very slow. Some East-Asian text is still encoded in encodings such as ISO-2022, and some devices, such as cell phones, still cannot handle Unicode data correctly. Support has been improving however. Many major free mail providers such as Yahoo, Google (gmail), and Microsoft (Hotmail) support it.

[edit] Web
Main article: Unicode and HTML
All W3C recommendations have used Unicode as their document character set since HTML 4.0. Web browsers have supported Unicode, especially UTF-8, for many years. Display problems result primarily from font related issues; in particular, versions of Microsoft Internet Explorer do not render many code points unless explicitly told to use a font that contains them.[28]
Although syntax rules may affect the order in which characters are allowed to appear, both HTML 4 and XML (including XHTML) documents, by definition, comprise characters from most of the Unicode code points, with the exception of:

most of the C0 and C1 control codes
the permanently-unassigned code points D800–DFFF
any code point ending in FFFE or FFFF

These characters manifest either directly as bytes according to document's encoding, if the encoding supports them, or users may write them as numeric character references based on the character's Unicode code point. For example, the references &#916;, &#1049;, &#1511;, &#1605;, &#3671;, &#12354;, &#21494;, &#33865;, and &#47568; (or the same numeric values expressed in hexadecimal, with &#x as the prefix) display on browsers as Δ, Й, ק,‎ م, ๗, あ, 叶, 葉, and 말.
When specifying URIs, for example as URLs in HTTP requests, non-ASCII characters must be percent-encoded.

[edit] Fonts
Free and retail fonts based on Unicode are commonly available, since TrueType and OpenType support Unicode. These font formats map Unicode code points to glyphs.
Thousands of fonts exist on the market, but fewer than a dozen fonts — sometimes described as "pan-Unicode" fonts — attempt to support the majority of Unicode's character repertoire. Instead, Unicode-based fonts typically focus on supporting only basic ASCII and particular scripts or sets of characters or symbols. Several reasons justify this approach: applications and documents rarely need to render characters from more than one or two writing systems; fonts tend to demand resources in computing environments; and operating systems and applications show increasing intelligence in regard to obtaining glyph information from separate font files as needed, i.e. font substitution. Furthermore, designing a consistent set of rendering instructions for tens of thousands of glyphs constitutes a monumental task; such a venture passes the point of diminishing returns for most typefaces.

[edit] New lines
Unicode partially addresses the new line problem that occurs when trying to read a text file on different platforms. Unicode defines a large number of characters that conforming applications should recognize as line terminators.
In terms of the new line, Unicode did introduce U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR. This however was an attempt to provide a Unicode solution to semantically encoding paragraphs and lines: potentially replacing all of the various platform solutions. So in doing so, Unicode does provide a way around the historical platform dependent solutions. However, few if any Unicode solutions have adopted these Unicode line and paragraph separators as the sole canonical line ending characters. However, a common approach to solving this issue is through new line normalization. This is done with the Cocoa text system in Mac OS X and also with W3C XML and HTML recommendations. In this approach every possible new line character is internally converted to a common new line (which one doesn't really matter since it's an internal operation just for rendering). So in other words, regardless of how the line ending is encoded in the text, the text system can treat it as a new line.

[edit] Issues

[edit] Philosophical and completeness criticisms
Han unification (the identification of forms in the three East Asian languages which one can treat as stylistic variations of the same historical character) has become one of the most controversial aspects of Unicode, despite the presence of a majority of experts from all three regions in the Ideographic Rapporteur Group (IRG), which advises the Consortium and ISO on additions to the repertoire and on Han unification.[29]
Unicode has been criticized for failing to allow for older and alternative forms of kanji which, critics argue, complicates the processing of ancient Japanese and uncommon Japanese names, although it follows the recommendations of Japanese language scholars and of the Japanese government and contains all of the same characters as previous widely used encoding standards.[30] There have been several attempts to create alternative encodings that preserve the minor, stylistic differences between Chinese, Japanese, and Korean characters in opposition to Unicode's policy of Han unification. Among them are TRON (although it is not widely adopted in Japan, there are some users who need to handle historical Japanese text and favor it), and UTF-2000.
Although the repertoire of less than 21,000 Han characters in the earliest version of Unicode was largely limited to characters in common modern usage, Unicode now includes more than 70,000 Han characters, and work is continuing to add thousands more historic and dialectal characters used in China, Japan, Korea and Vietnam.

[edit] Mapping to legacy character sets
Injective mappings must be provided between characters in existing legacy character sets and characters in Unicode to facilitate conversion to Unicode and allow interoperability with legacy software. Lack of consistency in various mappings between earlier Japanese encodings such as Shift-JIS or EUC-JP and Unicode led to round-trip format conversion mismatches, particularly the mapping of the character JIS X 201 '～' (1-33, WAVE DASH), heavily used in legacy database data, to either '～' U+FF5E FULLWIDTH TILDE (in Microsoft Windows) or '〜' U+301C WAVE DASH (other vendors).[31]
Some Japanese computer programmers objected to Unicode because it requires them to separate the use of '\' U+005C REVERSE SOLIDUS (backslash) and '¥' U+00A5 YEN SIGN, which was mapped to 0x5C in JIS X 0201, and there is a lot of legacy code with this usage.[32] (This encoding also replaces tilde '~' 0x7E with overline '¯', now 0xAF.) The separation of these characters exists in ISO 8859-1, from long before Unicode.

[edit] Indic scripts
Thai alphabet support has been criticized for its illogical ordering of Thai characters. The vowels เ, แ, โ, ใ, ไ that are written to the left of the preceding consonant are in visual order instead of phonetic order, unlike the Unicode representations of other Indic scripts. This complication is due to Unicode inheriting the Thai Industrial Standard 620, which worked in the same way. This ordering problem complicates the Unicode collation process slightly, requiring table lookups to reorder Thai characters for collation.[30]
Indic scripts such as Tamil and Devanagari are each allocated only 128 code points, matching the ISCII standard. The correct rendering of Unicode Indic text requires transforming the stored logical order characters into visual order and the forming of ligatures out of components. Some local scholars argued in favor of assignments of Unicode codepoints to these ligatures, going against the practice for other writing systems, though Unicode contains some Arabic and other ligatures for backward compatibility purposes only.[33][34][35] Encoding of any new ligatures in Unicode will not happen, in part because the set of ligatures is font-dependent, and Unicode is an encoding independent of font variations. The same kind of issue arose for Tibetan script (the Chinese National Standard organization failed to achieve a similar change).

[edit] Combining characters
Characters with diacritical marks can generally be represented either as a single precomposed character or as a decomposed sequence of a base letter plus one or more non-spacing marks. For example, ḗ (precomposed e with macron and acute above) and ḗ (e followed by the combining macron above and combining acute above) should be rendered identically, both appearing as an e with a macron and acute accent, but in practice, their appearance can vary depending upon what rendering engine and fonts are being used to display the characters. Similarly, underdots, as needed in the romanization of Indic, will often be placed incorrectly. Unicode characters that map to precomposed glyphs can be used in many cases, thus avoiding the problem, but where no precomposed character has been encoded the problem can often be solved by using a specialist Unicode font such as Charis SIL that uses Graphite, OpenType, or AAT technologies for advanced rendering features.

[edit] See also

Comparison of Unicode encodings
Free software Unicode typefaces
List of binary codes
List of Unicode characters, organized by code point
List of Unicode characters, organized by script
List of XML and HTML character entity references


[edit] Notes


^ Technical Introduction
^ Summary Narrative of the History of Unicode
^ Glossary of Unicode Terms
^ Unicode Stability Policy
^ http://www.unicode.org/versions/Unicode5.0.0/ch03.pdf#G43463
^ Character Encoding Model
^ Unicode Named Sequences
^ Unicode Name Aliases
^ Enumerated Versions of The Unicode Standard
^ http://www.unicode.org/Public/reconstructed/1.0.0/UnicodeData.txt
^ http://www.unicode.org/Public/reconstructed/1.0.1/UnicodeData.txt
^ http://www.unicode.org/Public/1.1-Update/UnicodeData-1.1.5.txt
^ http://www.unicode.org/Public/2.0-Update/UnicodeData-2.0.14.txt
^ http://www.unicode.org/Public/2.1-Update/UnicodeData-2.1.2.txt
^ http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt
^ http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt
^ http://www.unicode.org/Public/3.2-Update/UnicodeData-3.2.0.txt
^ http://www.unicode.org/Public/4.0-Update/UnicodeData-4.0.0.txt
^ http://www.unicode.org/Public/4.1.0/ucd/UnicodeData.txt
^ http://www.unicode.org/Public/5.0.0/ucd/UnicodeData.txt
^ http://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt
^ Unicode Liaison Report — WG 2 meeting 52
^ Code Charts - Scripts
^ BabelStone: What's new in Unicode 5.2?
^ CWA 13873:2000 – Multilingual European Subsets in ISO/IEC 10646-1 CEN Workshop Agreement 13873
^ Multilingual European Character Set 2 (MES-2) Rationale, Markus Kuhn, 1998
^ ISO/IEC JTC1/SC 18/WG 9 N
^ Setting up Windows Internet Explorer 5, 5.5 and 6 for Multilingual and Unicode Support
^ A Brief History of Character Codes, Steven J. Searle, originally written 1999, last updated 2004
^ a b The secret life of Unicode: A peek at Unicode's soft underbelly, Suzanne Topping, 1 May 2001
^ AFII contribution about WAVE DASH, Unicode vendor-specific character table for Japanese
^ ISO 646-* Problem, Section 4.4.3.5 of Introduction to I18n, Tomohiro KUBOTA, 2001
^ http://www.unicode.org/charts/PDF/UFB50.pdf
^ http://www.unicode.org/charts/PDF/UFE70.pdf
^ http://www.unicode.org/charts/PDF/UFB00.pdf



[edit] References


The Complete Manual of Typography, James Felici, Adobe Press; 1st edition, 2002. ISBN 0-321-12730-7
The Unicode Standard, Version 4.0, The Unicode Consortium, Addison-Wesley Professional, 27 August 2003. ISBN 0-321-18578-1
The Unicode Standard, Version 5.0, Fifth Edition, The Unicode Consortium, Addison-Wesley Professional, 27 October 2006. ISBN 0-321-48091-0
Unicode: A Primer, Tony Graham, M&T books, 2000. ISBN 0-7645-4625-2.
Unicode Demystified: A Practical Programmer's Guide to the Encoding Standard, Richard Gillam, Addison-Wesley Professional; 1st edition, 2002. ISBN 0-201-70052-2
Unicode Explained, Jukka K. Korpela, O'Reilly; 1st edition, 2006. ISBN 0-596-10121-X



[edit] External links

Find more about Unicode on Wikipedia's sister projects:
 Definitions from Wiktionary
 Textbooks from Wikibooks
 Quotations from Wikiquote
 Source texts from Wikisource
 Images and media from Commons
 News stories from Wikinews
 Learning resources from Wikiversity

The Unicode Consortium

Unicode 5.1.0, including the Unicode 5.0 book in PDF format
Character Code Charts By Script for Unicode 5.1


Alan Wood's Unicode Resources Contains lists of word processors with Unicode capability; fonts and characters are grouped by type; characters are presented in lists, not grids.
Tim Bray's Characters vs Bytes explains how the different encodings work.
decodeunicode.org images of all 98,884 graphic characters defined in Unicode 5.0 (German/English, full text search)
libUniCode-plus Wiki (creation and manipulation of Unicode tables)
Table of Unicode characters from 1 to 65535 (alternative tables: 64 symbols per page and 100 symbols per page)
Unicode Character Search (search for characters by their unicode names)
UniView An XHTML-based Unicode character look up application
YChartUnicode Yoix chart of all Code Points in the Basic Multilingual Plane








v • d • e

Character encodings





ASCII • Baudot code • Code page • EBCDIC • Fieldata • Morse code • Unicode





ASCII variants

ATASCII • Galaksija • ISO/IEC 646 • PETSCII • YUSCII • ZX Spectrum character set






Extended ASCII

ArmSCII • Iran System • ISCII • ISO/IEC 8859 • ISO/IEC 8859-1 • KOI8 • Kamenický • Mazovia • Mac OS • TSCII • VISCII • Windows code pages






ASCII-related

ASCII art • ASCII Ribbon Campaign • Bob Bemer • Braille ASCII • Control characters






Unicode

GB 18030 • Han unification • Universal Character Set • UTF-8 • UTF-16/UCS-2 • UTF-32/UCS-4






Unicode-related

UTF-7 • UTF-9 and UTF-18 • UTF-EBCDIC • TRON










Retrieved from "http://en.wikipedia.org/wiki/Unicode"
Categories: Character sets | Unicode | Typography 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Alemannisch
العربية
Azərbaycan
বাংলা
Bân-lâm-gú
Bosanski
Brezhoneg
Български
Català
Česky
Dansk
Deutsch
Eesti
Ελληνικά
Español
Esperanto
Euskara
فارسی
Français
Gaeilge
Galego
한국어
हिन्दी
Hrvatski
Bahasa Indonesia
Interlingua
Íslenska
Italiano
עברית
ಕನ್ನಡ
ქართული
कश्मीरी - (كشميري)
Кыргызча
Kurdî / كوردی
Latviešu
Lietuvių
Magyar
മലയാളം
Bahasa Melayu
Nederlands
नेपाली
नेपाल भाषा
日本語
‪Norsk (bokmål)‬
‪Norsk (nynorsk)‬
Plattdüütsch
Polski
Português
Română
Русский
Shqip
සිංහල
Simple English
Slovenčina
Slovenščina
Српски / Srpski
Srpskohrvatski / Српскохрватски
Suomi
Svenska
தமிழ்
ไทย
Тоҷикӣ
ᏣᎳᎩ
Türkçe
Українська
اردو
Tiếng Việt
Walon
粵語
中文









 This page was last modified on 6 April 2009, at 05:29.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
