













Service component architecture - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Service_component_architecture";
		var wgTitle = "Service component architecture";
		var wgAction = "view";
		var wgArticleId = "3546013";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281502686;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Service component architecture

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Service Component Architecture (SCA) is a relatively new initiative advocated by major software vendors. Its proponents claim it is more natively suited for the delivery of applications that conform with the principles of service-oriented architecture. As such, SCA components are supposedly more technologically agnostic.




Contents


1 Partners
2 Supporters
3 Definition
4 Further Analysis
5 SCA artifacts
6 Transition to a Standards Body
7 Footnotes
8 See also
9 Books on SCA
10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Partners
Partner vendors include: 11

the original members: BEA Systems, IBM, IONA Technologies, Oracle Corporation, SAP AG, Sybase, Xcalia and Zend Technologies
the additional members announced on July 26, 2006: Cape Clear, Interface21, Primeton Technologies, Progress Software, Red Hat, Rogue Wave Software, Software AG, Sun Microsystems and TIBCO Software.[1]
Siemens AG, who joined the collaboration of companies working on the technology on September 18, 2006.


[edit] Supporters
In addition to the partners above, the SCA community has a significant set of formal supporters [2]. The Supporters Program remains open for any interested vendor, ISV, customer or user of the SCA technology to contribute to its evolution.

[edit] Definition
On March 21, 2007 the OSOA Collaboration released the V1.0 level of specification [3]. The specifications specify that an application designed with SCA should have the following advantages:

Decoupling of application business logic from the details of its invoked service calls including .
Target services in a multitude of languages including C++, Java, COBOL, and PHP as well as XML, BPEL, and XSLT.
The ability to seamlessly work with various communications constructs including One-Way, Asynchronous, Call-Return, and Notification.
The ability to "bind" to legacy components or services, accessed normally by technologies such as Web Services, EJB, JMS, JCA, RMI, RPC, CORBA and others.
The ability to declare (outside of business logic) the Quality of Service requirements, such as Security, Transactions and the use of Reliable Messaging.
Data could be represented in Service Data Objects.

The value proposition of SCA, therefore, is to offer the flexibility for true composite applications, flexibly incorporating reusable components in an SOA programming style. The overhead of business logic programmer concerns regarding platforms, infrastructure, plumbing, policies and protocols are removed, enabling a high degree of programmer productivity.

[edit] Further Analysis
Gartner Group has published a short brief that concluded that the SCA included technology of Service Data Objects (SDO) will enjoy more rapid adoption due to its maturity. [4]
Advantages:

caters for all existing Java platform technologies and C++
less technology dependence - does not have to rely on the Java programming language, nor XML
SDO, which is a technology specification for data access

Disadvantages:

lack of support by Microsoft reduces the relevancy of SCA for a large number of potential users.
Specification does not address performance of SOA applications, which continues to be a detractor of adoption.
Focusing on portability (instead of interoperability)[5], making it vulnerable to repeat CORBA's mistakes [6].

SCA is said to provide interoperability through an approach called "Activation". It is the method that provides the highest degree of component autonomy, compared to older "mediation" (e.g. JBI) or "Invocation" method used in JCA, as explained by an architect at SAP [3].

[edit] SCA artifacts
The SCA Assembly Model consists of a series of artifacts, which are defined by elements contained in XML files. A SCA runtime may have other non-standard representations of the artifacts represented by these XML files, and may allow for the configuration of systems to be modified dynamically. However, the XML files define the portable representation of the SCA artifacts.
The basic artifact is the Composite, which is the unit of deployment for SCA and which holds Services which can be accessed remotely. A composite contains one or more Components[7], which contain the business function provided by the module. Components offer their function as services, which can either be used by other components within the same module or which can be made available for use outside the module through Entry Points. Components may also depend on services provided by other components — these dependencies are called References. References can either be linked to services provided by other components in the same module, or references can be linked to services provided outside the module, which can be provided by other modules. References to services provided outside the module, including services provided by other modules, are defined by External Services in the module. Also contained in the module are the linkages between references and services, represented by Wires.
A Component consists of a configured Implementation, where an implementation is the piece of program code implementing business functions. The component configures the implementation with specific values for settable Properties declared by the implementation. The component can also configure the implementation with wiring of references declared by the implementation to specific target services.
Composites are deployed within a SCA System. A SCA System represents a set of services providing an area of business functionality that is controlled by a single organization. As an example, for the accounts department in a business, the SCA System might cover all financial related function, and it might contain a series of modules dealing with specific areas of accounting, with one for customer accounts, another dealing with accounts payable. To help build and configure the SCA System, Composites can be used as component implementations, in the same way as a Java classes or a BPEL processes. In other words, SCA allows a hierarchy of composites that is arbitrarily deep - such a nested model is termed recursive.
The capture and expression of non-functional requirements such as security is an important aspect of service definition, and has impact on SCA throughout the lifecycle of components and compositions. SCA provides the Policy Framework to support specification of constraints, capabilities and Quality of Service (QoS) expectations, from component design through to concrete deployment.

[edit] Transition to a Standards Body
After several years of incubation under an informal industry collaboration, early (V1.0) implementations of the specification are now coming to market. The collaboration have now indicated that formal industry standardization is the appropriate next step and announced their intentions in March 2007. The chosen Standards Development Organization is the OASIS organization, and a new OASIS Open CSA Member Section has been established [8]. Charters for six new Technical Committees (TCs) have been submitted to OASIS[9] and a Call for Participation for Technical Committee members has been issued within the OASIS organization. The Technical Committees will start their work in September 2007. Participation in these OASIS SCA TCs remains open to all companies, non-profit groups, governments, academic institutions, and individuals. Archives of the work will be accessible to both members and non-members, and OASIS will offer a mechanism for public comment[10].

[edit] Footnotes


^ Technology vendors extend collaboration on SOA technologies http://www.hoise.com/primeur/06/articles/monthly/AE-PR-08-06-92.html
^ OSOA Technology Supporters http://www.osoa.org/display/Main/Current+OSOA+Supporters+Community
^ Service Component Architecture Specifications - Open SOA Collaboration
^ http://www.gartner.com/resources/136600/136687/new_soa_specification_will_f_136687.pdf
^ [1] SCA & SDO, the next Corba?
^ [2] The rise and fall of CORBA
^ Bell, Michael (2008). "Service-Oriented Conceptualization http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470141115.html". Service-Oriented Modeling: Service Analysis, Design, and Architecture. Wiley & Sons. p. 3. ISBN 978-0-470-14111-3. 
^ "OASIS Open CSA Member Section for SCA". http://www.oasis-opencsa.org/sca. 
^ "Six Technical Committees Proposed for the OASIS Open CSA Member Section". http://xml.coverpages.org/ni2007-07-06-a.html. 
^ "Six OASIS Committees Form to Standardize Service Component Architecture (SCA) for SOA". http://www.oasis-open.org/news/oasis-news-2007-08-09.php. 



[edit] See also

Semantic service oriented architecture
service-oriented modeling


[edit] Books on SCA

Understanding SCA [4]
SOA for the Business Developer: Concepts, BPEL, and SCA -- ISBN 978-158347-065-7


[edit] External links

Current SCA Specifications from the Industry Collaboration
Open Service Oriented Architecture -- official site for information about the SCA & SDO technology
Fabric3 open source SCA runtime
Apache Open Source project implementation of the SCA specification
PocoCapsule for WS and SCA An open source C++ SCA container based on inversion-of-control (IoC) and domain-specific-modeling (DSM)
Newton open source distributed SCA & OSGi runtime
SCorWare A French public research project, which includes a SCA runtime called FraSCati
SCA Home Page at OASIS web site
Current SCA Resources & Collateral
Latest SCA & SDO News
Introducing SCA -- A tutorial by David Chappell, Chappell & Associates
Relationship of SCA and JBI
Eclipse STP/SCA sub project An Open Source Eclipse project that provides a set of tools for SCA




Retrieved from "http://en.wikipedia.org/wiki/Service_component_architecture"
Categories: Enterprise application integration | Service-oriented (business computing) 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Français
日本語
中文









 This page was last modified on 3 April 2009, at 14:10 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
