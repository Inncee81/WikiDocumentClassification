













CUDA - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "CUDA";
		var wgTitle = "CUDA";
		var wgAction = "view";
		var wgArticleId = "7933386";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281540561;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); CUDA

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

CUDA

Developed by
NVIDIA Corporation


Latest release
2.1 / November 2008


Operating system
Windows Vista, Windows XP, Linux, Mac OS X


Type
GPGPU


License
Proprietary, Freeware


Website
Nvidia's CUDA zone


CUDA (Compute Unified Device Architecture) is a parallel computing architecture developed by NVIDIA. Simply put, CUDA is the computing engine in NVIDIA graphics processing units or GPUs, that is accessible to software developers through industry standard programming languages. Programmers use 'C for CUDA', compiled through a PathScale Open64 C compiler,[1] to code algorithms for execution on the GPU. CUDA architecture supports all computational interfaces through including C. Third party wrappers are also available for Python, Fortran and Java.
The latest drivers all contain the necessary CUDA components. CUDA works with all NVIDIA GPUs from the G8X series onwards, including GeForce, Quadro and the Tesla line. NVIDIA states that programs developed for the GeForce 8 series will also work without modification on all future Nvidia video cards, due to binary compatibility. CUDA gives developers access to the native instruction set and memory of the parallel computational elements in CUDA GPUs. Using CUDA, the latest NVIDIA GPUs effectively become open architectures like CPUs. Unlike CPUs however, GPUs have a parallel "many-core" architecture, each core capable of running thousands of threads simultaneously - if an application is suited to this kind of an architecture, the GPU can offer large performance benefits.
In the computer gaming industry, in addition to graphics rendering, graphics cards are used in game physics calculations (physical effects like debris, smoke, fire, fluids), an example being PhysX and Bullet (software). CUDA has also been used to accelerate non-graphical applications in computational biology, cryptography and other fields by an order of magnitude or more.[2][3][4][5] An example of this is the BOINC distributed computing client.[6]
CUDA provides both a low level API and a higher level API. The initial CUDA SDK was made public 15 February 2007. NVIDIA has released versions of the CUDA API for Microsoft Windows and Linux. Mac OS X was also added as a fully supported platform in version 2.0[7], which supersedes the beta released February 14, 2008.[8]




Example of CUDA processing flow
1. Copy data from main mem to GPU mem
2. CPU instructs the process to GPU
3. GPU execute parallel in each core
4. Copy the result from GPU mem to main mem






Contents


1 Advantages
2 Limitations
3 Supported GPUs
4 Example
5 See also
6 References
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Advantages
CUDA has several advantages over traditional general purpose computation on GPUs (GPGPU) using graphics APIs.

Scattered reads – code can read from arbitrary addresses in memory.
Shared memory – CUDA exposes a fast shared memory region (16KB in size) that can be shared amongst threads. This can be used as a user-managed cache, enabling higher bandwidth than is possible using texture lookups.[9]
Faster downloads and readbacks to and from the GPU
Full support for integer and bitwise operations, including integer texture lookups.


[edit] Limitations

It uses a recursion-free, function-pointer-free subset of the C language, plus some simple extensions. However, a single process must run spread across multiple disjoint memory spaces, unlike other C language runtime environments.
Texture rendering is not supported.
Recursive functions are not supported and must be converted to loops.
For double precision there are no deviations from the IEEE 754 standard. In single precision, Denormals and signalling NaNs are not supported; only two IEEE rounding modes are supported (chop and round-to-nearest even), and those are specified on a per-instruction basis rather than in a control word (whether this is a limitation is arguable); and the precision of division/square root is slightly lower than single precision.
The bus bandwidth and latency between the CPU and the GPU may be a bottleneck.
Threads should be run in groups of at least 32 for best performance, with total number of threads numbering in the thousands. Branches in the program code do not impact performance significantly, provided that each of 32 threads takes the same execution path; the SIMD execution model becomes a significant limitation for any inherently divergent task (e.g., traversing a ray tracing acceleration data structure).
CUDA-enabled GPUs are only available from NVIDIA (GeForce 8 series and above, Quadro and Tesla).[10]


[edit] Supported GPUs
A table of devices officially supporting CUDA (Note that many applications require at least 256 MB of dedicated VRAM).[11]





Nvidia GeForce


GeForce GTX 295


GeForce GTX 285


GeForce GTX 280


GeForce GTX 275


GeForce GTX 260


GeForce GTS 250


GeForce 9800 GX2


GeForce 9800 GTX+


GeForce 9800 GTX


GeForce 9800 GT


GeForce 9600 GSO


GeForce 9600 GT


GeForce 9500 GT


GeForce 9400 GT


GeForce 9400 mGPU


GeForce 9300 mGPU


GeForce 8800 Ultra


GeForce 8800 GTX


GeForce 8800 GTS


GeForce 8800 GT


GeForce 8800 GS


GeForce 8600 GTS


GeForce 8600 GT


GeForce 8500 GT


GeForce 8400 GS


GeForce 8300 mGPU


GeForce 8200 mGPU


GeForce 8100 mGPU






Nvidia GeForce Mobile


GeForce 9800M GTX


GeForce 9800M GTS


GeForce 9800M GT


GeForce 9700M GTS


GeForce 9700M GT


GeForce 9650M GS


GeForce 9600M GT


GeForce 9600M GS


GeForce 9500M GS


GeForce 9500M G


GeForce 9400M G


GeForce 9300M GS


GeForce 9300M G


GeForce 9200M GS


GeForce 9100M G


GeForce 8800M GTS


GeForce 8700M GT


GeForce 8600M GT


GeForce 8600M GS


GeForce 8400M GT


GeForce 8400M GS


GeForce 8400M G


GeForce 8200M G






Nvidia Quadro


Quadro FX 5800


Quadro FX 5600


Quadro FX 4800


Quadro FX 4700 X2


Quadro FX 4600


Quadro FX 3700


Quadro FX 1700


Quadro FX 570


Quadro FX 370


Quadro NVS 290


Quadro FX 3600M


Quadro FX 1600M


Quadro FX 770M


Quadro FX 570M


Quadro FX 370M


Quadro Plex 1000 Model IV


Quadro Plex 1000 Model S4




Nvidia Quadro Mobile


Quadro NVS 360M


Quadro NVS 140M


Quadro NVS 135M


Quadro NVS 130M




Nvidia Tesla


Tesla S1070


Tesla C1060


Tesla C870


Tesla D870


Tesla S870





See the Comparison of Nvidia graphics processing units for more information.

[edit] Example
This example code in C++ loads a texture from an image into an array on the GPU:


cudaArray* cu_array;
texture<float, 2> tex;
 
// Allocate array
cudaMalloc(&cu_array, cudaCreateChannelDesc<float>(), width, height);
 
// Copy image data to array
cudaMemcpy(cu_array, image, width*height, cudaMemcpyHostToDevice);
 
// Bind the array to the texture
cudaBindTexture(tex, cu_array);
 
// Run kernel
dim3 blockDim(16, 16, 1);
dim3 gridDim(width / blockDim.x, height / blockDim.y, 1);
kernel<<< gridDim, blockDim, 0 >>>(d_odata, width, height);
cudaUnbindTexture(tex);
 
__global__ void kernel(float* odata, int height, int width)
{
   unsigned int x = blockIdx.x*blockDim.x + threadIdx.x;
   unsigned int y = blockIdx.y*blockDim.y + threadIdx.y;
   float c = texfetch(tex, x, y);
   odata[y*width+x] = c;
}

Below is an example given in Python that computes the product of two arrays on the GPU. The python language bindings can be obtained from PyCUDA.


import pycuda.driver as drv
import numpy
 
drv.init()
dev = drv.Device(0)
ctx = dev.make_context()
 
mod = drv.SourceModule("""
__global__ void multiply_them(float *dest, float *a, float *b)
{
  const int i = threadIdx.x;
  dest[i] = a[i] * b[i];
}
""")
 
multiply_them = mod.get_function("multiply_them")
 
a = numpy.random.randn(400).astype(numpy.float32)
b = numpy.random.randn(400).astype(numpy.float32)
 
dest = numpy.zeros_like(a)
multiply_them(
        drv.Out(dest), drv.In(a), drv.In(b),
        block=(400,1,1))
 
print dest-a*b


[edit] See also

AMD FireStream
GPGPU - general purpose computation on GPUs.
Close to Metal
OpenCL
BrookGPU
Lib Sh
Comparison of MPI, OpenMP, and Stream Processing
Nvidia Corporation
Graphics Processing Unit (GPU)
Stream processing
Shader
Jacket: A CUDA-engine for MATLAB
Larrabee (GPU)
Molecular modeling on GPU


[edit] References


^ NVIDIA on DailyTech
^ Giorgos Vasiliadis, Spiros Antonatos, Michalis Polychronakis, Evangelos P. Markatos and Sotiris Ioannidis (September 2008, Boston, MA, USA). "Gnort: High Performance Network Intrusion Detection Using Graphics Processors" (PDF). Proceedings of the 11th International Symposium On Recent Advances In Intrusion Detection (RAID). http://www.ics.forth.gr/dcs/Activities/papers/gnort.raid08.pdf. 
^ Schatz, M.C., Trapnell, C., Delcher, A.L., Varshney, A. (2007). "High-throughput sequence alignment using Graphics Processing Units.". BMC Bioinformatics 8:474: 474. doi:10.1186/1471-2105-8-474. http://www.biomedcentral.com/1471-2105/8/474. 
^ Manavski, Svetlin A.; Giorgio Valle (2008). "CUDA compatible GPU cards as efficient hardware accelerators for Smith-Waterman sequence alignment". BMC Bioinformatics 9(Suppl 2):S10: S10. doi:10.1186/1471-2105-9-S2-S10. http://www.biomedcentral.com/1471-2105/9/S2/S10. 
^ Pyrit - Google Code http://code.google.com/p/pyrit/
^ Use your NVIDIA GPU for scientific computing, BOINC official site (December 18 2008)
^ NVIDIA CUDA Software Development Kit (CUDA SDK) - Release Notes Version 2.0 for MAC OSX
^ CUDA 1.1 - Now on Mac OS X- (Posted on Feb 14, 2008)
^ Silberstein, Mark (2007). "Efficient computation of Sum-products on GPUs" (PDF). http://www.technion.ac.il/~marks/docs/SumProductPaper.pdf. 
^ "CUDA-Enabled Products". CUDA Zone. NVIDIA Corporation. http://www.nvidia.com/object/cuda_learn_products.html. Retrieved on 2008-11-03. 
^ CUDA-Enabled GPU Products



[edit] External links

Nvidia CUDA official website
A conversation with Jen-Hsun Huang, CEO Nvidia Charlie Rose, February 5, 2009
Nvidia CUDA GPU Computing developer forums
Nvidia CUDA developer registration for professional developers and researchers
Beyond3D – Introducing CUDA Nvidia's Vision for GPU Computing March 10, 2007
University of Illinois Nvidia CUDA Course taught by Wen-mei Hwu and David Kirk, Spring 2009
CUDA: Breaking the Intel & AMD Dominance
A CUDA-based Engine for MATLAB
Ascalaph Liquid GPU molecular dynamics.
CUDA implementation for multi-core processors
Integrate CUDA with Visual C++, September 26, 2008
CUDA.NET - .NET library for CUDA, Linux/Windows compliant
Using NVIDIA GPU for scientific computing with BOINC software
CUDA.CS.MSU.SU Russian CUDA developer community








v • d • e

Nvidia





GPUs





Early chipsets


NV1 · NV2







RIVA Series


RIVA 128 · RIVA TNT · RIVA TNT2







GeForce Series


GeForce 256 · GeForce 2 · GeForce 3 · GeForce 4 · GeForce FX · GeForce 6 · GeForce 7 · GeForce 8 · GeForce 9 · GeForce GTX 200 · GeForce GTX 300







Technologies


SLI  · PureVideo  · TurboCache  · PhysX









Chipsets





GeForce Series


8-series  · 9-series







nForce Series


nForce 220 / 415 / 420  · nForce2  · nForce3  · nForce4  · nForce 500  · nForce 600  · nForce 700







Technologies


ESA · LinkBoost  · MCP  · EPP · SoundStorm









Workstation and HPC

Quadro · Quadro Plex · Quadro CX  · Tesla






Consoles

NV2A (Xbox)  · RSX (PlayStation 3)






Handheld

GoForce · Tegra






Driver and software
technologies

ForceWare  · System Tools  · nView  · Gelato  · CUDA  · Cg






Acquisitions

3dfx Interactive  · Ageia  · ULi













v • d • e

CPU technologies





Architecture

ISA : CISC  · EDGE  · EPIC · MISC  · OISC · RISC · VLIW · ZISC · Harvard architecture · Von Neumann architecture · 8-bit · 32-bit · 64-bit · 128-bit






Parallelism





Pipeline


Instruction pipelining · In-Order & Out-of-Order execution · Register renaming · Speculative execution







Level


Bit · Instruction · Superscalar · Data · Task







Threads


Multithreading · Simultaneous multithreading · Hyperthreading · Superthreading







Flynn's taxonomy


SISD · SIMD · MISD · MIMD









Types

Digital signal processor · Microcontroller · System-on-a-chip · Vector processor






Components

Arithmetic logic unit (ALU) · Barrel shifter · Floating-point unit (FPU) · Backside bus · Multiplexer · Demultiplexer · Registers · Memory management unit (MMU) · Translation lookaside buffer (TLB) · Cache · register file · microcode · control unit · CPU clock






Power management

APM · ACPI (states) · Dynamic frequency scaling · Dynamic voltage scaling · Clock gating









Retrieved from "http://en.wikipedia.org/wiki/CUDA"
Categories: Nvidia | Graphics hardware | Graphics cards | Video game hardware | Computer physics engines | GPGPU 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
Deutsch
Español
Français
한국어
Nederlands
日本語
Русский
Suomi
Türkçe
中文









 This page was last modified on 3 April 2009, at 17:59.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
