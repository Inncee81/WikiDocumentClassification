













Shebang (Unix) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Shebang_(Unix)";
		var wgTitle = "Shebang (Unix)";
		var wgAction = "view";
		var wgArticleId = "4030279";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281992054;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-bash .de1, .source-bash .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-bash  {}
.source-bash .head {}
.source-bash .foot {}
.source-bash .imp {font-weight: bold; color: red;}
.source-bash .ln-xtra {color: #cc0; background-color: #ffc;}
.source-bash li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-bash li.li2 {font-weight: bold;}
.source-bash .kw1 {color: #b1b100;}
.source-bash .kw3 {color: #000066;}
.source-bash .co1 {color: #808080; font-style: italic;}
.source-bash .es0 {color: #000099; font-weight: bold;}
.source-bash .br0 {color: #66cc66;}
.source-bash .st0 {color: #ff0000;}
.source-bash .nu0 {color: #cc66cc;}
.source-bash .re0 {color: #0000ff;}
.source-bash .re1 {color: #0000ff;}
.source-bash .re2 {color: #0000ff;}
.source-bash .re3 {color: #808080; font-style: italic;}
.source-bash .re4 {color: #0000ff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-perl .de1, .source-perl .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-perl  {}
.source-perl .head {}
.source-perl .foot {}
.source-perl .imp {font-weight: bold; color: red;}
.source-perl .ln-xtra {color: #cc0; background-color: #ffc;}
.source-perl li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-perl li.li2 {font-weight: bold;}
.source-perl .kw1 {color: #b1b100;}
.source-perl .kw2 {color: #000000; font-weight: bold;}
.source-perl .kw3 {color: #000066;}
.source-perl .co1 {color: #808080; font-style: italic;}
.source-perl .coMULTI {color: #808080; font-style: italic;}
.source-perl .es0 {color: #000099; font-weight: bold;}
.source-perl .br0 {color: #66cc66;}
.source-perl .st0 {color: #ff0000;}
.source-perl .nu0 {color: #cc66cc;}
.source-perl .me1 {color: #006600;}
.source-perl .me2 {color: #006600;}
.source-perl .re0 {color: #0000ff;}
.source-perl .re4 {color: #009999;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Shebang (Unix)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other uses, see Shebang.
In computing, a shebang (also called a hashbang, hashpling, or pound bang) refers to the characters "#!" when they are the first two characters in a text file. Unix-like operating systems take the presence of these two characters as an indication that the file is a script, and try to execute that script using the interpreter specified by the rest of the first line in the file. For instance, shell scripts for the Bourne shell start with the first line:

 #!/bin/sh

More precisely, a shebang line consists of a number sign and an exclamation point character ("#!"), followed by the (full) path to the interpreter program that will provide the interpretation. The shebang is looked for and used when a script is invoked directly (as with a regular executable), and largely to the end of making scripts look and act similarly to regular executables, to the operating system and to the user.
Because the "#" character is often used as the comment marker in scripting languages, the contents of the shebang line will be automatically ignored by the interpreter itself; the shebang line only exists to specify to the operating system the correct interpreter to use.




Contents


1 Etymology
2 History
3 Portability

3.1 Unicode


4 As magic number
5 Examples

5.1 Solving shebang problems with the env program


6 See also
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Etymology
The name shebang comes from an inexact contraction of SHArp bang or haSH bang[citation needed], referring to the two typical Unix names of the two characters. Unix jargon uses sharp or hash (and sometimes, even, mesh) to refer to the number sign character and bang to refer to the exclamation point, hence shebang. Another theory on sh in shebang's name is from default shell sh, usually invoked with shebang.[1]

[edit] History
The shebang was introduced by Dennis Ritchie between Version 7 Unix and 8 at Bell Laboratories. It was then also added to the BSD line at Berkeley (present in 4BSD and activated by default in 4.2BSD)[2]. As Version 8 and later versions were not released to the public, the first widely known appearance of this feature was on BSD.

[edit] Portability
Shebangs specify absolute paths to system executables; this can cause problems on systems which have non-standard file system layouts (such as GoboLinux or NixOS). Even when systems have fairly standard paths, it is quite possible for variants of the same operating system to have different locations for the desired interpreter.
In the absence of rigidly standardized locations for each interpreter, the shebang would on some systems try to execute something that doesn't exist where the shebang says it is. Therefore shebangs can limit the portability of the file.
Because of this it is not uncommon to need to edit the shebang line after copying a script from one computer to another because the path that was coded into the script may not apply on a new machine, depending on the consistency in past convention of placement of the interpreter. For this and other reasons, POSIX does not standardize the feature.
Often, the program /usr/bin/env can be used to circumvent this limitation. Care should be taken with this approach as while it increases portability it may introduce vulnerabilities to gain unauthorized root access. There are still some portability issues with OpenServer 5.0.6 and Unicos 9.0.2 which have only /bin/env and no /usr/bin/env [3]
Another portability problem is the interpretation of the command arguments. Some systems do not split up the arguments; for example, when running the script with the first line like,

#!/usr/bin/env python -c

it will be invoked as,

/usr/bin/env "python -c"

That is, "python -c" will be passed as one argument to /usr/bin/env, rather than two arguments, "python" and "-c". On Linux, this will lead to the error message,

/usr/bin/env: python -c: No such file or directory

Cygwin also behaves this way. Some other systems handle the arguments differently.
Another common problem are scripts accidental stored in DOS file format with a shebang. Some systems then interpret the carriage return character as part of the interpreter, resulting in error messages like this:

-bash: ./test.sh: /bin/sh^M: bad interpreter: No such file or directory 

Plan 9 from Bell Labs demands a shebang when trying to execute a text file because it needs to know how to run the file. For example, a shell script could have the line

#!/bin/rc

at the top. If one is forgotten, the system would say "exec header invalid."
In many Linux systems, /bin/sh is a symlink to /bin/bash, since bash implements all the commands available in the Bourne shell. Some distributions link this to other shells, however. Ubuntu and Debian use Debian Almquist shell, for instance, for better performance. When script developers erroneously use the #!/bin/sh in scripts that contain bash-specific commands (bashisms), they will fail on systems that use a different default shell. The problem can be fixed by using only sh-compatible commands or by explicitly stating #!/bin/bash as the shebang.

[edit] Unicode
Unicode byte order marks at the beginning of a script cause problems, as the shebang #! is no longer the first two bytes of a script file. It is advised that, if writing scripts on a unicode-compliant text editor, the byte-order mark feature be turned off.

[edit] As magic number
The shebang is actually a human-readable instance of a magic number in the executable file, the magic byte string being 0x23 0x21, the two-character encoding in ASCII. (Executable files that do not require an interpreter program start with other magic combinations. See File format for more details of magic numbers.)
There have been rumours that some old versions of UNIX look for the normal shebang followed by a space and a slash ("#! /"), but this appears to be untrue.[4]
On Unix-like operating systems, new image files are started by the "exec" family functions. This is where the operating system will detect that an image file is either a script or an executable binary. The presence of the shebang will result in the execution of the specified (usually script language) executable. This is described on the Solaris and Linux man page "execve".

[edit] Examples





This article may contain excessive, poor or irrelevant examples. You can improve the article by adding more descriptive text and removing less pertinent examples. See Wikipedia's guide to writing better articles for further suggestions.


Some typical interpreters for shebang lines:

#!/bin/bash — Execute using the Bourne-again shell
#!/bin/bash -c '/bin/bash' — Execute using bash in the /bin/ directory, and calls bash inside the /bin/
#!/bin/csh — Execute using csh, the C shell
#!/bin/ksh — Execute using the Korn shell
#!/bin/awk -f — Execute using awk program in the /bin/ directory; the -f is necessary; otherwise awk will think its argument is the awk program itself rather than a file that contains it
#!/bin/sh — On some systems, such as Solaris, this is the Bourne shell. On Linux systems there is usually no Bourne shell and this is a link to another shell, such as bash. According to the Single UNIX Specification's requirements for /bin/sh, such a shell will usually mimic the Bourne shell's behaviour, but be aware that using #!/bin/sh in shell scripts may invoke different Bourne-compatible shells on different systems.
#!/bin/zsh — Execute using zsh, the Z shell
#!/usr/bin/perl — Execute using Perl
#!/usr/bin/php — Execute using PHP. Note: since in PHP the shebang line falls outside the "code block" (<?php ?>), it doesn't act as a comment, so PHP must explicitly ignore it.
#!/usr/bin/python — Execute using Python
#!/usr/bin/lua — Execute using Lua
#!/usr/bin/env — Invocation of some other program using env program in /usr/bin directory
#!/usr/bin/ruby — Execute using Ruby
#!/usr/bin/tclsh — Execute using Tcl
#!/usr/bin/emacs --script — Execute using Emacs, need Emacs 22.

Shebang lines can also include specific options that will be passed to the interpreter; see the examples below. However, implementations differ widely on how options are parsed.
This file is a shell script, the Unix equivalent of a DOS batch file:


#!/bin/sh
echo "Hi there.";
# The rest of the shell script.
# ...

This file is an AWK script:

#!/bin/awk -f
BEGIN { print "Hello, world!" }
# The rest of the AWK script.
# ...

This file is a Perl script, to be run with warnings enabled (-w):


#!/usr/bin/perl -w
print "Hello world!\n";
# The rest of the Perl script.
# ...

This file is also a Perl script, but it assumes that the Perl interpreter is in a different place. Also, the Perl interpreter is run without extra warnings being enabled.


#!/usr/local/bin/perl
print "Hello again!\n";
# The rest of the Perl script.
#...

This is a different way of invoking a bash script, telling it to print each command before it executes it:


#!/bin/bash -x
dosomeveryimportantprocess
# The rest of a perhaps long-running or importantly-timed Bash script.
...

This file prints itself (though it is not a quine because it reads its own source code):

#!/bin/cat
Any text can be placed below the shebang.


[edit] Solving shebang problems with the env program





It has been suggested that this article or section be merged into env. (Discuss)


Invocation via the env program is useful for two purposes:
...searching for a program via the PATH environment variable:

#!/usr/bin/env python
#
# The rest of the Python script
...

...and invoking a program which is itself a #! script:

#!/usr/bin/env /usr/local/bin/compileAndGo "$@"
...

Note that the above shows passing of arguments which won't work if you want "compileAndGo" itself to be found by search path (case 1 above) and be aware that while this method does increase portability, it is not foolproof. While env is almost always /usr/bin/env a small number of platforms have it at /bin/env[5].

[edit] See also

binfmt_misc
File association


[edit] References

^ Jargon File entry for shebang
^ extracts from 4.0BSD /usr/src/sys/newsys/sys1.c
^ Details about '#!'
^ 32 bit shebang myth
^ location of env


[edit] External links

Details about the shebang mechanism on various Unix flavours
#! - the Unix truth as far as I know it (a more generic approach)
FOLDOC shebang article




Retrieved from "http://en.wikipedia.org/wiki/Shebang_(Unix)"
Categories: UnixHidden categories: All articles with unsourced statements | Articles with unsourced statements since February 2008 | Articles with too many examples | All articles to be merged | Articles to be merged since March 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
Français
Italiano
日本語
Polski









 This page was last modified on 5 April 2009, at 23:48 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
