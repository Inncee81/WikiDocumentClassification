













Programming paradigm - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Programming_paradigm";
		var wgTitle = "Programming paradigm";
		var wgAction = "view";
		var wgArticleId = "189897";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279098769;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Programming paradigm

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





It has been suggested that Multi-paradigm programming language be merged into this article or section. (Discuss)







This article is in need of attention from an expert on the subject. WikiProject Computer science or the Computer science Portal may be able to help recruit one. (January 2009)




Programming paradigms




Agent-oriented
Component-based

Flow-based
Pipeline


Concatenative
Concurrent computing
Context-oriented
Declarative (Contrast: Imperative)

Functional

Dataflow

Cell-oriented (spreadsheets)
Reactive




Goal-directed

Constraint
Constraint logic
Logic

Abductive logic
Inductive logic






Event-driven
Feature-oriented
Function-level (Contrast: Value-level)
Imperative (Contrast: Declarative)

Advanced separation of concerns

Aspect-oriented
Subject-oriented


Array (Contrast: Scalar)
Automata-based
Object-oriented

Class-based
Prototype-based


Procedural

Structured


Role-oriented
Scalar (Contrast: Array)


Iterative (Contrast: Recursive)
Metaprogramming

Attribute-oriented
Automatic

Generic

Template

Policy-based




Language-oriented

Grammar-oriented

Dialecting


Intentional




Reflective


Modular
Nondeterministic
Parallel computing

Process-oriented


Programming in the large and programming in the small
Recursive (Contrast: Iterative)
Tree
Value-level (Contrast: Function-level)


This box: view • talk • edit



A programming paradigm is a fundamental style of computer programming. (Compare with a methodology, which is a style of solving specific software engineering problems). Paradigms differ in the concepts and abstractions used to represent the elements of a program (such as objects, functions, variables, constraints, etc.) and the steps that compose a computation (assignation, evaluation, continuations, data flows, etc.).




Contents


1 Overview
2 History
3 See also
4 References
5 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
A programming language can support multiple paradigms. For example programs written in C++ or Object Pascal can be purely procedural, or purely object-oriented, or contain elements of both paradigms. Software designers and programmers decide how to use those paradigm elements.
In object-oriented programming, programmers can think of a program as a collection of interacting objects, while in functional programming a program can be thought of as a sequence of stateless function evaluations. When programming computers or systems with many processors, process-oriented programming allows programmers to think about applications as sets of concurrent processes acting upon logically shared data structures.
Just as different groups in software engineering advocate different methodologies, different programming languages advocate different programming paradigms. Some languages are designed to support one particular paradigm (Smalltalk supports object-oriented programming, Haskell supports functional programming), while other programming languages support multiple paradigms (such as Object Pascal, C++, C#, Visual Basic, Common Lisp, Scheme, Perl,Python, Ruby and Oz).
Many programming paradigms are as well known for what techniques they forbid as for what they enable. For instance, pure functional programming disallows the use of side-effects; structured programming disallows the use of the goto statement. Partly for this reason, new paradigms are often regarded as doctrinaire or overly rigid by those accustomed to earlier styles.[1] Avoiding certain techniques can make it easier to prove theorems about a program's correctness—or simply to understand its behavior.

[edit] History
Initially, computers were hard-wired or 'soft-wired' (see IBM 805 Test Scoring Machine) and then later programmed using binary code that represented control sequences fed to the computer CPU. This was difficult and error-prone. Programs written in binary are said to be written in machine code, which is a very low-level programming paradigm.
To make programming easier, assembly languages were developed. These replaced machine code functions with mnemonics and absolute memory addresses with symbolic labels. Assembly language programming is considered a low-level paradigm although it is a 'second generation' paradigm. Even 1960's assembly languages actually supported library COPY and quite sophisticated conditional macro generation and pre-processsing capabilities. They also supported modular programming features such as CALL, external variables and common sections (globals), enabling significant code re-use. Although a significant improvement over machine code, it is claimed that assembler it is still more prone to errors , difficult to debug and maintain[dubious – discuss] than alternative languages/paradigms (Despite this, continual development of assembler continues, as mentioned later, in discussion of the object-oriented paradigm)

The next advance was the development of procedural languages. These third-generation languages (the first described as high-level languages) use vocabulary related to the problem being solved. For example,

COBOL (Common Business Oriented Language) - uses terms like file, move and copy.
FORTRAN (FORmula TRANslation) and
ALGOL (ALGOrithmic Language) - both using mathematical language terminology,

were developed mainly for commercial or scientific and engineering problems, although one of the ideas behind the development of ALGOL was that it was an appropriate language to define algorithms.

PL/1 (Programming language 1) - a hybrid commercial/scientific general purpose language supporting pointers
BASIC (Beginners All purpose Symbolic Instruction Code) - was developed to enable more people to

write programs.
All these languages follow the procedural paradigm. That is, they describe, step by step, exactly the procedure that should be followed to solve a problem - familiar to most people from other disciplines. These new languages did not replace assembler and were deleloped more or less in parallel. Assembler was, and still is, used for time critical systems and frequently in embedded systems.
It is claimed by some that the problem with procedural languages is that it can be difficult to reuse code[dubious – discuss]and to modify solutions[dubious – discuss] when better methods of solution are developed[dubious – discuss].
In order to address these perceived problems, object-oriented languages (like Eiffel, Smalltalk and Java) were developed. In these languages data, and methods of manipulating the data, are kept as a single unit called an object. The only way that a user can access the data is via the object's 'methods' (subroutines). This means that, once an object is fully working, it cannot be corrupted by the user[dubious – discuss]. It also means that the internal workings of an object may be changed without affecting any code that uses the object.
Since object-oriented programming is a paradigm, not a language, it is possible to create even an object-oriented assembler language. High Level Assembly (HLA) is an example of this that fully supports advanced data types and object-oriented assembly language programming..
A further advance was made when declarative programming paradigms were developed. In these languages the computer is told what the problem is, not how to solve the problem - the program is structured as a collection of properties to find in the expected result, not as a procedure to follow. Given a database or a set of rules, the computer tries to find a solution matching all the desired properties. The archetypical example of a declarative language is the fourth generation language SQL, as well as the family of functional languages.
Functional programming is a subset of declarative programming. Programs written using this paradigm use functions, blocks of code intended to behave like mathematical functions. Functional languages discourage changes in the value of variables through assignment, making a great deal of use of recursion instead.

[edit] See also

Paradigm
Mindset
Turing completeness
Multi-paradigm programming language
Domain-specific language
Programming domain
Architecture description language
Modeling language


[edit] References

^ Frank Rubin published a criticism of Dijkstra's letter in the March 1987 CACM where it appeared under the title 'GOTO Considered Harmful' Considered Harmful. Frank Rubin (March 1987). ""GOTO Considered Harmful" Considered Harmful" (PDF). Communications of the ACM 30 (3): 195–196. doi:10.1145/214748.315722. http://www.ecn.purdue.edu/ParaMount/papers/rubin87goto.pdf. 


[edit] External links

Programming paradigms
Programming Languages








v • d • e

Types of programming languages






Array · Aspect-oriented · Assembly · Class-based · Compiled · Concurrent · Curly bracket · Data-oriented · Data-structured · Dataflow · Declarative · Domain-specific · Dynamic · Esoteric · Event-driven · Extensible · Functional · High-level · Imperative · Interpreted · Logic · Low-level · Machine · Macro · Metaprogramming · Multi-paradigm · Non-English-based · Object-oriented · Off-side rule · Pipeline · Procedural · Prototype-based · Reflective · Rule-based · Scripting · Synchronous · Visual













v • d • e

Types of Computer languages






Architecture description · Hardware description · Markup · Modeling · Programming · Query · Specification · Stylesheet · Template processing · Transformation













v • d • e

Software engineering





Fields

Requirements analysis • Software design • Computer programming • Formal methods • Software testing • Software deployment • Software maintenance






Concepts

Data modeling • Enterprise architecture • Functional specification • Modeling language • Programming paradigm • Software • Software architecture • Software development methodology • Software development process • Software quality • Software quality assurance • Structured analysis






Orientations

Agile • Aspect-oriented • Object orientation • Ontology • Service orientation • SDLC






Models

Development models: Agile • Iterative model • RUP • Scrum • Spiral model • Waterfall model • XP • V-Model
Other models: CMMI • Data model • Function model • IDEF • Information model • Metamodeling • Object model • View model • UML






Software
engineers

Kent Beck • Grady Booch • Fred Brooks • Barry Boehm • Ward Cunningham • Ole-Johan Dahl • Tom DeMarco • Edsger W. Dijkstra • Martin Fowler • C. A. R. Hoare • Watts Humphrey • Michael A. Jackson • Ivar Jacobson • Craig Larman • James Martin • Bertrand Meyer • David Parnas • Winston W. Royce • James Rumbaugh • Niklaus Wirth • Edward Yourdon






Related fields

Computer science • Computer engineering • Enterprise engineering • History • Management • Mathematics • Project management • Quality management • Software ergonomics • Systems engineering













v • d • e

Major fields of computer science





Theory of computation

Automata · Computability · Computational complexity · Quantum Computing






Algorithms and data structures

Analysis of algorithms · Algorithm design · Computational geometry · Interface






Programming languages

Theory · Compilers / Parsers / Interpreters · Programming paradigms (Declarative · Imperative · Logic · Procedural) · SDLC · Software Distribution






Types of Computation

Cloud computing · Cluster Computing · Distributed computing · Grid computing · Parallel computing






System architecture

Computer architecture · Computer organization · Operating systems · Management information system · Information systems






Telecomm & Networking

Broadcasting · Network topology · OSI model · Cryptography · World Wide Web · Semantic Web · Internetworking · PSTN / SONET · IEEE 802






Security

Intelligence · Encryption · Protocols · Spam · VPN · Online predator · Identity theft · Internet privacy · Trusted Computing · Advertising Ethics · Computer forensics · Computer surveillance · DoD






Databases

Database theory · Data mining · Data modeling · OLAP · Geographic information system






Computer graphics

CGI  · Visualization · Image processing






Scientific computing

Artificial life · Bioinformatics · Cognitive Science · Computational chemistry · Computational neuroscience · Computational physics · Numerical algorithms · Symbolic mathematics






Artificial intelligence

Automated reasoning · Computational linguistics · Computer vision · Evolutionary computation · Machine learning · Natural language processing · Robotics · Cybernetics






BCI / HCI / MMI

Computer accessibility · User interfaces · Wearable computing · Ubiquitous computing · Mixed reality






NOTE: Computer science can also be split up into different topics or fields according to the ACM Computing Classification System.








Retrieved from "http://en.wikipedia.org/wiki/Programming_paradigm"
Categories: Programming paradigms | Programming language classification | Programming language topicsHidden categories: Articles to be merged since July 2008 | All articles to be merged | Computer science articles needing expert attention | Articles needing expert attention since January 2009 | All pages needing cleanup | Articles with disputed statements from March 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Bosanski
Български
Català
Dansk
Deutsch
Ελληνικά
Español
فارسی
Français
Galego
한국어
Bahasa Indonesia
Italiano
עברית
Latviešu
Magyar
Македонски
Bahasa Melayu
Nederlands
日本語
Polski
Português
Русский
Srpskohrvatski / Српскохрватски
Shqip
Svenska
தமிழ்
Українська
中文









 This page was last modified on 23 March 2009, at 06:21.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
