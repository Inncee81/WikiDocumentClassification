













Service delivery platform - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Service_delivery_platform";
		var wgTitle = "Service delivery platform";
		var wgAction = "view";
		var wgArticleId = "3856568";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 284650706;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Service delivery platform

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
The term Service Delivery Platform (SDP) usually refers to a set of components that provide a serviceâ€™s delivery architecture (such as service creation, session control & protocols) for a type of service. There is no standard definition of SDP in the industry although the TeleManagement Forum (TMF) is working on defining specifications in this area. Different players will define its components and its breadth and depth in a slightly different way.
As SDPs evolve, they will often require integration of telecom and IT capabilities and the creation of services beyond technology and network boundaries. SDPs available today are optimized for the delivery of a service in a given technological or network domain (examples of such SDPs include web, IMS, IPTV, Mobile TV, etc.). They will typically provide a service control environment, a service creation environment, a service orchestration and execution environment, and abstractions for media control, presence/location, integration, and other low-level communications capabilities. SDPs are applied to both consumer and business applications.
The business objective of implementing the SDP is to enable rapid development and deployment of new converged multimedia services, from basic POTS phone services to complex audio/video conferencing for multiplayer games (MPGs).
Telecommunications companies like Telcordia, Nokia Siemens Networks, Nortel, Avaya, Ericsson and Alcatel-Lucent have provided communications integration interfaces and infrastructure since the early to mid 1990s. The cost-saving success of IP-based VoIP systems as replacements for proprietary PBX systems and desktop phones has prompted a revolutionary shift in industry focus from proprietary systems to open, standard technologies. This strong focus on open environments has also given systems integrators such as Torry Harris Business Solutions, Accenture, IBM, HP, Alcatel-Lucent, Tech Mahindra and CGI the opportunity to offer turnkey pre-packaged, integration services and there are also, technology silo-ed focused, turn-key SDP solutions. In addition, new consortia of telecommunications software product companies are also emerging. By offering pre-integrated software products, consortia offer an alternative means for operators to create SDPs based on key product elements - such as convergent billing and content/partner relationship management.
As SDPs evolve beyond technology silos, several blended applications will be possible:

Users can see incoming phone calls (Wireline or Wireless), IM buddies (PC) or the locations of friends (GPS Enabled Device) on their television screen
Users can order VoD (Video On Demand) services from their mobile phones or watch streaming video that they have ordered as a video package for both home and mobile phone
An airline customer receives a text message from an automated system regarding a flight cancellation, then opts to use a voice self-service interface to reschedule





Contents


1 History
2 Elements of an SDP

2.1 Service Creation Environment
2.2 Execution Environment
2.3 Media Control
2.4 Presence/Location
2.5 Integration


3 Relationship to SOA
4 The Reality of Implementing SDPs
5 See also
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The late 1990s saw a period of unprecedented change in enterprise applications as the grip of client-server architectures gradually relaxed and allowed the entrance of n-tiered architectures. This represented the advent of the application server, a flexible compromise between the absolutes of the dumb terminal and the logic-heavy client PC. Although entrants into the application server ring were many and varied, they shared common advantages: database vendor abstraction, open standard (mostly object-oriented) programming models, high availability and scalability characteristics, and presentation frameworks, among others. These transformations were triggered by business forces including the rampaging tidal wave that was the Internet boom, but none of it would have been possible without the proliferation of standards such as the TCP/IP protocol, the Java programming language, and the J2EE web application server architecture. It is against this backdrop of transformation that telecom's era of rapid change was set in motion.
Up until the first few years of 2000, the markets for commercial and business telecommunication technologies were still saturated with proprietary hardware and software. Open standards started to become popular as IP technologies were introduced and with the rapid expansion of Voice-over-IP (VoIP) for transmission of voice data over packet networks and the Session Initiation Protocol (SIP) for standardized media control, especially regarding enterprise voice communication.
In this new standards-supported environment, convergence of the voice and data worlds has become less a moniker for disastrous telecom/IT integration attempts and more a true avenue for the production of new and better consumer and business services. The last few years have seen the introduction or proliferation of various SIP programming libraries (reSIProcate, Aricent, MjSip and its derived port by HSC) and products based on the relatively new SIP standard, and the IP Multimedia Subsystem standard defined by the 3GPP has gained a huge following. The Service Delivery Platform, whose power comes in large part from the quality and acceptance of these supporting standards, is rapidly gaining acceptance as a widely applicable architectural pattern.
In industry today there are multiple definitions of Service Delivery Platform (SDP) being used with no established consensus as to a common meaning. Because of this, and the need for service providers to understand how to better manage SDPs, the TeleManagement Forum (TMF) has started standardizing the concept of Service Delivery Framework (SDF) and SDF management. The SDF definition provides the terminology and concepts needed to reference the various components involved, such as applications and enablers, network and service exposure, and orchestration.
What is needed to deliver a blend of personalized services from multiple SDPs to end users is a means to inter-work those SDPs through common service enablers and network resources. Underpinning these service aspects though has been a fundamental concept that the user's attributes and the services they receive require a common repository and a common data model, such as those provided by a LDAP/X.500 directory or HSS database. Early SDP implementations of this nature started in the mid / late 1990's for ISP converged services. Larger and more complex SDPs have been implemented over the last 5 years in MSO type environments and for mobile operators.

SDPs: Their Context and Next Generation Systems
SDPs are commonly considered for the telco type environments as a core system which interconnects the customer's access and network infrastructure with the OSS systems and BSS systems. SDPs in this context are usually associated to a particular service regime such as mobile telephones or for converged services.
SDPs are also considered in the context of very large transformation, convergence and integration programs which require a considerable budget. The difficulty in such projects is that there may be hundreds of thousands of design and implementation decisions to be made - once the architecture is agreed. Naturally this issue alone dictates the need for software development and operational engineering skills. Probably the best way of reducing these design and integration issues is to simulate the SDP on a small scale system before the major project actually starts. This allows the solution architecture to be verified that it meets the operational, service delivery and business requirements.
In the new world of converged service delivery, SDPs should also be considered not just as a core function within an operator but as a number of interconnected, distributed service nodes (e.g.) for redundancy reasons and for different service profiles to different business and market sectors. Many operators provide commercial scale/grade products such as bundled voice, web hosting, VPNs, mail, conference and messaging facilities to government and corporate clients. The evolution of such bundled services could be from fragmented management systems to a "Virtual Private Service Environment" where the operator runs a dedicated SDP for each of its customers who require their services on demand and under their control.
SDPs can also be used to manage independent wireless enabled precincts such as shopping malls, airports, retirement villages, outcare centres. In this case a "lightweight" easy to deploy platform could be used. See wwite: Next Generation Governance and Service Delivery Platform.

[edit] Elements of an SDP

[edit] Service Creation Environment
Often a telecom software developer's primary access point, the Service Creation Environment (SCE, also Application Creation Environment or Integrated Development Environment) is used by the developer to create software, scripts, and resources representing the services to be exposed. These can range in complexity from basic Eclipse plug-ins (as with Ubiquity's UDS, or Ubiquity Development Studio) to completely abstracted, metadata-driven telecom application modeling applications (like Avaya's discontinued CRM Central product).
The purpose of the SCE is to facilitate the rapid creation of new communication services. Ignoring factors like marketing for the moment, the easier it is for developers to create services for a given platform, the greater will be the number of available services, and thus the acceptance of the platform by the broader telecom market. Therefore, a telecom infrastructure provider can gain significant advantage with an SDP that provides for rapid service creation.
The leveraging of converged J2EE and SIP service creation environments has accelerated the adoption of specific Service Delivery Platform solutions. Java-based applications developers, traditionally focused on IT applications, are now rapidly developing real-time communications applications using J2EE and network connecting protocols like SIP and Parlay X web services. Software vendors are combining these technologies (e.g. Oracle Jdeveloper and Oracle Communication and Mobility Server with basic Eclipse plug-in) to reach out to a broader developer base.

[edit] Execution Environment

[edit] Media Control

[edit] Presence/Location
One aspects of an SDP is that it must be centered on the new "point of presence". This is the point of user access to their converged services where their preferences and entitlements are evaluated in real time. Preference and entitlement processing ensures that the user's services in their device/location contexts are delivered correctly. As entitlements are related to the product and service management regimes of the operator, the core architecture of an SDP should define managed products, services, users, preference and entitlement processes.
The implementation of standards remains a critical factor in Presence applications. The implementation of standards such as SIP and SIMPLE (Session Initiation Protocol for Instant Messaging and Presence Leveraging Extensions) is becoming more prevalent. SIMPLE Presence provides a standard portable and secure interface to manipulate presence information between a SIMPLE client (watcher) and a presence server (presence agent). See JSR 164 for SIMPLE Presence. Providers of SIMPLE Presence servers include Oracle and Italtel.

[edit] Integration
The use of standards for exposure for interfaces across SDPs and within the SDP should minimize the need for integration in three main areas: (1) southbound to underlying network core components (2) between support application such as CRM, billing, and service activation (3) third party applications and services. The implementation of SOA in a complete end-to-end solution strive to minimize integration needs via standards-based interfaces and web services.
Software vendors who provide end-to-end solution for the IT SDP, Business Support Systems, Operating Support Systems, and SOA middleware suites include HP, wwite, IBM, Oracle and Sun microsystems. Network equipment vendors also provide SDPs such as IMS, IPTV, Mobile TV, etc. and offer the evolution of these SDPs.

[edit] Relationship to SOA
Much has been made in recent years of the Service-oriented architecture (SOA) concept. Discussions that once centered on Enterprise Application Integration (EAI) technologies and concepts have shifted into the SOA domain, favoring ideas like service composition over simple message adaptation and extract, transform, and load techniques.
SOAs can be used as an application integration technology within an SDP but are best served when used in the lower performance functions such as connections between the transactional OSS and BSS applications and the SDP. SOAs need careful consideration if they are to meet the real time demands placed on the SDP by the converged event type services.
An analogue concept to SDP found in the realm of SOA is that of Web Service Ecosystem (also known as Web Service Marketplace) and the SaaS platform. A Web Service Ecosystem is a hosted environment in which participants expose their services using common Web technology such as HTTP, XML, SOAP or AJAX. This hosted environment provides a number of service delivery components covering aspects such as authentication, identity management, usage metering and analytics, content adaptation, data format conversion, charging and payment. This enables service providers to focus on their core functionality and to outsource the service delivery to third parties. Services deployed over Web Service Ecosystems may be business-critical, but they typically do not have the real-time and high-performance requirements associated to telecommunications services for which SDPs are traditionally conceived. They usually support common business functions such as quoting, order management, marketing campaign management or customer care. SOA can also be used to standardize operational processes and re-use them across SDPs.

[edit] The Reality of Implementing SDPs
Considerable changes in IT and Network architecture are required when implementing real world, real time, converged services, operational SDPs. Many SDPs are designed as abstract frameworks with diagrams that use labels such as "Service Abstraction Layer", etc. Within real systems such "layers" do not actually exist. In addition it is difficult to realise from abstract diagrams what the real world operational data model is and how many servers, databases or directories might be used or integrated to form converged services SDP and self care functions. Operators can be faced with annual multi-millon dollar electricity bills for their systems. It follows that multi-server/multi-database SDPs are not earth friendly or cost effective, if the same functions can be integrated and use much less power.

Identity and Information Management: In order to specify or design a SDP we must determine what the customer and device service dimension is. If the SDP design needs to accommodate say 1m users as well as manage their devices and each identitified item requires 5 to 10 information objects, the core SDP is probably dealing 20m objects in real time. As the management of these objects dictate the core identity management processes of the platform, critical attention should be applied to the way in which they are implemented. Experience has shown that a single user on a converged services SDP may require 100 objects of information with some objects such as preferences containg 100 attributes. Capacity requirements for 10m users would indicate the platform needs to support 1 billion objects and up to 50 billion attributes.

Group Identity and Entitlement: Traditionally we have dealt with Identity Management as a single user or device logging on with a name and password and have assumed that an Identity Server holding names and passwords solves the issue. Practically though in the MSO world, we have account holders, secondary account holders (the children of the family), guests, gifts, content, devices, preferences which must all link together in order to receive a managed service. The services the grouped identity receives might be authorized via name and passwords, but should only be enabled through entitlements that relate to product provisioning. SDP architectures need to accommodate group identity management and product/service entitlement functions.

Presence and Events: Presence is the status management of all online assets. But what does this mean to system architectures? Traditionally we have applied a "transactional" paradigm where for example a user logs on and creates a transaction onto a network switch, a web server or database application. Presence services means we are managing status events at rates much, much higher than our traditional transactional systems. The question is: how are millions if not billions of events managed in fragmented systems, multiple database architectures or in fact frameworks? SDP architectures should also have a coherent, highly integrated event management system as a core function.

Converged Identities: There is also an operational issue emerging with 3G IMS and SIP and converged services. SIP can apply IP addresses (IPv4 or v6), SIP URIs (email addresses) and SIP TEL URIs (telephone numbers) in its message To, From, Via and Contact fields. Such identifiers can point to a telephone device, a fridge door, a content farm, a single piece of content, a user or even a group of users. This flexibility means that a SIP call can be made from just about anything to any other thing providing it is entitled to do so. As SIP can apply a mixture of these Internet and Telephone system identifiers in the call process, it follows that the SDP must tightly couple its SIP processing with the DHCP/DNS system, the HSS mobile database, the User authorization system, the presence event system, the user's address book, telephone call feature processing and the operator's service/product management with its entitlement system - all in real time. It follows that such functionality would be very difficult to apply across many interconnected functions and fragmented databases using "SOAs".

SDP technologies and tool kits should address three fundamental issues:

What are the goods and services being offered and managed in a real time fashion by the operator and by the customer self care systems - and this includes the management of presence based services (the world of the event driven internet) and how realtime user entitlements are processed.


What is the converged services information model used in the SDP design that represents the online business of the operator that has subscribers, devices, phone calls, preferences, entitlements, address books etc to deal with. In many cases MSOs with just 10 million customers require an SDP with 500 million information items - and for these items to be accessed many thousands of times a second by many different SDP functions.


What is the event / presence management architecture used in the SDP design that handles the velocity of the online business events. The situation might be that the population of a city arriving home at night might generate billions of online status events. How will these be processed by the SDP?

These three major system requirements actually dictate the architecture of a real world operational SDP regardless of the "abstract labels" one applies to its logical models, SOAs, message bus protocols and server interconnects. If these fundamental requirements are omitted from the SDP design it leaves the operator with many business, service management and operational problems to address, such as:

identity management (of all the information in the SDP representing the operators online assets),


the SDP's service agility (that is the product and services being offered are hard coded into the SDP so that new services cause code upgrades) and;


hard wired self care facilities (no flexibility or consideration of the SDPs users such as language, age, sighted, preferences, etc).

There are situations where MSOs have millions of lines of hard coded product and service management flows in their systems and are unable to move to the newer converged service dimensions easily.
A quick test of an SDP design is to evaluate its information model and see if that is based on the user environments of converged services, and see how that model is used and managed by all the systems that need to including its presence and event management functions.
In support of SDP development and the evolution to real time, agile services delivery, next generation systems should be considered.

[edit] See also

Directory services play a critical role within an SDP. See Directory service and Identity management.
IP Multimedia Subsystem
Next Generation Networking
Enterprise Service Bus Integration platform commonly used for Enterprise Application Integration
Java Business Integration Standardisation of the Enterprise Service Bus in the Java world
3GPP Standards
Open Mobile Alliance Standards concerning integration of network elements, Operational Support Systems and Business Support Systems
Parlay, Parlay X Standards concerning integration of network elements, Operational Support Systems and Business Support Systems
JSLEE, Java Service Logic Execution Environment, the Java standard for event-driven application servers used in Service Delivery Platforms
Session Initiation Protocol Standard protocol for IP-communication
Java Specification Requests (JSR) for Operational Support System
Service delivery framework


[edit] External links

Accenture: The Coming of 4G and the New Path to High Performance
Infonetics Webinar-Using a Service Delivery Environment to Provide Flexible, Billable High-Margin Services
Alcatel-Lucent - What is an SDE?




Retrieved from "http://en.wikipedia.org/wiki/Service_delivery_platform"
Categories: Telecommunications 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




Â 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
FranÃ§ais









 This page was last modified on 18 April 2009, at 17:51 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  WikipediaÂ® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
