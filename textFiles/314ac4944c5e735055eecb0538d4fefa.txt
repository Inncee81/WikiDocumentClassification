













PHPDoc - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "PHPDoc";
		var wgTitle = "PHPDoc";
		var wgAction = "view";
		var wgArticleId = "2113205";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 274605511;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); PHPDoc

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
PHPDoc is an adaptation of Javadoc for the PHP programming language. It is a formal standard for commenting PHP code. It offers three main advantages to generic or random commenting styles: First, it makes comments readable in a standard method encouraging programmers to define and comment on aspects of the code that normally would be ignored. Second, it allows external document generators like PHPDocumentor to create well formatted and easy to understand documentation of the API. Third, it allows some IDEs such as Zend Studio, PHPEd, and NetBeans to interpret variable types and other ambiguities in the loosely typed language.
PHPDoc supports documentation of both object-oriented and procedural code.




Contents


1 Components of PHPDoc

1.1 DocBlock

1.1.1 DocBlock Description Details
1.1.2 Using <code> and <pre>
1.1.3 DocBlock Templates
1.1.4 Page Level DocBlocks


1.2 Tags
1.3 Packages


2 See also
3 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Components of PHPDoc

[edit] DocBlock
A DocBlock is an extended C++-style PHP comment that begins with "/**" and has an "*" at the beginning of every line. DocBlocks precede the element they are documenting. Any line within a DocBlock that doesn't begin with a * will be ignored.
To document function "foo()", place the DocBlock immediately before the function declaration:

/**
 * This is a DocBlock comment
 */
function foo()
{
}

This example will apply the DocBlock to "define('me',2);" instead of to "function foo()":

/**
 * DocBlock for function foo?
 *
 * No, this will be for the constant me!
 */
define('me',2);
function foo($param = me)
{
}

define() statements, functions, classes, class methods, and class vars, include() statements, and global variables can all be documented, see Elements of the source code that can be documented
A DocBlock contains three basic segments in this order:

Short Description
Long Description
Tags

The Short Description starts on the first line, and can be terminated with a blank line or a period. A period inside a word (like example.com or 0.1Â %) is ignored. If the Short Description would become more than three lines long, only the first line is taken. The Long Description continues for as many lines as desired and may contain html markup for display formatting. Here is a sample DocBlock with a Short and a Long Description:

/**
 * return the date of Easter
 * 
 * Using the formula from "Formulas that are way too complicated for anyone to
 * ever understand except for me" by Irwin Nerdy, this function calculates the
 * date of Easter given a date in the Ancient Mayan Calendar, if you can also
 * guess the birthday of the author.
 */

Optionally, you may enclose all paragraphs in a <p></p> tag. Be careful, if the first paragraph does not begin with <p>, phpDocumentor will assume that the DocBlock is using the simple double linebreak to define paragraph breaks as in:

/**
 * Short desc
 *
 * Long description first sentence starts here
 * and continues on this line for a while
 * finally concluding here at the end of
 * this paragraph
 *
 * The blank line above denotes a paragraph break
 */

Here is an example of using <p>

/**
 * Short desc
 *
 * <p>Long description first sentence starts here
 * and continues on this line for a while
 * finally concluding here at the end of
 * this paragraph</p>
 * This text is completely ignored! it is not enclosed in p tags
 * <p>This is a new paragraph</p>
 */

phpDocumentor also supports JavaDoc's DocBlock format through the command-line option -j, --javadocdesc. Due to the non-xhtml compliant unmatched p tag, we highly recommend you avoid this syntax whenever possible

/**
 * <p>
 * Short desc is only to the first period.
 * This means a sentence like:
 * "Parses Mr./Mrs. out of $_GET." will
 * parse a short description of "Parses Mr."
 * which is rather silly.  Long description is
 * the entire DocBlock description including the
 * Short desc, and paragraphs begin where p is like:
 * <p>
 * The p above denotes a paragraph break
 */

phpDocumentor will convert all whitespace into a single space in the long description, use paragraph breaks to define newlines, or <pre>, as discussed in the next section.

[edit] DocBlock Description Details
In some parsers the long and short description of a DocBlock is parsed for a few select html tags that determine additional formatting. Because not all HTML is allowed, they will generally be converted into plain text or more content specific tags. For example, a <b> tag may be converted into <emphasis> in DocBook.
Here is a list of tags supported by PHPDocumentor:

<b> -- emphasize/bold text
<code> -- Use this to surround php code, some converters will highlight it
<br> -- hard line break, may be ignored by some converters
<i> -- italicize/mark as important
<kbd> -- denote keyboard input/screen display
<li> -- list item
<ol> -- ordered list
<p> -- If used to enclose all paragraphs, otherwise it will be considered text
<pre> -- Preserve line breaks and spacing, and assume all tags are text (like XML's CDATA)
<samp> -- denote sample or examples (non-php)
<ul> -- unordered list
<var> -- denote a variable name

For the rare case when the text "<b>" is needed in a DocBlock, use a double delimiter as in <<b>>. phpDocumentor will automatically translate that to the physical text "<b>".

[edit] Using <code> and <pre>
Both <code> and <pre> ignore any html listed above except for their closing tags </code> for <code> and </pre> for <pre>

[edit] DocBlock Templates
The purpose of a DocBlock template is to reduce redundant typing. For instance, if a large number of class variables are private, one would use a DocBlock template to mark them as private. DocBlock templates simply augment any normal DocBlocks found in the template block.
A DocBlock template is distinguished from a normal DocBlock by its header. Here is the most basic DocBlock template:

/**#@+
 *
 */

The text that marks this as a DocBlock template is "/**#@+" - all 6 characters must be present. DocBlock templates are applied to all documentable elements until the ending template marker:

/**#@-*/

Note that all 8 characters must appear as "/**#@-*/" in order for phpDocumentor to recognize them as a template.

[edit] Page Level DocBlocks
A page-level DocBlock is the only DocBlock that cannot precede the element that it is documenting, as there is no way to precede a file. To solve this issue, the way phpDocumentor finds a page-level DocBlock is to parse the first DocBlock in a file as the page-level DocBlock, with certain conditions.

<?php
/**
 * Page-level DocBlock
 */
define('oops','Page-level DocBlock it is not!');
?>

This last example has one DocBlock, and it is the first DocBlock in a file, but it is not a Page-level DocBlock. How can phpDocumentor tell the difference between a Page-level DocBlock and any other DocBlock? Simple:

<?php
/**
 * Pretend this is a file
 *
 * Page-level DocBlock is here because it is the first DocBlock
 * in the file, and contains a @package tag
 * @package pagepackage
 */
 define("almost","Now the Page-level DocBlock is for the page, and the  Define has no docblock");
?>

In phpDocumentor version 1.2.2, a Page-level DocBlock is the first DocBlock in a file if it contains a @package tag. However, this example will raise a warning like WARNING in test.php on line 8: Page-level DocBlock precedes "define almost", use another DocBlock to document the source element. You can eliminate the warning by adding documentation to the define as follows:

<?php
/**
 * Page-level DocBlock
 * @package pagepackage
 */
/**
 * Define DocBlock
 */
define("ahhhh","Now the Page-level DocBlock is for the page, and the Define DocBlock for the define");
?>

Now, the page has its documentation, and the define has its own documentation.
So, a DocBlock is a page-level DocBlock IF AND ONLY IF it is both:

The first DocBlock in a file
Either:

Contains a @package tag, or
Is immediately followed by another DocBlock for any documentable PHP element (this is deprecated, always use a @package tag)



A Page-level DocBlock may have any of the standard phpDocumentor Tags (see Standard phpDocumentor Tags) plus the following tags:

@package
@subpackage

phpDocumentor will not document a file like the first example, there must be at least one documentable PHP element in the file.

[edit] Tags
Tags are single words prefixed by a "@" symbol. Tags inform parsers how to present information and modify display of documentation as well as allow the IDE to define variable types. All tags are optional, but if you use a tag, they do have specific requirements to parse properly.

Common tags

Tag
Usage
Description


@abstract

Documents an abstract class, class variable or method.


@access
public, private or protected
Documents access control for an element. @access private indicates that documentation of element be prevented.


@author
author name <author@email>
Documents the author of the current element.


@copyright
name date
Documents copyright information.


@deprecated
version
Documents a method as deprecated.


@deprec

same as @deprecated


@example
/path/to/example
Documents the location of an external saved example file.


@exception

documents an exception thrown by a method â also see @throws.


@global
type $globalvarname
Documents a global variable or its use in a function or method.


@ignore

Prevents the documentation of an element


@internal

private information for advanced developers


@link
URL



@name
global variable name
Specifies an alias for a variable. For example, $GLOBALS['myvariable'] becomes $myvariable


@magic




@package
name of a package
Documents a group of related classes and functions.


@param
type [$varname] description



@return
type description
This tag should not be used for constructors or methods defined with a void return type.


@see

Documents an association to another method or class.


@since
version
Documents when a method was added to a class.


@static

Documents a static class or method


@staticvar

Documents a static variable's use in a function or class


@subpackage




@throws

Documents an exception thrown by a method.


@todo

Documents things that need to be done to the code at a later date.


@var
type
a data type for a class variable


@version

Provides the version number of a class or method.


In addition, some parsers allow two addition inline tags: {@id}, used to allow direct linking to sections in a tutorial, and {@toc}, used to generate a table of contents from {@id}s in the file. Think of {@id} like an <a name="idname"> HTML tag as it serves the same function.
For more in depth discussion of PHPDoc tags, see http://manual.phpdoc.org/HTMLSmartyConverter/PHP/phpDocumentor/tutorial_tags.pkg.html

[edit] Packages
To understand the role of packages and how to use @package, it is important to know the logic behind packaging in PHP. The quest for structured programming led to the invention of functions, then classes, and finally packages. Traditionally, a re-usable software module was a collection of variables, constants and functions that could be used by another software package. PHP is an example of this model, as there are many extensions that consist of constants and functions like the tokenizer extension. One can think of the tokenizer extension as a package: it is a complete set of data, variables and functions that can be used in other programs. A more structured format of this model is of course objects, or classes. A class contains variables and functions. A single class packages together related functions and variables to be re-used.
phpDocumentor defines package in two ways:

Functions, Constants and Global Variables are grouped into files (by the filesystem), which are in turn grouped into packages using the @package tag in a page-level DocBlock
Methods and Class Variables are grouped into classes (by PHP), which are in turn grouped into packages in a Class DocBlock

These two definitions of package are exclusive. In other words, it is possible to have classes of a different package of the file that contains it.

[edit] See also

phpDocumentor
Doxygen
Comparison of documentation generators


[edit] External links

PHPDoc




Retrieved from "http://en.wikipedia.org/wiki/PHPDoc"
Categories: Documentation generators | PHP programming language 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




Â 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Ð ÑÑÑÐºÐ¸Ð¹









 This page was last modified on 3 March 2009, at 03:23 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  WikipediaÂ® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
