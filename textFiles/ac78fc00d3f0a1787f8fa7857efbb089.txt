













Windows Presentation Foundation - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Windows_Presentation_Foundation";
		var wgTitle = "Windows Presentation Foundation";
		var wgAction = "view";
		var wgArticleId = "1707979";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282004858;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Windows Presentation Foundation

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




This subsystem is a part of .NET Framework 3.0


The Windows Presentation Foundation (or WPF), formerly code-named Avalon, is a graphical subsystem in .NET Framework 3.0 (formerly called WinFX)[1], which uses a markup language, known as XAML, for rich user interface development. [2] WPF is included with Windows Vista and Windows Server 2008, and is also available for Windows XP Service Pack 2 or later, and Windows Server 2003. It provides a consistent programming model for building applications and provides a clear separation between the user interface and the business logic. A WPF application can be deployed on the desktop or hosted in a web browser. It also enables rich control, design, and development of the visual aspects of Windows programs. It aims to unify a number of application services: user interface, 2D and 3D drawing, fixed and adaptive documents, advanced typography, vector graphics, raster graphics, animation, data binding, audio and video. Although Windows Forms will continue to be widely used, and Microsoft has created only a few WPF applications, the company promotes WPF for line-of-business applications.[3] Future Microsoft software will be built on WPF, for example, the code editor in Visual Studio 2010 has been rebuilt on WPF.[4]
Microsoft Silverlight is a web-based subset of WPF that enables Flash-like web and mobile applications with the same programming model as .NET applications. 3D features are not supported, but XPS and vector-based drawing are included.




Contents


1 Architecture
2 Features

2.1 Graphical Services
2.2 Interoperability
2.3 Media Services
2.4 Animations
2.5 Data binding
2.6 Annotations
2.7 Imaging
2.8 Effects
2.9 Documents
2.10 Text
2.11 Alternative input
2.12 Accessibility


3 XAML
4 Tools
5 Deployment
6 Microsoft Silverlight
7 .NET Micro Framework
8 References
9 See also
10 Additional Resources About WPF
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Architecture




The WPF architecture. Blue elements are Windows components; brown ones are WPF components.



The architecture of Windows Presentation Foundation spans across both managed code and native code components. However, the public API exposed is only available via managed code. While the majority of WPF is in managed code, the composition engine which renders the WPF applications is a native component. It is named Media Integration Layer (MIL) and resides in milcore.dll. It interfaces directly with DirectX and provides basic support for 2D and 3D surfaces, timer-controlled manipulation of contents of a surface with a view to exposing animation constructs at a higher level, and compositing the individual elements of a WPF application into a final 3D "scene" that represents the UI of the application and renders it to the screen.[5][6] The media codecs are also implemented in unmanaged code, and are shipped as windowscodecs.dll.[5] In the managed world, PresentationCore (presentationcore.dll) provides a managed wrapper for MIL and implements the core services for WPF,[5] including a property system that is aware of the dependencies between the setters and consumers of the property, a message dispatching system by means of a Dispatcher object to implement a specialized event system and services which can implement a layout system such as measurement for UI elements.[6] PresentationFramework (presentationframework.dll) implements the end-user presentational features, including layouts, time-dependent, story-board based animations, and data binding.[6]
WPF exposes a property system for objects which inherit from DependencyObject, that is aware of the dependencies between the consumers of the property, and can trigger actions based on changes in properties. Properties can be either hard coded values or expressions, which are specific expressions that evaluate to a result. In the initial release, however, the set of expressions supported is closed.[6] The value of the properties can be inherited from parent objects as well. WPF properties support change notifications, which invoke bound behaviors whenever some property of some element is changed. Custom behaviors can be used to propagate a property change notification across a set of WPF objects. This is used by the layout system to trigger a recalculation of the layout on property-changes, thus exposing a declarative programming style for WPF, whereby almost everything, from setting colors and positions to animating elements can be achieved by setting properties.[6] This allows WPF applications to be written in XAML, which is a declarative mark-up language, by binding the keywords and attributes directly to WPF classes and properties.
The UI elements of a WPF application are maintained as a class of Visual objects. Visual objects provide a managed interface to a composition tree which is maintained by Media Integration Layer (MIL). Each element of WPF creates and adds one or more composition nodes to the tree. The composition nodes contain rendering instructions, such as clipping and transformation instructions, along with other visual attributes. Thus the entire application is represented as a collection of composition nodes, which are stored in a buffer in the system memory. Periodically, MIL walks the tree and executes the rendering instructions in each node, thus compositing each element on to a DirectX surface, which is then rendered on screen. MIL uses the painter's algorithm, where all the components are rendered from back of the screen to the front, which allows complex effects like transparencies to be easily achieved. This rendering process is hardware accelerated using the GPU.[6] The composition tree is cached by MIL, creating a retained mode graphics, so that any changes to the composition tree needs only to be incrementally communicated to MIL. This also frees the applications of managing repainting the screen, MIL can do that itself as it has all the information necessary. Animations can be implemented as time-triggered changes to the composition tree. On the user visible side, animations are specified declaratively, by setting some animation effect to some element via a property and specifying the duration. The code-behind updates the specific nodes of the tree, via Visual objects, to represent both the intermediate states at specified time intervals as well as the final state of the element. MIL will render the changes to the element automatically.
All WPF applications start with two threads: one for managing the UI and another background thread for handling rendering and repainting.[7] Rendering and repainting is managed by WPF itself, without any developer intervention. The UI thread houses the Dispatcher (via an instance of DispatcherObject), which maintains a queue of UI operations that need to be performed (as a tree of Visual objects), sorted by priority. UI events, including changing a property that affects the layout, and user interaction events raised are queued up in the dispatcher, which invokes the handlers for the events. Microsoft recommends that the event handlers only update the properties to reflect new content for application responsiveness; the new content be generated or retrieved in a background thread.[7] The render thread picks up a copy of the visual tree and walks the tree calculating which components will be visible and renders them to Direct3D surfaces. The render thread also caches the visual tree, so only changes to the tree need to be communicated, which will result in updating only the changed pixels. WPF supports an extensible layout model. Layout is divided into two phases: Measure and Arrange. The Measure phase recursively calls all elements and determine the size they will take. In the Arrange phase, the child elements are recursively arranged by their parents, invoking the layout algorithm of the layout module in use.[6][8]

[edit] Features
The following is a partial list of WPF features.

[edit] Graphical Services

All graphics, including desktop items like windows, are Direct3D applications.

This aims to provide a unified avenue for displaying graphics, as well as more advanced graphical features.
Routing the graphics through Direct3D allows Windows to offload some graphics tasks to the GPU found on the computer's graphics card. This can reduce the workload on the computer's CPU.
Supports vector-based graphics, which allow lossless scaling.
Supports 3D model rendering and interaction in 2D applications.
Interactive 2D content can be overlaid on 3D surfaces, natively.[9]




[edit] Interoperability

WPF provides interoperability with the Windows API: Via hosting, one can use Windows Presentation Foundation inside existing Win32 code, or one can use existing Win32 code inside Windows Presentation Foundation.[10]
Interoperability with Windows Forms is also possible through the use of the ElementHost and WindowsFormsHost classes.


[edit] Media Services

WPF provides shape primitives for 2D graphics along with a built-in set of brushes, pens, geometries, and transforms.
The 3D capabilities in WPF are a subset of the full feature set provided by Direct3D. However, WPF provides tighter integration with other features like user interface (UI), documents, and media. This makes it possible to have 3D UI, 3D documents, and 3D media.
There is support for most common image formats.
WPF supports the video formats WMV, MPEG and some AVI files by default, but since it is Windows Media Player running beneath, WPF can use all the codecs installed for it.
WPF supports time-based animations, in contrast to the frame-based approach. This decouples the speed of the animation from how the system is performing.


[edit] Animations

Time-based animation. Scene redraws are time triggered.[11]
Presentation timers are initialized and managed by WPF.[11]
Scene changes co-ordinated by using a storyboard.[11]. An example of animating a storyboard from C# is here.
Animations can be triggered by other external events, including user action.[11]
Animation effects can be defined on a per-object basis, which can be accessed directly from XAML markup.[11]
Ships with a set of predefined effects, such as fade out for all controls.[11]


[edit] Data binding

WPF has a built-in set of data services to enable application developers to bind and manipulate data within applications. There exists support for three types of data binding:

one time: where the client ignores updates on the server.
one way: where the client has read-only access to data.
two way: where client can read from and write data to the server.


LINQ queries, specifically LINQ to XML, can also act as data sources for data binding.[9]
Binding of data has no bearing on its presentation. WPF provides data templates to control presentation of data.


A set of built-in controls is provided as part of WPF, containing items such as button, menu, grids and list box.
A powerful concept in the WPF is the logical separation of a control from its appearance.

A control's template can be overridden to completely change its visual appearance.
A control can contain any other control or layout, allowing for unprecedented control over composition.


Features retained mode graphics, so that applications do not have to be bothered with repainting the display.


[edit] Annotations

Annotations can be applied on a per-object basis, for objects in a Document or FlowDocument.
WPF only provides the capability for creating, storing and managing annotations; each application must expose the UI on their own.


[edit] Imaging

WPF can natively access Windows Imaging Component (WIC) code and APIs allowing developers to write image codecs for their specific image file formats.


[edit] Effects

WPF provides for BitmapEffects, which are raster effects applied to a Visual. These raster effects are written unmanaged code and therefore force rendering of the Visual to be performed on the CPU and not hardware accelerated.
In .NET Framework 3.5 SP1, one of the new additions was the Effect class, which is a Pixel-Shader 2.0 effect that can be applied to a visual, which allows all rendering to remain on the GPU .


[edit] Documents

WPF natively supports paginated documents. It provides the DocumentReader class, which is for reading fixed layout documents. The FlowDocumentReader class offers different view modes such as per-page or scrollable and also reflows text if the viewing area is re sized.
Natively supports XML Paper Specification documents.
Supports reading and writing paginated documents using Open Packaging Convention.


[edit] Text
WPF includes a number of typographic and text rendering features that were not available in GDI. This is the first Windows programming interface to expose OpenType features to software developers, supporting OpenType, TrueType, and OpenType CFF (Compact Font Format) fonts.
Support for OpenType typographic features includes:

Ligatures
Old-style numerals (for example, parts of the glyph hang below the text baseline)
Swash variants
Fractions
Superscript and Subscript
Small caps
Line-level justification
Ruby characters.
Glyph substitution
Multiple baselines
Contextual and Stylistic Alternates
Kerning

WPF handles texts in Unicode, and handles texts independent of global settings, such as system locale. In addition, fallback mechanisms are provided to allow writing direction (horizontal versus vertical) handled independent of font name; building international fonts from composite fonts, using a group of single-language fonts; composite fonts embedding. Font linking and font fallback information is stored in a portable XML file, using composite font technology.[12] The XML file has extension .CompositeFont.
The WPF text engine also supports built-in spell checking. It also supports such features as automatic line spacing, enhanced international text, language-guided line breaking, hyphenation, and justification, bitmap effects, transforms, and text effects such as shadows, blur, glow, rotation etc. Animated text is also supported; this refers to animated glyphs, as well as real-time changes in position, size, color, and opacity of the text.
WPF text rendering takes advantage of advances in ClearType technology, such as sub-pixel positioning, natural advance widths, Y-direction anti-aliasing, hardware-accelerated text rendering, as well as aggressive caching of pre-rendered text in video memory.[13] ClearType cannot be turned off in WPF applications.[14] Unlike the ClearType in GDI or GDI+, WPF ClearType does not snap glyphs to pixels horizontally, leading to a loss of contrast disliked by some users. [15]
The extent to which glyphs are cached is dependent on the video card. DirectX 10 cards are able to cache the font glyphs in video memory, then perform the composition (assembling of character glyphs in the correct order, with the correct spacing), alpha-blending (application of anti-aliasing), and RGB blending (ClearType's sub-pixel color calculations), entirely in hardware. This means that only the original glyphs need to be stored in video memory once per font (Microsoft estimates that this would require 2 MB of video memory per font), and other operations such as the display of anti-aliased text on top of other graphics—including video—can also be done with no computation effort on the part of the CPU. DirectX 9 cards are only able to cache the alpha-blended glyphs in memory, thus requiring the CPU to handle glyph composition and alpha-blending before passing this to the video card. Caching these partially-rendered glyphs requires significantly more memory (Microsoft estimates 5 MB per process). Cards that don't support DirectX 9 have no hardware-accelerated text rendering capabilities.

[edit] Alternative input
WPF supports digital ink-related functionality.

[edit] Accessibility
WPF supports Microsoft UI Automation to allow developers to create accessible interfaces.

[edit] XAML
Main article: Extensible Application Markup Language
Following the success of markup languages for web development, WPF introduces a new language known as eXtensible Application Markup Language (XAML) (pronounced as "Zammel"), which is based on XML. XAML is designed as a more efficient method of developing application user interfaces[citation needed].
The specific advantage that XAML brings to WPF is that XAML is a completely declarative language. In a declarative programming language, the developer (or designer) describes the behavior and integration of components without the use of procedural programming. This allows someone with little or no traditional programming experience to create an entire working application with no programming. Although it is rare that an entire application will be built completely in XAML, the introduction of XAML allows application designers to more effectively contribute to the application development cycle. Using XAML to develop user interfaces also allows for separation of model and view; which is considered a good architectural principle. In XAML, elements and attributes map to classes and properties in the underlying APIs.
As in web development, both layouts and specific themes are well suited to markup, but XAML is not required for either. Indeed, all elements of WPF may be coded in a .NET language (C#, VB.NET). The XAML code can ultimately be compiled into a managed assembly in the same way all .NET languages are, which means that the use of XAML for development does not incur a performance cost. XAML can also be compiled and run "on demand" similar to an HTML web-page.
Although XAML has been introduced as an integral part of WPF, the XAML standard itself is not specific to WPF (or even .NET). XAML can also be used to develop applications using any programming API and is in itself language independent. Nevertheless, special care has been taken in developing the WPF APIs to maximize interoperability with the declarative model that XAML introduces.
It is likely that many applications, such as Microsoft PowerPoint and Word, will support exporting their content to XAML.
There are several subsets (or profiles) of XAML, such as:

XAML Presentation (XAML-P) - incorporates all items encompassing WPF v1.0
XML Paper Specification (XPS) - a subset of XAML-P for representing fixed format documents and used as the spool format for the printing subsystem in Windows Vista

There are also profiles specific to Workflow Foundation, and other domain specific subsets will likely emerge in the future.

[edit] Tools
There are a number of development tools available for developing Windows Presentation Foundation applications, most currently of beta quality, some commercially released.

Microsoft Cider is the XAML designer in the form of an add-in for the Visual Studio 2005 IDE for building Windows Presentation Foundation applications. It is available in CTP form for Visual Studio 2005, there are no plans for an RTM version for Visual Studio 2005. Cider is integrated into Visual Studio 2008.[16]
Microsoft Expression Blend is a designer-oriented tool that provides a canvas for the creation of WPF applications with 2D and 3D graphics, text and forms content. It generates XAML that may be exported into other tools.
Microsoft Expression Design is a bitmap and 2D-vector graphics tool that allows export to XAML.
XAMLPad is a lightweight tool included in the .NET Framework SDK. It can create and render XAML files using a split screen UI layout. It also provides a tree view of the markup in a panel. An improved version, called XamlPadX v3, can be downloaded from the author's blog.


[edit] Deployment

WPF isn't just for building traditional standalone applications. Its deployment model offers both standalone and XAML Browser Applications (XBAP) flavors. The programming model for building either flavor of application is similar.

Standalone applications are those that have been locally installed on the computer using software such as ClickOnce or Windows Installer (MSI) and which run on the desktop. Standalone applications are considered full trust and have full access to a computer's resources.
XAML Browser Applications (XBAPs) are programs that are hosted inside a web browser. Hosted applications run in a partial trust sandbox environment, and are not given full access to the computer's resources and not all WPF functionality is available. The hosted environment is intended to protect the computer from malicious applications. Starting an XBAP (pronounced "ex-bap") from an HTML page or vice versa is seamless (there is no security or installation prompt). Although one gets the perception of the application running in the browser, it actually runs in an out-of-process executable different from the browser. As of the release of .NET Framework 3.0, XBAPs only run in Internet Explorer. With the release of .NET Framework 3.5 SP1 they also run in Mozilla Firefox using the included XBAP extension.




[edit] Microsoft Silverlight
Main article: Microsoft Silverlight
Silverlight (codenamed WPF/E) is a cross-platform, cross-browser, browser plugin which contains WPF-based technology (including XAML)[17] that provides features such as video, vector graphics, and animations to multiple operating systems including Windows Vista, Windows XP, and Mac OS X, with Microsoft sanctioned 3rd party developers working ports for Linux distributions.[18] Specifically, it is currently provided as an add-on for Mozilla Firefox, Internet Explorer 6 and above, Google Chrome and Apple Safari. Silverlight and WPF only share the XAML presentation layer.

[edit] .NET Micro Framework
The .NET Micro Framework includes a GUI object model loosely based on WPF, although without support for XAML.

[edit] References


^ MSDN.NET Framework: Windows Presentation Foundation
^ MSDN.NET Development: WPF: XAML Overview
^ 10 reasons you should consider WPF for your next desktop application
^ Microsoft Visual Studio 2010 Overview
^ a b c Chris Anderson. "MIL information". http://www.simplegeek.com/PermaLink.aspx/a09c8a32-b4d0-47ce-8186-0c5e7beae66b. Retrieved on 2007-10-14. 
^ a b c d e f g "WPF Architecture". MSDN. http://msdn.microsoft.com/en-us/library/ms750441.aspx. Retrieved on 2007-10-14. 
^ a b "Threading Model". MSDN. http://msdn.microsoft.com/en-us/library/ms741870.aspx. Retrieved on 2007-10-14. 
^ "The Layout System". MSDN. http://msdn.microsoft.com/en-us/library/ms745058.aspx. Retrieved on 2007-10-14. 
^ a b "What's New in WPF 3.5? Here's Fifteen Cool Features...". http://blogs.msdn.com/tims/archive/2007/07/27/what-s-new-in-wpf-3-5-here-s-fifteen-cool-features.aspx. Retrieved on 2007-10-14. 
^ WPF and Win32 Interoperation Overview
^ a b c d e f "Aimation overview". MSDN. http://msdn.microsoft.com/en-us/library/ms752312.aspx. Retrieved on 2007-10-14. 
^ Typography in Windows Presentation Foundation
^ MSDN Library: .NET Development: WPF: ClearType Overview
^ WPF ClearType anti-aliasing cannot be turned off
^ My first thoughts on WPF with VS 2008 RTM and a few questions : Windows Presentation Foundation (WPF) : .NET Development : MSDN Forums
^ Visual Studio 2005 extensions for.NET Framework 3.0 (WCF & WPF), November 2006 CTP
^ ASP.NET: WPF/E - December 2006 Community Technology Preview
^ "Silverlight 1.0 Released and Silverlight for Linux Announced". http://weblogs.asp.net/scottgu/archive/2007/09/04/silverlight-1-0-released-and-silverlight-for-linux-announced.aspx. Retrieved on 2007-09-05. 



[edit] See also

Desktop Window Manager
Computer graphics
Windows Graphics Foundation
Windows Vista printing technologies
Comparison of user interface markup languages
Microsoft Family.Show - created as a reference sample for the Windows Presentation Foundation.


[edit] Additional Resources About WPF

Adam Nathan: Windows Presentation Foundation Unleashed (WPF), December 21, 2006, Sams Publishing, ISBN 0-672-32891-7
Chris Anderson: Essential Windows Presentation Foundation (WPF), April 11, 2007, Addison-Wesley, ISBN 0-321-37447-9


[edit] External links

WindowsClient.NET – Windows Forms and Windows Presentation Foundation
MSDN Windows Presentation Foundation SDK – Software Development Kit for WPF.
Rich typography with Windows Presentation Foundation
WPF SDK Blog – Active blog maintained by the WPF SDK team.
Microsoft Expression Blend – Visual tool for creating Windows Presentation Foundation applications.
WPF & WCF extension for Visual Studio 2005
WPF Tutorial - with lot of samples and useful tips
WPFdev - Information about WPF Design and Development
WPF Momentum—Mashup of Vista Windows Presentation Foundation









v • d • e

.NET Framework





Architecture

Base Class Library · Common Language Runtime · Code Access Security · Assembly · Metadata · COM Interop






Common Language
Infrastructure (CLI)

Common Language Infrastructure · Common Type System · Common Intermediate Language · Virtual Execution System






CLI Languages





Common1


C# · Visual Basic .NET · C++/CLI (Managed) · F#  · J#  · JScript .NET · Windows PowerShell







Other2


A# · Boo · M · Oxygene  · IronLisp · IronPython · IronRuby · IronScheme · Nemerle · Phalanger · P#









Components

ADO.NET (Entity Framework · Data Services) · ASP.NET (AJAX · MVC · Dynamic Data) · Language Integrated Query · CardSpace · ClickOnce · Communication Foundation · Dynamic Language Runtime · Forms · Presentation Foundation · Remoting · Workflow Foundation  · XAML






Other implementations

Mono · Compact Framework · XNA Framework · Micro Framework · Portable.NET · Silverlight · SSCLI






Comparisons

Java and C# · C# and Visual Basic .NET · Java and .NET platforms






Upcoming

"Acropolis" · "Jasper" · Parallel Extensions






1 Languages that are, will be, or have been included with Visual Studio or Microsoft Windows.
2 Non-academic or research languages with relatively large user-bases.












v • d • e

Microsoft APIs and frameworks





Graphics

Desktop Window Manager · Direct2D · Direct3D (extensions)  · GDI / GDI+ · WPF · Windows Color System · Windows Image Acquisition · Windows Imaging Component






Audio

DirectMusic · DirectSound · DirectX plugin · XACT · Speech API






Multimedia

DirectX · (Media Objects · Video Acceleration) · DirectInput · DirectPlay · DirectShow · Image Mastering API · Managed DirectX · Media Foundation · XNA · Windows Media






Web

MSHTML · RSS Platform · JScript · VBScript · BHO · XDR · SideBar Gadgets






Data access

Data Access Components · Extensible Storage Engine · ADO.NET · ADO.NET Entity Framework · Sync Framework · Jet Engine · MSXML · OLE DB






Networking

Winsock (LSP) · Winsock Kernel · Filtering Platform · Network Driver Interface Specification · Windows Rally · BITS · P2P API · MSMQ · MS MPI






Communication

Messaging API · Telephony API







Administration and
management


Win32 console · Windows Script Host · WMI (extensions) · PowerShell · Task Scheduler · Offline Files · Shadow Copy · Windows Installer · Error Reporting · Event Log · Common Log File System






Component model

COM · COM+ · ActiveX · Distributed Component Object Model · .NET Framework






Libraries

Microsoft Foundation Classes (MFC) · Active Template Library (ATL) · Windows Template Library (WTL)






Device drivers

Windows Driver Model  · Windows Driver Foundation (KMDF · UMDF) · WDDM · NDIS · UAA · Broadcast Driver Architecture  · VxD






Security

Crypto API (CAPICOM) · Windows CardSpace · Data protection API · Security Support Provider Interface (SSPI)






.NET

ASP.NET · ADO.NET · Remoting · Silverlight · TPL · WCF · WCS · WPF · WF






Software factories

EFx Factory · Enterprise Library · Composite UI · CCF · CSF






IPC

MSRPC · Dynamic Data Exchange (DDE)






Accessibility

Active Accessibility · UI Automation







Text and multilingual
support


Text Services Framework · Text Object Model · Input method editor · Language Interface Pack · Multilingual User Interface · Uniscribe













v • d • e

List of Widget toolkits





Low-level

Macintosh Toolbox/Carbon · Windows API · Intrinsics · Intuition · Xlib






High-level





On Amiga OS


BOOPSI · Magic User Interface · Zune · ReAction GUI







On Mac OS
and Mac OS X


Cocoa · MacApp · MacZoop · PowerPlant







On Microsoft
Windows


Microsoft Foundation Class Library · Windows Template Library · SmartWin++ · Object Windows Library · Visual Component Library · Windows Forms · Windows Presentation Foundation







On Unix,
under the X


Xaw · Motif · LessTif · InterViews







Cross-
platform






Based on
Flash


Adobe Flex · Gnash · SWF2EXE Software







Based on XML,
AJAX or SVG


GladeXML · XAML · XML User Interface · XUL · CougarXML · Rialto Toolkit · Dojo Toolkit · jQuery · script.aculo.us · Echo · qooxdoo · MooTools · Google Web Toolkit · Yahoo! UI Library · Ext · Pyjamas







Based on Java


Abstract Window Toolkit · Swing · Standard Widget Toolkit







Based on
C or C++


Agar · CEGUI · Component Library for Cross Platform · dlib C++ Library · FLTK · FOX toolkit · OpenGL User Interface Library · GTK+ · IUP · Juce · Qt · Tk · TnFOX · Visual Component Framework · wxWidgets · YAAF · XForms · XVT







Based on
Pascal


IP Pascal · Lazarus · fpGUI







Based on
Objective C


GNUstep















Retrieved from "http://en.wikipedia.org/wiki/Windows_Presentation_Foundation"
Categories: Microsoft Windows multimedia technology | Microsoft application programming interfaces | Graphics software | Windows Vista | .NET frameworkHidden categories: All articles with unsourced statements | Articles with unsourced statements since January 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Deutsch
Español
Français
한국어
Italiano
Nederlands
日本語
Polski
Português
Русский
Suomi
Türkçe
Українська
中文









 This page was last modified on 6 April 2009, at 01:08 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
