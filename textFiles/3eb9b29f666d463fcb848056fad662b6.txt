













Virtual machine - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Virtual_machine";
		var wgTitle = "Virtual machine";
		var wgAction = "view";
		var wgArticleId = "32353";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283443161;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Virtual machine

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In computer science, a virtual machine (VM) is a software implementation of a machine (computer) that executes programs like a real machine.




Contents


1 Definitions

1.1 System virtual machines
1.2 Process virtual machines


2 Techniques

2.1 Emulation of the underlying raw hardware (native execution)
2.2 Emulation of a non-native system
2.3 Operating system-level virtualization


3 List of hardware with virtual machine support
4 List of virtual machine software

4.1 Extended descriptions of selected virtualization software


5 See also
6 References
7 Books
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Definitions
A virtual machine was originally defined by Popek and Goldberg as "an efficient, isolated duplicate of a real machine". Current use includes virtual machines which have no direct correspondence to any real hardware.[1]
Virtual machines are separated into two major categories, based on their use and degree of correspondence to any real machine. A system virtual machine provides a complete system platform which supports the execution of a complete operating system (OS). In contrast, a process virtual machine is designed to run a single program, which means that it supports a single process. An essential characteristic of a virtual machine is that the software running inside is limited to the resources and abstractions provided by the virtual machine -- it cannot break out of its virtual world.
Example: A program written in Java receives services from the Java Runtime Environment (JRE) software by issuing commands to, and receiving the expected results from, the Java software. By providing these services to the program, the Java software is acting as a "virtual machine", taking the place of the operating system or hardware for which the program would ordinarily be tailored.


[edit] System virtual machines
See also: Virtualization and Comparison of virtual machines
System virtual machines (sometimes called hardware virtual machines) allow the sharing of the underlying physical machine resources between different virtual machines, each running its own operating system. The software layer providing the virtualization is called a virtual machine monitor or hypervisor. A hypervisor can run on bare hardware (Type 1 or native VM) or on top of an operating system (Type 2 or hosted VM).
The main advantages of system VMs are:

multiple OS environments can co-exist on the same computer, in strong isolation from each other
the virtual machine can provide an instruction set architecture (ISA) that is somewhat different from that of the real machine
application provisioning, maintenance, high availability and disaster recovery[2]

Multiple VMs each running their own operating system (called guest operating system) are frequently used in server consolidation, where different services that used to run on individual machines in order to avoid interference are instead run in separate VMs on the same physical machine. This use is frequently called quality-of-service isolation (QoS isolation).
The desire to run multiple operating systems was the original motivation for virtual machines, as it allowed time-sharing a single computer between several single-tasking OSes.
The guest OSes do not have to be all the same, making it possible to run different OSes on the same computer (e.g., Microsoft Windows and Linux, or older versions of an OS in order to support software that has not yet been ported to the latest version). The use of virtual machines to support different guest OSes is becoming popular in embedded systems; a typical use is to support a real-time operating system at the same time as a high-level OS such as Linux or Windows.
Another use is to sandbox an OS that is not trusted, possibly because it is a system under development. Virtual machines have other advantages for OS development, including better debugging access and faster reboots.[3]
Alternate techniques such as Solaris Zones provides a level of isolation within a single operating system. This does not have isolation as complete as a VM. A kernel exploit in a system with multiple zones will affect all zones. Achieving the same goal in a virtual machine implementation would require exploiting a weakness in the hypervisor. A hypervisor typically has a smaller "attack surface" than a complete operating system, making this more challenging. Further, a kernel exploit in a VM guest would not affect other VMs on the host, just as a successful intrusion into one zone would not necessarily affect other zones. Zones are not virtual machines, but an example of "operating-system virtualization". This includes other "virtual environments" (also called "virtual servers") such as Virtuozzo, FreeBSD Jails, Linux-VServer, chroot jail, and OpenVZ. These provide some form of encapsulation of processes within an operating system. These technologies have the advantages of being more resource-efficient than full virtualization and having better observability into multiple guests simultaneously; the disadvantage is that, generally, they can only run a single operating system and a single version/patch level of that operating system - so, for example, they cannot be used to run two applications, one of which only supports a newer OS version and the other only supporting an older OS version on the same hardware. However, Sun Microsystems has enhanced Solaris Zones to allow some zones to behave like Solaris 8 or Solaris 9 systems by adding a system call translator.

[edit] Process virtual machines
See also: Virtualization and Comparison of application virtual machines
A process VM, sometimes called an application virtual machine, runs as a normal application inside an OS and supports a single process. It is created when that process is started and destroyed when it exits. Its purpose is to provide a platform-independent programming environment that abstracts away details of the underlying hardware or operating system, and allows a program to execute in the same way on any platform.
A process VM provides a high-level abstraction — that of a high-level programming language (compared to the low-level ISA abstraction of the system VM). Process VMs are implemented using an interpreter; performance comparable to compiled programming languages is achieved by the use of just-in-time compilation.
This type of VM has become popular with the Java programming language, which is implemented using the Java virtual machine. Another example is the .NET Framework, which runs on a VM called the Common Language Runtime.
A special case of process VMs are systems that abstract over the communication mechanisms of a (potentially heterogeneous) computer cluster. Such a VM does not consist of a single process, but one process per physical machine in the cluster. They are designed to ease the task of programming parallel applications by letting the programmer focus on algorithms rather than the communication mechanisms provided by the interconnect and the OS. They do not hide the fact that communication takes place, and as such do not attempt to present the cluster as a single parallel machine.
Unlike other process VMs, these systems do not provide a specific programming language, but are embedded in an existing language; typically such a system provides bindings for several languages (e.g., C and FORTRAN). Examples are PVM (Parallel Virtual Machine) and MPI (Message Passing Interface). They are not strictly virtual machines, as the applications running on top still have access to all OS services, and are therefore not confined to the system model provided by the "VM".

[edit] Techniques

[edit] Emulation of the underlying raw hardware (native execution)




VMware Workstation running Ubuntu, on Windows Vista


This approach is described as full virtualization of the hardware, and can be implemented using a Type 1 or Type 2 hypervisor. (A Type 1 hypervisor runs directly on the hardware; a Type 2 hypervisor runs on another operating system, such as Linux). Each virtual machine can run any operating system supported by the underlying hardware. Users can thus run two or more different "guest" operating systems simultaneously, in separate "private" virtual computers.
The pioneer system using this concept was IBM's CP-40, the first (1967) version of IBM's CP/CMS (1967-1972) and the precursor to IBM's VM family (1972-present). With the VM architecture, most users run a relatively simple interactive computing single-user operating system, CMS, as a "guest" on top of the VM control program (VM-CP). This approach kept the CMS design simple, as if it were running alone; the control program quietly provides multitasking and resource management services "behind the scenes". In addition to CMS, VM users can run any of the other IBM operating systems, such as MVS or z/OS. z/VM is the current version of VM, and is used to support hundreds or thousands of virtual machines on a given mainframe. Some installations use Linux for zSeries to run Web servers, where Linux runs as the operating system within many virtual machines.
Full virtualization is particularly helpful in operating system development, when experimental new code can be run at the same time as older, more stable, versions, each in a separate virtual machine. The process can even be recursive: IBM debugged new versions of its virtual machine operating system, VM, in a virtual machine running under an older version of VM, and even used this technique to simulate new hardware.[4]
The standard x86 processor architecture as used in modern PCs does not actually meet the Popek and Goldberg virtualization requirements. Notably, there is no execution mode where all sensitive machine instructions always trap, which would allow per-instruction virtualization.
Despite these limitations, several software packages have managed to provide virtualization on the x86 architecture, even though dynamic recompilation of privileged code, as first implemented by VMware, incurs some performance overhead as compared to a VM running on a natively virtualizable architecture such as the IBM System/370 or Motorola MC68020. By now, several other software packages such as Virtual PC, VirtualBox, Parallels Workstation and Virtual Iron manage to implement virtualization on x86 hardware.
Intel and AMD have introduced features to their x86 processors to enable virtualization in hardware.

[edit] Emulation of a non-native system
Virtual machines can also perform the role of an emulator, allowing software applications and operating systems written for another computer processor architecture to be run.
Some virtual machines emulate hardware that only exists as a detailed specification. For example:

One of the first was the p-code machine specification, which allowed programmers to write Pascal programs that would run on any computer running virtual machine software that correctly implemented the specification.
The specification of the Java virtual machine.
The Common Language Infrastructure virtual machine at the heart of the Microsoft .NET initiative.
Open Firmware allows plug-in hardware to include boot-time diagnostics, configuration code, and device drivers that will run on any kind of CPU.

This technique allows diverse computers to run any software written to that specification; only the virtual machine software itself must be written separately for each type of computer on which it runs.

[edit] Operating system-level virtualization
Operating System-level Virtualization is a server virtualization technology which virtualizes servers on an operating system (kernel) layer. It can be thought of as partitioning: a single physical server is sliced into multiple small partitions (otherwise called virtual environments (VE), virtual private servers (VPS), guests, zones, etc.); each such partition looks and feels like a real server, from the point of view of its users.
For example, Solaris Zones supports multiple guest OSes running under the same OS (such as Solaris 10). All guest OSes have to use the same kernel level and cannot run as different OS versions. Solaris native Zones also requires that the host OS be a version of Solaris; other OSes from other manufacturers are not supported.[citation needed],however you need to use Solaris Branded zones to use another OSes as zones.
Another example is AIX, which provides the same technique under the name of Micro Partitioning.[citation needed]
The operating system level architecture has low overhead that helps to maximize efficient use of server resources. The virtualization introduces only a negligible overhead and allows running hundreds of virtual private servers on a single physical server. In contrast, approaches such as pure virtualization (like VMware) and paravirtualization (like Xen or UML) cannot achieve such level of density, due to overhead of running multiple kernels. From the other side, operating system-level virtualization does not allow running different operating systems (i.e. different kernels), although different libraries, distributions etc. are possible.
Main article: operating system-level virtualization

[edit] List of hardware with virtual machine support

Alcatel-Lucent 3B20D/3B21D emulated on commercial off-the-shelf computers with 3B2OE or 3B21E system
AMD-V (formerly code-named Pacifica)
ARM TrustZone
Boston Circuits gCore (grid-on-chip) with 16 ARC 750D cores and Time-machine hardware virtualization module.
Freescale PowerPC MPC8572 and MPC8641D
IBM System/370, System/390, and zSeries mainframes
Intel VT (formerly code-named Vanderpool)
Sun Microsystems sun4v (UltraSPARC T1 and T2) -- utilized by Logical Domains

See also: x86 virtualization#Hardware support

HP vPAR and cell based nPAR
GE Project MAC then
Honeywell Multics systems
Honeywell 200/2000 systems Liberator replacing IBM 14xx systems, Level 62/64/66 GCOS
IBM System/360 Model 145 Hardware emulator for Honeywell 200/2000 systems
RCA Spectra/70 Series emulated IBM System/360
NAS CPUs emulated IBM and Amdahl machines
Honeywell Level 6 minicomputers emulated predecessor 316/516/716 minis
Xerox Sigma 6 CPUs were modified to emulate GE/Honeywell 600/6000 systems


[edit] List of virtual machine software




Process (Application) virtual machine software


Common Language Infrastructure - C#, Visual Basic .NET, J#, C++/CLI (formerly Managed C++)
Dalvik virtual machine - part of the Android mobile phone platform
Dis - Inferno operating system and its Limbo programming language
Dosbox
EiffelStudio for the Eiffel programming language
Erlang programming language
Forth virtual machine - Forth
Glulx - Glulx, Z-code
Hec - Hasm Assembler
Java Virtual Machine - Java, Nice, NetREXX
Low Level Virtual Machine (LLVM) - currently C, C++, Stacker
Lua
Macromedia Flash Player - SWF
MMIX - MMIXAL
Neko virtual machine - currently Neko and haXe
O-code machine - BCPL
p-code machine - Pascal
Parrot - Perl 6
Perl virtual machine - Perl
CPython - Python
YARV - Ruby MRI
Rubinius - Ruby
ScummVM - Scumm
SECD machine - ISWIM, Lispkit Lisp
Sed the stream-editor can also be seen as a VM with 2 storage spaces.
Smalltalk virtual machine - Smalltalk
SQLite virtual machine - SQLite opcodes
Squeak virtual machine - Squeak
SWEET16
Tamarin (JavaScript engine) - ActionScript VM in Flash 9
TrueType virtual machine - TrueType
Valgrind - checking of memory accesses and leaks in x86/x86-64 code under Linux
Virtual Processor (VP) from Tao Group (UK).
VX32 virtual machine - application-level virtualization for native code
Waba - Virtual machine for small devices, similar to Java
Warren Abstract Machine - Prolog, CSC GraphTalk
Z-machine - Z-Code
Zend Engine - PHP




System (Hardware) virtual machine software


ATL (A MTL Virtual Machine)
Bochs, portable open source x86 and AMD64 PCs emulator
CoLinux Open Source Linux inside Windows
CoWare Virtual Platform
Denali, uses paravirtualization of x86 for running para-virtualized PC operating systems.
FAUmachine
Hercules emulator, free System/370, ESA/390, z/Mainframe
KVM
LilyVM is a lightweight virtual machineAn introduction
Logical Domains
Microsoft Virtual PC and Microsoft Virtual Server
OKL4 from Open Kernel Labs
Oracle VM
OVPsim [1] is a freely available virtual platform simulator designed to simulate complex multiprocessor systems at very high speeds
Parallels Workstation, provides virtualization of x86 for running unmodified PC operating systems
Parallels Desktop for Mac, provides virtualization of x86 for running virtual machines on Mac OS X or higher
QEMU, is a simulator based on a virtual machine.
SheepShaver.
Simics
Sun xVM
SVISTA
Trango Virtual Processors
twoOStwo
User-mode Linux
VirtualBox
Virtual Iron (Virtual Iron 3.1)
VM from IBM
VMware (ESX Server, Fusion, Virtual Server, Workstation, Player and ACE)
vSMP Foundation (From ScaleMP)
Xen (Opensource)
IBM POWER SYSTEMS


OS-level virtualization software


OpenVZ
FreeVPS
Linux-VServer
FreeBSD Jails
Solaris Containers
AIX Workload Partitions





[edit] Extended descriptions of selected virtualization software
The following software products are able to virtualize the hardware so that several operating systems can share it.

Adeos is a Hardware Abstraction Layer that can be loaded as a Kernel Module in Linux. It allows the loading of a real-time kernel as a module, at the same time as Linux but with higher priority.
Denali uses paravirtualisation to provide high-performance virtual machines on x86 computers. Denali's virtual machines support specialised minimal OSs for Internet services. The system can scale to thousands of virtual machines. Denali does not preserve the application binary interface (ABI), and so applications must be recompiled to run within a library operating system; in this sense it is similar to the Exokernel.
OKL4 uses the open-source L4 microkernel as a hypervisor to provide a high-performance virtualization solution for embedded systems.
OpenVZ - Operating System-level server virtualization solution, built on Linux.
Parallels provides virtualization of x86 for running unmodified PC operating systems. It also uses a lightweight hypervisor technology in order to improve security and to increase the efficiency. Parallels has become popular for its ability to run Windows as a guest under Mac OS X on the Apple-Intel architecture.
QEMU is a simulator based on a virtual machine, which gives it the ability to emulate a variety of guest CPU architectures on many different host platforms.
VirtualBox is an open source (GPL)/proprietary virtual machine developed by Sun Microsystems. It allows virtualization of x86 and supports various host operating systems including Windows, Linux, BSD and Solaris. It also supports VMware Workstation Virtual Machine Disk Format.
Virtual Iron provides virtual machines for x86 that run unmodified operating systems, such as Windows, Red Hat and SUSE. Virtual Iron open source virtualization technology implements native virtualization, which delivers near-native performance for x86 operating systems.
Virtuozzo replaces the hardware abstraction layer with a modified version enabling it to run with better performance of the OS, but forces all the VMs on a hardware box to all run the same OS, with some flexibility to support various Linux distributions on the same server. Currently they have a version for Windows 2003 and for Linux. OpenVZ is a related open-source project providing similar functionality for Linux.
vSMP Foundation from ScaleMP aggregation platform enables the creation of high-end x86-based symmetric multiprocessor (SMP) systems, by running single VM acrooss multiple industry-standard x86 systems.
VMware provides virtual machines for x86 that can run unmodified PC operating systems. The technology involved in doing this is complex and also incurs (sometimes significant) performance overheads with hosted VMware products (VM Server and Workstation). ESX server provides near-native performance and a fully virtualized option (along with para-virtualization of some hardware components). Xen trades running of existing operating systems for running modified (paravirtualized) operating systems with improved performance. Virtual Iron provides full OS compatibility for existing or new OSes with near-native performance without the performance trade-offs between paravirualization and binary translation.
Xen Virtualization system whose motivation differs from that of Denali in that it is intended to run a moderate number of full-featured operating systems, rather than a large number of specialised, lightweight ones.
KVM is a Linux kernel module that enables a modified QEMU program to use hardware virtualization.


[edit] See also

Comparison of platform virtual machines
Comparison of application virtual machines
Virtual appliance
ICL's VME operating system


[edit] References

^ Smith, Daniel E.; Nair, Ravi (2005). "The Architecture of Virtual Machines". Computer (IEEE Computer Society) 38 (5): 32–38. doi:10.1109/MC.2005.173. 
^ http://www.vmware.com/solutions/business-critical-apps/
^ http://www.vmwarez.com/2006/05/super-fast-server-reboots-another.html
^ See History of CP/CMS for IBM's use of virtual machines for operating system development and simulation of new hardware


[edit] Books

Jim, Jr. Smith, Ravi Nair, James E. Smith, Heath Potter, Virtual Machines: Versatile Platforms For Systems And Processes, Publisher Morgan Kaufmann Publishers, May 2005, ISBN 1-55860-910-5, 656 pages
Craig, Iain D. Virtual Machines. Springer, 2006, ISBN 1-85233-969-1


[edit] External links

Opensource Virtual Machines
The Reincarnation of Virtual Machines, Article on ACM Queue by Mendel Rosenblum, Co-Founder, VMware
Performances comparison between Xen, UML, Vserver and VMware




Retrieved from "http://en.wikipedia.org/wiki/Virtual_machine"
Categories: Virtual machines | Operating system technology | Programming language implementationHidden categories: All articles with unsourced statements | Articles with unsourced statements since September 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
العربية
Bosanski
Български
Česky
Dansk
Deutsch
Eesti
Español
Euskara
فارسی
Français
한국어
Bahasa Indonesia
Italiano
עברית
ລາວ
Magyar
മലയാളം
Bahasa Melayu
Nederlands
日本語
Polski
Português
Русский
Simple English
Suomi
Svenska
Tiếng Việt
Türkçe
ייִדיש
中文









 This page was last modified on 12 April 2009, at 22:41 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
