













Spring Framework - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Spring_Framework";
		var wgTitle = "Spring Framework";
		var wgAction = "view";
		var wgArticleId = "5371713";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281480469;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Spring Framework

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article contains weasel words, vague phrasing that often accompanies biased or unverifiable information. Such statements should be clarified or removed. (March 2009)



Spring Framework




Developed by
SpringSource


Latest release
2.5.6 / 2008-10-31; 158 days ago


Written in
Java


Operating system
Cross-platform


Platform
Java Virtual Machine


Type
Application framework


License
Apache License 2.0


Website
http://www.springsource.org


The Spring Framework is an open source application framework for the Java platform and .NET Framework[1].
The first version was written by Rod Johnson who released the framework with the publication of his book, Expert One-on-One J2EE Design and Development (Wrox Press, October 2002). The framework was first released under the Apache 2.0 license in June 2003. The first milestone release, 1.0, was released in March 2004, with further milestone releases in September 2004 and March 2005. The Spring 1.2.6 framework won a Jolt productivity award in 2006.[2] The current version is 2.5.6.
The core features of the Spring Framework can be used by any Java application, but there are extensions for building web applications on top of the Java Enterprise platform. Although the Spring Framework does not impose any specific programming model, it has become popular in the Java community as an alternative to, replacement for, or even addition to the Enterprise JavaBean (EJB) model.




Contents


1 Modules

1.1 Inversion of Control container
1.2 Aspect-oriented programming framework
1.3 Data access framework
1.4 Transaction management framework
1.5 Model-view-controller framework
1.6 Remote access framework
1.7 Batch Framework


2 References
3 External links

3.1 Other IoC/DI Frameworks
3.2 Other Articles







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Modules
The Spring Framework comprises several modules that provide a range of services:

Inversion of Control container: configuration of application components and lifecycle management of Java objects
Aspect-oriented programming: enables implementation of cross-cutting routines
Data access: working with relational database management systems on the Java platform using JDBC and object-relational mapping tools
Transaction management: unifies several transaction management APIs and coordinates transactions for Java objects
Model-view-controller: an HTTP and Servlet-based framework providing hooks for extension and customization
Remote Access framework: configurative RPC-style export and import of Java objects over networks supporting RMI, CORBA and HTTP-based protocols including web services (SOAP)
Batch processing: a framework for high-volume processing featuring reusable functions including logging/tracing, transaction management, job processing statistics, job restart, skip, and resource management
Authentication and authorization: configurable security processes that support a range of standards, protocols, tools and practices via the Spring Security sub-project (formerly Acegi).
Remote Management: configurative exposure and management of Java objects for local or remote configuration via JMX
Messaging: configurative registration of message listener objects for transparent message consumption from message queues via JMS, improvement of message sending over standard JMS APIs
Testing: support classes for writing unit tests and integration tests


[edit] Inversion of Control container
Central to the Spring Framework is its Inversion of Control container, which provides a consistent means of configuring and managing Java objects using callbacks. The container is responsible for managing object lifecycles: creating objects, calling initialization methods, and configuring objects by wiring them together.
Objects created by the container are also called Managed Objects or Beans. Typically, the container is configured by loading XML files containing Bean definitions which provide the information required to create the beans.
Objects can be obtained by means of Dependency lookup or Dependency injection. Dependency lookup is a pattern where a caller asks the container object for an object with a specific name or of a specific type. Dependency injection is a pattern where the container passes objects by name to other objects, via either constructors, properties, or factory methods.
In many cases it's not necessary to use the container when using other parts of the Spring Framework, although using it will likely make an application easier to configure and customize. The Spring container provides a consistent mechanism to configure applications and integrates with almost all Java environments, from small-scale applications to large enterprise applications.
The container can be turned into a partially-compliant EJB3 container by means of the Pitchfork project. The Spring Framework is criticized by some as not being standards compliant.[who?] However, SpringSource doesn't see EJB3 compliance as a major goal, and claims that the Spring Framework and the container allow for more powerful programming models.[3]

[edit] Aspect-oriented programming framework
The Spring Framework has its own AOP framework which modularizes cross-cutting concerns in aspects. The motivation for creating a separate AOP framework comes from the belief that it would be possible to provide basic AOP features without too much complexity in either design, implementation, or configuration. The SpAOP framework also takes full advantage of the Spring Container.
The Spring AOP framework is interception based, and is configured at runtime. This removes the need for a compilation step or load-time weaving. On the other hand, interception only allows for public or protected method execution on existing objects at a join point.
Compared to the AspectJ framework, Spring AOP is less powerful but also less complicated. Spring 1.2 includes support to configure AspectJ aspects in the container. Spring 2.0 has more integration with AspectJ; for example, the pointcut language is reused.
Spring AOP has been designed to make it able to work with cross-cutting concerns inside the Spring Framework. Any object which is created and configured by the container can be enriched using Spring AOP.
The Spring Framework uses Spring AOP internally for transaction management, security, remote access, and JMX.
Since version 2.0 of the framework, Spring provides two approaches to the AOP configuration:

schema-based approach.
@AspectJ-based annotation style.

The Spring team decided not to introduce new AOP-related terminology; therefore, in the Spring reference documentation and API, terms such as aspect, join point, advice, pointcut, introduction, target object (advised object), AOP proxy, and weaving all have the same meanings as in most other AOP frameworks (particularly AspectJ).

[edit] Data access framework
Spring's data access framework addresses common difficulties developers face when working with databases in applications. Support is provided for all popular data access frameworks in Java: JDBC, iBatis, Hibernate, JDO, JPA, Oracle TopLink, Apache OJB, and Apache Cayenne, among others.
For all of these supported frameworks, Spring provides these features:

Resource management - automatically acquiring and releasing database resources
Exception handling - translating data access related exception to a Spring data access hierarchy
Transaction participation - transparent participation in ongoing transactions
Resource unwrapping - retrieving database objects from connection pool wrappers
Abstraction for BLOB and CLOB handling

All these features become available when using Template classes provided by Spring for each supported framework. Critics say these Template classes are intrusive and offer no advantage over using (for example) the Hibernate API directly. In response, the Spring developers have made it possible to use the Hibernate and JPA APIs directly. This however requires transparent transaction management, as application code no longer assumes the responsibility to obtain and close database resources, and does not support exception translation.
Together with Spring's transaction management, its data access framework offers a flexible abstraction for working with data access frameworks. The Spring Framework doesn't offer a common data access API; instead, the full power of the supported APIs is kept intact. The Spring Framework is the only framework available in Java which offers managed data access environments outside of an application server or container.[citation needed]
While using Spring for transaction management with Hibernate, following beans may be required to be configured

DataSource like com.mchange.v2.c3p0.ComboPooledDataSource or org.apache.commons.dbcp.BasicDataSource
SessionFactory like org.springframework.orm.hibernate3.LocalSessionFactoryBean
HibernateProperties like org.springframework.beans.factory.config.PropertiesFactoryBean
TransactionManager like org.springframework.orm.hibernate3.HibernateTransactionManager

Other configurations

AOP configuration of cutting points using <aop:config>
Transaction semantics of AOP advice using <tx:advice>


[edit] Transaction management framework
Spring's transaction management framework brings an abstraction mechanism to the Java platform. Its abstraction is capable of:

working with local and global transactions (local transaction does not require an application server)
working with nested transactions
working with transaction safepoints
working in almost all environments of the Java platform

In comparison, JTA only supports nested transactions and global transactions, and requires an application server (and in some cases also deployment of applications in an application server).
The Spring Framework ships a PlatformTransactionManager for a number of transaction management strategies:

Transactions managed on a JDBC Connection
Transactions managed on Object-relational mapping Units of Work
Transactions managed via the JTA TransactionManager and UserTransaction
Transactions managed on other resources, like object databases

Next to this abstraction mechanism the framework also provides two ways of adding transaction management to applications:

Programmatically, by using Spring's TransactionTemplate
Configuratively, by using metadata like XML or Java 5 annotations

Together with Spring's data access framework — which integrates the transaction management framework — it is possible to set up a transactional system through configuration without having to rely on JTA or EJB. The transactional framework also integrates with messaging and caching engines.

[edit] Model-view-controller framework
The Spring Framework features its own MVC framework, which wasn't originally planned. The Spring developers decided to write their own web framework as a reaction to what they perceived as the poor design of the popular Jakarta Struts web framework[4], as well as deficiencies in other available frameworks. In particular, they felt there was insufficient separation between the presentation and request handling layers, and between the request handling layer and the model.[5]
Like Struts, Spring MVC is a request-based framework. The framework defines strategy interfaces for all of the responsibilities which must be handled by a modern request-based framework. The goal of each interface is to be simple and clear so that it's easy for Spring MVC users to write their own implementations if they so choose. All interfaces are tightly coupled to the Servlet API. This tight coupling to the Servlet API is seen by some as a failure on the part of the Spring developers to offer a high-level abstraction for web-based applications[citation needed]. However, this coupling makes sure that the features of the Servlet API remain available to developers while offering a high abstraction framework to ease working with said API.
The DispatcherServlet class is the front controller[6] of the framework and is responsible for delegating control to the various interfaces during the execution phases of an HTTP request.
The most important interfaces defined by Spring MVC, and their responsibilities, are listed below:

HandlerMapping: selecting objects which handle incoming requests (handlers) based on any attribute or condition internal or external to those requests
HandlerAdapter: execution of objects which handle incoming requests
Controller: comes between Model and View to manage incoming requests and redirect to proper response.
View: responsible for returning a response to the client
ViewResolver: selecting a View based on a logical name for the view (use is not strictly required)
HandlerInterceptor: interception of incoming requests comparable but not equal to Servlet filters (use is optional and not controlled by DispatcherServlet).
LocaleResolver: resolving and optionally saving of the locale of an individual user
MultipartResolver: facilitate working with file uploads by wrapping incoming requests

Each strategy interface above has an important responsibility in the overall framework. The abstractions offered by these interfaces are sufficiently powerful to allow for a wide set of variations in their implementations. Spring MVC ships with implementations of all these interfaces and together offers a powerful feature set on top of the Servlet API[neutrality disputed]. However, developers and vendors are free to write other implementations. Spring MVC uses the Java java.util.Map interface as a data-oriented abstraction for the Model where keys are expected to be string values.
The ease of testing the implementations of these interfaces is one important advantage of the high level of abstraction offered by Spring MVC. DispatcherServlet is tightly coupled to the Spring Inversion of Control container for configuring the web layers of applications. However, applications can use other parts of the Spring Framework—including the container—and choose not to use Spring MVC.
Because Spring MVC uses the Spring container for configuration and assembly, web-based applications can take full advantage of the Inversion of Control features offered by the container.

[edit] Remote access framework
Spring's Remote Access framework is an abstraction for working with various RPC-based technologies available on the Java platform both for client connectivity and exporting objects on servers. The most important feature offered by this framework is to ease configuration and usage of these technologies as much as possible by combining Inversion of Control and AOP.
The framework also provides fault-recovery (automatic reconnection after connection failure) and some optimizations for client-side use of EJB remote stateless session beans.
Spring provides support for these protocols and products out of the box:

HTTP-based protocols

Hessian: binary serialization protocol, open-sourced and maintained by Corba-based protocols
RMI (1): method invocations using RMI infrastructure yet specific to Spring
RMI (2): method invocations using RMI interfaces complying with regular RMI usage
RMI-IIOP (Corba): method invocations using RMI-IIOP/Corba


Enterprise JavaBean client integration

Local EJB stateless session bean connectivity: connecting to local stateless session beans
Remote EJB stateless session bean connectivity: connecting to remote stateless session beans


SOAP

Integration with the Apache Axis web services framework



Apache CXF provides integration with the Spring Framework for RPC-style exporting of object on the server side.
Both client and server setup for all RPC-style protocols and products supported by the Spring Remote access framework (except for the Apache Axis support) is configured in the Spring Core container.
There is alternative open-source implementation (Cluster4Spring) of a remoting subsystem included into Spring Framework which is intended to support various schemes of remoting (1-1, 1-many, dynamic services discovering).

[edit] Batch Framework
Spring Batch is a framework for batch processing that provides reusable functions that are essential in processing large volumes of records, including:

logging/tracing
transaction management
job processing statistics
job restart
skip
resource management

It also provides more advance technical services and features that will enable extremely high-volume and high performance batch jobs though optimization and partitioning techniques.







v • d • e

List of Web Application Frameworks





Actionscript

PureMVC






ASP.NET

ASP.NET MVC · BFC · DotNetNuke · MonoRail · Umbraco






ColdFusion

ColdSpring · Fusebox · Mach-II · Model-Glue · onTap






Common Lisp

ABCL-web · blow · BKNR · SymbolicWeb · UnCommon Web






Java

Apache Struts · AppFuse · Flexive · Google Web Toolkit · IT Mill Toolkit · ItsNat · JavaServer Faces · JBoss Seam · Makumba · OpenXava · Reasonable Server Faces · RIFE · Restlet · Spring · Stripes · Tapestry · WebWork · Wicket · ZK






JavaScript (client-side)

Ample SDK · Clean AJAX · CougarXML · Dojo · Echo · Ext · jQuery · midori · MochiKit · MooTools · OpenLink AJAX · Prototype JavaScript · Pyjamas · qooxdoo · Rialto · Rico · script.aculo.us · SmartClient · SproutCore · Spry · Yahoo! UI Library · Google Web Toolkit






JavaScript (server-side)

AppJet · Jaxer






Perl

Catalyst · Interchange · Mason






PHP

Akelos · CakePHP · Chisimba · CodeIgniter · Drupal · Horde · Kohana · Kolibri · KumbiaPHP · Midgard · PEAR · PHPNuke · PHPonTrax · Seagull · Simplicity · Symfony · Zend · Zoop






Python

CherryPy · Django · Karrigell · Nevow · Pyjamas · Pylons · Quixote · Spyce · TurboGears · Twisted · web2py · Zope






Ruby

Adhearsion · Camping · eRuby (RHTML) · Merb · Nitro · RubyCocoa · Ruby on Rails






Smalltalk

AIDA/Web · Seaside






Other languages

Application Express (PL/SQL) · Fusebox (ColdFusion and PHP) · OpenACS (Tcl) · Yaws (Erlang) · HAppS (Haskell) · Cappuccino (Objective-J)







[edit] References


^ Spring.NET Application Framework
^ Jolt winners 2006
^ "Pitchfork FAQ". http://www.springsource.com/web/guest/pitchfork/pitchfork-faq. Retrieved on 2006-06-06. 
^ Introduction to the Spring Framework
^ Johnson, Expert One-on-One J2EE Design.., Ch. 12. et al.
^ Patterns of Enterprise Application Architecture: Front Controller




Johnson, Rod; Jürgen Höller, Alef Arendsen, Thomas Risberg, and Colin Sampaleanu (2005). Professional Java Development with the Spring Framework. Wiley. ISBN 0-7645-7483-3. 
Harrop, Rob; Jan Machahek (2005). Pro Spring. APress. ISBN 1-59059-461-4. 
Johnson, Rod; Jürgen Höller (2004). J2EE Development without EJB. Wiley. ISBN 0-7645-5831-5. 
Johnson, Rod (2002). Expert One-on-one J2EE Design and Development. Wiley. ISBN 0-7645-4385-7. 
Walls, Craig; Ryan Breidenbach (2005). Spring in Action. Manning. ISBN 1-9323-9435-4. 



[edit] External links




Free software portal






The Wikibook Java Programming has a page on the topic of
Spring framework




Spring Framework
Spring.Net
Spring Python
Spring ActionScript
Spring IDE
Spring Batch
Spring Hub
Spring Portfolio Projects
OpenSpaces - Extends the Spring Framework for Scalability
The Spring Framework - Reference Documentation
Spring Framework at Ohloh


[edit] Other IoC/DI Frameworks

Google Guice
Hivemind (software)
PicoContainer
PocoCapsule


[edit] Other Articles

J2EE Without the Application Server




Retrieved from "http://en.wikipedia.org/wiki/Spring_Framework"
Categories: Java enterprise platform | Web application frameworksHidden categories: Articles with weasel words from March 2009 | All pages needing cleanup | Articles with specifically-marked weasel-worded phrases since September 2008 | All articles with unsourced statements | Articles with unsourced statements since December 2007 | Articles with unsourced statements since February 2007 | Articles with minor POV problems from September 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Ελληνικά
Español
Français
Italiano
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Tiếng Việt
中文









 This page was last modified on 3 April 2009, at 11:09.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
