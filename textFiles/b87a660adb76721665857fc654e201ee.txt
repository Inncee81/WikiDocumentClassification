













Memento pattern - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Memento_pattern";
		var wgTitle = "Memento pattern";
		var wgAction = "view";
		var wgArticleId = "140542";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283732073;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-actionscript {line-height: normal;}
.source-actionscript li, .source-actionscript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for actionscript
 * CSS class: source-actionscript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-actionscript .de1, .source-actionscript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-actionscript  {}
.source-actionscript .head {}
.source-actionscript .foot {}
.source-actionscript .imp {font-weight: bold; color: red;}
.source-actionscript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-actionscript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-actionscript li.li2 {font-weight: bold;}
.source-actionscript .kw1 {color: #b1b100;}
.source-actionscript .kw2 {color: #000000; font-weight: bold;}
.source-actionscript .kw3 {color: #0066CC;}
.source-actionscript .co1 {color: #808080; font-style: italic;}
.source-actionscript .co2 {color: #808080; font-style: italic;}
.source-actionscript .coMULTI {color: #808080; font-style: italic;}
.source-actionscript .es0 {color: #000099; font-weight: bold;}
.source-actionscript .br0 {color: #66cc66;}
.source-actionscript .st0 {color: #ff0000;}
.source-actionscript .nu0 {color: #cc66cc;}
.source-actionscript .me1 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-ruby {line-height: normal;}
.source-ruby li, .source-ruby pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ruby
 * CSS class: source-ruby, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ruby .de1, .source-ruby .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ruby  {}
.source-ruby .head {}
.source-ruby .foot {}
.source-ruby .imp {font-weight: bold; color: red;}
.source-ruby .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ruby li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ruby li.li2 {font-weight: bold;}
.source-ruby .kw1 {color:#9966CC; font-weight:bold;}
.source-ruby .kw2 {color:#0000FF; font-weight:bold;}
.source-ruby .kw3 {color:#CC0066; font-weight:bold;}
.source-ruby .kw4 {color:#CC00FF; font-weight:bold;}
.source-ruby .co1 {color:#008000; font-style:italic;}
.source-ruby .coMULTI {color:#000080; font-style:italic;}
.source-ruby .es0 {color:#000099;}
.source-ruby .br0 {color:#006600; font-weight:bold;}
.source-ruby .st0 {color:#996600;}
.source-ruby .nu0 {color:#006666;}
.source-ruby .me1 {color:#9900CC;}
.source-ruby .sc0 {}
.source-ruby .sc1 {}
.source-ruby .sc2 {}
.source-ruby .re0 {color:#ff6633; font-weight:bold;}
.source-ruby .re1 {color:#0066ff; font-weight:bold;}
.source-ruby .re2 {color:#6666ff; font-weight:bold;}
.source-ruby .re3 {color:#ff3333; font-weight:bold;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Memento pattern

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
The memento pattern is a software design pattern that provides the ability to restore an object to its previous state (undo via rollback).
The memento pattern is used by two objects: the originator and a caretaker. The originator is some object that has an internal state. The caretaker is going to do something to the originator, but wants to be able to undo the change. The caretaker first asks the originator for a memento object. Then it does whatever operation (or sequence of operations) it was going to do. To roll back to the state before the operations, it returns the memento object to the originator. The memento object itself is an opaque object (one which the caretaker can not, or should not, change). When using this pattern, care should be taken if the originator may change other objects or resources - the memento pattern operates on a single object.
Classic examples of the memento pattern include the seed of a pseudorandom number generator[clarification needed] and the state in a finite state machine.




Contents


1 Examples

1.1 Actionscript 3
1.2 Java
1.3 Ruby


2 See also
3 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Examples

[edit] Actionscript 3
The following Actionscript 3 program illustrates the Memento Pattern.


package 
{
	import flash.display.Sprite;
 
	/**
	* Memento
	*/
	public class As3Memento extends Sprite
	{
		function As3Memento()
		{
			var ct:CareTaker = new CareTaker();
			var originator:Originator = new Originator();
 
				originator.A = 'letter A';
				originator.B = 'letter B';
				originator.C = 'letter C';
 
				ct.addMementoFrom(originator);
 
				originator.A = 'anything...';
				originator.B = 'blah blah...';
				originator.C = 'etc...';
				ct.addMementoFrom(originator);
 
				originator.restoreFromMemento(ct.getMemento(0));
 
				trace(originator.A, originator.B, originator.C);
 
				originator.restoreFromMemento(ct.getMemento(1));
 
				trace(originator.A, originator.B, originator.C);
 
		}
	}
 
}
 
interface IMemento
{
	function getMemento():Object;
	function restoreFromMemento(obj:Object):void;
}
 
class Originator implements IMemento
{
	public var A:String;
	public var B:String;
	public var C:String;
 
	function Originator()
	{ }
 
	/* INTERFACE IMemento */
 
	public function getMemento():Object
	{
		return { _A:A, _B:B, _C:C };
	}
 
	public function restoreFromMemento(obj:Object):void
	{
		A = obj._A;
		B = obj._B;
		C = obj._C;
	}
 
}
 
class CareTaker 
{
	private var mementos:Array;
	function CareTaker()
	{
		mementos = new Array();
	}
 
	public function addMementoFrom( object:IMemento ):void
	{
		mementos.push( object.getMemento() );
	}
 
	public function getMemento(index:uint):Object
	{
		return mementos[index];
	}
}


[edit] Java
The following Java program illustrates the "undo" usage of the Memento Pattern.


class Originator {
 
    private String state;
    /* lots of memory consumptive private data that is not necessary to define the
     * state and should thus not be saved. Hence the small memento object. */
 
    public void set(String state) {
        System.out.println("Originator: Setting state to " + state);
        this.state = state;
    }
 
    public Object saveToMemento() {
        System.out.println("Originator: Saving to Memento.");
        return new Memento(state);
    }
 
    public void restoreFromMemento(Object m) {
        if (m instanceof Memento) {
            Memento memento = (Memento) m;
            state = memento.getSavedState();
            System.out.println("Originator: State after restoring from Memento: " + state);
        }
    }
 
    private static class Memento {
 
        private String state;
 
        public Memento(String stateToSave) {
            state = stateToSave;
        }
 
        public String getSavedState() {
            return state;
        }
 
    }
 
}
 
import java.util.*;
 
class Caretaker {
 
    private List<Object> savedStates = new ArrayList<Object>();
 
    public void addMemento(Object m) {
        savedStates.add(m);
    }
 
    public Object getMemento(int index) {
        return savedStates.get(index);
    }
 
}
 
class MementoExample {
 
    public static void main(String[] args) {
 
        Caretaker caretaker = new Caretaker();
 
        Originator originator = new Originator();
        originator.set("State1");
        originator.set("State2");
        caretaker.addMemento(originator.saveToMemento());
        originator.set("State3");
        caretaker.addMemento(originator.saveToMemento());
        originator.set("State4");
 
        originator.restoreFromMemento(caretaker.getMemento(1));
 
    }
 
}

The output is:

Originator: Setting state to State1
Originator: Setting state to State2
Originator: Saving to Memento.
Originator: Setting state to State3
Originator: Saving to Memento.
Originator: Setting state to State4
Originator: State after restoring from Memento: State3


[edit] Ruby
The following Ruby program illustrates the same pattern.


#!/usr/bin/env ruby -KU
 
require 'rubygems'
require 'spec'
 
class Originator
  class Memento
    def initialize(state)
      # dup required so that munging of the Originator's original state doesn't mess up
      # this Memento for first or subsequent restore
      @state = state.dup
    end
 
    def state
      # dup required so that munging of the Originator's restored state doesn't mess up
      # this Memento for a second restore
      @state.dup
    end
  end
 
  attr_accessor :state
 
  # pretend there's lots of additional memory-heavy data, which can be reconstructed
  # from state
  def save_to_memento
    Memento.new(@state)
  end
 
  def restore_from_memento(m)
    @state = m.state
  end
 
end
 
class Caretaker < Array; end
 
describe Originator do
  before(:all) do
    @caretaker = Caretaker.new
    @originator = Originator.new
 
    @originator.state = "State1"
  end
 
  it "should have original state" do 
    @originator.state.should == 'State1'
  end
 
  it "should update state" do
    @originator.state = "State2"
    @originator.state.should == 'State2'
  end
 
  it "should save memento" do
    @caretaker << @originator.save_to_memento
    @caretaker.size.should == 1
  end
 
  it "should update state after save to memento" do
    @originator.state = "State3"
    @originator.state.should == 'State3'
  end
 
  it "should save to memento again" do
    @caretaker << @originator.save_to_memento
    @caretaker.size.should == 2
  end
 
  it "should update state after save to memento again" do
    @originator.state = "State4";
    @originator.state.should == 'State4'
  end
 
  it "should restore to original save point" do
    @originator.restore_from_memento @caretaker[0]
    @originator.state.should == 'State2'
  end
 
  it "should restore to second save point" do
    @originator.restore_from_memento @caretaker[1]
    @originator.state.should == 'State3'
  end
 
  it "should restore after pathological munging of restored state" do
    @originator.state[-1] = '5'
    @originator.state.should == 'State5'
    @originator.restore_from_memento @caretaker[1]
    @originator.state.should == 'State3'
  end
 
  it "should restore after pathological munging of original state" do
    @originator.state = "State6"
    @originator.state.should == 'State6'
    @caretaker << @originator.save_to_memento
    @originator.state[-1] = '7'
    @originator.state.should == 'State7'
    @originator.restore_from_memento @caretaker[2]
    @originator.state.should == 'State6'
  end
end


[edit] See also

Facade pattern


[edit] External links

Description by Matthew Heaney
Memento UML Class Diagram with C# and .NET code samples








v • d • e

Design patterns in the book Design Patterns





Creational

Abstract factory · Builder · Factory · Prototype · Singleton






Structural

Adapter · Bridge · Composite · Decorator · Facade · Flyweight · Proxy






Behavioral

Chain of responsibility · Command · Interpreter · Iterator · Mediator · Memento · Observer · State · Strategy · Template method · Visitor









Retrieved from "http://en.wikipedia.org/wiki/Memento_pattern"
Categories: Software design patterns | Articles with example Java codeHidden categories: All pages needing cleanup | Wikipedia articles needing clarification from February 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
Français
Italiano
日本語
Polski
Tiếng Việt
Українська









 This page was last modified on 14 April 2009, at 06:15 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
