













Multitenancy - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Multitenancy";
		var wgTitle = "Multitenancy";
		var wgAction = "view";
		var wgArticleId = "3157360";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283992610;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Multitenancy

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





The neutrality of this article is disputed. Please see the discussion on the talk page. Please do not remove this message until the dispute is resolved. (January 2008)







This article contains weasel words, vague phrasing that often accompanies biased or unverifiable information. Such statements should be clarified or removed. (March 2009)







This article may contain wording that promotes the subject in a subjective manner without imparting real information. Please remove or replace such wording or find sources which back the claims.


Multitenancy refers to a principle in software architecture where a single instance of the software runs on a software-as-a-service (SaaS) vendor's servers, serving multiple client organizations (tenants). Multitenancy is contrasted with a multi-instance architecture where separate software instances (or hardware systems) are set up for different client organizations. With a multitenant architecture, a software application is designed to virtually partition its data and configuration so that each client organization works with a customized virtual application instance.
The principle of multitenancy is not universally accepted and supported within the software industry, and this may be a source of competitive differentiation (see below).




Contents


1 Adoption

1.1 History of Multitenant Applications
1.2 Competitive differentiation


2 Economics of Multitenancy

2.1 Cost Savings
2.2 Complexity
2.3 Community


3 Requirements

3.1 Customization
3.2 Quality of service


4 Virtualization
5 Notes





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Adoption

[edit] History of Multitenant Applications
Multitenant applications have evolved from—and combine some characteristics of—two types of services:

Dating back to the 1990s, traditional application service providers (ASPs) hosted (then-existing) applications on behalf of their customers. Depending on the limitation of the underlying application, ASPs were forced to host applications on separate machines (if multiple instances of the applications could not be executed in the same physical machine) or as separate processes. Multitenant applications represent a more mature architecture that enables a similar service with lower operational cost.
Popular consumer-oriented services (such as Hotmail) were naturally designed as a (cost-effective and scalable) single application instance that serves all customers. Multitenant applications represent a natural evolution from this model, offering additional customization to a group or users within the same client organization.


[edit] Competitive differentiation
Some companies (including Google Apps, Microsoft, ScanSafe, Optenet, Preparis, eXternalTest.com, Salesforce.com, and Digital Insight an Intuit Co., as well as smaller pure play SaaS providers such as FCP's Applicant Tracking System evolve), EcosAgile are actively promoting this principle, and using it as source of competitive differentiation.[1][2]
To date, a majority of discussion around multi-tenancy has come from companies who have implemented it as part of their application architecture. Recent discussion, however, has focused on offering multi-tenancy as a native SaaS enablement construct by SaaS platforms such as Salesforce.com's Force.com and Apprenda's SaaSGrid. These platforms act as hosts to applications that can leverage native multi-tenancy at the platform level without having to explicitly implement a multi-tenancy execution and data architecture.

[edit] Economics of Multitenancy

[edit] Cost Savings
Multitenancy allows for cost savings over and above the basic economies of scale achievable from consolidating IT resources into a single operation.[citation needed] An application instance usually incurs a certain amount of memory and processing overhead which can be substantial when multiplied by many customers, especially if the customers are small. Multitenancy reduces this overhead by amortizing it over many customers. Further cost savings may come from licensing costs of the underlying software (such as operating systems and database management systems). Put crudely, if you can run everything on a single software instance, you only have to buy one software licence. [3] The cost savings can be eclipsed by the difficulty to scale single instance (a bigger faster server can only take you so far) as the demand grows. The cost savings have to be considered in the light of the four levels of SaaS multitenancy maturity, [4]

[edit] Complexity
Because of the additional customization complexity and the need to maintain per-tenant metadata, multitenant applications require a larger development effort.

[edit] Community
Some implementations, like TriActive's have hallways in which communities can share valuable assets and resources. This inter-tenant collaboration is very powerful.[peacock term]

[edit] Requirements

[edit] Customization
Multitenant applications are typically required to provide a high degree of customization to support each target organization's needs. Customization typically includes the following aspects:[4]

Branding: allowing each organization to customize the look-and-feel of the application to match their corporate branding (often referred to as a distinct "skin").
Workflow: accommodating differences in workflow to be used by a wide range of potential customers.
Extensions to the data model: supporting an extensible data model to give customers the ability to customize the data elements managed by the application to meet their specific needs.
Access control: letting each client organization independently customize access rights and restrictions for each user.


[edit] Quality of service
Multitenant applications are expected to provide adequate levels of security and robustness, which are provided by the operating system in the case of multi-instance applications.

[edit] Virtualization
The costs of re-designing applications for multi-tenancy can be significant, especially for software vendors who continue to offer an on-premises single-tenant version of their product. They end up being forced to support two distinct products with all the resulting costs.
An increasingly viable alternative route to multi-tenancy that eliminates the need for significant architectural change is to use virtualization technology to host multiple isolated instances of an application on one or more servers. Indeed, when applications are repackaged as virtual appliances the same appliance image can be deployed in ISV hosted, on-premises or trusted-third party locations and even migrated from one deployment site to another over time.

[edit] Notes

^ Multi-Tenant Data Architecture MSDN Architecture Center, June 2006
^ Software as a service: The next big thing ComputerWorld 23/03/2006
^ Conventional Wisdom Alert: Multitenancy (part 1)
^ a b Architecture Strategies for Catching the Long Tail MSDN Architecture Center, April 2006




Retrieved from "http://en.wikipedia.org/wiki/Multitenancy"
Categories: Software architecture | Service-oriented (business computing)Hidden categories: NPOV disputes from January 2008 | All NPOV disputes | Articles with weasel words from March 2009 | Articles with peacock terms | All articles with unsourced statements | Articles with unsourced statements since November 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch









 This page was last modified on 15 April 2009, at 13:42 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
