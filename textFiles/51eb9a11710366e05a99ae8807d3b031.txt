













Enterprise JavaBean - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Enterprise_JavaBean";
		var wgTitle = "Enterprise JavaBean";
		var wgAction = "view";
		var wgArticleId = "42750";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281070599;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Enterprise JavaBean

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (September 2007)






Simple EJB2 Architecture


Enterprise JavaBeans (EJB) is a managed, server-side component architecture for modular construction of enterprise applications.
The EJB specification is one of several Java APIs in the Java Platform, Enterprise Edition. EJB is a server-side model that encapsulates the business logic of an application. The EJB specification was originally developed in 1997 by IBM and later adopted by Sun Microsystems (EJB 1.0 and 1.1) 1999[1] and enhanced under the Java Community Process as JSR 19 (EJB 2.0), JSR 153 (EJB 2.1) and JSR 220 (EJB 3.0).
The EJB specification intends to provide a standard way to implement the back-end 'business' code typically found in enterprise applications (as opposed to 'front-end' user-interface code). Such code was frequently found to reproduce the same types of problems, and it was found that solutions to these problems are often repeatedly re-implemented by programmers. Enterprise JavaBeans were intended to handle such common concerns as persistence, transactional integrity, and security in a standard way, leaving programmers free to concentrate on the particular problem at hand.
Accordingly, the EJB specification details how an application server provides:

Persistence via the Java Persistence API (JPA)
Transaction processing
Concurrency control
Events using Java Message Service
Java Naming and directory services (JNDI)
Security ( Java Cryptography Extension (JCE) and JAAS )
Deployment of software components in an application server
Remote procedure calls using RMI-IIOP.
Exposing business methods as Web Services.

Additionally, the Enterprise JavaBean specification defines the roles played by the EJB container and the EJBs as well as how to deploy the EJBs in a container.




Contents


1 History

1.1 Rapid adoption followed by criticism
1.2 Reinventing EJBs


2 EJB types
3 Execution of EJBs

3.1 Remote Communication
3.2 Transactions
3.3 Events
3.4 Naming and Directory Services
3.5 Security
3.6 Deploying EJBs


4 Version History

4.1 EJB 3.1, in development
4.2 EJB 3.0, final release (2006)
4.3 EJB 2.1, final release (2003-11-24)
4.4 EJB 2.0, final release (2001-08-22)
4.5 EJB 1.1, final release (1999-12-17)
4.6 EJB 1.0 (1998-03-24)


5 External links
6 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History

[edit] Rapid adoption followed by criticism





The neutrality of this section is disputed. Please see the discussion on the talk page. Please do not remove this message until the dispute is resolved. (December 2007)


This vision was persuasively presented by EJB advocates such as IBM and Sun Microsystems, and Enterprise JavaBeans were quickly adopted by large companies. Problems were quick to appear, however, and the reputation of EJBs began to suffer as a result. Some developers felt that the APIs of the EJB standard were far more complex than those developers were used to. An abundance of checked exceptions, required interfaces, and the implementation of the bean class as an abstract class were all unusual and counter-intuitive for many programmers. Granted, the problems that the EJB standard was attempting to address, such as object-relational mapping and transactional integrity, are complex. However many programmers found the APIs to be just as difficult if not more so, leading to a widespread perception that EJBs introduced complexity without delivering real benefits.
In addition, businesses found that using EJBs to encapsulate business logic brought a performance penalty. This is because the original specification only allowed for remote method invocation through CORBA (and optionally other protocols), even though the large majority of business applications actually do not require this distributed computing functionality. The EJB 2.0 specification addressed this concern by adding the concept of Local interfaces which could be called directly without performance penalties by applications that were not distributed over multiple servers. It was introduced largely to address the performance problems that existed with EJB 1.0[2].
The complexity issue, however, continued to hinder EJB's acceptance. Although high-quality developer tools made it easy to create and use EJBs by automating most of the repetitive tasks, these tools did not make it any easier to learn how to use the technology. Moreover, a counter-movement had grown up on the grass-roots level among programmers. The main products of this movement were the so-called 'lightweight' (i. e. in comparison to EJB) technologies of Hibernate (for persistence and object-relational mapping) and Spring Framework (which provided an alternate and far less verbose way to encode business logic). Despite their lacking the backing of big businesses that EJBs had, these technologies grew in popularity and were adopted more and more by businesses who had become disillusioned with EJBs.
EJBs were promoted by Sun's Java Pet Store demo Java BluePrints. The use of EJBs was controversial and influential J2EE programmers such as Rod Johnson took positions in response to Java Pet Store that sought to deemphasize EJB use. Sun itself produced an alternative called Java Data Objects. Later, EJBs, Java Data Forms, and many of the ideas underlying Hibernate were combined to form EJB 3.0 which included the Java Persistence API and Plain Old Java Objects (POJOs). EJB 3.0 was less heavy weight than EJB 2.0 and provided more choices to developers.

[edit] Reinventing EJBs
Gradually an industry consensus emerged that the original EJB specification's primary virtue — enabling transactional integrity over distributed applications — was of limited use to most enterprise applications, and the functionality delivered by simpler frameworks like Spring and Hibernate was more useful. Accordingly, the EJB 3.0 specification (JSR 220) was a radical departure from its predecessors, following this new paradigm. It shows a clear influence from Spring in its use of POJOs, and its support for dependency injection to simplify configuration and integration of heterogeneous systems. Gavin King, the creator of Hibernate, participated in the EJB 3.0 process and is an outspoken advocate of the technology. Many features originally in Hibernate were incorporated in the Java Persistence API, the replacement for entity beans in EJB 3.0. The EJB 3.0 specification relies heavily on the use of annotations, a feature added to the Java language with its 5.0 release, to enable a much less verbose coding style.
Accordingly, in practical terms EJB 3.0 is very nearly a completely new API, bearing little resemblance to the previous EJB specifications.

[edit] EJB types
An EJB container holds two major types of beans:

Session Beans that can be either "Stateful" or "Stateless"
Message Driven Beans (also known as MDBs or Message Beans)

Stateful Session Beans are distributed objects having state: that is, they keep track of which calling program they are dealing with throughout a session. For example, checking out in a web store might be handled by a stateful session bean that would use its state to keep track of where the customer is in the checkout process. Stateful session beans' state may be persisted, but access to the bean instance is limited to only one client.
Stateless Session Beans are distributed objects that do not have state associated with them thus allowing concurrent access to the bean. The contents of instance variables are not guaranteed to be preserved across method calls. The lack of overhead to maintain a conversation with the calling program makes them less resource-intensive than stateful beans. Sending an e-mail to customer support might be handled by a stateless bean, since this is a one-off operation and not part of a multi-step process.
Message Driven Beans were introduced in the EJB 2.0 specification that is supported by J2EE 1.3 or higher. The message bean represents the integration of JMS (Java Message Service) with EJB to create an entirely new type of bean designed to handle asynchronous JMS messages. Message Driven Beans are distributed objects that behave asynchronously. That is, they handle operations that do not require an immediate response. For example, a user of a website clicking on a "keep me informed of future updates" box may trigger a call to a Message Driven Bean to add the user to a list in the company's database. (This call is asynchronous because the user does not need to wait to be informed of its success or failure.) These beans subscribe to JMS (Java Message Service) message queues or message topics. They were added in the EJB 2.0 specification to allow event-driven processing inside EJB Container. Unlike other types of beans, MDB does not have a client view (Remote/Home interfaces), i. e. clients can not look-up an MDB instance. It just listens for any incoming message on a JMS queue (or topic) and processes them automatically.
Previous versions of EJB also used a type of bean known as an Entity Bean. These were distributed objects having persistent state. Beans in which their container managed the persistent state were said to be using Container-Managed Persistence (CMP), whereas beans that managed their own state were said to be using Bean-Managed Persistence (BMP). Entity Beans were replaced by the Java Persistence API in EJB 3.0, though as of 2007, CMP 2.x style Entity beans are still available for backward compatibility.
Other types of Enterprise Beans have been proposed. For instance, Enterprise Media Beans (JSR 86) address the integration of multimedia objects in Java EE applications.

[edit] Execution of EJBs
EJBs are deployed in an EJB container within the application server. The specification describes how an EJB interacts with its container and how client code interacts with the container/EJB combination. The EJB classes used by applications are included in the javax.ejb package. (The javax.ejb.spi package is a service provider interface used only by EJB container implementations.)
With EJB 2.1 and earlier, each EJB had to provide a Java implementation class and two Java interfaces. The EJB container created instances of the Java implementation class to provide the EJB implementation. The Java interfaces were used by client code of the EJB.
The two interfaces, referred to as the Home and the Component interface, specified the signatures of the EJB's remote methods. The methods were split into two groups:

Class methods 
Not tied to a specific instance, such as those used to create an EJB instance (factory method) or to find an existing entity EJB (see EJB Types, above). These were declared by the Home interface.
Instance methods 
I. e. methods tied to a specific instance. These are placed in the Component interface.

Because these are merely Java interfaces and not concrete classes, the EJB container must generate classes for these interfaces that will act as a proxy in the client. Client code invokes a method on the generated proxies that in turn places the method arguments into a message and sends the message to the EJB server.

[edit] Remote Communication
The EJB specification requires that EJB containers support accessing the EJBs using RMI-IIOP. EJBs may be accessed from any CORBA application or provide Web Services.

[edit] Transactions
EJB containers must support both container managed ACID transactions and bean managed transactions. Container-managed transactions use a declarative syntax for specifying transactions in the deployment descriptor.

[edit] Events
JMS is used to send messages from the beans to client objects, to let clients receive asynchronous messages from these beans. MDB can be used to receive messages from client applications asynchronously using either a JMS Queue or a Topic.

[edit] Naming and Directory Services
Clients of the EJB locate the Home Interface implementation object using JNDI. The Home interface may also be found using the CORBA name service. From the home interface, client code can find entity beans, as well as create and delete existing EJBs.

[edit] Security
The EJB Container is responsible for ensuring the client code has sufficient access rights to an EJB.

[edit] Deploying EJBs
The EJB Specification also defines a mechanism that lets EJBs be deployed in a similar manner regardless of the specific EJB platform that is chosen. Information about how the bean should be deployed (such as the name of the Home or Remote interfaces, whether and how to store the bean in a database, etc.) are specified in the deployment descriptor.
The deployment descriptor is an XML document having an entry for each EJB to be deployed. This XML document specifies the following information for each EJB:

Name of the Home interface
Java class for the Bean (business object)
Java interface for the Home interface
Java interface for the business object
Persistent store (only for Entity Beans)
Security roles and permissions
Stateful or Stateless (for Session Beans)

EJB containers from many vendors require more deployment information than that in the EJB specification. They will require the additional information as separate XML files, or some other configuration file format. An EJB platform vendor generally provides their own tools that will read this deployment descriptor, and possibly generate a set of classes that will implement the Home and Remote interfaces.
Since EJB3.0 (JSR 220), the XML descriptor is replaced by Java annotations set in the Enterprise Bean implementation (at source level), although it is still possible to use an XML descriptor instead of (or in addition to) the annotations. If an XML descriptor and annotations are both applied to the same attribute within an Enterprise Bean, the XML definition overrides the corresponding source-level annotation.

[edit] Version History

[edit] EJB 3.1, in development
JSR 318. The purpose of the Enterprise JavaBeans 3.1 specification is to further simplify the EJB architecture by reducing its complexity from the developer's point of view, while also adding new functionality in response to the needs of the community:
Topics under consideration:

Local view without interface
.war packaging of EJB components
EJB Lite: definition of a subset of EJB
Portable EJB Global JNDI Names
Singletons
Application Initialization and Shutdown Events
EJB Timer Service Enhancements
Simple Asynchrony


[edit] EJB 3.0, final release (2006)
JSR 220 - Major changes: This release made it much easier to write EJBs, using 'annotations' rather than the complex 'deployment descriptors' used in version 2.x. The use of home and remote interfaces and the ejb-jar.xml file were also no longer required in this release, having been replaced with a business interface and a bean that implements the interface.

[edit] EJB 2.1, final release (2003-11-24)
JSR 153 - Major changes:

Web service support (new): stateless session beans can be invoked over SOAP/HTTP. Also, an EJB can easily access a Web service using the new service reference.
EJB timer service (new): Event-based mechanism for invoking EJBs at specific times.
Message-driven beans accepts messages from sources other than JMS.
Message destinations (the same idea as EJB references, resource references, etc.) has been added.
EJB query language (EJB-QL) additions: ORDER BY, AVG, MIN, MAX, SUM, COUNT, and MOD.
XML schema is used to specify deployment descriptors, replaces DTDs


[edit] EJB 2.0, final release (2001-08-22)
JSR 19 - Major changes: Overall goals:

The standard component architecture for building distributed object-oriented business applications in Java.
Make it possible to build distributed applications by combining components developed using tools from different vendors.
Make it easy to write (enterprise) applications: Application developers will not have to understand low-level transaction and state management details, multi-threading, connection pooling, and other complex low-level APIs.
Will follow the Write Once, Run Anywhere - philosophy of Java. An enterprise Bean can be developed once, and then deployed on multiple platforms without recompilation or source code modification.
Address the development, deployment, and runtime aspects of an enterprise application’s life cycle.
Define the contracts that enable tools from multiple vendors to develop and deploy components that can interoperate at runtime.
Be compatible with existing server platforms. Vendors will be able to extend their existing products to support EJBs.
Be compatible with other Java APIs.
Provide interoperability between enterprise Beans and Java 2 Platform Enterprise Edition (J2EE) components as well as non-Java programming language applications.
Be compatible with the CORBA protocols (RMI-IIOP).


[edit] EJB 1.1, final release (1999-12-17)
Major changes:

XML deployment descriptors
Default JNDI contexts
RMI over IIOP
Security - role driven, not method driven
Entity Bean support - mandatory, not optional

Goals for Release 1.1:

Provide better support for application assembly and deployment.
Specify in greater detail the responsibilities of the individual EJB roles.


[edit] EJB 1.0 (1998-03-24)
Announced at JavaOne 1998, Sun's third Java developers conference (March 24 through 27) Goals for Release 1.0:

Defined the distinct “EJB Roles” that are assumed by the component architecture.
Defined the client view of enterprise Beans.
Defined the enterprise Bean developer’s view.
Defined the responsibilities of an EJB Container provider and server provider; together these make up a system that supports the deployment and execution of enterprise Beans.


[edit] External links

Sun's EJB Product main page
Java EE 5 API Javadocs
EJB 3.0 API Javadocs
The EJB 3.0 Specification
Sun's EJB 3.0 Tutorial
EJB 3.0 Session Bean article
EJB 3.0 Entity Bean article
EJB (3.0) Glossary
JSR 318 (EJB 3.1)
JSR 220 (EJB 3.0)
JSR 153 (EJB 2.1)
JSR 19 (EJB 2.0)
EJB 2 example based tutorial issa


[edit] References

^ J2EE Design and Development, © 2002 Wrox Press Ltd., p. 5.
^ J2EE Design and Development, © 2002 Wrox Press Ltd., p. 19.




Retrieved from "http://en.wikipedia.org/wiki/Enterprise_JavaBean"
Categories: Java enterprise platform | Java specification requests | Software componentsHidden categories: Articles lacking sources from September 2007 | All articles lacking sources | NPOV disputes from December 2007 | All NPOV disputes 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
Français
한국어
Bahasa Indonesia
Italiano
Magyar
Nederlands
日本語
Polski
Português
Русский
Simple English
Svenska
Türkçe
中文









 This page was last modified on 1 April 2009, at 13:13.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
