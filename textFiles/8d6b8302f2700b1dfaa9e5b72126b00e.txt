













ECMAScript - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "ECMAScript";
		var wgTitle = "ECMAScript";
		var wgAction = "view";
		var wgArticleId = "188515";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281621261;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); ECMAScript

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

ECMAScript

Paradigm
Multi-paradigm: prototype-oriented, functional, imperative, scripting


Appeared in
1997


Designed by
Brendan Eich, Ecma International


Typing discipline
duck, weak, dynamic


Dialects
JavaScript, ActionScript, JScript, QtScript, DMDScript, InScript


Influenced by
Self, HyperTalk, AWK, C, Perl, Python, Java



ECMAScript




Filename extension
.es


Internet media type
application/ecmascript[1]


Developed by
Sun Microsystems,
Ecma International


Initial release
June 1997


Latest release
Edition 3 / December 1999


Type of format
Scripting language


Extended from
JavaScript


Website
ECMA-262, ECMA-290,
ECMA-327, ECMA-357




This article is part of
the JavaScript series.



JavaScript


JavaScript syntax


ECMAScript


JavaScript topics



This box: view • talk • edit



ECMAScript is a scripting language, standardized by Ecma International in the ECMA-262 specification. The language is widely used on the web, especially in the form of its two most well-known dialects, JavaScript and JScript.




Contents


1 History
2 Versions
3 Features
4 Syntax
5 Dialects
6 Version correspondence
7 Future development

7.1 Features
7.2 Bug fixes and backwards compatibility
7.3 History
7.4 ECMAScript 3.1
7.5 ECMAScript Harmony


8 See also
9 References
10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
JavaScript was originally developed by Brendan Eich of Netscape under the name Mocha, later LiveScript, and finally renamed to JavaScript.[2] In December 1995, Sun Microsystems and Netscape announced JavaScript in a press release.[3] In March 1996 Netscape Navigator 2.0 was out, featuring support for JavaScript.
Due to the widespread success of JavaScript as a client-side scripting language for web pages, Microsoft developed a compatible dialect of the language, naming it JScript to avoid trademark issues. JScript added new date methods to fix the non-Y2K-friendly methods in JavaScript, which were based on java.util.Date.[4] JScript was included in Internet Explorer 3.0, released in August 1996.
Netscape submitted JavaScript to Ecma International for standardization; the work on the specification, ECMA-262, began in November 1996.[5] The first edition of ECMA-262 was adopted by the ECMA General Assembly of June 1997.[6]
ECMAScript is the name of the scripting language standardized in ECMA-262. Both JavaScript and JScript aim to be compatible with ECMAScript, while providing additional features not described in the ECMA specification.
The name "ECMAScript" was a compromise between the organizations involved in standardizing the language, especially Netscape and Microsoft. Brendan Eich, the creator of JavaScript, is on record as saying that "ECMAScript was always an unwanted trade name that sounds like a skin disease."[7]

[edit] Versions
There are three editions of ECMA-262 published. Work on a revision to the third edition known provisionally as "ECMAScript 3.1", and on a future edition codenamed "Harmony", is in progress.


Edition
Date published
Differences to the previous edition
Editor


1
June 1997
First edition
Guy L. Steele, Jr.


2
June 1998
Editorial changes to keep the specification fully aligned with ISO/IEC 16262 international standard
Mike Cowlishaw


3
December 1999
Added regular expressions, better string handling, new control statements, try/catch exception handling, tighter definition of errors, formatting for numeric output and other enhancements
Mike Cowlishaw


3.1
Work in progress
Adds "strict mode", a subset intended to provide more thorough error checking and avoid error-prone constructs. Clarifies many ambiguities in the 3rd edition specification, and accomodates behaviour of real-world implementations that differed consistently from that specification. Adds some new features, such as getters and setters, library support for JSON, and more complete reflection on object properties. ECMAScript 3.1 is likely to be published as "ECMAScript 5th edition"[citation needed].



Harmony
Work in progress
Multiple new concepts and language features — see the section "Future development" below. ECMAScript Harmony is likely to be published as "ECMAScript 6th edition"[citation needed].



In June 2004 Ecma International published ECMA-357 standard, defining an extension to ECMAScript, known as E4X (ECMAScript for XML).
ECMA also defined a "Compact Profile" for ECMAScript — known as ES-CP, or ECMA 327 — which is designed for resource-constrained devices. Several of the dynamic features of ECMAScript (such as the "eval" function) are made optional, thus allowing the runtime to make more assumptions about the behaviour of programs and therefore make more performance trade-offs when running the code. The HD DVD standard was one place where the ECMAScript Compact Profile was used in favour of full ECMAScript in order to reduce processing and memory requirements on a device.

[edit] Features
Further information: ECMAScript features
The ECMAScript language includes structured, dynamic, functional, and prototype-based features.

[edit] Syntax
Further information: ECMAScript syntax

[edit] Dialects
ECMAScript is supported in many applications, especially web browsers, where it is commonly called JavaScript. Dialects sometimes include extensions to the language, or to the standard library and related APIs such as the W3C-specified DOM. This means that applications written in one dialect may be incompatible with another, unless they are written to use only a common subset of supported features and APIs.
Note that there is a distinction between a dialect and an implementation. A dialect of a language is significant variation of the language, while an implementation of a language/dialect executes a program written in that dialect.


Application
Dialect and latest version
ECMAScript edition


Google Chrome, the V8 engine
JavaScript
ECMA-262, edition 3 9


Mozilla Firefox, the Gecko layout engine, SpiderMonkey, and Rhino 6
JavaScript 1.8
ECMA-262, edition 3


Internet Explorer, the Trident layout engine
JScript 5.7
ECMA-262, edition 3


Opera
ECMAScript with some JavaScript 1.5
and JScript extensions [1]
ECMA-262, edition 3


KHTML layout engine, KDE's Konqueror, and Apple's Safari7
JavaScript 1.5 1
ECMA-262, edition 3 5


Appweb Web Server, Samba 4
Ejscript 0.9.5
ECMA-262, edition 3 8


Microsoft .NET Framework
JScript .NET 8.0
ECMA-262, edition 3 2


Adobe Flash and Adobe Flex
ActionScript 3
ECMA-262, edition 3 3


Adobe Acrobat
JavaScript 1.5 1
ECMA-262, edition 3


General purpose scripting language
DMDScript 1.06
ECMA-262


OpenLaszlo Platform
JavaScript 1.4 1
ECMA-262, edition 3 4


CriScript, JScript for game platforms
CriScript 0.9.0
ECMA-262, edition 3


iCab
InScript 3.22
ECMA-262, edition 3


Max/MSP
JavaScript 1.5 1
ECMA-262, edition 3


ANT Galio with Venturi layout engine and SpiderPig
JavaScript 1.5 1 with RMAI extensions
ECMA-262, edition 3


Note (1): Mozilla manages the official version of JavaScript. Most non-Mozilla implementations claiming JavaScript "compliance" do not actually support most JavaScript extensions; rather, they target ECMA-262, edition 3.
Note (2): Microsoft asserts that JScript 8.0 supports "almost all of the features of the ECMAScript Edition 3 Language Specification" but does not list the unsupported features.
Note (3): In addition to supporting ECMA-262 edition 3, ActionScript 3 also included support for extensions proposed in drafts of ECMAScript edition 4. [8]
Note (4): As of version 4, OpenLaszlo implements standard ECMAScript edition 3 with some extensions proposed in drafts of ECMAScript edition 4[9]
Note (5): The current WebKit binaries, as of April 2007, also implement at least part of the Javascript 1.6 extras
Note (6): The Mozilla implementations, (SpiderMonkey in the C programming language and Rhino in the Java programming language), are used in several third-party programs, including the Yahoo! Widget Engine (Konfabulator) and the Macintosh system-level scripting language JavaScript OSA.
Note (7): Apple's Safari uses JavaScriptCore which is based on the KDE KJS library.
Note (8): This implementation was asserted to support some extensions proposed in drafts of ECMAScript edition 4[10]
Note (9): V8 implements ECMAScript as specified in ECMA-262, 3rd edition.[11]

[edit] Version correspondence
The following table is based on [2] and [3]; items on the same line are approximately the same language.


JavaScript
JScript
ECMAScript


1.0 (Netscape 2.0, March 1996)
1.0 (IE 3.0 - early versions, August 1996)



1.1 (Netscape 3.0, August 1996)
2.0 (IE 3.0 - later versions, January 1997)



1.2 (Netscape 4.0-4.05, June 1997)




1.3 (Netscape 4.06-4.7x, October 1998)
3.0 (IE 4.0, Oct 1997)
Edition 1 (June 1997) / Edition 2 (June 1998)


1.4 (Netscape Server only)
4.0 (Visual Studio 6, no IE release)




5.0 (IE 5.0, March 1999)




5.1 (IE 5.01)



1.5 (Netscape 6.0, Nov 2000; also
later Netscape and Mozilla releases)
5.5 (IE 5.5, July 2000)
Edition 3 (December 1999)



5.6 (IE 6.0, October 2001)



1.6 (Gecko 1.8, Firefox 1.5, November 2005)

Edition 3, with some compliant enhancements: E4X, Array extras (e.g. Array.prototype.forEach), Array and String generics (New in JavaScript 1.6)


1.7 (Gecko 1.8.1, Firefox 2, October 2006)

Edition 3 plus all JavaScript 1.6 enhancements, plus Pythonic generators and array comprehensions ([a*a for (a in iter)]), block scope with let, destructuring assignment (var [a,b]=[1,2]) (New in JavaScript 1.7)


1.8 (Gecko 1.9, Firefox 3, June 2008)

Edition 3 plus all JavaScript 1.7 enhancements, plus expression closures (function(x) x * x), generator expressions, and more (New in JavaScript 1.8)



JScript .NET (ASP.NET; no IE release)
(JScript .NET is said to be designed with the participation of other ECMA members[citation needed])


JavaScript 2.0 (Work in progress)

Harmony (Work in progress; see the section "ECMAScript Harmony" below).



[edit] Future development
The proposed fourth edition of ECMA-262 (ECMAScript 4 or ES4) would have been the first major update to ECMAScript since the third edition was published in 1999. The specification (along with a reference implementation) was originally targeted for completion by October 2008.[12] An overview of the language was released by the working group on October 22, 2007.
As of August 2008, the ECMAScript 4th edition proposal has been scaled back into a project codenamed ECMAScript Harmony.

[edit] Features
Features under discussion for a future edition (originally "ECMAScript 4"; now ECMAScript Harmony) include:

Classes
A module system
Optional type annotations and static typing, probably using a structural type system
Generators and iterators
Destructuring assignment
Algebraic data types

The intent of these features is partly to better support "programming in the large", and to let programmers sacrifice some of the script's ability to be dynamic for performance. For example, Tamarin — the virtual machine for ActionScript developed and open sourced by Adobe — has JIT compilation support for certain classes of scripts.

[edit] Bug fixes and backwards compatibility
In addition to introducing new features, some ES3 bugs were proposed to be fixed in edition 4.[13] [14]. These fixes and others, and support for JSON encoding/decoding, have now been folded into the ECMAScript 3.1 specification.[citation needed]

[edit] History
Work started on Edition 4 after the ES-CP (Compact Profile) specification was completed, and continued for approximately 18 months where slow progress was made balancing the theory of Netscape's JavaScript 2 specification with the implementation experience of Microsoft's JScript .NET. After some time, the focus shifted to the E4X standard.
The update has not been without controversy. In late 2007, a debate between Eich, now the Mozilla Foundation's CTO, and Chris Wilson, Microsoft's platform architect for Internet Explorer, became public on a number of blogs. Wilson cautioned that because the proposed changes to ECMAScript made it backwards incompatible in some respects to earlier versions of the language, the update amounted to "breaking the Web,"[15] and that stakeholders who opposed the changes were being "hidden from view".[16] Eich responded by stating that Wilson seemed to be "repeating falsehoods in blogs" and denied that there was attempt to suppress dissent and challenging critics to give specific examples of incompatibility.[17] He also pointed out that Microsoft Silverlight and Adobe AIR rely on C# and ActionScript 3 respectively, both of which are larger and more complex than ECMAScript Edition 3.[18]

[edit] ECMAScript 3.1
Microsoft, Yahoo, and other 4th edition dissenters formed their own subcommittee to design a less ambitious update of ECMAScript 3, tentatively named ECMAScript 3.1. This edition would focus on security and library updates with a large emphasis on compatibility. After the aforementioned public sparring, the ECMAScript 3.1 and ECMAScript 4 teams agreed on a compromise: the two editions would be worked on in parallel, with coordination between the teams to ensure that ECMAScript 3.1 remains a strict subset of ECMAScript 4 in both semantics and syntax.
However, the differing philosophies in each team resulted in repeated breakages of the subset rule, and it remained doubtful that the ECMAScript 4 dissenters would ever support or implement ECMAScript 4 in the future. After over a year since the disagreement over the future of ECMAScript within the ECMA Technical Committee 39, the two teams reached a new compromise: ECMA TC39 announced it would focus work on the ECMAScript 3.1 project with full collaboration of all parties, and it would target two interoperable implementations by early 2009.[19]

[edit] ECMAScript Harmony
In the same announcement, ECMA TC39 also stated that the ECMAScript 4 proposal would be superseded by a new project, code-named ECMAScript Harmony. ECMAScript Harmony will include syntactic extensions, but the changes will be more modest than ECMAScript 4 in both semantic and syntactic innovation. Packages, namespaces and early binding from ECMAScript 4 are no longer included for planned releases. In addition, other goals and ideas from ECMAScript 4 are being rephrased to keep consensus in the committee; these include a notion of classes based on existing ECMAScript 3 concepts combined with proposed ECMAScript 3.1 extensions.[20] As of August 2008, there is no publicly announced release date for ECMAScript Harmony. Depending on how ECMAScript 3.1 is officially named, ECMAScript Harmony may end up being the new ECMAScript 4th edition.

[edit] See also

ActionScript
Comparison of layout engines (ECMAScript)
Document Object Model
E4X
List of ECMAScript engines
JavaScript


[edit] References


^ RFC 4329
^ InfoWorld: JavaScript creator ponders past, future
^ JavaScript Press Release
^ Brendan's Roadmap Updates: Popularity
^ JavaScript Standardization Press Release
^ ECMAScript 3rd Edition specification
^ es4-discuss: Will there be a suggested file suffix for es4?
^ The Kiwi Project: AS3 language 101 for C/C++ coders
^ OpenLaszlo 4
^ Ejscript Overview
^ V8 JavaScript Engine
^ es4-discuss: ES4 overview paper released
^ John Resig - Bug Fixes in JavaScript 2
^ Incompatibilities between ES3 and ES4
^ IEBlog: ECMAScript 3 and Beyond
^ Albatross!: What I think about ES4
^ Brendan's Roadmap Updates: Open letter to Chris Wilson
^ Brendan's Roadmap Updates: My @media Ajax Keynote
^ ECMAScript Harmony announcement
^ John Resig: ECMAScript Harmony



[edit] External links

ECMAScript 4 Reference Implementation
Standard ECMA-262 ECMAScript Language Specification 3rd edition (December 1999)
Standard ECMA-290 ECMAScript Components Specification (June 1999)
Standard ECMA-327 ECMAScript 3rd Edition Compact Profile (June 2001)
Standard ECMA-357 ECMAScript for XML (E4X) Specification (June 2004)
Export Root of the ECMAScript 4 Committee Wiki
The World of ECMAScript : John Resig's map on ECMAScript









v • d • e

Layout engines





List of layout engines

Amaya · Boxely · Gecko · GtkHTML · HTMLayout · KHTML · Mariner · Presto · Prince · Tasman · Tkhtml · Trident · WebKit  · Gazelle






Comparison of layout engines

HTML · XML · XHTML · Graphics · CSS · DOM · HTML 5 · ECMAScript · SVG · Non-standard HTML













v • d • e

ECMAScript (comparison)





Dialects

ActionScript · Caja · JavaScript / LiveScript · JScript · JavaScript OSA · JScript .NET · QtScript






ECMAScript engines

InScript · JavaScriptCore (SquirrelFish)  · JScript · KJS · Futhark · Linear B · Narcissus · QtScript · Rhino · SpiderMonkey (TraceMonkey) · Tamarin · V8






Other

Brendan Eich · Ecma International · SunSpider · Dynamic HTML













v • d • e

Standards of Ecma International






ANSI escape code · C++/CLI · C# · CD-ROM · CLI · DDS · E4X · ECMAScript · Eiffel · FAT · FD · HVD · Office Open XML · U3D · UDF · UDO · UMD · UWB






List of Ecma standards








Retrieved from "http://en.wikipedia.org/wiki/ECMAScript"
Categories: C programming language family | Curly bracket programming languages | JavaScript dialect engines | JavaScript programming language family | Object-based programming languages | Prototype-based programming languages | Computer and telecommunication standards | Scripting languages | Ecma standardsHidden categories: All articles with unsourced statements | Articles with unsourced statements since April 2009 | Articles with unsourced statements since February 2009 | Articles with unsourced statements since January 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Dansk
Español
Français
한국어
Magyar
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Svenska
ไทย
Українська
中文









 This page was last modified on 4 April 2009, at 02:24.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
