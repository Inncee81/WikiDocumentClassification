













Pipeline (Unix) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Pipeline_(Unix)";
		var wgTitle = "Pipeline (Unix)";
		var wgAction = "view";
		var wgArticleId = "1236117";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279697667;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-bash .de1, .source-bash .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-bash  {}
.source-bash .head {}
.source-bash .foot {}
.source-bash .imp {font-weight: bold; color: red;}
.source-bash .ln-xtra {color: #cc0; background-color: #ffc;}
.source-bash li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-bash li.li2 {font-weight: bold;}
.source-bash .kw1 {color: #b1b100;}
.source-bash .kw3 {color: #000066;}
.source-bash .co1 {color: #808080; font-style: italic;}
.source-bash .es0 {color: #000099; font-weight: bold;}
.source-bash .br0 {color: #66cc66;}
.source-bash .st0 {color: #ff0000;}
.source-bash .nu0 {color: #cc66cc;}
.source-bash .re0 {color: #0000ff;}
.source-bash .re1 {color: #0000ff;}
.source-bash .re2 {color: #0000ff;}
.source-bash .re3 {color: #808080; font-style: italic;}
.source-bash .re4 {color: #0000ff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Pipeline (Unix)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




A pipeline of three programs run on a text terminal


In Unix-like computer operating systems, a pipeline is the original software pipeline: a set of processes chained by their standard streams, so that the output of each process (stdout) feeds directly as input (stdin) of the next one. Each connection is implemented by an anonymous pipe. Filter programs are often used in this configuration. The concept was invented by Douglas McIlroy for Unix shells and it was named by analogy to a physical pipeline.




Contents


1 Examples

1.1 Simple example
1.2 Complex example


2 Pipelines in command line interfaces

2.1 Error stream
2.2 Pipemill

2.2.1 Example of Pipemill




3 Creating pipelines programmatically
4 Implementation

4.1 Network pipes


5 History

5.1 Other operating systems


6 See also
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Examples

[edit] Simple example


ls -l | less

In this example, ls is the Unix directory lister, and less is an interactive text pager with searching capabilities. The pipeline lets the user scroll up and down a directory listing that may not fit on the screen.
Pipelines ending in less (or more, a similar text pager) are among the most commonly used. They let the user navigate potentially large amounts of text (constrained only by available memory) which otherwise would have scrolled past the top of the terminal and been lost. Put differently, they relieve programmers from the burden of implementing text pagers in their applications: they can pipe output through less, or assume that the user will do so when needed.

[edit] Complex example
Below is an example of a pipeline that implements a kind of spell checker for the web resource indicated by a URL. An explanation of what it does follows.


curl "http://en.wikipedia.org/wiki/Pipeline_(Unix)" | \
sed 's/[^a-zA-Z ]/ /g' | \
tr 'A-Z ' 'a-z\n' | \
grep '[a-z]' | \
sort -u | \
comm -23 - /usr/share/dict/words


Note: The character "\" is used to place all six lines into a single command line.
First, curl obtains the HTML contents of a web page (could use wget on some systems).
Second, sed removes all characters that are not spaces or letters from the web page's content, replacing them with spaces.
Third, tr changes all of the uppercase letters into lowercase and converts the spaces in the lines of text to newlines (each 'word' is now on a separate line).
Fourth, grep includes only lines that contain at least one lowercase alphabetical character (removing any blank lines).
Fifth, sort sorts the list of 'words' into alphabetical order, and the -u switch removes duplicates.
Finally, comm finds lines in common between two files, -23 suppresses lines unique to the second file, and those that are common to both, leaving only those that are found only in the first file named. The - in place of a filename causes comm to use its standard input (from the pipe line in this case). This results in a list of "words" (lines) that are not found in /usr/share/dict/words.
The special character "|" tells the operating system to pipe the output from the previous command in the line into the next command in the line. That is, the output of the curl command is given as the input of the sed command.


[edit] Pipelines in command line interfaces
Most Unix shells have a special syntax construct for the creation of pipelines. Typically, one simply writes the filter commands in sequence, separated by the ASCII vertical bar character "|" (which, for this reason, is often called "pipe character" by Unix users). The shell starts the processes and arranges for the necessary connections between their standard streams (including some amount of buffer storage).

[edit] Error stream
By default, the standard error streams ("stderr") of the processes in a pipeline are not passed on through the pipe; instead, they are merged and directed to the console. However, many shells have additional syntax for changing this behaviour. In the csh shell, for instance, using "|&" instead of "| " signifies that the standard error stream too should be merged with the standard output and fed to the next process. The Bourne Shell can also merge standard error, using 2>&1, as well as redirect it to a different file.

[edit] Pipemill
In the most commonly used simple pipelines the shell connects a series of sub-processes via pipes, and executes external commands within each sub-process. Thus the shell itself is doing no direct processing of the data flowing through the pipeline.
However, it's possible for the shell to perform processing directly. This construct generally looks something like:


command | while read var1 var2 ...; do
   # process each line, using variables as parsed into $var1, $var2, etc
   # (note that this is a subshell: var1, var2 etc will not be available after the while loop terminates)
   done

... which is referred to as a "pipemill" (since the while is "milling" over the results from the initial command.)

[edit] Example of Pipemill
This example will traverse file directory trees changing the ownership of all files while preserving all permissions, including those that are often stripped off by many versions of the chown command.


find / /usr /var -mount -user foo -printf "%m %p\n" | while read mode filename; do
    chown $NEWOWNER "$filename"
    chmod $MODE "$filename"
    done

There are a number of variations of the pipemill construct including:


ps lax | { read x; while read x owner pid parent x x x x x stat x; do
   [ "$owner"="foo" -a "$stat"="Z" ] && kill "$parent"
   done
   }

This example kills the parent processes for zombies owned/created by the user "foo".
Here the while loop is enclosed in a command group (the braces); and preceded by a read command, which effectively "throws away" the first line from the ps command. (Of course, in this particular example it would be harmless to process the header line, as it wouldn't match the "$owner"= test). Note that the other references to the "x" variable are simply being used as placeholders for "throwing away" irrelevant fields from each line.
The defining characteristics of a "pipemill" are: some command or series of commands feeds data into a pipe from which a shell while loop reads and processes it.

[edit] Creating pipelines programmatically
Pipelines can be created under program control. The pipe() system call asks the operating system to construct a new anonymous pipe object. This results in two new, opened file descriptors in the process: the read-only end of the pipe, and the write-only end. The pipe ends appear to be normal, anonymous file descriptors, except that they have no ability to seek.
To avoid deadlock and exploit parallelism, the process with one or more new pipes will then, generally, call fork() to create new processes. Each process will then close the end(s) of the pipe that it will not be using before producing or consuming any data. Alternatively, a process might create a new thread and use the pipe to communicate between them.
Named pipes may also be created using mkfifo() or mknod() and then presented as the input or output file to programs as they are invoked. They allow multi-path pipes to be created, and are especially effective when combined with standard error redirection, or with tee.

[edit] Implementation
In most Unix-like systems, all processes of a pipeline are started at the same time, with their streams appropriately connected, and managed by the scheduler together with all other processes running on the machine. An important aspect of this, setting Unix pipes apart from other pipe implementations, is the concept of buffering: a sending program may produce 5000 bytes per second, and a receiving program may only be able to accept 100 bytes per second, but no data are lost. Instead, the output of the sending program is held in a buffer, or queue. When the receiving program is ready to read data, the operating system sends it data from the buffer, then removes that data from the buffer. If the buffer fills up, the sending program is suspended (blocked) until the receiving program has had a chance to read some data and make room in the buffer. In Linux, the size of the buffer is 65536 bytes.

[edit] Network pipes
Tools like netcat and socat can connect pipes to TCP/IP sockets, following the Unix philosophy of "everything is a file".

[edit] History
The pipeline concept and the vertical-bar notation was invented by Douglas McIlroy, one of the authors of the early command shells, after he noticed that much of the time they were processing the output of one program as the input to another. His ideas were implemented in 1973 when Ken Thompson added pipes to the UNIX operating system.[1] The idea was eventually ported to other operating systems, such as DOS, OS/2, Microsoft Windows, and BeOS, often with the same notation.
Although developed independently, Unix pipes are similar to, and were preceded by the 'communication files' developed by Ken Lochner [2] in the 1960's for the Dartmouth Time Sharing System. [3]
The robot in the icon for Apple's Automator, which also uses a pipeline concept to chain repetitive commands together, holds a pipe in homage to the original Unix concept.

[edit] Other operating systems
Main article: Pipeline (software)
This feature of Unix was borrowed by other operating systems, such as Taos and MS-DOS, and eventually became the pipes and filters design pattern of software engineering.

[edit] See also

Tee (command) for fitting together two pipes
Pipeline (software) for the general software engineering concept.
Pipeline (computing) for other computer-related pipelines.
Hartmann pipeline
Python Pipelines
Anonymous pipe, a FIFO structure used for interprocess communication
Named pipe persistent pipes used for interprocess communication
Redirection (computing)
XML pipeline for processing of XML files


[edit] References


^ http://www.linfo.org/pipe.html Pipes: A Brief Introduction by The Linux Information Project (LINFO)
^ http://www.cs.rit.edu/~swm/history/DTSS.doc
^ http://cm.bell-labs.com/who/dmr/hist.html




Sal Soghoian on MacBreak Episode 3 "Enter the Automatrix"



[edit] External links

pipe: create an interprocess channel – System Interfaces Reference, The Single UNIX® Specification, Issue 7 from The Open Group
Pipes: A Brief Introduction by The Linux Information Project (LINFO)
Unix Pipes – powerful and elegant programming paradigm (Softpanorama)
Ad Hoc Data Analysis From The Unix Command Line at Wikibooks – Shows how to use pipelines composed of simple filters to do complex data analysis.
stdio buffering
Use And Abuse Of Pipes With Audio Data – Gives an introduction to using and abusing pipes with netcat, nettee and fifos to play audio across a network.
stackoverflow.com – A Q&A about bash pipeline handling.




Retrieved from "http://en.wikipedia.org/wiki/Pipeline_(Unix)"
Categories: Inter-process communication | Unix 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Français
한국어
Italiano
Polski
Português
Slovenčina
Українська









 This page was last modified on 25 March 2009, at 23:52 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
