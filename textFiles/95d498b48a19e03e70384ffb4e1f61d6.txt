













SQL injection - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "SQL_injection";
		var wgTitle = "SQL injection";
		var wgAction = "view";
		var wgArticleId = "526999";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283689565;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-sql {line-height: normal;}
.source-sql li, .source-sql pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for sql
 * CSS class: source-sql, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-sql .de1, .source-sql .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-sql  {}
.source-sql .head {}
.source-sql .foot {}
.source-sql .imp {font-weight: bold; color: red;}
.source-sql .ln-xtra {color: #cc0; background-color: #ffc;}
.source-sql li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-sql li.li2 {font-weight: bold;}
.source-sql .kw1 {color: #993333; font-weight: bold;}
.source-sql .co1 {color: #808080; font-style: italic;}
.source-sql .co2 {color: #808080; font-style: italic;}
.source-sql .coMULTI {color: #808080; font-style: italic;}
.source-sql .es0 {color: #000099; font-weight: bold;}
.source-sql .br0 {color: #66cc66;}
.source-sql .st0 {color: #ff0000;}
.source-sql .nu0 {color: #cc66cc;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-pascal .de1, .source-pascal .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-pascal  {}
.source-pascal .head {}
.source-pascal .foot {}
.source-pascal .imp {font-weight: bold; color: red;}
.source-pascal .ln-xtra {color: #cc0; background-color: #ffc;}
.source-pascal li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-pascal li.li2 {font-weight: bold;}
.source-pascal .kw1 {color: #b1b100;}
.source-pascal .kw2 {color: #000000; font-weight: bold;}
.source-pascal .kw3 {}
.source-pascal .kw4 {color: #993333;}
.source-pascal .co1 {color: #808080; font-style: italic;}
.source-pascal .co2 {color: #339933;}
.source-pascal .coMULTI {color: #808080; font-style: italic;}
.source-pascal .es0 {color: #000099; font-weight: bold;}
.source-pascal .br0 {color: #66cc66;}
.source-pascal .st0 {color: #ff0000;}
.source-pascal .nu0 {color: #cc66cc;}
.source-pascal .me1 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-php .de1, .source-php .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-php  {}
.source-php .head {}
.source-php .foot {}
.source-php .imp {font-weight: bold; color: red;}
.source-php .ln-xtra {color: #cc0; background-color: #ffc;}
.source-php li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-php li.li2 {font-weight: bold;}
.source-php .kw1 {color: #b1b100;}
.source-php .kw2 {color: #000000; font-weight: bold;}
.source-php .kw3 {color: #000066;}
.source-php .co1 {color: #808080; font-style: italic;}
.source-php .co2 {color: #808080; font-style: italic;}
.source-php .coMULTI {color: #808080; font-style: italic;}
.source-php .es0 {color: #000099; font-weight: bold;}
.source-php .br0 {color: #66cc66;}
.source-php .st0 {color: #ff0000;}
.source-php .nu0 {color: #cc66cc;}
.source-php .me1 {color: #006600;}
.source-php .me2 {color: #006600;}
.source-php .sc0 {}
.source-php .sc1 {}
.source-php .sc2 {}
.source-php .sc3 {}
.source-php .re0 {color: #0000ff;}
.source-php .re1 {color: #ff0000}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-cfm {line-height: normal;}
.source-cfm li, .source-cfm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cfm
 * CSS class: source-cfm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cfm .de1, .source-cfm .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cfm  {}
.source-cfm .head {}
.source-cfm .foot {}
.source-cfm .imp {font-weight: bold; color: red;}
.source-cfm .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cfm li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cfm li.li2 {font-weight: bold;}
.source-cfm .kw1 {color: #990000;}
.source-cfm .kw2 {color: #000000; font-weight: bold;}
.source-cfm .kw3 {color: #0000FF;}
.source-cfm .kw4 {color: #000000; font-weight: bold;}
.source-cfm .kw5 {color: #0000FF;}
.source-cfm .kw6 {color: #0000FF}
.source-cfm .co1 {color: #808080; font-style: italic;}
.source-cfm .coMULTI {color: #808080; font-style: italic; background-color:#FFFF99;}
.source-cfm .es0 {color: #000099; font-weight: bold;}
.source-cfm .br0 {color: #0000FF;}
.source-cfm .st0 {color: #009900;}
.source-cfm .nu0 {color: #FF0000;}
.source-cfm .sc0 {color: #00bbdd;}
.source-cfm .sc1 {color: #0000FF;}
.source-cfm .sc2 {color: #000099;}
.source-cfm .sc3 {color: #333333;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); SQL injection

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
SQL injection is a code injection technique that exploits a security vulnerability occurring in the database layer of an application. The vulnerability is present when user input is either incorrectly filtered for string literal escape characters embedded in SQL statements or user input is not strongly typed and thereby unexpectedly executed. It is an instance of a more general class of vulnerabilities that can occur whenever one programming or scripting language is embedded inside another. SQL injection attacks are also known as SQL insertion attacks.[1]




Software Testing portal







Contents


1 Forms of SQL injection vulnerabilities

1.1 Incorrectly filtered escape characters
1.2 Incorrect type handling
1.3 Magic String
1.4 Vulnerabilities inside the database server
1.5 Blind SQL Injection

1.5.1 Conditional Responses
1.5.2 Conditional Errors
1.5.3 Time Delays




2 Preventing SQL Injection

2.1 Using Parameterized Statements

2.1.1 Enforcing the Use of Parameterized Statements


2.2 Using Escaping


3 Real-world examples
4 References
5 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Forms of SQL injection vulnerabilities

[edit] Incorrectly filtered escape characters
This form of SQL injection occurs when user input is not filtered for escape characters and is then passed into a SQL statement. This results in the potential manipulation of the statements performed on the database by the end user of the application.
The following line of code illustrates this vulnerability:


statement = "SELECT * FROM users WHERE name = '" + userName + "';"

This SQL code is designed to pull up the records of the specified username from its table of users. However, if the "userName" variable is crafted in a specific way by a malicious user, the SQL statement may do more than the code author intended. For example, setting the "userName" variable as


a' or 't'='t

renders this SQL statement by the parent language:


SELECT * FROM users WHERE name = 'a' OR 't'='t';

If this code were to be used in an authentication procedure then this example could be used to force the selection of a valid username because the evaluation of 't'='t' is always true.
While most SQL Server implementations allow multiple statements to be executed with one call, some SQL APIs such as php's mysql_query do not allow this for security reasons. This prevents hackers from injecting entirely separate queries, but doesn't stop them from modifying queries. The following value of "userName" in the statement below would cause the deletion of the "users" table as well as the selection of all data from the "data" table (in essence revealing the information of every user), using an API that allows multiple statements:


a';DROP TABLE users; SELECT * FROM data WHERE name LIKE '%

This input renders the final SQL statement as follows:


SELECT * FROM users WHERE name = 'a';DROP TABLE users; SELECT * FROM DATA WHERE name LIKE '%';


[edit] Incorrect type handling
This form of SQL injection occurs when a user supplied field is not strongly typed or is not checked for type constraints. This could take place when a numeric field is to be used in a SQL statement, but the programmer makes no checks to validate that the user supplied input is numeric. For example:


statement := "SELECT * FROM data WHERE id = " + a_variable + ";"

It is clear from this statement that the author intended a_variable to be a number correlating to the "id" field. However, if it is in fact a string then the end user may manipulate the statement as they choose, thereby bypassing the need for escape characters. For example, setting a_variable to


1;DROP TABLE users

will drop (delete) the "users" table from the database, since the SQL would be rendered as follows:


SELECT * FROM DATA WHERE id=1;DROP TABLE users;


[edit] Magic String
The magic string is a simple string of SQL used primarily at login pages. The magic string is


'OR''='

When used at a login page, you will be logged in as the user on top of the SQL table.

[edit] Vulnerabilities inside the database server
Sometimes vulnerabilities can exist within the database server software itself, as was the case with the MySQL server's mysql_real_escape_string() function[2]. This would allow an attacker to perform a successful SQL injection attack based on bad Unicode characters even if the user's input is being escaped.

[edit] Blind SQL Injection
Blind SQL Injection is used when a web application is vulnerable to SQL injection but the results of the injection are not visible to the attacker. The page with the vulnerability may not be one that displays data but will display differently depending on the results of a logical statement injected into the legitimate SQL statement called for that page. This type of attack can become time-intensive because a new statement must be crafted for each bit recovered. There are several tools that can automate these attacks once the location of the vulnerability and the target information has been established.[3]

[edit] Conditional Responses
One type of blind SQL injection forces the database to evaluate a logical statement on an ordinary application screen.


SELECT booktitle FROM booklist WHERE bookId = 'OOk14cd' AND 1=1

will result in a normal page while


SELECT booktitle FROM booklist WHERE bookId = 'OOk14cd' AND 1=2

will likely give a different result if the page is vulnerable to a SQL injection. An injection like this will prove that a blind SQL injection is possible, leaving the attacker to devise statements that evaluate to true or false depending on the contents of a field in another table.[4]

[edit] Conditional Errors
This type of blind SQL injection causes a SQL error by forcing the database to evaluate a statement that causes an error if the WHERE statement is true. For example,


SELECT 1/0 FROM users WHERE username='Ralph'

the division by zero will only be evaluated and result in an error if user Ralph exists.

[edit] Time Delays
Time Delays are a type of blind SQL injection that cause the SQL engine to execute a long running query or a time delay statement depending on the logic injected. The attacker can then measure the time the page takes to load to determine if the injected statement is true.

[edit] Preventing SQL Injection
To protect against SQL injection, user input must not directly be embedded in SQL statements. Instead, parameterized statements must be used (preferred), or user input must be carefully escaped or filtered.

[edit] Using Parameterized Statements
In some programming languages such as Java and .NET parameterized statements can be used that work with parameters (sometimes called placeholders or bind variables) instead of embedding user input in the statement. In many cases, the SQL statement is fixed. The user input is then assigned (bound) to a parameter. This is an example using Java and the JDBC API:


PreparedStatement prep = conn.prepareStatement("SELECT * FROM USERS WHERE USERNAME=? AND PASSWORD=?");
prep.setString(1, username);
prep.setString(2, password);

Similarly, in C#:


using (SqlCommand myCommand = new SqlCommand("SELECT * FROM USERS WHERE USERNAME=@username AND PASSWORD=HASHBYTES('SHA1', @password)", myConnection))
    {                    
        myCommand.Parameters.AddWithValue("@username", user);
        myCommand.Parameters.AddWithValue("@password", pass);
 
        myConnection.Open();
        SqlDataReader myReader = myCommand.ExecuteReader())
        ...................
    }

In PHP version 5 and above, you have multiple choices for using parameterized statements. The easiest is to use the PDO[5] database layer:


$db = new PDO('pgsql:dbname=database');
$stmt = $db->prepare("SELECT priv FROM testUsers WHERE username=:username AND password=:password");
$stmt->bindParam(':username', $user);
$stmt->bindParam(':password', $pass);
$stmt->execute();

Alternatively, you could use a vendor-specific method. For example in MySQL 4.1 and above with the mysqli[6] extension. Example[7]:


$db = new mysqli("localhost", "user", "pass", "database");
$stmt = $db -> prepare("SELECT priv FROM testUsers WHERE username=? AND password=?");
$stmt -> bind_param("ss", $user, $pass);
$stmt -> execute();

In ColdFusion, the CFQUERYPARAM statement is useful in conjunction with the CFQUERY statement to nullify the effect of SQL code passed within the CFQUERYPARAM value as part of the SQL clause.[8] [9]. An example is below.


<cfquery name="Recordset1" datasource="cafetownsend">
SELECT *
FROM COMMENTS
WHERE COMMENT_ID =<cfqueryparam value="#URL.COMMENT_ID#" cfsqltype="cf_sql_numeric">
</cfquery>


[edit] Enforcing the Use of Parameterized Statements
There are two ways to ensure an application is not vulnerable to SQL injection: using code reviews (which is a manual process), and enforcing the use of parameterized statements. Enforcing the use of parameterized statements means that SQL statements with embedded user input are rejected at runtime. Currently only the H2 Database Engine supports this feature.

[edit] Using Escaping
A straight-forward, though error-prone way to prevent injections is to escape dangerous characters. One of the reasons for it being error prone is that it is a type of blacklist which is less robust than a whitelist. For instance, every occurrence of a single quote (') in a parameter must be replaced by two single quotes ('') to form a valid SQL string literal. In PHP, for example, it is usual to escape parameters using the function mysql_real_escape_string before sending the SQL query:


$query = sprintf("SELECT * FROM Users where UserName='%s' and Password='%s'", 
                  mysql_real_escape_string($Username), 
                  mysql_real_escape_string($Password));
mysql_query($query);

Here is an example of a custom escaping based sql injection filter. It doesn't rely on built in escaping functions:


<?php
$title = $_POST['title']; // user input from site
$description = $_POST['description']; // user input from site
 
// define the cleaner
 
$dirtystuff = array("\"", "\\", "/", "*", "'", "=", "-", "#", ";", "<", ">", "+", "%");
 
// clean user input (if it finds any of the values above, it will replace it with whatever is in the quotes - in this example, it replaces the value with nothing)
 
$title = str_replace($dirtystuff, "", $title); // works!
$description = str_replace($dirtystuff, "", $description); // works!
 
// input: I\ "like/ green<** veg'et=a-bles> ;and< pizza**
// output: I like green vegetables and pizza
 
// input: a';DROP TABLE users; SELECT * FROM data WHERE name LIKE '%
// output: aDROP TABLE users SELECT FROM data WHERE name LIKE 
 
?>


This sort of escaping is error-prone as it relies on the programmer to escape every parameter. Also, if the escape function (either custom or built-in in the language) fails to handle a special character correctly, an injection is still possible.

[edit] Real-world examples

On October 26, 2005, Unknown Heise readers replaced a page owned by the German TV station ARD which advertised a pro-RIAA sitcom with Goatse using SQL injection[10]


On November 1, 2005, a high school student used a SQL injection to break into the site of a Taiwanese information security magazine from the Tech Target group and steal customers' information.[11]


On January 13, 2006, Russian hackers broke into a Rhode Island government web site and allegedly stole credit card data from individuals who have done business online with state agencies.[12]


On March 29, 2006, Susam Pal discovered a SQL injection flaw in an official Indian government tourism site.[13]


On March 2, 2007, Sebastian Bauer discovered a SQL injection flaw in the knorr.de login page.[14]


On June 29, 2007, Hacker Defaces Microsoft U.K. Web Page using SQL injection. [15][16]. U.K. website The Register quoted a Microsoft spokesperson acknowledging the problem.


In January 2008, tens of thousands of PCs were infected by an automated SQL injection attack that exploited a vulnerability in Microsoft SQL Server. [17]


On April 13, 2008, Sexual and Violent Offender Registry of Oklahoma shuts down site for 'routine maintenance' after being informed that 10,597 social security numbers from sex offenders had been downloaded by SQL injection [18]


In May 2008, a server farm inside China used automated queries to Google's search engine to identify SQL server websites which were vulnerable to the attack of an automated SQL injection tool. [17][19]


In July 2008, Kaspersky's Malaysian site was hacked by a Turkish hacker going by the handle of "m0sted", who claimed to have used SQL injection. [20]


In 2008, at least April through August, a sweep of attacks began exploiting the SQL injection vulnerabilities of Microsoft's IIS web server and SQL Server database server. The attack doesn't require guessing the name of a table or column, and corrupts all text columns in all tables in a single request. [21] A HTML string that references a malware JavaScript file is appended to each value. When that database value is later displayed to a website visitor, the script attempts several approaches at gaining control over a visitor's system. The number of exploited web pages is estimated at 500,000[22]


[edit] References


^ Watson, Carli (2006) Beginning C# 2005 databases ISBN 978-0-470-04406-3, pages 201-5
^ "E.1.7. Changes in MySQL 5.0.22 (24 May 2006)". MySQL AB. 2006-05-04. http://dev.mysql.com/doc/refman/5.0/en/news-5-0-22.html. Retrieved on 2008-05-16. , "An SQL-injection security hole has been found in multi-byte encoding processing", retrieved March 20, 2008
^ "Absinthe" tool or "SQLBrute" tool

"Using SQLBrute to brute force data from a blind SQL injection point". Justin Clarke. http://www.justinclarke.com/archives/2006/03/sqlbrute.html. Retrieved on 2008-10-18. 


^ Ofer Maor and Amichai Shulman. "Blind SQL Injection: Getting the syntax right". Imperva. http://www.imperva.com/resources/adc/blind_sql_server_injection.html#getting_syntax_right. Retrieved on 2008-05-16.  "This is usually the trickiest part in the blind SQL injection process. If the original queries are simple, this is simple as well. However, if the original query was complex, breaking out of it may require a lot of trial and error."
^ Official documentation for the PDO extension, php.net.
^ Official documentation for Mysqli extension, php.net.
^ Prepared Statements in PHP and MySQLi, Matt Bango.
^ Protecting ColdFusion server behaviors from SQL injection vulnerability
^ Forta.com - Blog
^ "Adelheid und ihre Hacker". heise online. 2005-10-27. http://www.heise.de/newsticker/meldung/65441. Retrieved on 2008-05-16.  (German)
^ "WHID 2005-46: Teen uses SQL injection to break to a security magazine web site". Web Application Security Consortium. 2005-11-01. http://www.webappsec.org/projects/whid/list_id_2005-46.shtml. Retrieved on 2008-05-16. 
^ "WHID 2006-3: Russian hackers broke into a RI GOV website". Web Application Security Consortium. 2006-01-13. http://www.webappsec.org/projects/whid/list_id_2006-3.shtml. Retrieved on 2008-05-16. 
^ "WHID 2006-27: SQL Injection in incredibleindia.org". Web Application Security Consortium. 2006-03-29. http://www.webappsec.org/projects/whid/list_id_2006-27.shtml. Retrieved on 2008-05-16. 
^ "WHID 2007-12: SQL injection at knorr.de login page". Web Application Security Consortium. 2007-03-02. http://www.webappsec.org/projects/whid/list_id_2007-12.shtml. Retrieved on 2008-05-16. 
^ Robert (2007-06-29). "Hacker Defaces Microsoft U.K. Web Page". cgisecurity.net. http://www.cgisecurity.net/2007/06/hacker-defaces.html. Retrieved on 2008-05-16. 
^ Keith Ward (2007-06-29). "Hacker Defaces Microsoft U.K. Web Page". Redmond Channel Partner Online. http://rcpmag.com/news/article.aspx?editorialsid=8762. Retrieved on 2008-05-16. 
^ a b Sumner Lemon, IDG News Service (2008-05-19). "Mass SQL Injection Attack Targets Chinese Web Sites". PCWorld. http://www.pcworld.com/businesscenter/article/146048/mass_sql_injection_attack_targets_chinese_web_sites.html. Retrieved on 2008-05-27. 
^ Alex Papadimoulis (2008-04-15). "Oklahoma Leaks Tens of Thousands of Social Security Numbers, Other Sensitive Data". The Daily WTF. http://thedailywtf.com/Articles/Oklahoma-Leaks-Tens-of-Thousands-of-Social-Security-Numbers,-Other-Sensitive-Data.aspx. Retrieved on 2008-05-16. 
^ Michael Zino (2008-05-01). "ASCII Encoded/Binary String Automated SQL Injection Attack". http://www.bloombit.com/Articles/2008/05/ASCII-Encoded-Binary-String-Automated-SQL-Injection.aspx. 
^ "Kaspersky’s Malaysian site hacked by Turkish hacker". http://blogs.zdnet.com/security/?p=1516. 
^ Giorgio Maone (2008-04-26). "Mass Attack FAQ". http://hackademix.net/2008/04/26/mass-attack-faq/. 
^ Gregg Keizer (2008-04-25). "Huge Web hack attack infects 500,000 pages". http://www.computerworld.com/action/article.do?command=viewArticleBasic&articleId=9080580. 



[edit] External links

SQL Injection WASC Threat Classification Entry, by the Web Application Security Consortium
SQL Injections on PHP, GNU-licensed online book chapter
Advanced SQL injection on SQL server / ASP pages, 2002 second part
SQL Server vulnerabilities
SQL Injection Defenses - Parameterized Queries, Security Guidance from OWASP
Guidance from OWASP on how to prevent SQL Injection - The SQL Injection Prevention Cheat Sheet
Secure your ColdFusion application against SQL Injection attacks - Article from Adobe Developer Connection, ColdFusion Developer Center




Retrieved from "http://en.wikipedia.org/wiki/SQL_injection"
Categories: Data management | Computer security exploits | Injection exploits | SQL | Articles with example SQL code 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Česky
Dansk
Deutsch
Español
Français
Bahasa Indonesia
Italiano
עברית
ქართული
Latviešu
Nederlands
日本語
Polski
Русский
Suomi
Svenska
中文









 This page was last modified on 14 April 2009, at 01:01 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
