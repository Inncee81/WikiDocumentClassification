













8b/10b encoding - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "8b/10b_encoding";
		var wgTitle = "8b/10b encoding";
		var wgAction = "view";
		var wgArticleId = "566484";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 275952873;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); 8b/10b encoding

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In telecommunications, 8b/10b is a line code that maps 8-bit symbols to 10-bit symbols to achieve DC-balance (see DC coefficient) and bounded disparity, and yet provide enough state changes to allow reasonable clock recovery. This means that the difference between the count of 1s and 0s in a string of at least 20 bits is no more than 2, and that there are not more than five 1s or 0s in a row. This helps to reduce the demand for the lower bandwidth limit of the channel necessary to transfer the signal.




Contents


1 History
2 Technologies that use 8b/10b

2.1 Digital audio
2.2 Exceptions


3 How it works

3.1 Encoding tables

3.1.1 Running Disparity
3.1.2 5b/6b
3.1.3 3b/4b
3.1.4 Control symbols




4 External links
5 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The code was described in 1983 by Al Widmer and Peter Franaszek in the IBM Journal of Research and Development. IBM was issued a patent for the scheme the following year. IBM's patent notwithstanding, the method, implementation and goals are very similar to Group Code Recording (GCR), used by IBM in its 3400 Series 6250 cpi 9-track tape drives introduced with its System/370 in 1970, by Apple in the floppy disk controller of its Apple II series introduced in 1978, and by Commodore in the floppy disk controller of the Commodore 2040 introduced in 1979.

[edit] Technologies that use 8b/10b
Now that the IBM patent has expired, the scheme has become even more popular and is the default DC-free line code for new standards.
Among the areas in which 8B/10B encoding finds application are

PCI Express
IEEE 1394b
Serial ATA
SAS
Fibre Channel
SSA
Gigabit Ethernet (except for the twisted pair based 1000Base-T)
InfiniBand
XAUI
Serial RapidIO
DVI and HDMI (Transition Minimized Differential Signaling)
DVB Asynchronous Serial Interface (ASI)
DisplayPort Main Link
HyperTransport
Common Public Radio Interface (CPRI)
USB 3.0


[edit] Digital audio
The encoding has found a heavy use in digital audio applications which use this modulation scheme:

Digital Audio Tape
Digital Compact Cassette (DCC).

A differing but related scheme is used for audio and data CDs:

Compact Disc Eight-to-Fourteen Modulation


[edit] Exceptions
For 10 Gigabit Ethernet's 10GBASE-R Physical Medium Dependent (PMD) interfaces, 64b/66b encoding is used. This scheme is considerably different in design to 8b/10b encoding, but was created with similar considerations of DC balance, maximum run length, transition density and electromagnetic emission minimisation.
Note that 8b/10b is the encoding scheme, not a specific code. While many applications do use the same code, there exist some incompatible implementations; for example, Transition Minimized Differential Signaling, which also expands 8 bits to 10 bits, has some subtle differences.

[edit] How it works
As the scheme name suggests, 8 bits of data are transmitted as a 10-bit entity called a symbol, or character. The low 5 bits of data are encoded into a 6-bit group (the 5b/6b portion) and the top 3 bits are encoded into a 4-bit group (the 3b/4b portion). These code groups are concatenated together to form the 10-bit symbol that is transmitted on the wire. The data symbols are often referred to as D.x.y where x ranges from 0–31 and y from 0–7. Standards using the 8b/10b encoding also define up to 12 special symbols (or control characters) that can be sent in place of a data symbol. They are often used to indicate start-of-frame, end-of-frame, link idle, skip and similar link-level conditions. At least one of them (i.e. a "comma" symbol) needs to be used to define the alignment of the 10 bit symbols. They are referred to as K.x.y and have different encodings from any of the D.x.y symbols.
Because 8b/10b encoding uses 10-bit symbols to encode 8-bit words, some of the possible 1024 codes can be excluded to grant a run-length limit of 5 consecutive equal bits and grant that the difference of the count of 0s and 1s is no more than 2. Some of the 256 possible 8-bit words can be encoded in two different ways. Using these alternative encodings, the scheme is able to effect long-term DC-balance in the serial data stream. This permits the data stream to be transmitted through a channel with a high-pass characteristic, for example Ethernet's transformer-coupled unshielded twisted pair or optical receivers using automatic gain control.
The encoding is normally done entirely in hardware. Upper layers of the software stack should be "unaware" that this encoding is being used.

[edit] Encoding tables
Note that in the following tables, "A" and "a" are the least significant bit. The bits are sent low to high: a → b → c → d → e → i → f → g → h → j (i.e. the 5b/6b code followed by the 3b/4b code). With that the uniqueness of the special bit sequence in the comma codes is ensured.
The residual effect on the stream to the number of zero and one bits transmitted is maintained as the Running Disparity (RD) and the effect of slew is balanced by the choice of encoding for following symbols.
Each 6- or 4-bit code word has either equal numbers of '0' and '1' bits (a disparity of 0), or comes in a pair of forms, one with two more '1' bits than '0' bits (four '1' bits and two '0' bits, or three '1' bits and one '0' bit, respectively) and one with two less. When a 6 or 4 bit code is used that has a non-zero disparity (count of '1' bits minus count of '0' bits, i.e. −2 or +2), the choice of positive or negative disparity encodings must be the one that toggles the running disparity. I.e. the non zero disparity codes alternate.

[edit] Running Disparity
Running Disparity is a concept used in the 8b/10b encoding to keep the number of 1s and 0s that are transmitted "down the wire" roughly equal.
This scheme only needs two states for Running Disparity of +1 and −1. It starts at −1.[1]
For each 5b/6b and 3b/4b code with an unequal number of 1s and 0s, there are two bit patterns that can be used to transmit it: One with two more 1 bits and one with all bits inverted and thus two more 0s. Depending on the current running disparity of the signal, the encoding engine selects which of the two possible 6 or 4 bit sequences to send for the given data. (Obviously, if the 6 or 4 bit code has equal numbers of 1s and 0s, there is no choice to make, as the disparity would be unchanged.)

Rules for Running Disparity

Previous RD
Disparity of 6 or 4 Bit Code
Disparity chosen
Next RD


−1
 0
 0
−1


−1
±2
+2
+1


+1
 0
 0
+1


+1
±2
−2
−1



[edit] 5b/6b

5B/6B code

input
RD = −1
RD = +1

input
RD = −1
RD = +1



EDCBA
abcdei

EDCBA
abcdei


D.00
00000
100111
011000
D.16
10000
011011
100100


D.01
00001
011101
100010
D.17
10001
100011


D.02
00010
101101
010010
D.18
10010
010011


D.03
00011
110001
D.19
10011
110010


D.04
00100
110101
001010
D.20
10100
001011


D.05
00101
101001
D.21
10101
101010


D.06
00110
011001
D.22
10110
011010


D.07
00111
111000
000111
D.23 †
10111
111010
000101


D.08
01000
111001
000110
D.24
11000
110011
001100


D.09
01001
100101
D.25
11001
100110


D.10
01010
010101
D.26
11010
010110


D.11
01011
110100
D.27 †
11011
110110
001001


D.12
01100
001101
D.28
11100
001110


D.13
01101
101100
D.29 †
11101
101110
010001


D.14
01110
011100
D.30 †
11110
011110
100001


D.15
01111
010111
101000
D.31
11111
101011
010100



K.28
11100
001111
110000


† Same code is used for K.x.7

[edit] 3b/4b

3b/4b code

input
RD = −1
RD = +1

input
RD = −1
RD = +1



HGF
fghj

HGF
fghj


D.x.0
000
1011
0100
K.x.0
000
1011
0100


D.x.1
001
1001
K.x.1 ‡
001
0110
1001


D.x.2
010
0101
K.x.2 ‡
001
1010
0101


D.x.3
011
1100
0011
K.x.3
011
1100
0011


D.x.4
100
1101
0010
K.x.4
100
1101
0010


D.x.5
101
1010
K.x.5 ‡
001
0101
1010


D.x.6
110
0110
K.x.6 ‡
001
1001
0110


D.x.P7 †
111
1110
0001





D.x.A7 †
111
0111
1000
K.x.7 † ‡
111
0111
1000


† For D.x.7, the Primary (D.x.P7) or Alternate (D.x.A7) encoding must be selected in order to avoid a run of five consecutive 0s or 1s when combined with the preceding 5b/6b code. Sequences of five identical bits are used in comma codes for synchronization issues. D.x.A7 is only used for x=17, x=18, and x=20 when RD=−1 and for x=11, x=13, and x=14 when RD=+1. With x=23, x=27, x=29, and x=30, the same code forms the control codes K.x.7. Any other x.A7 code can't be used as it would result in chances for misaligned comma sequences.
‡ The alternate encoding for the K.x.y codes with disparity 0 allow for K.28.1, K.28.5, and K.28.7 to be "comma" codes that contain a bit sequence that can't be found elsewhere in the data stream.

[edit] Control symbols
The control symbols within 8b/10b are 10b bytes that are valid sequences of bits (no more than six 1s or 0s) but do not have a corresponding 8b data byte. They are used for low-level control functions. For instance, in Fibre Channel, K28.5 is used at the beginning of four-byte sequences (called "Ordered Sets") that perform functions such as Loop Arbitration, Fill Words, Link Resets, etc.
Resulting from the 5b/6b and 3b/4b tables the following 12 control symbols are allowed to be sent:

Control symbols

input
RD = −1
RD = +1



HGF EDCBA
abcdei fghj
abcdei fghj


K.28.0
000 11100
001111 0100
110000 1011


K.28.1 †
001 11100
001111 1001
110000 0110


K.28.2 
010 11100
001111 0101
110000 1010


K.28.3 
011 11100
001111 0011
110000 1100


K.28.4 
100 11100
001111 0010
110000 1101


K.28.5 †
101 11100
001111 1010
110000 0101


K.28.6 
110 11100
001111 0110
110000 1001


K.28.7 ‡
111 11100
001111 1000
110000 0111


K.23.7 
111 10111
111010 1000
000101 0111


K.27.7 
111 11011
110110 1000
001001 0111


K.29.7 
111 11101
101110 1000
010001 0111


K.30.7 
111 11110
011110 1000
100001 0111


† Within the control symbols, K.28.1, K.28.5, and K.28.7 are "comma symbols". Comma symbols are used for synchronization (finding the alignment of the 8b/10b codes within a bit-stream). If K.28.7 is not used, the unique comma sequences 0011111 or 1100000 cannot be found at any bit position within any combination of normal codes.
‡ If K.28.7 is allowed in the actual coding, a more complex definition of the synchronization pattern than suggested by † needs to be used, as a combination of K.28.7 with several other codes forms a false misaligned comma symbol overlapping the two codes. A sequence of multiple K.28.7 codes is not allowable in any case, as this would result in undetectable misaligned comma symbols.
K.28.7 is the only comma symbol that cannot be the result of a single bit error in the data stream.

[edit] External links

Original paper by Franaszek and Widmer.
U.S. Patent 4,486,739  (expired June 30, 2002)


[edit] References


^ Thatcher, Jonathan (1996-04-01). "Thoughts on Gigabit Ethernet Physical". IBM. http://grouper.ieee.org/groups/802/3/z/public/presentations/mar1996/JTtgep.txt. Retrieved on 2008-08-17. 





Retrieved from "http://en.wikipedia.org/wiki/8b/10b_encoding"
Categories: Computer and telecommunication standards | Line codes 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Ελληνικά
Español
Français
日本語
Português









 This page was last modified on 9 March 2009, at 02:50.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
