













Comparison of programming languages - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Comparison_of_programming_languages";
		var wgTitle = "Comparison of programming languages";
		var wgAction = "view";
		var wgArticleId = "3406469";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283004007;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Comparison of programming languages

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


This article is part of the
Programming Language Comparison
series.


General Comparison


Basic Syntax


Basic Instructions


Arrays


Associative arrays


String Operations


String Functions


List comprehension


Object-oriented programming


Object-oriented constructors


Database access


Database RDBMS




Evaluation strategy


List of "hello world" programs






Comparison of ALGOL 68 and C++


Compatibility of C and C++


Comparison of Pascal and Borland Delphi


Comparison of Pascal and C


Comparison of Java and C++


Comparison of Java and C#


Comparison of C# and Visual Basic .NET


Comparison of ABAP and Java



This box: view • talk • edit




Programming languages are used for controlling the behavior of a machine (often a computer). Like natural languages, programming languages conform to rules for syntax and semantics.
There are thousands of programming languages[1] and new ones are created every year. Few languages ever become sufficiently popular that they are used by more than a few people, but professional programmers can easily use dozens of different languages during their career.




Contents


1 General comparison
2 Type systems
3 Failsafe I/O and system calls
4 Expressiveness
5 Benchmarks
6 See also
7 References
8 Further reading
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>



[edit] General comparison
The following table compares general and technical information for a selection of commonly used programming languages. See the individual languages' articles for further information. Please note that the following table may be missing some information.


Language
Intended use
Paradigm(s)
Standardized?


ActionScript 3.0
Web, client-side
imperative, object-oriented, event-driven
Yes, ECMA


Ada
Application, Embedded and Realtime
imperative, concurrent, distributed[2], generic, object-oriented
Yes, ANSI, ISO, GOST 27831-88 [3]


ALGOL 58
Application
imperative
No


ALGOL 60
Application
imperative
Yes, ISO[4]


ALGOL 68
Application
imperative, concurrent
Yes, GOST 27974-88[5]


APL
Application, Data processing
array-oriented, tacit
Yes, ISO


Assembly language
General

No


AutoIt
Highly domain-specific, GUI automation(macros)
imperative, procedural
No


BASIC
Application, Education
imperative, procedural
Yes, ANSI, ISO


BeanShell
Application, Scripting
imperative, object-oriented, functional, reflective
In progress, JCP[6]


BLISS
System
procedural
No


Boo
Application

No


C
System [7]
imperative
Yes, ANSI C89, ISO C90/C99


C++
Application, System
imperative, object-oriented, generic
Yes, ISO


C#
Application
imperative, object-oriented, functional, generic, reflective
Yes, ECMA, ISO[8]


Clean
General
functional, generic
No


Clojure
General
functional
No


COBOL
Application, Business
imperative, object-oriented
Yes


ColdFusion
Web Development
procedural, object-oriented
No


Common Lisp
General
imperative, functional, object-oriented
Yes


Curl

imperative, event-driven, functional, object-oriented, generic, reflective
No


D
Application; System
imperative, object-oriented, generic
No


Dylan
Application
functional, object-oriented
No


Eiffel
Application
imperative, object-oriented, generic
Yes, ECMA, ISO[9]


Erlang
Application, Distributed and Telecom
functional, concurrent, distributed
No


Factor

stack-oriented
No


FP

functional
No


F#
Application
imperative, functional, object-oriented, generic
No


Forth
General
imperative, stack-oriented
Yes, ANSI


FORTRAN
Application, scientific and engineering
imperative, procedural, object-oriented
Yes


Game Maker Language
Application, games
imperative, object-oriented, event-driven
No


GraphTalk

logic-oriented, object-oriented
No


Groovy
Application
imperative, object-oriented, aspect-oriented
No


Haskell
Application
functional, generic, lazy evaluation
Yes, Haskell 98[10]


Io
Application, Host-driven Scripting
imperative, object-oriented
No


J
Data processing
array-oriented, function-level, tacit
No


Java
Application, Web
imperative, object-oriented, generic, reflective
No


JavaScript
Web, client-side
imperative, object-oriented, functional, reflective
Yes, ECMA


Joy
research
functional, stack-oriented
No


LabVIEW





Lua
Embedded scripting; Application
imperative, object-oriented, functional, aspect-oriented, reflective
No[11]


Mathematica
Highly domain-specific, Math
procedural, functional
No


MATLAB M-code
Highly domain-specific, Math
imperative, object-oriented
No


Modula-2
Application
imperative, generic
Yes, ISO[12]


Modula-3
Application
imperative, object-oriented, generic
No


Oberon
Application, System
imperative, object-oriented
No


Objective-C
Application
imperative, object-oriented, reflective
Yes


Objective Caml
Application
imperative, object-oriented, functional, generic
No


Object Pascal (Delphi)
Application
imperative, object-oriented, generic, event-driven
No


Oxygene
Application
imperative, object-oriented, generic
No


Oz
Education
imperative, logic, functional, object-oriented, concurrent
No


Pascal
Application, Education
imperative, procedural
Yes, ISO[13]


Pawn
Embedded, Host-driven Scripting
imperative
No


Perl
Application, Text processing, Scripting, Web
imperative, procedural, reflective, functional, object-oriented, generic
No


PHP
Web, server-side
imperative, procedural, object-oriented, reflective
No


PL/I
Application, COBOL's and Fortran's original domain
imperative, object-oriented
Yes


Prolog
Application, Artificial intelligence
logic
Yes, ISO


Python
Application, Scripting, Web
imperative, object-oriented, functional, aspect-oriented, reflective
No[14]


REALbasic
Application




REBOL
Distributed computing
imperative, prototype-based, functional, dialected
No


RPG
Application




Ruby
Application, Scripting, Web
imperative, object-oriented, aspect-oriented, reflective, functional
No


S
Application, Statistics
imperative, procedural, functional, object-oriented
No


S-Lang
Application, Scripting, Numerical
imperative, procedural
No


Scala
Application
object-oriented, functional, generic
No


Scheme
General, Education
functional



Simula
General, Education
imperative, object-oriented, event-driven, discrete event simulation, multi-threaded (quasi-parallel) program execution
Yes


Smalltalk
Application, Education
imperative, object-oriented, concurrent, event-driven, declarative
Yes, ANSI


SNOBOL
Text processing




Standard ML
Application
imperative, functional, generic
YesSML '97[15]


Tcl
Application, Scripting
imperative, procedural, event-driven
No


Visual Basic
Application, Education
component-oriented, event-driven
No


Visual Basic .NET
Application, Education
object-oriented, event-driven
No


Visual Prolog
Application
imperative, declarative, logical, object-oriented, functional, event-driven
No


Windows PowerShell
Administration
imperative, object-oriented, functional, pipeline, reflective
No


XL

imperative, concept programming, object-oriented
No


Language
Intended use
Paradigm(s)
Standardized?



[edit] Type systems
Brief Definitions

Compatibility among composite types is how functions are applied to data typed similarly to its intended type. Name-based compatibility means that functions are only applied to data of its intended type and declared subtypes.
Type checking is how type errors are checked. Static checking occurs at compile-time. Dynamic checking occurs at run-time.



Language
Type strength
Type safety
Expression of types
Compatibility among composite types
Type checking


ActionScript 3.0
strong
safe


static


Ada
strong
safe
explicit
name-based
static and dynamic


ALGOL 58
strong
safe
explicit

static


ALGOL 60
strong
safe
explicit

static


ALGOL 68
strong
safe
explicit
property-based
static


APL
strong
safe


dynamic


BASIC
varies by dialect






BLISS
none
n/a
n/a
n/a
n/a


BeanShell
strong
safe

name-based
dynamic


Boo
strong
safe
implicit with optional explicit typing

static with optional dynamic typing


C
weak
unsafe
explicit
name-based
static


C++ (ISO/IEC 14882)
strong
unsafe
explicit
name-based
static with optional dynamic type casting (see dynamic cast)


C#
strong
unsafe1
explicit
name-based
static with optional dynamic type (see dynamic member lookup)


Clean
strong

implicit

static


Clojure
strong
safe


dynamic


COBOL
strong



static


ColdFusion
strong
safe
implicit

dynamic


Common Lisp
strong
safe


dynamic


Curl
strong
safe

name-based



D
strong
unsafe1
explicit
name-based
static


Dylan
strong
safe


dynamic


Eiffel
strong
safe

name-based
static


Erlang
strong



dynamic


F#
strong
safe
implicit
name-based
static


Forth
none
n/a
n/a
n/a
n/a


FORTRAN
strong
safe
explicit
name-based
static


GraphTalk
weak






Groovy
strong
safe
implicit

dynamic


Haskell
strong
safe
implicit with optional explicit typing
property-based
static


Io
strong



dynamic


J
strong
safe


dynamic


Java
strong
unsafe1 [16]
explicit
name-based
static


JavaScript
weak

implicit

dynamic


Joy
strong
safe


dynamic


Lua
strong
safe
implicit

dynamic


Mathematica
strong



dynamic


MATLAB M-code




dynamic


Modula-2
strong
unsafe1
explicit
property-based
static


Modula-3
strong
unsafe1
explicit
property-based
static


Oberon
strong
safe
explicit

static


Objective-C
weak

explicit

static


Objective Caml
strong
safe
implicit with optional explicit typing
property-based
static


Object Pascal (Delphi)
strong
unsafe1
explicit
name-based
static


Oxygene
strong
unsafe
implicit

static


Oz




dynamic


Pascal
strong
unsafe1
explicit
name-based
static


Perl 5
weak

implicit

dynamic


Perl 6


partially implicit (explicit for static types)

dynamic with optional static typing


PHP
weak

implicit

dynamic


Prolog
strong



dynamic


Python
strong
safe
implicit
property-based
dynamic


REBOL
strong
safe
implicit

dynamic


Ruby
strong
safe
implicit
property-based
dynamic


S
strong



dynamic


S-Lang
strong
safe
implicit

dynamic


Scala
strong

partially implicit

static


Scheme
strong

implicit

dynamic (latent)


Simula
strong
safe


static (optional for formal and virtual procedures)


Smalltalk
strong
safe
implicit

dynamic


Standard ML
strong
safe
implicit with optional explicit typing
property-based
static


Tcl




dynamic


Visual Basic
strong
safe
explicit
name-based
static


Visual Basic .NET
strong
unsafe1
explicit

static


Visual Prolog
strong
safe

name-based
static


Windows PowerShell
strong
safe
implicit

dynamic


XL
strong
safe

name-based
static


Language
Type strength
Type safety
Expression of types
Compatibility among composite types
Type checking


1It is almost safe, unsafe features are not commonly used.

[edit] Failsafe I/O and system calls
Most programming languages will print an error message and/or throw an exception if an input/output operation or other system call (e.g., chmod, kill) fails, unless the programmer has explicitly arranged for different handling of these events. Thus, these languages fail safely in this regard.
Some (mostly older) languages require that the programmer explicitly add checks for these kinds of errors. It is common for novice programmers to forget to add these checks, and even experts occasionally do so—these omissions can lead to erroneous behavior.


Language
Failsafe I/O


Ada
Yes (exceptions)


C
No (though gcc can warn on unchecked error status)


C++
No (though gcc can warn on unchecked error status)


C#
Yes


D
Yes ?


Erlang
 ?


Haskell
Yes


Java
Yes


Lua
No (some functions do not warn or throw exceptions)


Mathematica
 ?


Objective Caml
Yes ?


Object Pascal (Delphi)
 ?


Perl
No


PHP
Yes


Python
Yes


REBOL
Yes


Ruby
Yes


S
 ?


Scala
Yes ?


Standard ML
Yes ?


Tcl
No


Visual Basic
Yes


Visual Prolog
Yes


Language
Failsafe I/O



[edit] Expressiveness


Language
Statements ratio[17]
Lines ratio[18]


C
1
1


C++
2.5
1


FORTRAN
2.5
0.8


Java
2.5
1.5


Perl
6
6


Smalltalk
6
6.25


Python
6
6.5


The literature on programming languages contains an abundance of informal claims about their relative expressive power, but there's no framework for formalizing such statements nor for deriving interesting consequences.[19] This chart provides two measures of expressiveness from two different sources. An additional measure of expressiveness, in GZip bytes, can be found with the Compare to tool on the Computer Language Benchmarks Game [20]


[edit] Benchmarks
Benchmarks are designed to mimic a particular type of workload on a component or system. The computer programs used for compiling some of the benchmark data in this section may not have been fully optimized, and the relevance of the data is disputed. The most accurate benchmarks are those that are customized to your particular situation. Other people's benchmark data may have some value to others, but proper interpretation brings many challenges. See this page about flawed benchmarks and comparisons. The Computer Language Benchmarks Game site contains a large number of micro-benchmarks of reader-contributed code snippets, with an interface that generates various charts and tables comparing specific programming languages and types of tests.

[edit] See also

Alphabetical list of programming languages
Comparison of basic instructions of programming languages
Educational programming language
Programming language


[edit] References


^ As of May 2006 Diarmuid Pigott's Encyclopedia of Computer Languages hosted at Murdoch University, Australia lists 8512 computer languages.
^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3 Annex E: Distributed Systems
^ http://vak.ru/lib/exe/fetch.php/book/gost/pdf/gost-27831-88.pdf
^ ISO 1538:1984
^ http://vak.ru/lib/exe/fetch.php/book/gost/pdf/gost-27974-88.pdf
^ JSR 274
^ http://cm.bell-labs.com/cm/cs/who/dmr/chist.html
^ ECMA-334; ISO/IEC 23270:2006
^ ECMA-367; ISO/IEC 25436:2006
^ "The Haskell 98 Language Report". http://www.haskell.org/onlinereport/. Retrieved on 2009-03-07.  Most Haskell implementations extend the Haskell 98 standard.
^ Version releases are accompanied with a definitive Lua Reference Manual showing full syntax and semantics; a reference implementation, and a test suite. These are used to generate other Lua VM implementations and compilers such as Kahlua and LLVM-Lua.
^ ISO/IEC 10514-1:1996
^ ISO 7185
^ Language changes are done using a formally documented procedure, starting with a Python Enhancement Proposal (PEP)s. Python version releases are accompanied with a Language Reference Manual showing syntax and semantics; a reference implementation, and test suite. These are used to generate other Python implementations such as Jython and IronPython.
^ http://www.smlnj.org/sml97.html
^ http://www.cis.upenn.edu/~bcpierce/courses/629/papers/Saraswat-javabug.html
^ Data from Code Complete. The Statements ratio column "shows typical ratios of source statements in several high-level languages to the equivalent code in C. A higher ratio means that each line of code in the language listed accomplishes more than does each line of code in C.
^ The ratio of line count tests won by each language to the number won by C when using the Compare to feature at http://shootout.alioth.debian.org/debian/c.php. Last updated May, 2006. C gcc was used for C, C++ g++ was used for C++, FORTRAN G95 was used for FORTRAN, Java JDK Server was used for Java, and Smalltalk GST was used for Smalltalk.
^ From On the Expressive Power of Programming Languages, Matthias Felleisen, ESOP '90 3rd European Symposium on Programming.
^ Computer Language Benchmarks Game .



[edit] Further reading

Cezzar, Ruknet. A Guide to Programming Languages: Overview and Comparison. ISBN 978-0890068120. 


[edit] External links

99-bottles-of-beer.net One program in over a thousand variations and multiple languages.
The Computer Language Benchmarks Game at Alioth
Comparison of syntaxes with sample codes.
Syntax Across Languages
Programming Language Comparison — A comparison of nine programming languages and related information.
Scriptometer scores — Multiple comparisons of 26 programming languages.
Comparing Web Languages in Theory and Practice — PDF — Research to fulfill Kristofer J. Carlson's master's degree requirements.
PLEAC Programming Language Examples Alike Cookbook.
TIOBE Programming Community Index The TIOBE Programming Community index gives an indication of the popularity of programming languages.
OHLOH Language Statistics The programming languages page on Ohloh gives an actively updated indication of the popularity of programming languages in open-source projects.
History of Programming Language Statements History and Comparing Programming Languages.




Retrieved from "http://en.wikipedia.org/wiki/Comparison_of_programming_languages"
Categories: Programming language comparisons | Programming language topics 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


한국어
हिन्दी
Bahasa Melayu
日本語
Português
Русский









 This page was last modified on 10 April 2009, at 16:48 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
