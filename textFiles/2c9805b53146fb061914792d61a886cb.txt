













Package management system - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Package_management_system";
		var wgTitle = "Package management system";
		var wgAction = "view";
		var wgArticleId = "47017";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282674698;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Package management system

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




Illustration of a package management system being used to download new software. A typical manual action requested is restarting the computer.






Synaptic, one of the most widely used graphical frontends for package management in Linux.






Aptitude, a package management system, resolving the dependencies of ldm, a software package selected for installation.


A package management system is a collection of tools to automate the process of installing, upgrading, configuring, and removing software packages from a computer. Linux and other Unix-like systems typically manage thousands of discrete packages.
Packages are distributions of software and metadata such as the software's full name, description of its purpose, version number, vendor, checksum, and a list of dependencies necessary for the software to run properly. Upon installation, metadata is stored in a local package database.
A package management system provides a consistent method of installing software. A package management system is sometimes incorrectly referred to as an installer.




Contents


1 Impact
2 Terminology
3 Functions

3.1 Challenges with shared libraries
3.2 Front-ends for locally compiled packages
3.3 Maintenance of configuration
3.4 Repositories
3.5 Upgrade suppression
3.6 Cascading package removal


4 Common package management systems and formats

4.1 Package formats
4.2 Free software systems

4.2.1 For binary packages

4.2.1.1 Linux distributions
4.2.1.2 Mac OS X
4.2.1.3 Microsoft Windows
4.2.1.4 PC-BSD
4.2.1.5 Solaris
4.2.1.6 Cross platform


4.2.2 For installing using compile scripts
4.2.3 Hybrid systems
4.2.4 Meta package managers


4.3 Proprietary software systems
4.4 Application-level package managers


5 See also
6 References
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Impact
Ian Murdock has commented that package management is "the single biggest advancement Linux has brought to the industry", that it blurs the boundaries between operating system and applications, and that it makes it "easier to push new innovations [...] into the marketplace and [...] evolve the OS".[1]

[edit] Terminology
A package management system is often called an "install manager". This can lead to confusion between a package management system and an installer. The differences include:


Package Management System
Installer


Typically part of the operating system.
Each product comes bundled with its own installer.


Uses a single installation database.
Performs its own installation, sometimes recording information about that installation in a registry.


Can verify and manage all packages on the system.
Only works with its bundled product.


Single package management system vendor.
Multiple installer vendors.


Single package format.
Multiple installation formats.


A package, for package managers, denotes a specific set of files bundled with the appropriate metadata for use by a package manager. This can be confusing, as some programming languages often use the word "package" as a specific form of software library. Furthermore, that software library can be distributed in a package of files bundled for a package manager.

[edit] Functions
Package management systems are charged with the task of organizing all of the packages installed on a system and maintaining their usability. Typical functions of a package management system include:

Verifying file checksums to ensure correct and complete packages.
Verifying digital signatures to authenticate the origin of packages.
Applying file archivers to manage encapsulated files.
Upgrading software with latest versions, typically from a software repository.
Grouping of packages by function to help eliminate user confusion.
Managing dependencies to ensure a package is installed with all packages it requires.

Some additional challenges are met by only a few package management systems.

[edit] Challenges with shared libraries
Computer systems which rely on dynamic library linking, instead of static library linking, share executable libraries of machine instructions across packages and applications. In these systems, complex relationships between different packages requiring different versions of libraries results in a challenge colloquially known as "dependency hell." On Microsoft Windows systems, this is also called "DLL hell" when working with dynamically linked libraries. Good package management systems become vital on these systems.

[edit] Front-ends for locally compiled packages
System administrators may install and maintain software using tools other than package management software. For example, a local administrator may download unpackaged source code, compile it, and install it. This may cause the state of the local system to fall out of synchronization with the state of the package manager's database. The local administrator will be required to take additional measures, such as manually managing some dependencies or integrating the changes into the package manager.
There are tools available to ensure that locally compiled packages are integrated with the package management. For distributions based on .deb and .rpm files as well as Slackware Linux, there is CheckInstall, and for recipe-based systems such as Gentoo Linux and hybrid systems such as Arch Linux, it is possible to write a recipe first, which then ensures that the package fits into the local package database.[citation needed]

[edit] Maintenance of configuration
Particularly troublesome with software upgrades are upgrades of configuration files. Since package management systems, at least on Unix systems, originated as extensions of file archiving utilities, they can usually only either overwrite or retain configuration files, rather than applying rules to them. There are exceptions to this that usually apply to kernel configuration (which, if broken, will render the computer unusable after a restart). Problems can be caused if the format of configuration files changes. For instance, if the old configuration file does not explicitly disable new options that should be disabled. Some package management systems, such as Debian's dpkg, allow configuration during installation. In other situations, it is desirable to install packages with the default configuration and then overwrite this configuration, for instance, in headless installations to a large number of computers. (This kind of pre-configured installation is also supported by dpkg.)

[edit] Repositories
In order to give users more control over the kinds of software that they are allowing to be installed on their system (and sometimes due to legal or convenience reasons on the distributors' side), software is often downloaded from a number of software repositories.[2]

[edit] Upgrade suppression
When a user interacts with the package management software to bring about an upgrade, it is customary to present the user with the list of things to be done (usually the list of packages to be upgraded, and possibly giving the old and new version numbers), and allow the user to either accept the upgrade in bulk, or select individual packages for upgrades. Many package management systems can be configured to never upgrade certain packages, or to upgrade them only when critical vulnerabilities or instabilities are found in the previous version, as defined by the packager of the software. This process is sometimes called version pinning.
For instance:

yum supports this with the syntax exclude=openoffice*,[3] pacman with IgnorePkg = openoffice[4] (to suppress upgrading openoffice in both cases)
dpkg and dselect support this partially through the hold flag in package selections
APT extends the hold flag through the complex "pinning" mechanism[5]
aptitude has "hold" and "forbid" flags
portage support this through package.mask configuration file


[edit] Cascading package removal
Some of the more advanced package management features offer "cascading package removal" [4], in which all packages that depend on the target package and all packages that only the target package depends on, are also removed, respectively.

[edit] Common package management systems and formats

[edit] Package formats
Main articles: Linux package formats and file archive
Each package manager relies on the format and metadata of the packages it can manage. That is, package managers need groups of files to be bundled for the specific package manager along with appropriate metadata, such as dependencies. Often, a core set of utilities manages the basic installation from these packages and multiple package managers use these utilities to provide additional functionality.
For example, yum relies on rpm as a backend. Yum extends the functionality of the backend by adding features such as simple configuration for maintaining a network of systems. As another example, the Synaptic Package Manager provides a graphical user interface by using the Advanced Packaging Tool (apt) library, which, in turn, relies on dpkg for core functionality.
Alien is a program that converts between different Linux package formats. It supports conversion between Linux Standard Base conform RPM, deb, Stampede (.slp) and Slackware (tgz) packages.

[edit] Free software systems
By the nature of free software, packages under similar and compatible licenses are available for use on a number of operating systems. These packages can be combined and distributed using configurable and internally complex packaging systems to handle many permutations of software and manage version-specific dependencies and conflicts. Some packaging systems of free software are also themselves released as free software. One typical difference between package management in proprietary operating systems, such as Mac OS X and Windows, and those in free software, such as Linux, is that free software systems permit third-party packages to also be installed and upgraded through the same mechanism, whereas the PMS of Mac OS X and Windows will only upgrade software provided by Apple and Microsoft, respectively (with the exception of some third party drivers in Windows). The ability to continuously upgrade third party software is typically added by adding the URL of the corresponding repository to the package management's configuration file.

[edit] For binary packages

[edit] Linux distributions

dpkg, used originally by Debian and now by other systems, uses the .deb format and was the first to have a widely known dependency resolution tool (APT).
The RPM Package Manager was created by Red Hat, and is now used by a number of other Linux distributions. RPM is the Linux Standard Base packaging format and is the base of a large number of additional tools, including apt4rpm; Red Hat's up2date; Mandriva's urpmi; openSUSE's ZYpp; and YUM, which is used by Fedora and Yellow Dog Linux.
A simple tgz package system combines the standard tar and gzip. Used by Slackware Linux there are a few higher-level tools that use the same tgz packaging format, including: slapt-get, slackpkg, zendo, netpkg, and swaret.
Pacman for Arch Linux uses pre-compiled binaries distributed in a tgz archive.
Smart Package Manager, used by CCux Linux
ipkg, a dpkg-inspired, very lightweight system targeted at storage-constrained Linux systems such as embedded devices and handheld computers
pkgutils, used by CRUX Linux
PETget, used by Puppy Linux
PackageKit
PISI, used by Pardus
Nix Package Manager, "a purely functional package manager" which allows multiple versions or variants of a package to be installed; it is similar to Zero Install.


[edit] Mac OS X

fink, for Mac OS X, derives partially from dpkg/apt and partially from ports.
MacPorts, formerly called DarwinPorts, originated from the OpenDarwin project.


[edit] Microsoft Windows

Cygwin — a free software repository for the Windows operating system which provides many GNU/Linux tools and an installation tool nee package manager.
Appsnap — a package manager for Windows written in Python released under the GPL.
Appupdater — a package manager for Windows written in Python and PHP released under the GPL.
Windows-get — a package manager for Windows written in Delphi and PHP released into the public domain.
GetIt — uses Appsnap, Appupdater, and Windows-get as sources and combines their repositories to one big catalog. Released under the GPL.


[edit] PC-BSD

PC-BSD uses files with the .pbi filename extension which, when double-clicked, brings up an installation wizard program. An autobuild system tracks the FreeBSD ports collection and generates new PBI's daily


[edit] Solaris

SysV format (sometimes called pkgadd format), used by Solaris.
Image Packaging System, also known as IPS or pkg(5), used by OpenSolaris


[edit] Cross platform

OpenPKG is a cross platform package management system based on the RPM Package Manager. It works on several Unix-based systems, including Linux, BSD and Solaris.
NetBSD's pkgsrc works on several Unix-like operating systems.


[edit] For installing using compile scripts

Portage and emerge are used by Gentoo Linux. They were inspired by the BSD ports system and use scripts called ebuilds to install software.
A recipe file contains information on how to download, unpack, compile and install a package in GoboLinux distribution using its Compile tool.
apt-build is used by distributions which use deb packages, allowing automatic compiling and installation of software in a deb source repository.


[edit] Hybrid systems

The FreeBSD Ports Collection, sometimes known as just ports, uses a system of Makefiles to install software from sources or binaries. MacPorts (for Mac OS X), NetBSD's pkgsrc and OpenBSD's ports collection are similar.


[edit] Meta package managers
The following unify package management for several or all Linux and sometimes Unix variants. These, too, are based on the concept of a recipe file.

Autopackage uses .package files.
epm, developed by Easy Software Products (creators of CUPS), is a "meta packager", that allows creation of native packages for all Linux and Unix operating systems (.deb, .rpm, .tgz for Linux, pkg for Solaris and *BSD, .dmg for OS X,...) controlled from a single *.list file.
klik aims to provide an easy way of getting software packages for most major distributions without the dependency problems so common in many other package formats.
Zero Install installs each package into its own directory and uses environment variables to let each program find its libraries. Package and dependency information is downloaded directly from the software authors' pages in an XML format, similar to an RSS Feed.
The Nix Package Manager manages packages in a purely functional way.


[edit] Proprietary software systems
A wide variety of package management systems are in common use today by proprietary software operating systems, handling the installation of both proprietary and free packages.

installp is the AIX command for Object Data Manager (ODM) databases.
Software Distributor is the HP-UX package manager.
In the Microsoft .NET framework an assembly is a partially compiled code library for use in deployment, versioning and security.


[edit] Application-level package managers
Besides the systems-level application managers, there are some add-on package managers for operating systems with limited capabilities and for programming languages where developers need the latest libraries. Those include the package managers listed for Windows and OS X above, as well as:

CPAN - a programming library and package manager for the Perl programming language
PEAR - a programming library for the PHP programming language
RubyGems - a programming library for the Ruby programming language
EasyInstall - a programming library and package manager for the Python programming language using so called Python Eggs
Cabal - a programming library and package manager for the Haskell programming language
LuaRocks - a programming library and package manager for the Lua programming language
VI Package Manager - a package manager for the LabVIEW platform and development environment that provides access to the OpenG programming library.

In contrast to systems-level application managers, application-level package managers focus on a small part of the operating system. They typically reside within a directory tree that is not maintained by the systems-level package manager (like c:\cygwin or /usr/local/fink). However, this is not the case for the package managers that deal with programming libraries. This leads to a conflict as both package managers claim to "own" a file and might break upgrades.

[edit] See also




Free software portal




Conary (package manager)
Dependency hell
Software repository
GNU Stow


[edit] References


^ "How package management changed everything". ianmurdock.com. http://ianmurdock.com/2007/07/21/how-package-management-changed-everything/. Retrieved on 2008-03-01. 
^ "Linux repository classification schemes". braintickle.blogspot.com. http://braintickle.blogspot.com/2006/01/linux-repository-classification.html. Retrieved on 2008-03-01. 
^ "CentOS yum pinning rpms". centos.org. http://lists.centos.org/pipermail/centos/2005-May/046320.html. Retrieved on 2008-03-01. 
^ a b "pacman(8) Manual Page". archlinux.org. http://www.archlinux.org/pacman/pacman.8.html. Retrieved on 2008-03-01. 
^ "How to keep specific versions of packages installed (complex)". debian.org. http://www.debian.org/doc/manuals/apt-howto/ch-apt-get.en.html#s-pin. Retrieved on 2008-03-01. 



[edit] External links

Comparing Linux/UNIX Binary Package Formats
Distrowatch Comparison of Package Management Systems




Retrieved from "http://en.wikipedia.org/wiki/Package_management_system"
Categories: Package management systemsHidden categories: All articles with unsourced statements | Articles with unsourced statements since July 2007 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Česky
Dansk
Deutsch
Español
Français
Bahasa Indonesia
Italiano
日本語
‪Norsk (bokmål)‬
Polski
Русский









 This page was last modified on 9 April 2009, at 01:24 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
