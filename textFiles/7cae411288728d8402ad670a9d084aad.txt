













Control flow - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Control_flow";
		var wgTitle = "Control flow";
		var wgAction = "view";
		var wgArticleId = "45459";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277197961;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-qbasic {line-height: normal;}
.source-qbasic li, .source-qbasic pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for qbasic
 * CSS class: source-qbasic, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-qbasic .de1, .source-qbasic .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-qbasic  {}
.source-qbasic .head {}
.source-qbasic .foot {}
.source-qbasic .imp {font-weight: bold; color: red;}
.source-qbasic .ln-xtra {color: #cc0; background-color: #ffc;}
.source-qbasic li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-qbasic li.li2 {font-weight: bold;}
.source-qbasic .kw1 {color: #a1a100;}
.source-qbasic .kw3 {color: #000066;}
.source-qbasic .co1 {color: #808080;}
.source-qbasic .co2 {color: #808080;}
.source-qbasic .co3 {color: #808080;}
.source-qbasic .es0 {color: #000099;}
.source-qbasic .br0 {color: #66cc66;}
.source-qbasic .st0 {color: #ff0000;}
.source-qbasic .nu0 {color: #cc66cc;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-ada {line-height: normal;}
.source-ada li, .source-ada pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ada
 * CSS class: source-ada, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ada .de1, .source-ada .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ada  {}
.source-ada .head {}
.source-ada .foot {}
.source-ada .imp {font-weight: bold; color: red;}
.source-ada .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ada li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ada li.li2 {font-weight: bold;}
.source-ada .kw1 {color: #00007f;}
.source-ada .kw2 {color: #0000ff;}
.source-ada .kw3 {color: #46aa03; font-weight:bold;}
.source-ada .co1 {color: #adadad; font-style: italic;}
.source-ada .coMULTI {color: #808080; font-style: italic;}
.source-ada .es0 {color: #000099; font-weight: bold;}
.source-ada .br0 {color: #66cc66;}
.source-ada .st0 {color: #7f007f;}
.source-ada .nu0 {color: #ff0000;}
.source-ada .me1 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-applescript {line-height: normal;}
.source-applescript li, .source-applescript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for applescript
 * CSS class: source-applescript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-applescript .de1, .source-applescript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-applescript  {}
.source-applescript .head {}
.source-applescript .foot {}
.source-applescript .imp {font-weight: bold; color: red;}
.source-applescript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-applescript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-applescript li.li2 {font-weight: bold;}
.source-applescript .kw1 {color: #b1b100;}
.source-applescript .kw2 {color: #000000; font-weight: bold;}
.source-applescript .kw3 {color: #000066;}
.source-applescript .co1 {color: #808080; font-style: italic;}
.source-applescript .coMULTI {color: #808080; font-style: italic;}
.source-applescript .es0 {color: #000099; font-weight: bold;}
.source-applescript .br0 {color: #66cc66;}
.source-applescript .st0 {color: #ff0000;}
.source-applescript .nu0 {color: #cc66cc;}
.source-applescript .me1 {color: #006600;}
.source-applescript .me2 {color: #006600;}
.source-applescript .re0 {color: #0000ff;}
.source-applescript .re4 {color: #009999;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Control flow

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Not to be confused with flow control.
In computer science control flow (or alternatively, flow of control) refers to the order in which the individual statements, instructions or function calls of an imperative or functional program are executed or evaluated.
Within an imperative programming language, a control flow statement is a statement whose execution results in a choice being made as to which of two or more paths should be followed. For non-strict functional languages, functions and language constructs exist to achieve the same result, but they are not necessarily called control flow statements.
The kinds of control flow statements supported by different languages vary, but can be categorized by their effect:

continuation at a different statement (unconditional branch or jump),
executing a set of statements only if some condition is met (choice - i.e. conditional branch),
executing a set of statements zero or more times, until some condition is met (i.e. loop - the same as conditional branch),
executing a set of distant statements, after which the flow of control usually returns (subroutines, coroutines, and continuations),
stopping the program, preventing any further execution (unconditional halt).

Interrupts and signals are low-level mechanisms that can alter the flow of control in a way similar to a subroutine, but usually occur as a response to some external stimulus or event (that can occur asynchronously), rather than execution of an 'in-line' control flow statement. Self-modifying code can also be used to affect control flow through its side effects, but usually does not involve an explicit control flow statement (an exception being the ALTER verb in COBOL[citation needed]).
At the level of machine or assembly language, control flow instructions usually work by altering the program counter. For some CPUs the only control flow instructions available are conditional or unconditional branches (sometimes called jumps).




Contents


1 Primitives

1.1 Labels
1.2 Goto
1.3 Subroutines


2 Minimal structured control flow
3 Control structures in practice
4 Choice
5 Loops

5.1 Count-controlled loops
5.2 Condition-controlled loops
5.3 Collection-controlled loops
5.4 General iteration
5.5 Infinite loops
5.6 Continuation with next iteration
5.7 Redo current iteration
5.8 Early exit from loops
5.9 Loop system cross reference table


6 Structured non-local control flow

6.1 Conditions
6.2 Exceptions
6.3 Continuations
6.4 Non-local control flow cross reference


7 Proposed control structures

7.1 Loop with test in the middle
7.2 Multiple early exit/exit from nested loops


8 See also
9 References
10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Primitives

[edit] Labels
Main article: Label (programming language)
A label is an explicit name or number assigned to a fixed position within the source code, and which may be referenced by control flow statements appearing elsewhere in the source code. Other than marking a position within the source code a label has no effect.
Line numbers are an alternative to a named label and used in some languages such as Fortran and BASIC), that are whole numbers placed at the beginning of each line of text within the source code. Languages which use these often impose the constraint that the line numbers must increase in value in each subsequent line, but may not require that they be consecutive. For example, in BASIC:


10 LET X = 3
20 PRINT X

In other languages such as C and Ada a label is an identifier, usually appearing at the beginning of a line and immediately followed by a colon. For example, in C:


Success: printf ("The operation was successful.\n");

The Algol 60 language allowed both whole numbers and identifiers as labels (both attached by colons to the following statement), but few if any other variants of Algol allowed whole numbers.

[edit] Goto
Main article: GOTO
The goto statement (a combination of the English words go and to, and pronounced accordingly) is the most basic form of unconditional transfer of control.
Although the keyword may either be in upper or lower case depending on the language, it is usually written as:

   goto label

The effect of a goto statement is to cause the next statement to be executed to be the statement appearing at (or immediately after) the indicated label.
Goto statements have been considered harmful by many computer scientists, notably Dijkstra.

[edit] Subroutines
Main article: Subroutine
The terminology for subroutines varies; they may alternatively be known as routines, procedures, functions (especially if they return results) or methods (especially if they belong to classes or type classes).
In the 1950s, computer memories were very small by current standards so subroutines were used primarily[citation needed] to reduce program size; a piece of code was written once and then used many times from various other places in the program.
Nowadays, subroutines are more frequently used to help make a program more structured, e.g. by isolating some particular algorithm or hiding some particular data access method. If many programmers are working on a single program, subroutines are one kind of modularity that can help split up the work.

[edit] Minimal structured control flow
(See also Structured program theorem.) In May 1966, Böhm and Jacopini published an article[1] in Communications of the ACM which showed that any program with gotos could be transformed into a goto-free form involving only choice (IF THEN ELSE) and loops (WHILE condition DO xxx), possibly with duplicated code and/or the addition of Boolean variables (true/false flags). Later authors have shown that choice can be replaced by loops (and yet more Boolean variables).
The fact that such minimalism is possible does not necessarily mean that it is desirable; after all, computers theoretically only need one machine instruction (subtract one number from another and branch if the result is negative), but practical computers have dozens or even hundreds of machine instructions.
What Böhm and Jacopini's article showed was that all programs could be goto-free. Other research showed that control structures with one entry and one exit were much easier to understand than any other form, primarily because they could be used anywhere as a statement without disrupting the control flow. In other words, they were composable. (Later developments, such as non-strict programming languages - and more recently, composable software transactions - have continued this line of thought, making components of programs even more freely composable.)

[edit] Control structures in practice



The Wikibook Computer programming has a page on the topic of
Control



Most programming languages with control structures have an initial keyword which indicates the type of control structure involved. Languages then divide as to whether or not control structures have a final keyword.

No final keyword: Algol 60, C, C++, Haskell, Java, Pascal, Perl, PHP, PL/I, Python, PowerShell. Such languages need some way of grouping statements together:

Algol 60 and Pascal : begin ... end
C, C++, Java, Perl, PHP, and PowerShell: curly brackets { ... }
PL/1: DO ... END
Python: uses indentation level (see Off-side rule)
Haskell: either indentation level or curly brackets can be used, and they can be freely mixed


Final keyword: Ada, Algol 68, Modula-2, Fortran 77, Visual Basic. The forms of the final keyword vary:

Ada: final keyword is end + space + initial keyword e.g. if ... end if, loop ... end loop
Algol 68: initial keyword spelled backwards e.g. if ... fi, case ... esac
Fortran 77: final keyword is end + initial keyword e.g. IF ... ENDIF, DO ... ENDDO
Modula-2: same final keyword end for everything
Visual Basic: every control structure has its own keyword. If ... End If; For ... Next; Do ... Loop




[edit] Choice
Main article: Conditional (programming)

[edit] Loops
A loop is a sequence of statements which is specified once but which may be carried out several times in succession. The code "inside" the loop (the body of the loop, shown below as xxx) is obeyed a specified number of times, or once for each of a collection of items, or until some condition is met.
In some languages, such as Scheme, loops are often expressed using tail recursion rather than explicit looping constructs.

[edit] Count-controlled loops
Main article: For loop
See also: Loop counter
Most programming languages have constructions for repeating a loop a certain number of times. Note that if N is less than 1 in these examples then the language may specify that the body is skipped completely, or that the body is executed just once with N = 1. In most cases counting can go downwards instead of upwards and step sizes other than 1 can be used.

   FOR I = 1 TO N            for I := 1 to N do begin
       xxx                       xxx
   NEXT I                    end;

   DO I = 1,N                for ( I=1; I<=N; ++I ) {
       xxx                       xxx
   END DO                    }

In many programming languages, only integers can be reliably used in a count-controlled loop. Floating-point numbers are represented imprecisely due to hardware constraints, so a loop such as

   for X := 0.1 step 0.1 to 1.0 do

might be repeated 9 or 10 times, depending on rounding errors and/or the hardware and/or the compiler version. Furthermore, if the increment of X occurs by repeated addition, accumulated rounding errors may mean that the value of X in each iteration can differ quite significantly from the expected sequence 0.1, 0.2, 0.3, ..., 1.0.

[edit] Condition-controlled loops
Main article: While loop
See also: Do-while loop
Again, most programming languages have constructions for repeating a loop until some condition changes. Note that some variations place the test at the start of the loop, while others have the test at the end of the loop. In the former case the body may be skipped completely, while in the latter case the body is always obeyed at least once.

   DO WHILE (test)           repeat 
       xxx                       xxx 
   LOOP                      until test;

   while (test) {            do
       xxx                       xxx
   }                         while (test);


[edit] Collection-controlled loops
Main article: Foreach
Several programming languages (e.g. Ada, Smalltalk, Perl, Java, C#, Visual Basic, Ruby, Python, JavaScript) have special constructs which allow implicitly looping through all elements of an array, or all members of a set or collection.

   someCollection do: [:eachElement |xxx].

   foreach someArray { xxx }

   Collection<String> coll; for (String s : coll) {}

   foreach (string s in myStringCollection) { xxx }

   $someCollection | ForEach-Object { $_ }


[edit] General iteration
General iteration constructs such as C's for statement and Common Lisp's do form can be used to express any of the above sorts of loops, as well as others -- such as looping over a number of collections in parallel. Where a more specific looping construct can be used, it is usually preferred over the general iteration construct, since it often makes the purpose of the expression more clear.

[edit] Infinite loops
Sometimes it is desirable for a program to loop forever, or until an exceptional condition such as an error arises. For instance, an event-driven program (such as a server) may be intended to loop forever handling events as they occur, only stopping when the process is killed by the operator.
Often, an infinite loop is due to a programming error in a condition-controlled loop, wherein the loop condition is never changed within the loop.

[edit] Continuation with next iteration
Sometimes within the body of a loop there is a desire to skip the remainder of the loop body and continue with the next iteration of the loop. Some languages provide a statement such as continue, skip, or next which will do this. The effect is to prematurely terminate the innermost loop body and then resume as normal with the next iteration. If the iteration is the last one in the loop, the effect is to terminate the entire loop early.

[edit] Redo current iteration
Some languages, like Perl and Ruby, have a redo statement that restarts the current iteration from the beginning.

[edit] Early exit from loops
When using a count-controlled loop to search through a table, it might be desirable to stop searching as soon as the required item is found. Some programming languages provide a statement such as break or exit, whose effect is to terminate the current loop immediately and transfer control to the statement immediately following that loop. Things can get a bit messy if searching a multi-dimensional table using nested loops (see Missing Control Structures below).
The following example is done in Ada which supports both early exit from loops and loops with test in the middle. Both features are very similar and comparing both code snippets will show the difference: early exit needs to be combined with an if statement while a condition in the middle is a self contained construct.


with Ada.Text IO;
with Ada.Integer Text IO;
 
procedure Print_Squares is 
    X : Integer;
begin
    Read_Data : loop
        Ada.Integer Text IO.Get(X);
    exit Read_Data when X = 0;
        Ada.Text IO.Put (X * X);
        Ada.Text IO.New_Line;
    end loop Read_Data;
end Print_Squares;

Python supports conditional execution of code depending on whether a loop was exited early (with a break statement) or not by using a else-clause with the loop. For example,


for n in set_of_numbers:
    if isprime(n):
        print "Set contains a prime number"
        break
else:
    print "Set did not contain any prime numbers"

Note that the else clause in the above example is attached to the for statement, and not the inner if statement. Both Python's for and while loops support such an else clause, which is executed only if early exit of the loop did not occur.

[edit] Loop system cross reference table


Programming language
conditional
loop
early exit
continuation
redo


begin
middle
end
count
collection
general
infinite [1]


Ada
Yes
Yes
Yes
Yes
arrays
No
Yes
deep nested
No



C
Yes
No
Yes
No [2]
No
Yes
No
deep nested [3]
deep nested [3]
No


C++
Yes
No
Yes
No [2]
No
Yes
No
deep nested [3]
deep nested [3]
No


C#
Yes
No
Yes
No [2]
Yes
Yes
No
deep nested [3]
deep nested [3]



Common Lisp
Yes
Yes
Yes
Yes
Yes
Yes
Yes
deep nested
No



FORTRAN 77
Yes
No
No
Yes
No
No
No
one level
Yes



Fortran 90
Yes
No
No
Yes
No
No
Yes
deep nested
Yes



Haskell
No
No
No
No
lists
No
Yes
No [6]
No
No


Java
Yes
No
Yes
No [2]
Yes
Yes
No
deep nested
deep nested
No


JavaScript
Yes
No
Yes
No [2]
Yes
Yes
No
deep nested
deep nested
No


OCaml
Yes
No
No
Yes
arrays,lists
No
No
No [6]
No
No


PHP
Yes
No
Yes
No [2] [5]
Yes [4]
Yes
No
deep nested
deep nested
No


Perl
Yes
No
Yes
No [2] [5]
Yes
Yes
No
deep nested
deep nested
Yes


Python
Yes
No
No
No [5]
Yes
No
No
deep nested [6]
deep nested [6]
No


REBOL
No [7]
Yes
Yes
Yes
Yes
No [8]
Yes
one level [6]
No
No


Ruby
Yes
No
Yes
Yes
Yes
No
Yes
deep nested [6]
deep nested [6]
Yes


Visual Basic .NET
Yes
No
Yes
Yes
Yes
No
Yes
one level per type of loop
one level per type of loop



Windows PowerShell
Yes
No
Yes
No [2]
Yes
Yes
No
?
Yes




a  while (true) does not count as an infinite loop for this purpose, because it is not a dedicated language structure.
a b c d e f g h  C's for (init; condition; loop) loop is a general loop construct, not specifically a counting one, although it is often used for that.
a b c  Deep breaks may be accomplished in C, C++ and C# through the use of labels and gotos.
a  Iteration over objects was added in PHP 5.
a b c  A counting loop can be simulated by iterating over an incrementing list or generator, for instance, Python's range().
a b c d e  Deep breaks may be accomplished through the use of exception handling.
a  There is no special construct, since the while function can be used for this.
a  There is no special construct, but users can define general loop functions.


[edit] Structured non-local control flow
Many programming languages, particularly those which favor more dynamic styles of programming, offer constructs for non-local control flow. These cause the flow of execution to jump out of a given context and resume at some predeclared point. Exceptions, conditions, and continuations are three common sorts of non-local control constructs.

[edit] Conditions
PL/I has some 22 standard conditions (e.g. ZERODIVIDE SUBSCRIPTRANGE ENDFILE) which can be RAISEd and which can be intercepted by: ON condition action; Programmers can also define and use their own named conditions.
Like the unstructured if only one statement can be specified so in many cases a GOTO is needed to decide where flow of control should resume.
Unfortunately, some implementations had a substantial overhead in both space and time (especially SUBSCRIPTRANGE), so many programmers tried to avoid using conditions.
Common Syntax examples:

 ON condition GOTO label


[edit] Exceptions
Main article: Exception handling
Modern languages have a structured construct for exception handling which does not rely on the use of GOTO:


try {
    xxx1                                  // Somewhere in here
    xxx2                                  //     use: '''throw''' someValue;
    xxx3
} catch (someClass& someId) {             // catch value of someClass
    actionForSomeClass 
} catch (someType& anotherId) {           // catch value of someType
    actionForSomeType
} catch (...) {                           // catch anything not already caught
    actionForAnythingElse
}

Any number and variety of catch clauses can be used above. In D, Java, C#, and Python a finally clause can be added to the try construct. No matter how control leaves the try the code inside the finally clause is guaranteed to execute. This is useful when writing code that must relinquish an expensive resource (such as an opened file or a database connection) when finished processing:


FileStream stm = null;                    // C# example
try {
    stm = new FileStream ("logfile.txt", FileMode.Create);
    return ProcessStuff(stm);             // may throw an exception
} finally {
    if (stm != null)
        stm. Close();
}

Since this pattern is fairly common, C# has a special syntax:


using (FileStream stm = new FileStream ("logfile.txt", FileMode.Create)) {
    return ProcessStuff(stm);             // may throw an exception
}

Upon leaving the using-block, the compiler guarantees that the stm object is released. Python's with statement and Ruby's block argument to File.open are used to similar effect.
All these languages define standard exceptions and the circumstances under which they are thrown. Users can throw exceptions of their own (in fact C++ and Python allow users to throw and catch almost any type).
If there is no catch matching a particular throw, then control percolates back through subroutine calls and/or nested blocks until a matching catch is found or until the end of the main program is reached, at which point the program is forcibly stopped with a suitable error message.
The AppleScript scripting programming language provides several pieces of information to a "try" block:


try
    set myNumber to myNumber / 0
 
on error e  number n  from f  to t  partial result pr
 
    if ( e = "Can't divide by zero" ) then display dialog "You idiot!"
 
end try


[edit] Continuations
Main article: Continuation

[edit] Non-local control flow cross reference


Programming language
conditions
exceptions


Ada
No
Yes


C
No
No


C++
No
Yes


C#
No
Yes


D
No
Yes


Haskell
No
Yes


Java
No
Yes


Objective C
No
Yes


PHP
No
Yes


PL/1
Yes
No


Python
No
Yes


REBOL
Yes
Yes


Ruby
No
Yes


Visual Basic .NET
Yes
Yes


Windows PowerShell
No
Yes



[edit] Proposed control structures
In a spoof Datamation article[2] in 1973, R. Lawrence Clark suggested that the GOTO statement could be replaced by the COMEFROM statement, and provides some entertaining examples. This was actually implemented in the INTERCAL programming language, a language designed to make programs as obscure as possible.
In his 1974 article "Structured Programming with go to Statements"[3], Donald Knuth identified two situations which were not covered by the control structures listed above, and gave examples of control structures which could handle these situations. Despite their utility, these constructions have not yet found their way into mainstream programming languages.

[edit] Loop with test in the middle
This was proposed by Dahl in 1972[4].

   loop                           loop
       xxx1                           read(char);
   while test;                    while not atEndOfFile;
       xxx2                           write(char);
   repeat;                        repeat;

If xxx1 is omitted we get a loop with the test at the top. If xxx2 is omitted we get a loop with the test at the bottom. If while is omitted we get an infinite loop. Hence this single construction can replace several constructions in most programming languages. A possible variant is to allow more than one while test; within the loop, but the use of exitwhen (see next section) appears to cover this case better.
As the example on the right shows (copying a file one character at a time), there are simple situations where this is exactly the right construction to use in order to avoid duplicated code and/or repeated tests.



The Wikibook Ada Programming has a page on the topic of
Control



In Ada, the above loop construct (loop-while-repeat) can be represented using a standard infinite loop (loop - end loop) that has an exit when clause in the middle (not to be confused with the exitwhen statement in the following section).


with Ada.Text_IO;
with Ada.Integer_Text_IO;
 
procedure Print_Squares is 
    X : Integer;
begin
    Read_Data : loop
        Ada.Integer_Text_IO.Get(X);
    exit Read_Data when X = 0;
        Ada.Text IO.Put (X * X);
        Ada.Text IO.New_Line;
    end loop Read_Data;
end Print_Squares;

Naming a loop (Like Read_Data in our example) is optional but allows to leave the outer loop of several nested loops.

[edit] Multiple early exit/exit from nested loops
This was proposed by Zahn in 1974[5]. A modified version is presented here.

   exitwhen EventA or EventB or EventC;
       xxx
   exits
       EventA: actionA
       EventB: actionB
       EventC: actionC
   endexit;

exitwhen is used to specify the events which may occur within xxx, their occurrence is indicated by using the name of the event as a statement. When some event does occur, the relevant action is carried out, and then control passes just after endexit. This construction provides a very clear separation between determining that some situation applies, and the action to be taken for that situation.
exitwhen is conceptually similar to exception handling, and exceptions or similar constructs are used for this purpose in many languages.
The following simple example involves searching a two-dimensional table for a particular item.

   exitwhen found or missing;
       for I := 1 to N do
           for J := 1 to M do
               if table[I,J] = target then found;
       missing;
   exits
       found:   print ("item is in table");
       missing: print ("item is not in table");
   endexit;


[edit] See also

Branch (computer science)
Control flow diagram
Control flow graph
Coroutine
Cyclomatic complexity
Flowchart
GOTO
Main loop
Recursion
Spaghetti code
Structured programming
Subroutine


[edit] References


^ Böhm, Jacopini. Flow diagrams, "Turing Machines and Languages with only Two Formation Rules" Comm. ACM, 9(5):366-371, May 1966.
^ We don't know where to GOTO if we don't know where we've COME FROM. This linguistic innovation lives up to all expectations.By R. Lawrence Clark* From DATAMATION, December, 1973
^ Knuth, Donald E. "Structured Programming with go to Statements" ACM Computing Surveys 6(4):261-301, December 1974.
^ Dahl & Dijkstra & Hoare, "Structured Programming" Academic Press, 1972.
^ Zahn, C. T. "A control statement for natural top-down structured programming" presented at Symposium on Programming Languages, Paris, 1974.




Hoare, C. A. R. "Partition: Algorithm 63," "Quicksort: Algorithm 64," and "Find: Algorithm 65." Comm. ACM 4, 321-322, 1961.



[edit] External links

Java Control Statements
Go To Statement Considered Harmful
A Linguistic Contribution of GOTO-less Programming
Structured Programming with Go To StatementsPDF (2.88 MiB)
IBM 704 ManualPDF (31.4 MiB)




Retrieved from "http://en.wikipedia.org/wiki/Control_flow"
Categories: Control flow | Articles with example Ada codeHidden categories: All articles with unsourced statements | Articles with unsourced statements since May 2007 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Deutsch
Español
Français
Italiano
עברית
Nederlands
日本語
Polski
தமிழ்
Українська









 This page was last modified on 14 March 2009, at 15:39.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
