













Object composition - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Object_composition";
		var wgTitle = "Object composition";
		var wgAction = "view";
		var wgArticleId = "1911078";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 275802311;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-pascal .de1, .source-pascal .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-pascal  {}
.source-pascal .head {}
.source-pascal .foot {}
.source-pascal .imp {font-weight: bold; color: red;}
.source-pascal .ln-xtra {color: #cc0; background-color: #ffc;}
.source-pascal li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-pascal li.li2 {font-weight: bold;}
.source-pascal .kw1 {color: #b1b100;}
.source-pascal .kw2 {color: #000000; font-weight: bold;}
.source-pascal .kw3 {}
.source-pascal .kw4 {color: #993333;}
.source-pascal .co1 {color: #808080; font-style: italic;}
.source-pascal .co2 {color: #339933;}
.source-pascal .coMULTI {color: #808080; font-style: italic;}
.source-pascal .es0 {color: #000099; font-weight: bold;}
.source-pascal .br0 {color: #66cc66;}
.source-pascal .st0 {color: #ff0000;}
.source-pascal .nu0 {color: #cc66cc;}
.source-pascal .me1 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-fortran {line-height: normal;}
.source-fortran li, .source-fortran pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for fortran
 * CSS class: source-fortran, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-fortran .de1, .source-fortran .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-fortran  {}
.source-fortran .head {}
.source-fortran .foot {}
.source-fortran .imp {font-weight: bold; color: red;}
.source-fortran .ln-xtra {color: #cc0; background-color: #ffc;}
.source-fortran li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-fortran li.li2 {font-weight: bold;}
.source-fortran .kw1 {color: #b1b100;}
.source-fortran .kw2 {color: #000000; font-weight: bold;}
.source-fortran .kw3 {color: #000066;}
.source-fortran .kw4 {color: #993333;}
.source-fortran .co1 {color: #808080; font-style: italic;}
.source-fortran .co2 {color: #339933;}
.source-fortran .coMULTI {color: #808080; font-style: italic;}
.source-fortran .es0 {color: #000099; font-weight: bold;}
.source-fortran .br0 {color: #66cc66;}
.source-fortran .st0 {color: #ff0000;}
.source-fortran .nu0 {color: #cc66cc;}
.source-fortran .me1 {color: #202020;}
.source-fortran .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-ada {line-height: normal;}
.source-ada li, .source-ada pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ada
 * CSS class: source-ada, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ada .de1, .source-ada .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ada  {}
.source-ada .head {}
.source-ada .foot {}
.source-ada .imp {font-weight: bold; color: red;}
.source-ada .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ada li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ada li.li2 {font-weight: bold;}
.source-ada .kw1 {color: #00007f;}
.source-ada .kw2 {color: #0000ff;}
.source-ada .kw3 {color: #46aa03; font-weight:bold;}
.source-ada .co1 {color: #adadad; font-style: italic;}
.source-ada .coMULTI {color: #808080; font-style: italic;}
.source-ada .es0 {color: #000099; font-weight: bold;}
.source-ada .br0 {color: #66cc66;}
.source-ada .st0 {color: #7f007f;}
.source-ada .nu0 {color: #ff0000;}
.source-ada .me1 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Object composition

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In computer science, object composition (not to be confused with function composition) is a way to combine simple objects or data types into more complex ones. Compositions are a critical building block of many basic data structures, including the tagged union, the linked list, and the binary tree, as well as the object used in object-oriented programming.
Composited (composed) objects are often referred to as having a "has a" relationship. A real-world example of composition may be seen in an automobile: the objects wheel, steering wheel, seat, gearbox and engine may have no functionality by themselves, but an object called automobile containing all of those objects would serve a higher function, greater than the sum of its parts.
Composition is contrasted with subtyping, which is the process of adding detail to a general data type to create a more specific data type. In composition, the composite type "has an" object of a simpler type, while in subtyping, the subtype "is an" instance of its parent type. Composition does not form a subtype but a new type.
Composited objects are called fields, items, members or attributes, and the resulting composition a structure, storage record, tuple, user-defined type (UDT), or composite type. The terms usually vary across languages. Fields are given a unique name so that each one can be distinguished from the others. Sometimes an issue of ownership arises: when a composition is destroyed, should objects belonging to it be destroyed as well? If not, the case is sometimes called aggregation. For more, see the aggregation section below.




Contents


1 UML notation
2 Composite types in C
3 Recursive composition
4 Timeline of composition in various languages
5 Aggregation
6 Containment
7 Aggregation in COM
8 See also
9 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] UML notation
In UML, composition is depicted as a filled diamond and a solid line. It always implies a multiplicity of 1 or 0..1, as no more than one object at a time can have lifetime responsibility for another object.
The more general form, aggregation, is depicted as an unfilled diamond and a solid line. The image below shows both composition and aggregation. The code below shows what the source code is likely to look like.



// Composition
class Car
{
  private:
    Carburetor* itsCarb;
  public:   
    Car() {itsCarb=new Carburetor();}
    virtual ~Car() {delete itsCarb;}
};



// Aggregation
class Pond
{
  private:
    vector<Duck*> itsDucks;
};


[edit] Composite types in C
This is an example of composition in C.


typedef struct {
    int age;
    char *name;
    enum { male, female } sex;
} Person;

In this example, the primitive types int, char *, and enum {male, female} are combined to form the composite type of Person. Each object of type Person then "has an" age, name, and sex.
If a Person type were instead created by subtyping, it might be a subtype of Organism, and it could inherit some attributes from Organism (every organism has an age), while extending the definition of Organism with new attributes (not every organism has a gender, but every person does).

[edit] Recursive composition
Objects can be composited recursively with the use of recursive types or references. Consider a tree. Each node in a tree may be a branch or leaf; in other words, each node is a tree at the same time when it belongs to another tree.
One implementation for the recursive composition is to let each object have references to others of the same type. In C, for example, a binary tree can be defined like:


struct bintree {
    struct bintree *left, *right;
    // some data
};

If pointers left and right are valid, the node is thought to be a branch referring to each tree to which left and right point. If not, the node is a leaf. In this way, the recursion can be terminated.
Another is to use a tagged union. See tagged union for an example.

[edit] Timeline of composition in various languages
C calls a record a struct or structure; object-oriented languages such as Java, Smalltalk, and C++ often keep their records hidden inside objects (class instances); languages in the ML family simply call them records. COBOL was the first programming language to support records directly[citation needed]; ALGOL 68 got it from COBOL and Pascal got it, more or less indirectly, from ALGOL 68.
1959 – COBOL:

01 customer-record.
    03 customer-number         pic 9(8) comp. 
    03 customer-name.
        05 given-names         pic x(15).
        05 initial-2           pic x.
        05 surname             pic x(15).
    03 customer-address. 
        05 street. 
            07 house-number    pic 999 comp. 
            07 street-name     pic x(15).
        05 city                pic x(10). 
        05 country-code        pic x(3). 
        05 postcode            pic x(8).
    03 amount-owing            pic 9(8) comp.

1964 – PL/I:

dcl 1 newtypet    based (P);
     2 (a,b,c) fixed bin(31),
     2 (i,j,k) float,
     2 r ptr;
allocate newtypet;

1960 – ALGOL 60:
Arrays were the only composite data type in Algol 60.
1968 – ALGOL 68:

int max=99;
mode newtypet = [0..9][0..max]struct (
    long real a, b, c, short int i, j, k, ref real r
);
newtypet newarrayt=(1,2,3,4,5,6, heap real:=7)

For an example of all this, here is the traditional linked list declaration:

 mode node = union (real, int, compl, string),
      list = struct (node val, ref list next);

Note that for ALGOL 68 only the newtypet name appears to the left of the equality, and most notably the construction is made – and can be read – from left to right without regard to priorities.
1970 – Pascal:


type 
   a = array [1..10] of integer;
   b = record
         a,b,c: real;
         i,j,k: integer;
end;

1972 – K&R C:


#define max 99
struct newtypet { 
    double a, b, c; short i, j, k; float &r;
} newarrayt[10][max+1];

1977: FORTRAN 77
Fortran 77 has arrays, but lacked any formal record/structure definitions. Typically compound structures were built up using EQUIVALENCE and/or COMMON statements:


CHARACTER NAME*32, ADDR*32, PHONE*16
REAL OWING
COMMON /CUST/NAME, ADDR, PHONE, OWING

1983 – ADA:


type Cust is
  record
    Name  : Name_Type;
    Addr  : Addr_Type;
    Phone : Phone_Type;
    Owing : Integer range 1..999999;
  end record;

1985 – C++:


const int max=99;
typedef class { 
    public: double a, b, c; short i, j, k; float &r;
} newtypet[10][max+1];

1991 – Python:


 max = 99
 class NewTypeT:
     def __init__(self):
         self.a = self.b = self.c = 0
         self.i = self.j = self.k = 0.0
         class R:
             def __init__(self):
                 self.r = None
         self.r = R()
 # Initialise an example array of this class.
 newarrayt = [[NewTypeT() for i in range(max + 1)] for j in range(10)]

1992 – FORTRAN 90: Arrays and strings were inherited from FORTRAN 77, and a new reserved word was introduced: type


type newtypet
  double precision a,b,c
  integer*2 i,j,k
* No pointer type REF REAL R
  end type
 
type (newtypet) t(10,100)

FORTRAN 90 updated and included FORTRAN IV's concept called NAMELIST.


INTEGER :: jan=1, feb=2, mar=3, apr=4
NAMELIST / week / jan, feb, mar, apr

For more details about composition in C/C++, see Composite type.

[edit] Aggregation
Aggregation differs from ordinary composition in that it does not imply ownership. In composition, when the owning object is destroyed, so are the contained objects. In aggregation, this is not necessarily true. For example, a university owns various departments (e.g., chemistry), and each department has a number of professors. If the university closes, the departments will no longer exist, but the professors in those departments will continue to exist. Therefore, a University can be seen as a composition of departments, whereas departments have an aggregation of professors. In addition, a Professor could work in more than one department, but a department could not be part of more than one university.
Composition is usually implemented such that an object contains another object. For example, in C++:


class Professor;
 
class Department
{
  ...
  private:
    // Aggregation
    Professor* members[5];
  ...
};
 
class University
{
  ...
  private:
    // Composition
    Department faculty[20];
  ...
};

In aggregation, the object may only contain a reference or pointer to the object (and not have lifetime responsibility for it):
Sometimes aggregation is referred to as composition when the distinction between ordinary composition and aggregation is unimportant.
The above code would transform into the following UML Class diagram:


[edit] Containment
Composition that is used to store several instances of the composited data type is referred to as containment. Examples of such containers are arrays, linked lists, binary trees and associative arrays.
In UML, containment is depicted with a multiplicity of 1 or 0..n (depending on the issue of ownership), indicating that the data type is composed of an unknown number of instances of the composited data type.

[edit] Aggregation in COM




Aggregation in COM


In Microsoft's Component Object Model aggregation means that an object exports, as if it were their owner, one or several interfaces of another object it owns. Formally, this is more similar to composition or encapsulation than aggregation. However, instead of implementing the exported interfaces by calling the interfaces of the owned object, the interfaces of the owned object themselves are exported. The owned object is responsible for assuring that methods of those interfaces inherited from IUnknown actually invoke the corresponding methods of the owner. This is to guarantee that the reference count of the owner is correct and all interfaces of the owner are accessible through the exported interface, while no other (private) interfaces of the owned object are accessible.[1]

[edit] See also

Composite type
C++ structure
Law of Demeter
Implementation inheritance
Inheritance semantics
Object association
Virtual inheritance


[edit] References

^ Aggregation ms-help://MS.PSDKXPSP2.1033/com/htm/com_9xym.htm Platform SDK for Windows XP SP2. Microsoft. Retrieved on 2007-11-04.

General References:

Association, Aggregation and Composition, accessed in February 2009
Harald Störrle, UML2, Addison-Wesley 2005




Retrieved from "http://en.wikipedia.org/wiki/Object_composition"
Categories: Unified Modeling Language | Object-oriented programmingHidden categories: All articles with unsourced statements | Articles with unsourced statements since February 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Français
日本語
Polski
Русский
Українська









 This page was last modified on 8 March 2009, at 13:09 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
