













ASCII - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "ASCII";
		var wgTitle = "ASCII";
		var wgAction = "view";
		var wgArticleId = "586";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281748813;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = ["sysop"];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); ASCII

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other uses, see ASCII (disambiguation).





The 95 printable ASCII characters, numbered from 32 to 126 (decimal)


American Standard Code for Information Interchange (ASCII), pronounced /ˈæski/[1] is a coding standard that can be used for interchanging information, if the information is expressed mainly by the written form of English words. It is implemented as a character-encoding scheme based on the ordering of the English alphabet. ASCII codes represent text in computers, communications equipment, and other devices that work with text. Most modern character-encoding schemes—which support many more characters than did the original—have a historical basis in ASCII.
Historically, ASCII developed from telegraphic codes. Its first commercial use was as a seven-bit teleprinter code promoted by Bell data services. Work on ASCII formally began October 6, 1960, with the first meeting of the American Standards Association's (ASA) X3.2 subcommittee. The first edition of the standard was published in 1963,[2][3] a major revision in 1967,[4] and the most recent update in 1986.[5] Compared to earlier telegraph codes, the proposed Bell code and ASCII were both ordered for more convenient sorting (i.e., alphabetization) of lists, and added features for devices other than teleprinters.
ASCII includes definitions for 128 characters: 33 are non-printing, mostly obsolete control characters that affect how text is processed;[6] 94 are printable characters, and the space is considered an invisible graphic.[7] The most commonly used character encoding on the World Wide Web was US-ASCII[8] until 2008, when it was surpassed by UTF-8.[9]




Contents


1 History
2 ASCII control characters
3 ASCII printable characters
4 Aliases
5 Variants

5.1 Incompatibility vs interoperability
5.2 Unicode


6 Order
7 References
8 Further reading
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History




US ASCII 1968 Code Chart was structured with two columns of control characters, a column with special characters, a column with numbers, and four columns of letters


The American Standard Code for Information Interchange (ASCII) was developed under the auspices of a committee of the American Standards Association, called the X3 committee, by its X3.2 (later X3L2) subcommittee, and later by that subcommittee's X3.2.4 working group. The ASA became the United States of America Standards Institute or USASI[10] and ultimately the American National Standards Institute.
The X3.2 subcommittee designed ASCII based on earlier teleprinter encoding systems. Like other character encodings, ASCII specifies a correspondence between digital bit patterns and character symbols (i.e. graphemes and control characters). This allows digital devices to communicate with each other and to process, store, and communicate character-oriented information such as written language. Before ASCII was developed, the encodings in use included 26 alphabetic characters, 10 numerical digits, and from 11 to 25 special graphic symbols. To include all these, and control characters compatible with the Comité Consultatif International Téléphonique et Télégraphique standard, Fieldata, and early EBCDIC, more than 64 codes were required in ASCII.
The committee debated the possibility of a shift key function (like the Baudot code), which would allow more than 64 codes to be represented by six bits. In a shifted code, some character codes determine choices between options for the following character codes. It allows compact encoding, but is less reliable for data transmission; an error in transmitting the shift code typically makes a long part of the transmission unreadable. The standards committee decided against shifting, and so ASCII required at least a seven-bit code.[11]
The committee considered an eight-bit code, since eight bits would allow two four-bit patterns to efficiently encode two digits with binary coded decimal. (However it would require all data transmission to send eight bits when seven could suffice.) The committee voted to use a seven-bit code to minimize costs associated with data transmission. Since perforated tape at the time could record eight bits in one position, it also allowed for a parity bit for error checking if desired.[12] Machines with octets as the native data type that did not use parity checking typically set the eighth bit to 0.[13]
The code itself was structured so that most control codes were together, and all graphic codes were together. The first two columns (32 positions) were reserved for control characters.[14] The "space" character had to come before graphics to make sorting algorithms easy, so it became position 32.[15] The committee decided it was important to support upper case 64-character alphabets, and chose to structure ASCII so it could easily be reduced to a usable 64-character set of graphic codes.[16] Lower case letters were therefore not interleaved with upper case. To keep options open for lower case letters and other graphics, the special and numeric codes were placed before the letters, and the letter 'A' was placed in position 65 to match the draft of the corresponding British standard.[17] The digits 0–9 were placed so they correspond to values in binary prefixed with 011, making conversion with binary-coded decimal straightforward.
Many of the non-alphanumeric characters were positioned to correspond to their shifted position on typewriters. Thus #, $ and % were placed to correspond to 3, 4, and 5 in the adjacent column. The parentheses could not correspond to 9 and 0, however, because the place corresponding to 0 was taken by the space character. Since many European typewriters placed the parentheses with 8 and 9, those corresponding positions were chosen for the parentheses. The @ symbol was not used in continental Europe and the committee expected it would be replaced by an accented À in the French variation, so the @ was placed in position 64 next to the letter A.[18]
The control codes felt essential for data transmission were the start of message (SOM), end of address (EOA), end of message (EOM), end of transmission (EOT), "who are you?" (WRU), "are you?" (RU), a reserved device control (DC0), synchronous idle (SYNC), and acknowledge (ACK). These were positioned to maximize the Hamming distance between their bit patterns.[19]
With the other special characters and control codes filled in, ASCII was published as ASA X3.4-1963, leaving 28 code positions without any assigned meaning, reserved for future standardization, and one unassigned control code.[20] It now seems obvious that these positions should have been assigned to the lower case alphabet, but there was some debate at the time whether there should be more control characters instead.[21] The indecision did not last long: in May 1963 the CCITT Working Party on the New Telegraph Alphabet proposed to assign lower case characters to columns 6 and 7,[22] and International Organization for Standardization TC 97 SC 2 voted in October to incorporate the change into its draft standard.[23] The X3.2.4 task group voted its approval for the change to ASCII at its May 1963 meeting.[24] Locating the lowercase letters in columns 6 and 7 caused the characters to differ in bit pattern from the upper case by a single bit, which simplified case-insensitive character matching and the construction of keyboards and printers.
The X3 committee made other changes, including other new characters (the brace and vertical line characters),[25] renaming some control characters (SOM became start of header (SOH)) and moving or removing others (RU was removed).[26] ASCII was subsequently updated as USASI X3.4-1967, then USASI X3.4-1968, ANSI X3.4-1977, and finally, ANSI X3.4-1986 (the first two are occasionally retronamed ANSI X3.4-1967, and ANSI X3.4-1968).
The X3 committee also addressed how ASCII should be transmitted (least significant bit first), and how it should be recorded on perforated tape. They proposed a 9-track standard for magnetic tape, and attempted to deal with some forms of punched card formats.
ASCII itself first entered commercial use in 1963 as a seven-bit teleprinter code for American Telephone & Telegraph's TWX (Teletype Wide-area eXchange) network. TWX originally used the earlier five-bit Baudot code, which was also used by the competing Telex teleprinter system. Bob Bemer introduced features such as the escape sequence.[2] His British colleague Hugh McGregor Ross helped to popularize this work—according to Bemer, "so much so that the code that was to become ASCII was first called the Bemer-Ross Code in Europe".[27]
On March 11, 1968, U.S. President Lyndon B. Johnson mandated that all computers purchased by the United States federal government support ASCII, stating:

I have also approved recommendations of the Secretary of Commerce regarding standards for recording the Standard Code for Information Interchange on magnetic tapes and paper tapes when they are used in computer operations. All computers and related equipment configurations brought into the Federal Government inventory on and after July 1, 1969, must have the capability to use the Standard Code for Information Interchange and the formats prescribed by the magnetic tape and paper tape standards when these media are used.[28]

Other international standards bodies have ratified character encodings such as ISO/IEC 646 that are identical or nearly identical to ASCII, with extensions for characters outside the English alphabet and symbols used outside the United States, such as the symbol for the United Kingdom's pound sterling (£). Almost every country needed an adapted version of ASCII since ASCII only suited the needs of the USA and a few other countries. For example, Canada had its own version that supported French characters. Other adapted encodings include ISCII (India), VISCII (Vietnam), and YUSCII (Yugoslavia). Although these encodings are sometimes referred to as ASCII, true ASCII is strictly defined only by ANSI standard.
ASCII was incorporated into the Unicode character set as the first 128 symbols, so the ASCII characters have the same numeric codes in both sets. This allows UTF-8 to be backward compatible with ASCII, a significant advantage.
Asteroid 3568 ASCII is named after the character encoding.

[edit] ASCII control characters
Main article: Control character
ASCII reserves the first 32 codes (numbers 0–31 decimal) for control characters: codes originally intended not to carry printable information, but rather to control devices (such as printers) that make use of ASCII, or to provide meta-information about data streams such as those stored on magnetic tape. For example, character 10 represents the "line feed" function (which causes a printer to advance its paper), and character 8 represents "backspace". RFC 2822 refers to control characters that do not include carriage return, line feed or white space as non-whitespace control characters.[29] Except for the control characters that prescribe elementary line-oriented formatting, ASCII does not define any mechanism for describing the structure or appearance of text within a document. Other schemes, such as markup languages, address page and document layout and formatting.
The original ASCII standard used only short descriptive phrases for each control character. The ambiguity this left was sometimes intentional (where a character would be used slightly differently on a terminal link than on a data stream) and sometimes more accidental (such as what "delete" means).
Probably the most influential single device on the interpretation of these characters was the ASR-33 Teletype series, which was a printing terminal with an available paper tape reader/punch option. Paper tape was a very popular medium for long-term program storage up through the 1980s, lower cost and in some ways less fragile than magnetic tape. In particular, the Teletype 33 machine assignments for codes 17 (Control-Q, DC1, also known as XON), 19 (Control-S, DC3, also known as XOFF), and 127 (DELete) became de-facto standards. Because the keytop for the O key also showed a left-arrow symbol (from ASCII-1963, which had this character instead of underscore), a noncompliant use of code 15 (Control-O, Shift In) interpreted as "delete previous character" was also adopted by many early timesharing systems but eventually faded out.
The use of Control-S (XOFF, an abbreviation for transmit off) as a handshaking signal warning a sender to stop transmission because of impending overflow, and Control-Q (XON, "transmit on") to resume sending, persists to this day in many systems as a manual output control technique. On some systems Control-S retains its meaning but Control-Q is replaced by a second Control-S to resume output.
Code 127 is officially named "delete" but the Teletype label was "rubout". Since the original standard gave no detailed interpretation for most control codes, interpretations of this code varied. The original Teletype meaning, and the intent of the standard, was to make it an ignored character, the same as NUL (all zeroes). This was specifically useful for paper tape, because punching the all-ones bit pattern on top of an existing mark would obliterate it. Tapes designed to be "hand edited" could even be produced with spaces of extra NULs (blank tape) so that a block of characters could be "rubbed out" and then replacements put into the empty space.
As video terminals began to replace printing ones, the value of the "rubout" character was lost. DEC systems, for example, interpreted "Delete" to mean "remove the character before the cursor," and this interpretation also became common in Unix systems. Most other systems used "Backspace" for that meaning and used "Delete" to mean "remove the character at the cursor". That latter interpretation is the most common today.
Many more of the control codes have taken on meanings quite different from their original ones. The "escape" character (code 27), for example, was originally intended to allow sending other control characters as literals instead of invoking their meaning. This is the same meaning of "escape" encountered in URL encodings, C language strings, and other systems where certain characters have a reserved meaning. Over time this meaning has been co-opted and has eventually drifted. In modern use, an ESC sent to the terminal usually indicates the start of a command sequence, usually in the form of a so-called "ANSI escape code" (or, more properly, a "Control Sequence Introducer") beginning with ESC followed by a "[" (left-bracket) character. An ESC sent from the terminal is most often used as an out-of-band character used to terminate an operation, as in the TECO and vi text editors.
The inherent ambiguity of many control characters, combined with their historical usage, created problems when transferring "plain text" files between systems. The clearest example of this is the newline problem on various operating systems. On printing terminals there is no question that you terminate a line of text with both "Carriage Return" and "Linefeed". The first returns the printing carriage to the beginning of the line and the second advances to the next line without moving the carriage. However, requiring two characters to mark the end of a line introduced unnecessary complexity and questions as to how to interpret each character when encountered alone. To simplify matters, plain text files on Unix and Amiga systems use line feeds alone to separate lines. Similarly, older Macintosh systems, among others, use only carriage returns in plain text files. Various DEC operating systems used both characters to mark the end of a line, perhaps for compatibility with teletypes, and this de facto standard was copied in the CP/M operating system and then in MS-DOS and eventually Microsoft Windows. Transmission of text over the Internet, for protocols as E-mail and the World Wide Web, uses both characters.
The DEC operating systems, along with CP/M, tracked file length only in units of disk blocks and used Control-Z (SUB) to mark the end of the actual text in the file (also done for CP/M compatibility in some cases in MS-DOS, though MS-DOS has always recorded exact file-lengths). Text strings ending with the null character are known as ASCIZ or C strings.


Binary
Oct
Dec
Hex
Abbr
PR[t 1]
CS[t 2]
CEC[t 3]
Description


000 0000
000
0
00
NUL
␀
^@
\0
Null character


000 0001
001
1
01
SOH
␁
^A

Start of Header


000 0010
002
2
02
STX
␂
^B

Start of Text


000 0011
003
3
03
ETX
␃
^C

End of Text


000 0100
004
4
04
EOT
␄
^D

End of Transmission


000 0101
005
5
05
ENQ
␅
^E

Enquiry


000 0110
006
6
06
ACK
␆
^F

Acknowledgment


000 0111
007
7
07
BEL
␇
^G
\a
Bell


000 1000
010
8
08
BS
␈
^H
\b
Backspace[t 4][t 5]


000 1001
011
9
09
HT
␉
^I
\t
Horizontal Tab


000 1010
012
10
0A
LF
␊
^J
\n
Line feed


000 1011
013
11
0B
VT
␋
^K
\v
Vertical Tab


000 1100
014
12
0C
FF
␌
^L
\f
Form feed


000 1101
015
13
0D
CR
␍
^M
\r
Carriage return[t 6]


000 1110
016
14
0E
SO
␎
^N

Shift Out


000 1111
017
15
0F
SI
␏
^O

Shift In


001 0000
020
16
10
DLE
␐
^P

Data Link Escape


001 0001
021
17
11
DC1
␑
^Q

Device Control 1 (oft. XON)


001 0010
022
18
12
DC2
␒
^R

Device Control 2


001 0011
023
19
13
DC3
␓
^S

Device Control 3 (oft. XOFF)


001 0100
024
20
14
DC4
␔
^T

Device Control 4


001 0101
025
21
15
NAK
␕
^U

Negative Acknowledgement


001 0110
026
22
16
SYN
␖
^V

Synchronous Idle


001 0111
027
23
17
ETB
␗
^W

End of Trans. Block


001 1000
030
24
18
CAN
␘
^X

Cancel


001 1001
031
25
19
EM
␙
^Y

End of Medium


001 1010
032
26
1A
SUB
␚
^Z

Substitute


001 1011
033
27
1B
ESC
␛
^[
\e[t 7]
Escape[t 8]


001 1100
034
28
1C
FS
␜
^\

File Separator


001 1101
035
29
1D
GS
␝
^]

Group Separator


001 1110
036
30
1E
RS
␞
^^

Record Separator


001 1111
037
31
1F
US
␟
^_

Unit Separator





111 1111
177
127
7F
DEL
␡
^?

Delete[t 9][t 5]




^ Printable Representation, the Unicode characters from the area U+2400 to U+2421 reserved for representing control characters when it is necessary to print or display them rather than have them perform their intended function. Some browsers may not display these properly.
^ Control key Sequence/caret notation, the traditional key sequences for inputting control characters. The caret (^) that begins these sequences is not meant to signify the literal ^ character; rather, it represents the "Control" or "Ctrl" key that must be held down while pressing the second key in the sequence. Note that ^^ means Control-Caret (pressing the "Ctrl" and "^" keys), not Control-Control. The caret-key representation is also used by some software to represent control characters.
^ Character Escape Codes in C programming language and many other languages influenced by it, such as Java and Perl (though not all implementations necessarily support all escape codes).
^ The Backspace character can also be entered by pressing the "Backspace", "Bksp", or ← key on some systems.
^ a b The ambiguity surrounding Backspace comes from mismatches between the intent of the human or software transmitting the Backspace and the interpretation by the software receiving it. If the transmitter expects Backspace to erase the previous character and the receiver expects Delete to be used to erase the previous character, many receivers will echo the Backspace as "^H", just as they would echo any other uninterpreted control character. (A similar mismatch in the other direction may yield Delete displayed as "^?".)
^ The Carriage Return character can also be entered by pressing the "Return", "Ret", "Enter", or ↵ key on most systems.
^ The '\e' escape sequence is not part of ISO C and many other language specifications. However, it is understood by several compilers.
^ The Escape character can also be entered by pressing the "Escape" or "Esc" key on some systems.
^ The Delete character can also be entered by pressing the "Delete" or "Del" key. It can also be entered by pressing the "Backspace", "Bksp", or ← key on some systems.



[edit] ASCII printable characters
Code 32, the "space" character, denotes the space between words, as produced by the space-bar of a keyboard. The "space" character is considered an invisible graphic rather than a control character.[7] Codes 33 to 126, known as the printable characters, represent letters, digits, punctuation marks, and a few miscellaneous symbols.
Seven-bit ASCII provided seven "national" characters and, if the combined hardware and software permit, can use overstrikes to simulate some additional international characters: in such a scenario a backspace can precede a grave accent (which the American and British standards, but only those standards, also call "opening single quotation mark"), a backtick, or a breath mark (inverted vel).


Binary
Oct
Dec
Hex
Glyph


010 0000
040
32
20
␠


010 0001
041
33
21
!


010 0010
042
34
22
"


010 0011
043
35
23
#


010 0100
044
36
24
$


010 0101
045
37
25
%


010 0110
046
38
26
&


010 0111
047
39
27
'


010 1000
050
40
28
(


010 1001
051
41
29
)


010 1010
052
42
2A
*


010 1011
053
43
2B
+


010 1100
054
44
2C
,


010 1101
055
45
2D
-


010 1110
056
46
2E
.


010 1111
057
47
2F
/


011 0000
060
48
30
0


011 0001
061
49
31
1


011 0010
062
50
32
2


011 0011
063
51
33
3


011 0100
064
52
34
4


011 0101
065
53
35
5


011 0110
066
54
36
6


011 0111
067
55
37
7


011 1000
070
56
38
8


011 1001
071
57
39
9


011 1010
072
58
3A
:


011 1011
073
59
3B
;


011 1100
074
60
3C
<


011 1101
075
61
3D
=


011 1110
076
62
3E
>


011 1111
077
63
3F
?




Binary
Oct
Dec
Hex
Glyph


100 0000
100
64
40
@


100 0001
101
65
41
A


100 0010
102
66
42
B


100 0011
103
67
43
C


100 0100
104
68
44
D


100 0101
105
69
45
E


100 0110
106
70
46
F


100 0111
107
71
47
G


100 1000
110
72
48
H


100 1001
111
73
49
I


100 1010
112
74
4A
J


100 1011
113
75
4B
K


100 1100
114
76
4C
L


100 1101
115
77
4D
M


100 1110
116
78
4E
N


100 1111
117
79
4F
O


101 0000
120
80
50
P


101 0001
121
81
51
Q


101 0010
122
82
52
R


101 0011
123
83
53
S


101 0100
124
84
54
T


101 0101
125
85
55
U


101 0110
126
86
56
V


101 0111
127
87
57
W


101 1000
130
88
58
X


101 1001
131
89
59
Y


101 1010
132
90
5A
Z


101 1011
133
91
5B
[


101 1100
134
92
5C
\


101 1101
135
93
5D
]


101 1110
136
94
5E
^


101 1111
137
95
5F
_




Binary
Oct
Dec
Hex
Glyph


110 0000
140
96
60
`


110 0001
141
97
61
a


110 0010
142
98
62
b


110 0011
143
99
63
c


110 0100
144
100
64
d


110 0101
145
101
65
e


110 0110
146
102
66
f


110 0111
147
103
67
g


110 1000
150
104
68
h


110 1001
151
105
69
i


110 1010
152
106
6A
j


110 1011
153
107
6B
k


110 1100
154
108
6C
l


110 1101
155
109
6D
m


110 1110
156
110
6E
n


110 1111
157
111
6F
o


111 0000
160
112
70
p


111 0001
161
113
71
q


111 0010
162
114
72
r


111 0011
163
115
73
s


111 0100
164
116
74
t


111 0101
165
117
75
u


111 0110
166
118
76
v


111 0111
167
119
77
w


111 1000
170
120
78
x


111 1001
171
121
79
y


111 1010
172
122
7A
z


111 1011
173
123
7B
{


111 1100
174
124
7C
|


111 1101
175
125
7D
}


111 1110
176
126
7E
~




[edit] Aliases
A June 1992 RFC[30] and the Internet Assigned Numbers Authority registry of character sets[8] recognize the following case-insensitive aliases for ASCII as suitable for use on the Internet:


ANSI_X3.4-1968 (canonical name)
iso-ir-6
ANSI_X3.4-1986
ISO_646.irv:1991
ASCII (with ASCII-7 and ASCII-8 variants)
ISO646-US
US-ASCII (preferred MIME name[8])
us
IBM367
cp367
csASCII


Of these, the IANA encourages use of the name "US-ASCII" for Internet uses of ASCII. One often finds this in the optional "charset" parameter in the Content-Type header of some MIME messages, in the equivalent "meta" element of some HTML documents, and in the encoding declaration part of the prologue of some XML documents.

[edit] Variants
As computer technology spread throughout the world, different standards bodies and corporations developed many variations of ASCII in order to facilitate the expression of non-English languages that used Roman-based alphabets. One could class some of these variations as "ASCII extensions", although some misuse that term to cover all variants, including those that do not preserve ASCII's character-map in the 7-bit range.
The PETSCII Code used by Commodore International for their 8-bit systems is probably unique among post-1970 codes in being based on ASCII-1963 instead of the far more common ASCII-1967, such as found on the ZX Spectrum computer. Atari and Galaksija computers also used ASCII variants.

[edit] Incompatibility vs interoperability
From early in its development,[31] ASCII was intended to be just one of several national variants of an international character code standard, ultimately published as ISO/IEC 646 (1972), which would share most characters in common but assign other locally-useful characters to several code points reserved for "national use." However, the four years that elapsed between the publication of ASCII-1963 and ISO's first acceptance of an international recommendation in 1967[32] caused ASCII's choices for the national use characters to appear to be de facto standards for the world, leading to confusion and incompatibility once other countries did begin to make their own assignments to these code points.
ISO/IEC 646, like ASCII, was a 7-bit character set. It made no additional codes available, so the same code points encoded different characters in different countries. Escape codes were defined to indicate which national variant applied to a piece of text, but they were rarely used, so it was often impossible to know what variant to work with and therefore which character a code represented, and text-processing systems could generally cope with only one variant anyway.
Because the bracket and brace characters of ASCII were assigned to "national use" code points that were used for accented letters in other national variants of ISO/IEC 646, a German, French, or Swedish, etc., programmer had to get used to reading and writing
ä aÄiÜ='Ön'; ü
instead of
{ a[i]='\n'; }
C trigraphs were created to solve this issue in ANSI C, although their late introduction and inconsistent implementation in compilers limited their use.
Eventually, as 8-, 16-, and 32-bit computers began to replace 18- and 36-bit computers as the norm, it became common to use an 8-bit byte to store each character in memory, providing an opportunity for extended, 8-bit, relatives of ASCII, with the 128 additional characters providing room to avoid most of the ambiguity that had been necessary in 7-bit codes.
For example, IBM developed 8-bit code pages, such as code page 437, which replaced the control-characters with graphic symbols such as smiley faces, and mapped additional graphic characters to the upper 128 positions. Operating systems such as DOS supported these code-pages, and manufacturers of IBM PCs supported them in hardware. Digital Equipment Corporation developed the Multinational Character Set (DEC-MCS) for use in the popular VT220 terminal.
Eight-bit standards such as ISO/IEC 8859 (derived from the DEC-MCS) and Mac OS Roman developed as true extensions of ASCII, leaving the original character-mapping intact, but adding additional character definitions after the first 128 (i.e., 7-bit) characters. This enabled representation of characters used in a broader range of languages. Because there were several competing 8-bit code standards, they continued to suffer from incompatibilities and limitations. Still, ISO-8859-1 (Latin 1), its variant Windows-1252 (often mislabeled as ISO-8859-1), and the original 7-bit ASCII remain the most common character encodings in use today.

[edit] Unicode
Unicode and the ISO/IEC 10646 Universal Character Set (UCS) have a much wider array of characters, and their various encoding forms have begun to supplant ISO/IEC 8859 and ASCII rapidly in many environments. While ASCII is limited to 128 characters, Unicode and the UCS support more characters by separating the concepts of unique identification (using natural numbers called code points) and encoding (to 8-, 16- or 32-bit binary formats, called UTF-8, UTF-16 and UTF-32).
To permit backward compatibility, the 128 ASCII and 256 ISO-8859-1 (Latin 1) characters are assigned Unicode/UCS code points that are the same as their codes in the earlier standards. Therefore, ASCII can be considered a 7-bit encoding scheme for a very small subset of Unicode/UCS, and, conversely, the UTF-8 encoding forms are binary-compatible with ASCII for code points below 128, meaning all ASCII is valid UTF-8. The other encoding forms resemble ASCII in how they represent the first 128 characters of Unicode, but use 16 or 32 bits per character, so they require conversion for compatibility. (similarly UCS-2 is upwards compatible with UTF-16)

[edit] Order
Collation of data is sometimes done in ASCII-code order rather than "standard" alphabetical order. The main deviations in ASCII are:

capitals come before lowercase letters, i.e. "Z" before "a"
characters in extended character sets such as "é" come after "z"

The slang expression ASCIIbetical is sometimes used for this order.[33] This ordering can be refined by converting uppercase letters to lowercase before comparing ASCII values, or for more sophisticated purposes, applying a collation map to bring accented characters into the correct positions.

[edit] References


^ Audio pronunciation for ASCII. Merriam Webster. Accessed 2008-04-14.
^ a b Mary Brandel (July 6, 1999). 1963: The Debut of ASCII: CNN. Accessed 2008-04-14.
^ American Standard Code for Information Interchange, ASA X3.4-1963, American Standards Association, June 17, 1963
^ USA Standard Code for Information Interchange, USAS X3.4-1967, United States of America Standards Institute, July 7, 1967
^ American National Standard for Information Systems — Coded Character Sets — 7-Bit American National Standard Code for Information Interchange (7-Bit ASCII), ANSI X3.4-1986, American National Standards Institute, Inc., March 26, 1986
^ International Organization for Standardization (December 1, 1975). "The set of control characters for ISO 646". Internet Assigned Numbers Authority Registry. Alternate U.S. version: [1]. Accessed 2008-04-14.
^ a b Mackenzie, p.223.
^ a b c Internet Assigned Numbers Authority (May 14, 2007). "Character Sets". Accessed 2008-04-14.
^ "utf-8 Growth On The Web"
^ Mackenzie, p.211.
^ Decision 4. Mackenzie, p.215.
^ Decision 5. Mackenzie, p.217.
^ Sawyer A. Sawyer and Steven George Krantz (January 1, 1995). A Tex Primer for Scientists. CRC Press. ISBN 0-8493-7159-7. p.13.
^ Decision 8,9. Mackenzie, p.220.
^ Decision 10. Mackenzie, p.237.
^ Decision 14. Mackenzie, p.228.
^ Decision 18. Mackenzie, p.238.
^ Mackenzie, p.243.
^ Mackenzie, p.243-245.
^ Mackenzie, p.66, 245.
^ Mackenzie, p.435.
^ Brief Report: Meeting of CCITT Working Party on the New Telegraph Alphabet, May 13-15, 1963.
^ Report of ISO/TC/97/SC 2 - Meeting of October 29-31, 1963.
^ Report on Task Group X3.2.4, June 11, 1963, Pentagon Building, Washington, DC.
^ Report of Meeting No. 8, Task Group X3.2.4, December 17 and 18, 1963
^ Mackenzie, p.247-8.
^ Bob Bemer (n.d.). Bemer meets Europe. Trailing-edge.com. Accessed 2008-04-14. Employed at IBM at that time
^ Lyndon B. Johnson (March 11, 1968). Memorandum Approving the Adoption by the Federal Government of a Standard Code for Information Interchange. The American Presidency Project. Accessed 2008-04-14.
^ RFC 2822 (April 2001). "NO-WS-CTL".
^ RFC 1345 (June 1992).
^ "Specific Criteria," attachment to memo from R. W. Reach, "X3-2 Meeting -- September 14 and 15," September 18, 1961
^ R. Maréchal, ISO/TC 97 - Computers and Information Processing: Acceptance of Draft ISO Recommendation No. 1052, December 22, 1967
^ ASCIIbetical definition. PC Magazine. Accessed 2008-04-14.



[edit] Further reading

R.W. Bemer, "A Proposal for Character Code Compatibility," Communications of the ACM, Vol. 3. No. 2, February, 1960, pp. 71–72
R.W. Bemer, "The Babel of Codes Prior to ASCII: The 1960 Survey of Coded Character Sets: The Reasons for ASCII", May 23, 2003 (from H.J. Smith, Jr., F.A. Williams, "Survey of punched card codes", Communications of the ACM 3, 639 & 642, December 1960)
G.S. Robinson & C. Cargill (October 1996). "History and impact of computer standards". Computer Vol. 29, no. 10: pp. 79-85. 
American National Standards Institute, et al (1977). American National Standard Code for Information Interchange. The Institute. 
Charles E. Mackenzie (1980). Coded Character Sets, History and Development. Addison-Wesley. ISBN 0201144603. 


[edit] External links

A history of ASCII, its roots and predecessors by Tom Jennings (October 29, 2004) (accessed 2005-12-17)
The ASCII subset of Unicode
The Evolution of Character Codes, 1874-1968








v • d • e

Character encodings





ASCII • Baudot code • Code page • EBCDIC • Fieldata • Morse code • Unicode





ASCII variants

ATASCII • Galaksija • ISO/IEC 646 • PETSCII • YUSCII • ZX Spectrum character set






Extended ASCII

ArmSCII • Iran System • ISCII • ISO/IEC 8859 • ISO/IEC 8859-1 • KOI8 • Kamenický • Mazovia • Mac OS • TSCII • VISCII • Windows code pages






ASCII-related

ASCII art • ASCII Ribbon Campaign • Bob Bemer • Braille ASCII • Control characters






Unicode

GB 18030 • Han unification • Universal Character Set • UTF-8 • UTF-16/UCS-2 • UTF-32/UCS-4






Unicode-related

UTF-7 • UTF-9 and UTF-18 • UTF-EBCDIC • TRON










Retrieved from "http://en.wikipedia.org/wiki/ASCII"
Categories: ASCII | AcronymsHidden categories: Wikipedia pages move-protected due to vandalism 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Alemannisch
العربية
Asturianu
বাংলা
Bân-lâm-gú
Bosanski
Български
Català
Česky
Dansk
Deutsch
Eesti
Ελληνικά
Español
Esperanto
Euskara
فارسی
Français
Gaeilge
Galego
한국어
Hrvatski
Bahasa Indonesia
Interlingua
Italiano
עברית
Kurdî / كوردی
Latviešu
Lëtzebuergesch
Lietuvių
Magyar
मराठी
Bahasa Melayu
Nederlands
नेपाल भाषा
日本語
‪Norsk (bokmål)‬
‪Norsk (nynorsk)‬
Plattdüütsch
Polski
Português
Ripoarisch
Română
Русский
Scots
Shqip
Simple English
Slovenčina
Slovenščina
Српски / Srpski
Suomi
Svenska
Taqbaylit
ไทย
Türkçe
Українська
اردو
Tiếng Việt
中文









 This page was last modified on 4 April 2009, at 19:06.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
