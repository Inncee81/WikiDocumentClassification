













PHP - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "PHP";
		var wgTitle = "PHP";
		var wgAction = "view";
		var wgArticleId = "24131";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281884920;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [""];
		var wgRestrictionMove = [""];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-php .de1, .source-php .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-php  {}
.source-php .head {}
.source-php .foot {}
.source-php .imp {font-weight: bold; color: red;}
.source-php .ln-xtra {color: #cc0; background-color: #ffc;}
.source-php li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-php li.li2 {font-weight: bold;}
.source-php .kw1 {color: #b1b100;}
.source-php .kw2 {color: #000000; font-weight: bold;}
.source-php .kw3 {color: #000066;}
.source-php .co1 {color: #808080; font-style: italic;}
.source-php .co2 {color: #808080; font-style: italic;}
.source-php .coMULTI {color: #808080; font-style: italic;}
.source-php .es0 {color: #000099; font-weight: bold;}
.source-php .br0 {color: #66cc66;}
.source-php .st0 {color: #ff0000;}
.source-php .nu0 {color: #cc66cc;}
.source-php .me1 {color: #006600;}
.source-php .me2 {color: #006600;}
.source-php .sc0 {}
.source-php .sc1 {}
.source-php .sc2 {}
.source-php .sc3 {}
.source-php .re0 {color: #0000ff;}
.source-php .re1 {color: #ff0000}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); PHP

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
This article is about the scripting language.  For other uses, see PHP (disambiguation).

PHP




Usual file extensions
.php


Paradigm
imperative, object-oriented


Appeared in
1995 (1995)


Designed by
Rasmus Lerdorf


Developer
The PHP Group


Latest release
5.2.9/ 2009-02-26; 39 days ago


Latest unstable release
5.3.0RC1, and 6.0-dev[1]


Typing discipline
Dynamic, weak


Major implementations
Roadsend PHP, Phalanger, Quercus, Project Zero


Influenced by
C, Perl, Java, C++, Tcl[citation needed]


Influenced
Php4delphi


OS
Cross-platform


License
PHP License


Website
http://www.php.net/


PHP is a scripting language originally designed for producing dynamic web pages. It has evolved to include a command line interface capability and can be used in standalone graphical applications.[2]
While PHP was originally created by Rasmus Lerdorf in 1995, the main implementation of PHP is now produced by The PHP Group and serves as the de facto standard for PHP as there is no formal specification.[3] PHP is free software released under the PHP License, however it is incompatible with the GNU General Public License (GPL), due to restrictions on the usage of the term PHP.[4]
PHP is a widely-used general-purpose scripting language that is especially suited for web development and can be embedded into HTML. It generally runs on a web server, taking PHP code as its input and creating web pages as output. It can be deployed on most web servers and on almost every operating system and platform free of charge.[5] PHP is installed on more than 20 million websites and 1 million web servers.[6]




Contents


1 History

1.1 Release history


2 Usage
3 Speed optimization
4 Security
5 Syntax

5.1 Data types
5.2 Functions

5.2.1 5.2 and earlier
5.2.2 5.3 and newer


5.3 Objects


6 Resources
7 See also
8 Notes
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History












Rasmus Lerdorf, who wrote the original Common Gateway Interface binaries, and Andi Gutmans and Zeev Suraski, who rewrote the parser that formed PHP 3





PHP originally stood for Personal Home Page.[3] It began in 1994 as a set of Common Gateway Interface binaries written in the C programming language by the Danish/Greenlandic programmer Rasmus Lerdorf. Lerdorf initially created these Personal Home Page Tools to replace a small set of Perl scripts he had been using to maintain his personal homepage. The tools were used to perform tasks such as displaying his résumé and recording how much traffic his page was receiving.[3] He combined these binaries with his Form Interpreter to create PHP/FI, which had more functionality. PHP/FI included a larger implementation for the C programming language and could communicate with databases, enabling the building of simple, dynamic web applications. Lerdorf released PHP publicly on June 8, 1995 to accelerate bug location and improve the code.[7] This release was named PHP version 2 and already had the basic functionality that PHP has today. This included Perl-like variables, form handling, and the ability to embed HTML. The syntax was similar to Perl but was more limited, simpler, and less consistent.[3]
Zeev Suraski and Andi Gutmans, two Israeli developers at the Technion IIT, rewrote the parser in 1997 and formed the base of PHP 3, changing the language's name to the recursive initialism PHP: Hypertext Preprocessor.[8] The development team officially released PHP/FI 2 in November 1997 after months of beta testing. Afterwards, public testing of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new rewrite of PHP's core, producing the Zend Engine in 1999.[9] They also founded Zend Technologies in Ramat Gan, Israel.[3]
On May 22, 2000, PHP 4, powered by the Zend Engine 1.0, was released.[3] On July 13, 2004, PHP 5 was released, powered by the new Zend Engine II.[3] PHP 5 included new features such as improved support for object-oriented programming, the PHP Data Objects extension (which defines a lightweight and consistent interface for accessing databases), and numerous performance enhancements.[10] The most recent update released by The PHP Group is for the older PHP version 4 code branch. As of August, 2008 this branch is up to version 4.4.9. PHP 4 is no longer under development nor will any security updates be released.[11][12]
In 2008, PHP 5 became the only stable version under development. Late static binding has been missing from PHP and will be added in version 5.3.[13][14] PHP 6 is under development alongside PHP 5. Major changes include the removal of register_globals,[15] magic quotes, and safe mode.[11][16] The reason for the removals was because register_globals had given way to security holes, and magic quotes had an unpredictable nature, and was best avoided. Instead, to escape characters, magic quotes may be substituted with the addslashes() function, or more appropriately an escape mechanism specific to the database vendor itself like mysql_real_escape_string() for MySQL.
PHP does not have complete native support for Unicode or multibyte strings;[17] Unicode support will be included in PHP 6.[18] Many high profile open source projects ceased to support PHP 4 in new code as of February 5, 2008, due to the GoPHP5 initiative, provided by a consortium of PHP developers promoting the transition from PHP 4 to PHP 5.[19][20]
It runs in both 32-bit and 64-bit environments, but on Windows the only official distribution is 32-bit, requiring Windows 32-bit compatibility mode to be enabled while using IIS in a 64-bit Windows environment. There is a third-party distribution[21] available for 64-bit Windows.

[edit] Release history



Meaning


Red
Old release; not supported


Yellow
Old release; still supported


Green
Current release


Blue
Future release




Major Version
Minor Version
Release date
Notes


1.0
1.0.0
1995-06-08
Officially called "Personal Home Page Tools (PHP Tools)". This is the first use of the name "PHP".[3]


2.0
2.0.0
1996-04-16
Considered by its creator as the "fastest and simplest tool" for creating dynamic web pages.[3]


3.0
3.0.0
1998-06-06
Development moves from one person to multiple developers. Zeev Suraski and Andi Gutmans rewrite the base for this version.[3]


4.0
4.0.0
2000-05-22
Added more advanced two-stage parse/execute tag-parsing system called the Zend engine.[22]


4.1.0
2001-12-10
Introduced 'superglobals' ($_GET, $_POST, $_SESSION, etc.)[22]


4.2.0
2002-04-22
Disabled register_globals by default. Data received over the network is not inserted directly into the global namespace anymore, closing possible security holes in applications.[22]


4.3.0
2002-12-27
Introduced the CLI, in addition to the CGI.[22]


4.4.0
2005-07-11
Added man pages for phpize and php-config scripts.[22]


4.4.8
2008-01-03
Several security enhancements and bug fixes. Was to be the end of life release for PHP 4. Security updates only until 2008-08-08, if necessary.[23]


4.4.9
2008-08-07
More security enhancements and bug fixes. The last release of the PHP 4.4 series.[24][25]


5.0
5.0.0
2004-07-13
Zend Engine II with a new object model.[26]


5.1.0
2005-11-24
Performance improvements with introduction of compiler variables in re-engineered PHP Engine.[26]


5.2.0
2006-11-02
Enabled the filter extension by default.[26]


5.2.8
2008-12-08[27]
Emergent bug fix[27]


5.2.9
2009-02-26



5.3.0
Second Quarter of 2009[28]
Namespace support; Late static bindings, Jump label (limited goto), Closures, Native PHP archives (phar), Garbage collection, Persistent Connection with mysqli, sqlite3, Added fileinfo as a mime_magic replacement for better MIME support


6.0
6.0.0
No date set
Unicode support; removal of ereg extension, 'register_globals', 'magic_quotes' and 'safe_mode'; Alternative PHP Cache



[edit] Usage
PHP is a general-purpose scripting language that is especially suited for web development. PHP generally runs on a web server, taking PHP code as its input and creating web pages as output. It can also be used for command-line scripting and client-side GUI applications. PHP can be deployed on most web servers, many operating systems and platforms, and can be used with many relational database management systems. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use.[5]
PHP primarily acts as a filter,[29] taking input from a file or stream containing text and/or PHP instructions and outputs another stream of data; most commonly the output will be HTML. It can automatically detect the language of the user.[30][31] From PHP 4, the PHP parser compiles input to produce bytecode for processing by the Zend Engine, giving improved performance over its interpreter predecessor.[32]
Originally designed to create dynamic web pages, PHP's principal focus is server-side scripting,[33] and it is similar to other server-side scripting languages that provide dynamic content from a web server to a client, such as Microsoft's Active Server Pages, Sun Microsystems' JavaServer Pages,[34] and mod_perl. PHP has also attracted the development of many frameworks that provide building blocks and a design structure to promote rapid application development (RAD). Some of these include CakePHP, Symfony, CodeIgniter, and Zend Framework, offering features similar to other web application frameworks.
The LAMP architecture has become popular in the web industry as a way of deploying web applications. PHP is commonly used as the P in this bundle alongside Linux, Apache and MySQL, although the P may also refer to Python or Perl.
As of April 2007, over 20 million Internet domains were hosted on servers with PHP installed, and PHP was recorded as the most popular Apache module.[35] Significant websites are written in PHP including the user-facing portion of Facebook,[36] Wikipedia (MediaWiki),[37] Yahoo!,[38] MyYearbook,[39], Digg, WordPress and Tagged.[40]
In addition to server-side scripting, PHP can be used to create stand-alone, compiled applications and libraries, it can be used for shell scripting, and the PHP binaries can be called from the command line.

[edit] Speed optimization
As with many scripting languages, PHP scripts are normally kept as human-readable source code, even on production web servers.[41] In this case, PHP scripts will be compiled at runtime by the PHP engine, which increases their execution time. PHP scripts are able to be compiled before runtime using PHP compilers as with other programming languages such as C (the language PHP and its extensions are written in).
Code optimizers aim to reduce the computational complexity of the compiled code by reducing its size and making other changes that can reduce the execution time with the overall goal of improving performance. The nature of the PHP compiler is such that there are often opportunities for code optimization,[42] and an example of a code optimizer is the Zend Optimizer PHP extension.[43]
Another approach for reducing overhead for high load PHP servers is using PHP accelerators. These can offer significant performance gains by caching the compiled form of a PHP script in shared memory to avoid the overhead of parsing and compiling the code every time the script runs.

[edit] Security
The National Vulnerability Database stores all vulnerabities found in computer software. The overall proportion of PHP-related vulnerabilities on the database amounted to: 12% in 2003, 20% in 2004, 28% in 2005, 43% in 2006, 36% in 2007, and 35% in 2008.[44] Most of these PHP-related vulnerabilities can be exploited remotely: they allow crackers to steal or destroy data from data sources linked to the webserver (such as an SQL database), send spam or contribute to DOS attacks using malware, which itself can be installed on the vulnerable servers.
These vulnerabilities are caused mostly by not following best practice programming rules: technical security flaws of the language itself or of its core libraries are not frequent. [45][46] Recognizing that programmers cannot be trusted, some languages include taint checking to detect automatically the lack of input validation which induces many issues. Such a feature is being developed for PHP.[47] Although it may be included in mainstream PHP in a future release, its inclusion has been rejected several times in the past.[48][49]
Hosting PHP applications on a server requires a careful and constant attention to deal with these security risks.[50] There are advanced protection patches such as Suhosin and Hardening-Patch, especially designed for web hosting environments.[51] Installing PHP as a CGI binary rather than as an Apache module is the preferred method for added security.[52]
With respect to securing the code itself, PHP code can be obfuscated to make it difficult to read while remaining functional.

[edit] Syntax
Main article: PHP syntax and semantics


Syntax-highlighted PHP code embedded within HTML


PHP only parses code within its delimiters. Anything outside its delimiters is sent directly to the output and is not parsed by PHP. The most common delimiters are <?php and ?>, which are open and close delimiters respectively. <script language="php"> and </script> delimiters are also available. Short tags can be used to start PHP code, <? or <?= (which is used to echo back a string or variable) and the tag to end PHP code, ?>. These tags are commonly used, but like ASP-style tags (<% or <%= and %>), they are less portable as they can be disabled in the PHP configuration. For this reason, the use of short tags and ASP-style tags is discouraged.[53] The purpose of these delimiters is to separate PHP code from non-PHP code, including HTML.[54]
Variables are prefixed with a dollar symbol and a type does not need to be specified in advance. Unlike function and class names, variable names are case sensitive. Both double-quoted ("") and heredoc strings allow the ability to embed a variable's value into the string.[55] PHP treats newlines as whitespace in the manner of a free-form language (except when inside string quotes), and statements are terminated by a semicolon.[56] PHP has three types of comment syntax: /* */ serves as block comments, and // as well as # are used for inline comments.[57] The echo statement is one of several facilities PHP provides to output text (e.g. to a web browser).
In terms of keywords and language syntax, PHP is similar to most high level languages that follow the C style syntax. If conditions, for and while loops, and function returns are similar in syntax to languages such as C, C++, Java and Perl.

[edit] Data types
PHP stores whole numbers in a platform-dependent range. This range is typically that of 32-bit signed integers. Unsigned integers are converted to signed values in certain situations; this behavior is different from other programming languages.[58] Integer variables can be assigned using decimal (positive and negative), octal, and hexadecimal notations. Floating point numbers are also stored in a platform-specific range. They can be specified using floating point notation, or two forms of scientific notation.[59] PHP has a native Boolean type that is similar to the native Boolean types in Java and C++. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in Perl and C++.[59] The null data type represents a variable that has no value. The only value in the null data type is NULL.[59] Variables of the "resource" type represent references to resources from external sources. These are typically created by functions from a particular extension, and can only be processed by functions from the same extension; examples include file, image, and database resources.[59] Arrays can contain elements of any type that PHP can handle, including resources, objects, and even other arrays. Order is preserved in lists of values and in hashes with both keys and values, and the two can be intermingled.[59] PHP also supports strings, which can be used with single quotes, double quotes, or heredoc syntax.[60]
The Standard PHP Library (SPL) attempts to solve standard problems and implements efficient data access interfaces and classes. [61]

[edit] Functions
PHP has hundreds of base functions and thousands more via extensions. These functions are well documented on the PHP site, but unfortunately, the built-in library has a wide variety of naming conventions and inconsistencies.[62] PHP currently has no functions for thread programming.

[edit] 5.2 and earlier
Functions are not first-class functions and can only be referenced by their name--directly or dynamically by a variable containing the name of the function. [63] User-defined functions can be created at any time without being prototyped.[63] Functions can be defined inside code blocks, permitting a run-time decision as to whether or not a function should be defined. Function calls must use parentheses, with the exception of zero argument class constructor functions called with the PHP new operator, where parentheses are optional. PHP supports quasi-anonymous functions through the create_function() function, although they are not true anonymous functions because anonymous functions are nameless, but functions can only be referenced by name, or indirectly through a variable $function_name();, in PHP.[63]

[edit] 5.3 and newer
PHP gained support for first-class functions and closures. True anonymous functions are supported using the following syntax:


function getAdder($x)
{
    return function ($y) use ($x) {
        return $x + $y;
    };
}
 
$adder = getAdder(8);
echo $adder(2); // prints "10"

Here, getAdder() function creates a closure using parameter $x (keyword "use" forces getting variable from context), which takes additional argument $y and returns it to the caller. Such a function can be stored, given as the parameter to another functions, etc. For more details see Lambda functions and closures RFC.

[edit] Objects
Basic object-oriented programming functionality was added in PHP 3.[3] Object handling was completely rewritten for PHP 5, expanding the feature set and enhancing performance.[64] In previous versions of PHP, objects were handled like primitive types.[64] The drawback of this method was that the whole object was copied when a variable was assigned or passed as a parameter to a method. In the new approach, objects are referenced by handle, and not by value. PHP 5 introduced private and protected member variables and methods, along with abstract classes and final classes as well as abstract methods and final methods. It also introduced a standard way of declaring constructors and destructors, similar to that of other object-oriented languages such as C++, and a standard exception handling model. Furthermore, PHP 5 added interfaces and allowed for multiple interfaces to be implemented. There are special interfaces that allow objects to interact with the runtime system. Objects implementing ArrayAccess can be used with array syntax and objects implementing Iterator or IteratorAggregate can be used with the foreach language construct. There is no virtual table feature in the engine, so static variables are bound with a name instead of a reference at compile time.[65]
If the developer creates a copy of an object using the reserved word clone, the Zend engine will check if a __clone() method has been defined or not. If not, it will call a default __clone() which will copy the object's properties. If a __clone() method is defined, then it will be responsible for setting the necessary properties in the created object. For convenience, the engine will supply a function that imports the properties of the source object, so that the programmer can start with a by-value replica of the source object and only override properties that need to be changed.[66]

[edit] Resources
PHP includes free and open source libraries with the core build. PHP is a fundamentally Internet-aware system with modules built in for accessing FTP servers, many database servers, embedded SQL libraries such as embedded PostgreSQL, MySQL and SQLite, LDAP servers, and others. Many functions familiar to C programmers such as those in the stdio family are available in the standard PHP build.[67] PHP has traditionally used features such as "magic_quotes_gpc" and "magic_quotes_runtime" which attempt to escape apostrophes (') and quotes (") in strings in the assumption that they will be used in databases, to prevent SQL injection attacks. This leads to confusion over which data is escaped and which is not, and to problems when data is not in fact used as input to a database and when the escaping used is not completely correct.[68] To make code portable between servers which do and do not use magic quotes, developers can preface their code with a script to reverse the effect of magic quotes when it is applied.[69]
PHP allows developers to write extensions in C to add functionality to the PHP language. These can then be compiled into PHP or loaded dynamically at runtime. Extensions have been written to add support for the Windows API, process management on Unix-like operating systems, multibyte strings (Unicode), cURL, and several popular compression formats. Some more unusual features include integration with Internet Relay Chat, dynamic generation of images and Adobe Flash content, and even speech synthesis. The PHP Extension Community Library (PECL) project is a repository for extensions to the PHP language.[70]
Zend provides a certification exam for programmers to become certified PHP developers.

[edit] See also




Free software portal




Active Server Pages
Comparison of programming languages
LAMP (software bundle)
List of PHP editors
List of web application frameworks
Perl
PHP accelerator
Python (programming language)
XAMPP (WebServer for PHP)
Zend Framework
Zend Certified Engineer


[edit] Notes


^ "PHP Snapshots". The PHP Group. http://snaps.php.net/. Retrieved on 2008-03-16. 
^ "Introduction: What can PHP do?". PHP Manual. http://www.php.net/manual/en/intro-whatcando.php. Retrieved on 2009-03-05. 
^ a b c d e f g h i j k "History of PHP and related projects". The PHP Group. http://www.php.net/history. Retrieved on 2008-02-25. 
^ "GPL-Incompatible, Free Software Licenses". Various Licenses and Comments about Them. Free Software Foundation. http://www.fsf.org/licensing/licenses/index_html#GPLIncompatibleLicenses. Retrieved on 2008-02-22. 
^ a b "Embedding PHP in HTML". O'Reilly. 2001-05-03. http://www.onlamp.com/pub/a/php/2001/05/03/php_foundations.html. Retrieved on 2008-02-25. 
^ "Usage Stats for April 2007". http://www.php.net/usage.php. Retrieved on 2008-07-07. 
^ Lerdorf, Rasmus (1995-06-08). "Announce: Personal Home Page Tools (PHP Tools)". comp.infosystems.www.authoring.cgi. (Web link). Retrieved on 2006-09-17.
^ "History of PHP and related projects". The PHP Group. http://www.php.net/history. Retrieved on 2008-02-25. 
^ "Zend Engine version 2.0: Feature Overview and Design". Zend Technologies Ltd.. http://www.zend.com/zend/zend-engine-summary.php. Retrieved on 2006-09-17. 
^ Trachtenberg, Adam (2004-07-15). "Why PHP 5 Rocks!". O'Reilly. http://www.onlamp.com/pub/a/php/2004/07/15/UpgradePHP5.html. Retrieved on 2008-02-22. 
^ a b "php.net 2007 news archive". The PHP Group. 2007-07-13. http://www.php.net/archive/2007.php. Retrieved on 2008-02-22. 
^ Kerner, Sean Michael (2008-02-01). "PHP 4 is Dead—Long Live PHP 5". InternetNews. http://www.internetnews.com/dev-news/article.php/3725291. Retrieved on 2008-03-16. 
^ "Late Static Binding in PHP". Digital Sandwich. 2006-02-23. http://www.digitalsandwich.com/archives/53-Late-Static-Binding-in-PHP.html. Retrieved on 2008-03-25. 
^ "Static Keyword". The PHP Group. http://www.php.net/language.oop5.static. Retrieved on 2008-03-25. 
^ "Using Register Globals". PHP. http://www.php.net/register_globals. Retrieved on 2008-04-04. 
^ "Prepare for PHP 6". CorePHP. 2005-11-23. http://www.corephp.co.uk/archives/19-Prepare-for-PHP-6.html. Retrieved on 2008-03-24. 
^ "PHP 6 - Unicode Completion Stats". The PHP Group. 2008-03-25. http://www.php.net/~scoates/unicode/render_func_data.php. Retrieved on 2008-03-25. 
^ "Unicode". The PHP Group. http://www.php.net/~derick/meeting-notes.html#unicode. Retrieved on 2008-03-25. 
^ GoPHP5. "PHP projects join forces to Go PHP 5" (PDF). GoPHP5 Press Release. http://gophp5.org/sites/gophp5.org/files/press_release.pdf. Retrieved on 2008-02-23. 
^ "GoPHP5". GoPHP5. http://gophp5.org/. Retrieved on 2008-02-22. 
^ Fusion-X LAN. "The PHPx64 Project". Fusion-X LAN. http://fusionxlan.com/PHPx64.php. Retrieved on 2008-05-05. 
^ a b c d e "PHP: PHP 4 ChangeLog". The PHP Group. 2008-01-03. http://www.php.net/ChangeLog-4.php. Retrieved on 2008-02-22. 
^ PHP: PHP 4.4.8 Release Announcement
^ PHP: Downloads
^ PHP: PHP 4.4.9 Release Announcement
^ a b c "PHP: PHP 5 ChangeLog". The PHP Group. 2007-11-08. http://www.php.net/ChangeLog-5.php. Retrieved on 2008-02-22. 
^ a b PHP: News Archive - 2008
^ PHP: todo:php53
^ "What does PHP do?". The PHP Group. http://gtk.php.net/manual1/it/html/intro.whatis.php.whatdoes.html. Retrieved on 2008-02-25. 
^ PHP Language Detection :: Detect System Languages, set headers :: $_SERVER["HTTP_ACCEPT_LANGUAGE"]
^ Visitor’s language detection in php | Urbano's Blog
^ "PHP and MySQL". University of Alabama. http://cs.ua.edu/457/Notes/PHP%20and%20MySQL.ppt. Retrieved on 2008-02-25. 
^ "PHP Server-Side Scripting Language". Indiana University. 2007-04-04. http://webmaster.iu.edu/PHPlanguage/index.shtml. Retrieved on 2008-02-25. 
^ "JavaServer Pages Technology - JavaServer Pages Comparing Methods for Server-Side Dynamic Content White Paper". Sun Microsystems. http://java.sun.com/products/jsp/jspservlet.html. Retrieved on 2008-02-25. 
^ "PHP: PHP Usage Stats". SecuritySpace. 2007-04-01. http://www.php.net/usage.php. Retrieved on 2008-02-24. 
^ http://blog.facebook.com/blog.php?post=2356432130
^ http://www.mediawiki.org/wiki/Index.php
^ http://yahoo.com
^ http://myyearbook.com
^ http://tagged.com
^ (Gilmore 2006, p. 43)
^ "PHP Accelerator 1.2 (page 3, Code Optimisation)" (PDF). Nick Lindridge. http://www.php-accelerator.co.uk/PHPA_Article.pdf. Retrieved on 2008-03-28. 
^ "Setting Up Zend Optimizer Tutorial". WebHostGear. http://www.webhostgear.com/184.html. Retrieved on 2008-03-16. 
^ "PHP-related vulnerabilities on the National Vulnerability Database". 2008-03-01. http://www.coelho.net/php_cve.html. 
^ http://seancoates.com/security-and-driving-and-hiring
^ computerworld.uk: Interview: Ivo Jansch, February 26, 2008
^ "PHP Taint Mode RFC". http://wiki.php.net/rfc/taint. 
^ "Developer Meeting Notes, Nov. 2005". http://www.php.net/~derick/meeting-notes.html#sand-boxing-or-taint-mode. 
^ "Taint mode decision, Nov 2007". http://devzone.zend.com/article/2798-Zend-Weekly-Summaries-Issue-368#Heading1. 
^ "The Power of PHP, both Good and Evil". 2009-02-28. http://www.cwihosting.com/php_security.php. 
^ "Hardened-PHP Project". 2008-08-15. http://www.hardened-php.net. 
^ "PHP: Installed as CGI binary". 2008-08-15. http://www.php.net/security.cgi-bin. 
^ "PHP: Basic syntax". The PHP Group. http://www.php.net/manual/en/language.basic-syntax.php. Retrieved on 2008-02-22. 
^ "Your first PHP-enabled page". The PHP Group. http://www.php.net/manual/en/tutorial.firstpage.php. Retrieved on 2008-02-25. 
^ "Variables". The PHP Group. http://www.php.net/manual/en/language.variables.php. Retrieved on 2008-03-16. 
^ "Instruction separation". The PHP Group. http://www.php.net/basic-syntax.instruction-separation. Retrieved on 2008-03-16. 
^ "Comments". The PHP Group. http://www.php.net/manual/en/language.basic-syntax.comments.php. Retrieved on 2008-03-16. 
^ "Integers in PHP, running with scissors, and portability". MySQL Performance Blog. March 27, 2007. http://www.mysqlperformanceblog.com/2007/03/27/integers-in-php-running-with-scissors-and-portability/. Retrieved on 2007-03-28. 
^ a b c d e "Types". The PHP Group. http://www.php.net/manual/en/language.types.php. Retrieved on 2008-03-16. 
^ "Strings". The PHP Group. http://www.php.net/manual/en/language.types.string.php. Retrieved on 2008-03-21. 
^ "SPL - StandardPHPLibrary". PHP.net. March 16, 2009. http://www.php.net/spl. Retrieved on 2009-03-16. 
^ "Do You PHP? By Rasmus Lerdorf". http://www.oracle.com/technology/pub/articles/php_experts/rasmus_php.html. Retrieved on 2008-10-12. 
^ a b c "Functions". The PHP Group. http://www.php.net/manual/en/language.functions.php. Retrieved on 2008-03-16. 
^ a b "PHP 5 Object References". mjtsai. http://mjtsai.com/blog/2004/07/15/php-5-object-references/. Retrieved on 2008-03-16. 
^ "Classes and Objects (PHP 5)". The PHP Group. http://www.php.net/zend-engine-2.php. Retrieved on 2008-03-16. 
^ "Object cloning". The PHP Group. http://www.php.net/language.oop5.cloning. Retrieved on 2008-03-16. 
^ "PHP Function List". The PHP Group. http://www.php.net/quickref.php. Retrieved on 2008-02-25. 
^ Lerdorf, Rasmus (2005-08-12). "PHP 6.0 Wishlist". The PHP Group. http://news.php.net/php.internals/17883. Retrieved on 2008-03-25. 
^ "Disabling Magic Quotes". The PHP Group. http://www.php.net/manual/en/security.magicquotes.disabling.php. Retrieved on 2008-03-25. 
^ "Developing Custom PHP Extensions". devnewz. 2002-09-09. http://www.devnewz.com/090902b.html. Retrieved on 2008-02-25. 



[edit] External links



Wikibooks has a book on the topic of
Programming:PHP






Wikiversity has learning materials about PHP



PHP: Hypertext Preprocessor
PHP at the Open Directory Project
PHP Reference Manual








v • d • e

PHP





People

Andi Gutmans  · Pierre-Alain Joye · Rasmus Lerdorf · Johannes Schlüter · Zeev Suraski






Resources

Zend Engine · Libraries · PEAR · Editors · Accelerator













v • d • e

Free and open source software





General

Copyleft · Events and Awards · Free software · Free Software Definition · Gratis versus Libre · Open source software






Free software
portal









Notable packages

Apache · CUPS · Firefox · GNOME · KDE · OpenOffice.org · Thunderbird · X Window System






Operating systems

AROS · BSD · Darwin · FreeDOS · GNU · Haiku · Inferno · Linux · Mach · MINIX · OpenSolaris · Plan 9 · ReactOS · Syllable






Development

GCC · LLVM · Java · Open64 · Perl · PHP · Python · Lua · Ruby · Tcl · libJIT






History

GNU · Linux · Mozilla (Application Suite · Firefox · Thunderbird)






Organizations

Apache Software Foundation · Blender Foundation · Eclipse Foundation · FLOSS Manuals · freedesktop.org · Free Software Foundation · GNOME Foundation · GNU Project · Google Code · Linux Foundation · Mozilla Foundation · Open Source Geospatial Foundation · Open Source Initiative · SourceForge · Xiph.Org Foundation · X.Org Foundation






Licences

Apache · BSD · GNU GPL · LGPL · MIT · MPL · Permissive · Microsoft Public License · Microsoft Reciprocal License · FSF approved licenses






Challenges

Binary blob · Digital rights management · License proliferation · Mozilla software rebranding · Proprietary software · SCO-Linux controversies · Security · Software patents · Tivoization · Trusted Computing






Other topics

Alternative terms · Community · Linux distribution · Forking · Movement · Microsoft Open Specification Promise · Revolution OS · Comparison with closed source






List of open source software packages








Retrieved from "http://en.wikipedia.org/wiki/PHP"
Categories: PHP | Curly bracket programming languages | Free compilers and interpreters | Procedural programming languages | Object-oriented programming languages | PHP programming language | Scripting languages | Acronyms | Cross-platform softwareHidden categories: All articles with unsourced statements | Articles with unsourced statements since December 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
Alemannisch
العربية
Aragonés
Azərbaycan
বাংলা
Bân-lâm-gú
Boarisch
Bosanski
Brezhoneg
Български
Català
Cebuano
Česky
Cymraeg
Dansk
Deutsch
Eesti
Ελληνικά
Español
Esperanto
Euskara
فارسی
Français
Galego
한국어
हिन्दी
Hrvatski
Bahasa Indonesia
Íslenska
Italiano
עברית
ქართული
Қазақша
Kurdî / كوردی
Latina
Latviešu
Lëtzebuergesch
Lietuvių
Magyar
Македонски
മലയാളം
Bahasa Melayu
Монгол
Myanmasa
Nederlands
日本語
‪Norsk (bokmål)‬
O'zbek
ភាសាខ្មែរ
Plattdüütsch
Polski
Português
Română
Русский
Shqip
Simple English
Slovenčina
Slovenščina
Српски / Srpski
Srpskohrvatski / Српскохрватски
Suomi
Svenska
Tagalog
தமிழ்
Taqbaylit
ไทย
Tiếng Việt
Тоҷикӣ
Türkçe
Türkmençe
Українська
اردو
West-Vlams
吴语
粵語
Žemaitėška
中文









 This page was last modified on 5 April 2009, at 12:30.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
