













Java Media Framework - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Java_Media_Framework";
		var wgTitle = "Java Media Framework";
		var wgAction = "view";
		var wgArticleId = "3451937";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283924728;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Java Media Framework

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Java Media Framework


JMF's simple JMStudio application playing a QuickTime movie


Developed by
Sun Microsystems


Latest release
2.1.1e / 2003-5-23; 2154 days ago


Written in
Java


Operating system
Cross-platform


Type
Library for multimedia


Website
http://java.sun.com/products/java-media/jmf/


The Java Media Framework (JMF) is a Java library that enables audio, video and other time-based media to be added to Java applications and applets. This optional package, which can capture, play, stream, and transcode multiple media formats, extends the Java Platform, Standard Edition (Java SE) and allows development of cross-platform multimedia applications.




Contents


1 Versions and licensing
2 Design concepts
3 Criticism and alternatives

3.1 Alternatives


4 Code example

4.1 Using JMF in webstart


5 See also
6 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Versions and licensing
An initial, playback-only version of JMF was developed by Sun Microsystems, Silicon Graphics, and Intel, and released as JMF 1.0 in 1997. JMF 2.0, developed by Sun and IBM, came out in 1999 and added capture, streaming, pluggable codecs, and transcoding. JMF is branded as part of Sun's "Desktop" technology of J2SE opposed to the Java server-side and client-side application frameworks. The notable exceptions are Java applets and Java Web Start, which have access to the full JMF in the web browser's or appletviewer's underlying JRE.[1][2]
JMF 2.0 originally shipped with an MP3 decoder and encoder. This was removed in 2002, and a new MP3 playback-only plug-in was posted in 2004.
JMF binaries are available under a custom license, and the source is available under the SCSL.
The current version ships with four JAR (file format) files, and shell scripts to launch four JMF-based applications:

JMStudio - A simple player GUI
JMFRegistry - A GUI for managing the JMF "registry," which manages preferences, plug-ins, etc.
JMFCustomizer - Used for creating a JAR file that contains only the classes needed by a specific JMF application, which allows developers to ship a smaller application.
JMFInit

JMF is available in an all-Java version and as platform-specific "performance packs", which can contain native-code players for the platform, and/or hooks into a multimedia engine specific to that platform. JMF 2.0 offers performance packs for Linux, Solaris and Windows (on SPARC).[1]

[edit] Design concepts
JMF abstracts the media it works with into DataSources (for media being read into JMF) and DataSinks (for data being exported out). It does not afford the developer significant access to the particulars of any given format; rather, media is represented as sources (themselves obtained from URL's) that can be read in and played, processed, and exported (though not all codecs support processing and transcoding).
A Manager class offers static methods that are the primary point-of-contact with JMF for applications.

[edit] Criticism and alternatives
Many JMF developers have complained that the JMF implementation supplied in up-to-date JRE's supports relatively few up-to-date codecs and formats. Its all-Java version, for example, cannot play MPEG-2, MPEG-4, Windows Media, RealMedia, most QuickTime movies, Flash content newer than Flash 2, and needs a plug-in to play the ubiquitous MP3 format.[3] While the performance packs offer the ability to use the native platform's media library, they're only offered for Linux, Solaris and Windows. In particular, MS Windows-based JMF developers new to JMF often expect support for some newer formats on all platforms when such formats are only, in fact, supported on MS Windows.
While JMF is considered a very useful framework, the freely-available implementation provided by Sun is suffering from a lack of updates and maintenance. JMF does not get much maintenance effort from Sun; the API has not been enhanced since 1999, and the last news item on JMF's home page was posted in November 2004. While JMF is built for extensibility, there are few such third-party extensions. Furthermore, content editing functionality in JMF is effectively non-existent. You can do simple recording and playback for audio and video, but the implementation provided by Sun can do little else.[4]
Platforms beyond those that Sun provides support to are left to their corresponding JRE vendors.[5] While Sun still provides a forum for discussion of its implementation, there have been several efforts to implement open-source alternatives.[6][7][8][9][10]

[edit] Alternatives
Depending on a developer's needs, several other libraries may be more suitable than JMF. These include:

JavaSound
QuickTime for Java
IBM Toolkit for MPEG-4
Jffmpeg
jvlc
gstreamer-java
FMJ
Fluendo's port of Theora to Java
Directshow <> Java Wrapper
Fobs4JMF
JLayer MP3 library
Xuggle


[edit] Code example
The following example shows an AWT file-selection dialog, and attempts to load and play the media file selected by the user.


import javax.media.*;
import java.io.File;
import java.awt.*;
 
public class TrivialJMFPlayer extends Frame {
 
    public static void main (String[] args) {
        try {
            Frame f = new TrivialJMFPlayer();
            f.pack();
            f.setVisible (true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public TrivialJMFPlayer() 
        throws java.io.IOException,
               java.net.MalformedURLException,
               javax.media.MediaException {
        FileDialog fd = new FileDialog
            (this, "TrivialJMFPlayer", FileDialog.LOAD);
        fd.setVisible(true);
        File f = new File (fd.getDirectory(), fd.getFile());
        Player p = Manager.createRealizedPlayer
            (f.toURI().toURL());
        Component c = p.getVisualComponent();
        add (c);
        p.start();
    }
}

Much of the example is involved with the building of the AWT GUI. Only two lines touch JMF. Manager.createRealizedPlayer() implicitly creates a DataSource from a URL representation of the file, creates a Player, and realizes it, meaning that all resources necessary for playback are allocated and initialized. The getVisualComponent() asks the Player for an AWT Component suitable for use in a GUI. If a control component were desired, it would be obtained with getControlPanelComponent() and added to the GUI separately. Note that the developer is not concerned with the format of the media - this code works equally well for any media format that JMF can import and read.

[edit] Using JMF in webstart





This article contains instructions, advice, or how-to content. The purpose of Wikipedia is to present facts, not to train. Please help improve this article either by rewriting the how-to content or by moving it to Wikiversity or Wikibooks.


Many users have reported difficulty in using JMF in applications through webstart to write media to the local disk. This is not necessarily a difficult task, just a very specific process:

Make certain that the Java Media Framework has been installed properly according to the directions listed by sun for your operating system. This part is critical, if the JMFHOME, and CLASSPATH system variables are not set properly, the remaining steps will not work.
Run the JMFRegistry application, make certain "Allow File Writing For Applets" is checked, then click Commit. If an error was displayed in the console window, please revisit the first step and make sure that JMF is installed properly.
Run JMFCustomizer with the following command "java JMFCustomizer -p <path to javac>". Select all the desired options, and create your own custom jmf.jar. This jar contains the same registry settings that your development platform was configured with. Now all that remains is to sign it with the same key that the other jars in your application are signed with, and include it in your jnlp file.


[edit] See also

QuickTime for Java


[edit] References


^ a b JMF FAQ
^ Java Media Framework API
^ JMF 2.1.1 - Supported Formats
^ JMF: A Mistake Asking to Be Re-Made by Chris Adamson, December 13, 2005
^ Installation Instructions for JMF on Mac OS X
^ JMF-Interest, the official discussion list
^ Jffmpeg: A JMF open-source plugin to support additional codecs
^ Fobs4JMF: Another JMF open source plugin to support additional codecs
^ FMJ: An open-source replacement for/alternative to/implementation of JMF
^ Xuggler: An open-source java plugin that supports additional codecs and is automatically kept up to date with FFMPEG









v • d • e

Java





Java platform

Java ME · Java SE · Java EE · Java Card







Sun technologies

Java programming language · Squawk · Java Development Kit · OpenJDK · Java Virtual Machine · JavaFX






Major third-party technologies

JRockit · GNU Classpath · Kaffe · TopLink · Apache Harmony · Apache Struts · Spring framework · Hibernate · JBoss application server · Processing · Tapestry · Thinwire






History

Java version history · Criticism of Java · Java Community Process · Sun Microsystems · Free Java implementations






Language features

Bytecode · Syntax · Applets · Servlets · MIDlets · jsp · Web Start (jnlp)






Scripting languages

Java Tcl · Jython · JRuby · BeanShell · Groovy · Judoscript · Sleep · Bean Scripting Framework · Yoix · Rhino






Java conferences

JavaOne









Retrieved from "http://en.wikipedia.org/wiki/Java_Media_Framework"
Categories: Java platform | Java APIs | Multimedia frameworksHidden categories: Articles containing how-to sections 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
日本語
Polski
Português









 This page was last modified on 15 April 2009, at 03:19 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
