













Computer music - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Computer_music";
		var wgTitle = "Computer music";
		var wgAction = "view";
		var wgArticleId = "6974";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281850002;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Computer music

From Wikipedia, the free encyclopedia

Jump to: navigation, search 







This article or section has multiple issues. Please help improve the article or discuss these issues on the talk page.

It needs additional references or sources for verification. Tagged since May 2008.
It may contain original research or unverifiable claims. Tagged since May 2008.





Computer music is a term that was originally used within academia to describe a field of study relating to the applications of computing technology in music composition; particularly that stemming from the Western art music tradition. It includes the theory and application of new and existing technologies in music, such as sound synthesis, digital signal processing, sound design, sonic diffusion, acoustics, and psychoacoustics. The field of computer music can trace its roots back to the origin of electronic music, and the very first experiments and innovations with electronic instruments at the turn of the 20th century. More recently, with the advent of personal computing, and the growth of home recording, the term computer music is now sometimes used to describe any music that has been created using computing technology.




Contents


1 History
2 Advances
3 Research
4 Computer Generated music

4.1 Computer-generated scores for performance by human players
4.2 Music composed and performed by computers
4.3 Computer-Aided Algorithmic Composition


5 Machine Improvisation

5.1 Statistical style modeling
5.2 Uses of Machine Improvisation
5.3 Implementations
5.4 Musicians working with machine improvisation


6 Live coding
7 See also
8 References
9 Further reading
10 External links

10.1 Software environments
10.2 Articles
10.3 Archives
10.4 Works composed by computers for human performance
10.5 Computer-generated compositions performed by computers







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
See also: Computer music programming languages
Much of the work on computer music has drawn on the relationship between music theory and mathematics. The world's first computer to play music was CSIRAC which was designed and built by Trevor Pearcey and Maston Beard. Mathematician Geoff Hill programmed the CSIRAC to play popular musical melodies from the very early 1950s. In 1951 it publicly played the Colonel Bogey March[1] of which no known recordings exist. However, CSIRAC played standard repertoire and was not used to extend musical thinking or composition practice which is current computer music practice.
The oldest known recordings of computer generated music were played by the Ferranti Mark I computer, a commercial version of the Baby Machine from the University of Manchester in the autumn of 1951. The music program was written by Christopher Strachey. During a session recorded by the BBC, the machine managed to work its way through Baa Baa Black Sheep, God Save the King and part of In the Mood[2]. Subsequently, Lejaren Hiller (i.e., the Illiac Suite) used a computer in the mid 1950s to compose works that were then played by conventional musicians. Later developments included the work of Max Mathews at Bell Laboratories, who developed the influential MUSIC I program. Vocoder technology was also a major development in this early era.
In 1967 Pietro Grossi made the first experiences in computer music in Italy.[3]
Early computer music programs typically did not run in real-time. Programs would run for hours or days, on multi-million-dollar computers, in order to generate a few minutes of music. John Chowning's work on FM synthesis, in the early 70s, and the advent of inexpensive digital chips and microcomputers opened the door to real-time generation of computer music. By the early 90s, the performance of microprocessor-based computers reached the point that real-time generation of computer music using more general programs and algorithms became possible.

[edit] Advances
Advances in computing power have dramatically affected the way computer music is generated and performed. Current-generation micro-computers are powerful enough to perform very sophisticated audio synthesis using a wide variety of algorithms and approaches. Computer music systems and approaches are now ubiquitous, and so firmly embedded in the process of creating music that we hardly give them a second thought: computer-based synthesizers, digital mixers, and effects units have become so commonplace that use of digital rather than analog technology to create and record music is the norm, rather than the exception.

[edit] Research
Despite the ubiquity of computer music in contemporary culture, there is considerable activity in the field of computer music, as researchers continue to pursue new and interesting computer-based synthesis, composition, and performance approaches.Throughout the world there are many organizations and institutions dedicated to the area of computer and electronic music study and research, including the ICMA (International Computer Music Association), IRCAM, Princeton Sound Lab, GRAME, SEAMUS (Society for Electro Acoustic Music in the United States), and a great number of institutions of higher learning around the world.

[edit] Computer Generated music
Computer-generated music is music composed by, or with the extensive aid of, a computer. Although any music which uses computers in its composition or realisation is computer-generated to some extent, the use of computers is now so widespread (in the editing of pop songs, for instance) that the phrase computer-generated music is generally used to mean a kind of music which could not have been created without the use of computers.
We can distinguish two groups of computer-generated music: music in which a computer generated the score, which could be performed by humans, and music which is both composed and performed by computers.There is a large genre of music that is organized, synthesized, and created on computers.

[edit] Computer-generated scores for performance by human players
Many systems for generating musical scores actually existed well before the time of computers. One of these was Musikalisches Würfelspiel, a system which used throws of the dice to randomly select measures from a large collection of small phrases. When patched together, these phrases combined to create musical pieces which could be performed by human players. Although these works were not actually composed with a computer in the modern sense, it uses a rudimentary form of the random combinatorial techniques sometimes used in computer-generated composition.
The world's first digital computer music was generated in Australia by programmer Geoff Hill on the CSIRAC computer which was designed and built by Trevor Pearcey and Maston Beard, although it was only used to play standard tunes of the day. Subsequently, one of the first composers to write music with a computer was Iannis Xenakis. He wrote programs in the FORTRAN language that generated numeric data that he transcribed into scores to be played by traditional musical instruments. An example is ST/48 of 1962. Although Xenakis could well have composed this music by hand, the intensity of the calculations needed to transform probabilistic mathematics into musical notation was best left to the number-crunching power of the computer.
Computers have also been used in an attempt to imitate the music of great composers of the past, such as Mozart. A present exponent of this technique is David Cope. He wrote computer programs that analyse works of other composers to produce new works in a similar style. He has used this program to great effect with composers such as Bach and Mozart (his program Experiments in Musical Intelligence is famous for creating "Mozart's 42nd Symphony"), and also within his own pieces, combining his own creations with that of the computer.

[edit] Music composed and performed by computers
See also: Generative music, Evolutionary music, and Genetic algorithm
Later, composers such as Gottfried Michael Koenig had computers generate the sounds of the composition as well as the score. Koenig produced algorithmic composition programs which were a generalisation of his own serial composition practice. This is not exactly similar to Xenakis' work as he used mathematical abstractions and examined how far he could explore these musically. Koenig's software translated the calculation of mathematical equations into codes which represented musical notation. This could be converted into musical notation by hand and then performed by human players. His programs Project 1 and Project 2 are examples of this kind of software. Later, he extended the same kind of principles into the realm of synthesis, enabling the computer to produce the sound directly. SSP is an example of a program which performs this kind of function. All of these programs were produced by Koenig at the Institute of Sonology in Utrecht, Holland in the 1970s.
Procedures such as those used by Koenig and Xenakis are still in use today. Since the invention of the MIDI system in the early 1980s, for example, some people have worked on programs which map MIDI notes to an algorithm and then can either output sounds or music through the computer's sound card or write an audio file for other programs to play.
Some of these simple programs are based on fractal geometry, and can map midi notes to specific fractals, or fractal equations. Although such programs are widely available and are sometimes seen as clever toys for the non-musician, some professional musicians have given them attention also. The resulting 'music' can be more like noise, or can sound quite familiar and pleasant. As with much algorithmic music, and algorithmic art in general, more depends on the way in which the parameters are mapped to aspects of these equations than on the equations themselves. Thus, for example, the same equation can be made to produce both a lyrical and melodic piece of music in the style of the mid-nineteenth century, and a fantastically dissonant cacophony more reminiscent of the avant-garde music of the 1950s and 1960's.
Other programs can map mathematical formulae and constants to produce sequences of notes. In this manner, an irrational number can give an infinite sequence of notes where each note is a digit in the decimal expression of that number. This sequence can in turn be a composition in itself, or simply the basis for further elaboration.
Operations such as these, and even more elaborate operations can also be performed in computer music programming languages such as Max/MSP, SuperCollider, Csound, Pure Data (Pd), Keykit, and ChucK. These programs now easily run on most personal computers, and are often capable of more complex functions than those which would have necessitated the most powerful mainframe computers several decades ago.




Diagram illustrating the position of CAAC in relation to other Generative music Systems


There exist programs that generate "human-sounding" melodies by using a vast database of phrases. One example is Band-in-a-Box, which is capable of creating jazz, blues and rock instrumental solos with almost no user interaction. Another is Impro-Visor, which uses a stochastic context-free grammar to generate phrases and complete solos.
Another 'cybernetic' approach to computer composition uses specialized hardware to detect external stimuli which are then mapped by the computer to realize the performance. Examples of this style of computer music can be found in the middle-80's work of David Rokeby (Very Nervous System) where audience/performer motions are 'translated' to MIDI segments. Computer controlled music is also found in the performance pieces by the Canadian composer Udo Kasemets (1919-) such as the Marce(ntennia)l Circus C(ag)elebrating Duchamp (1987), a realization of the Marcel Duchamp process piece Music Errata using an electric model train to collect a hopper-car of stones to be deposited on a drum wired to an Analog:Digital converter, mapping the stone impacts to a score display (performed in Toronto by pianist Gordon Monahan during the 1987 Duchamp Centennial), or his installations and performance works (eg Spectrascapes) based on his Geo(sono)scope (1986) 15x4-channel computer-controlled audio mixer. In these latter works, the computer generates sound-scapes from tape-loop sound samples, live shortwave or sine-wave generators.

[edit] Computer-Aided Algorithmic Composition
Computer-Aided Algorithmic Composition (CAAC, pronounced "sea-ack") is the implementation and use of algorithmic composition techniques in software. This label is derived from the combination of two labels, each too vague for continued use. The label "computer-aided composition" lacks the specificity of using generative algorithms. Music produced with notation or sequencing software could easily be considered computer-aided composition. The label "algorithmic composition" is likewise too broad, particularly in that it does not specify the use of a computer. The term computer-aided, rather than computer-assisted, is used in the same manner as Computer-Aided Design

[edit] Machine Improvisation
See also: Machine learning, Machine listening, Artificial intelligence, and Neural networks
Machine Improvisation uses computer algorithms to create improvisation on existing music materials. This is usually done by sophisticated recombination of musical phrases extracted from existing music, either live or pre-recorded. In order to achieve credible improvisation in particular style, machine improvisation uses machine learning and pattern matching algorithms to analyze existing musical examples. The resulting patterns are then used to create new variations "in the style" of the original music, developing a notion of stylistic reinjection. This is different from other improvisation methods with computers that use algorithmic composition to generate new music without performing analysis of existing music examples.

[edit] Statistical style modeling
Style modeling implies building a computational representation of the musical surface that captures important stylistic features from data. Statistical approaches are used to capture the redundancies in terms of pattern dictionaries or repetitions, which are later recombined to generate new musical data. Style mixing can be realized by analysis of a database containing multiple musical examples in different styles. Machine Improvisation builds upon a long musical tradition of statistical modeling that began with Hiller and Isaacson’s Illiac Suite in the 1950s and Xenakis’ uses of Markov chains and stochastic processes. Modern methods include the use of lossless data compression for incremental parsing, Prediction Suffix Tree and string searching by factor oracle algorithm

[edit] Uses of Machine Improvisation
Machine Improvisation encourages musical creativity by providing automatic modeling and transformation structures for existing music. This creates a natural interface with the musician without need for coding musical algorithms. In live performance, the system re-injects the musician's material in several different ways, allowing a semantics-level representation of the session and a smart recombination and transformation of this material in real-time. In offline version, Machine Improvisation can be used to achieve style mixing, an approach inspired by Vannevar Bush's memex imaginary machine.

[edit] Implementations
Matlab implementation of the Factor Oracle machine improvisation can be found as part of Computer Audition toolbox.
OMax is a software environment developed in IRCAM. OMax uses OpenMusic and Max. It is based on researches on stylistic modeling carried out by Gerard Assayag and Shlomo Dubnov and on researches on improvisation with the computer by G. Assayag, M. Chemillier and G. Bloch (Aka the OMax Brothers) in the Ircam Music Representations group.

[edit] Musicians working with machine improvisation
Gerard Assayag (IRCAM, France), Tim Blackwell (Goldsmiths College, Great Brittan), George Bloch (Composer, France), Marc Chemiller (IRCAM/CNRS, France), Shlomo Dubnov (Composer, Israel / USA), Mari Kimura (Julliard, New York City), George Lewis (Columbia University, New York City), Bernard Lubat (Pianist, France), Joel Ryan (Institute of Sonology, Netherlands), Michel Waisvisz (STEIM, Netherlands), David Wessel (CNMAT, California), Michael Young (Goldsmiths College, Great Brittan), Pietro Grossi (CNUCE, Institute of the National Research Council, Pisa, Italy)

[edit] Live coding
See also: Interactive programming
Live coding[4] (sometimes known as 'interactive programming', 'on-the-fly programming'[5], 'just in time programming') is the name given to the process of writing software in realtime as part of a performance. Historically, similar techniques were used to produce early computer art[citation needed], but recently it has been explored as a more rigorous alternative to laptop DJs who, live coders often feel, lack the charisma and pizzazz of musicians performing live.[6]
Generally, this practise stages a more general approach: one of interactive programming, of writing (parts of) programs while they run. Traditionally most computer music programs have tended toward the old write/compile/run model which evolved when computers were much less powerful. This approach has locked out code-level innovation by people whose programming skills are more modest. Some programs have gradually integrated real-time controllers and gesturing (for example, MIDI-driven software synthesis and parameter control). Until recently, however, the musician/composer rarely had the capability of real-time modification of program code itself. This legacy distinction is somewhat erased by languages such as ChucK, SuperCollider, and Impromptu.
TOPLAP, an ad-hoc conglomerate of artists interested in live coding was set up in 2003, and promotes the use, proliferation and exploration of a range of software, languages and techniques to implement live coding. This is a parallel and collaborative effort e.g. with research at the Princeton Sound Lab, the University of Cologne, and Computational Arts Research Group at Queensland University of Technology.

[edit] See also




Acousmatic art
Chiptune
Comparison of audio synthesis environments
Csound
Digital audio workstation
Digital synthesizer
Electronic music
Fast Fourier Transform
Human-computer interaction
Interactive music
Music information retrieval




Music Macro Language
Music notation software
Music sequencer
New interfaces for musical expression
Physical modeling
Sampling (music)
sound synthesis
Tracker





[edit] References

^ Doornbusch, Paul. "The Music of CSIRAC". Melbourne School of Engineering, Department of Computer Science and Software Engineering. http://www.csse.unimelb.edu.au/dept/about/csirac/music/introduction.html. 
^ Fildes, Jonathan (June 2008). "'Oldest' computer music unveiled". news.bbc.co.uk. http://news.bbc.co.uk/2/hi/technology/7458479.stm. Retrieved on 2008-06-17. 
^ [|Gaburo, Kenneth] (1985). Reflections on Pietro Grossi’s Paganini Al Computer. University of Iowa USA The MIT Press. 
^ Collins, N., McLean, A., Rohrhuber, J. & Ward, A. (2003), Live Coding Techniques for Laptop Performance, Organised Sound 8(3): pp 321-30. doi:10.1017/S135577180300030X
^ Wang G. & Cook P. (2004) ,"On-the-fly Programming: Using Code as an Expressive Musical Instrument",In Proceedings of the 2004 International Conference on New Interfaces for Musical Expression (NIME).
^ Collins, N. (2003),Generative Music and Laptop Performance,Contemporary Music Review,22:4,67 — 79


[edit] Further reading

Ariza, C. 2005. "Navigating the Landscape of Computer-Aided Algorithmic Composition Systems: A Definition, Seven Descriptors, and a Lexicon of Systems and Research." In Proceedings of the International Computer Music Conference. San Francisco: International Computer Music Association. 765-772. Internet: http://www.flexatone.net/docs/nlcaacs.pdf
Ariza, C. 2005. An Open Design for Computer-Aided Algorithmic Music Composition: athenaCL. Ph.D. Dissertation, New York University. Internet: http://www.dissertation.com/book.php?method=ISBN&book=1581122926
Berg, P. 1996. "Abstracting the future: The Search for Musical Constructs" Computer Music Journal 20(3): 24-27.
Chadabe Joel. 1997. Electric Sound: The Past and Promise of Electronic Music. Upper Saddle River, New Jersey: Prentice Hall.
Chowning, John. 1973. "The Synthesis of Complex Audio Spectra by Means of Frequency Modulation". Journal of the Audio Engineering Society 21, no. 7:526–34.
Manning, Peter. 2004. Electronic and Computer Music. Revised and expanded edition. Oxford and New York: Oxford University Press. ISBN 0195144848 (cloth) ISBN 0195170857 (pbk)
Heifetz, Robin J. (ed.). 1989. "On The Wires of Our Nerves: The Art of Electroacoustic Music". Cranbury, NJ: Associated University Presses. ISBN 0838751555
Roads, Curtis. 1996. The Computer Music Tutorial. Cambridge, MA: MIT Press. ISBN 0262181584 (cloth) ISBN 0262680823 (pbk)
Supper, M. 2001. "A Few Remarks on Algorithmic Composition." Computer Music Journal 25(1): 48-53.
Xenakis, Iannis. 2001. Formalized Music: Thought and Mathematics in Composition (Harmonologia Series No.6). Hillsdale, NY: Pendragon Press. ISBN 1-57647-079-2


[edit] External links





This article's external links may not follow Wikipedia's content policies or guidelines. Please improve this article by removing excessive or inappropriate external links.



[edit] Software environments

AC Toolbox
Bol Processor
ChucK, a strongly-timed, concurrent, and on-the-fly language
Csound
fluxus livecoding and playing/learning environment for 3D graphics and games based on Scheme
Impromptu
Impro-Visor improvisation instruction, with automatic melody generation
MEAPsoft descriptor based audio segmentation and re-arrangement
KeyKit
OMax software
Pd
Processing
SuperCollider


[edit] Articles

Computer Generated Music Composition thesis by Chong Yu (MIT 1996)
Computer-aided Composition article by Karlheinz Essl (1991)
G. Assayag, S. Dubnov « Using Factor Oracles for machine Improvisation », Soft Computing, vol. 8, n° 9, Septembre, 2004
S. Dubnov et al. Using machine-learning methods for musical style modeling, IEEE Computer, Oct. 2003
G. Lewis, Too Many Notes: Computers, Complexity and Culture in Voyager, Leonardo Music Journal 10 (2000) 33-39
S. Dubnov, Stylistic randomness: about composing NTrope Suite, Organised Sound, Volume 4 , Issue 2 (June 1999)


[edit] Archives

algorithmic.net - a lexicon of systems and research in computer aided algorithmic composition


[edit] Works composed by computers for human performance

Illiac Suite for string quartet, by Lejaren A. Hiller (1957)
Übung, 3 Asko Pieces, Beitrag (amongst others) by G.M. Koenig


[edit] Computer-generated compositions performed by computers

Lexikon-Sonate: Karlheinz Essl's algorithmic composition environment
Metamath Music Music generated from mathematical proofs
CodeSounding Sonification of java source code structures, obtained by post-processing the source files. Runtime sounds are a function of how was structured the source code of the running program
Virtual Music Composer This software works as a composer, not as a tool for composing
Fractal Tune Smithy Computer generated music based on a similar idea to the Koch snowflake, with many examples of tunes you can make
ALICE A software that can improvise in real-time with a human player using an Artificial neural network
"viral symphOny" created using computer virus software by Joseph Nechvatal




Retrieved from "http://en.wikipedia.org/wiki/Computer_music"
Categories: Musical techniquesHidden categories: Articles lacking reliable references from May 2008 | Articles that may contain original research since May 2008 | All articles with unsourced statements | Articles with unsourced statements since December 2008 | Wikipedia external links cleanup 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
فارسی
Français
Italiano
Nederlands
日本語
Português
Suomi









 This page was last modified on 5 April 2009, at 06:27.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
