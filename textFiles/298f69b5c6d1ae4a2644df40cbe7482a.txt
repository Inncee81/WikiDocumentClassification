













IOMMU - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "IOMMU";
		var wgTitle = "IOMMU";
		var wgAction = "view";
		var wgArticleId = "5313181";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 267266542;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); IOMMU

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




Comparison of the I/O memory management unit (IOMMU) to the memory management unit (MMU).


In computing, an input/output memory management unit (IOMMU) is a memory management unit (MMU) that connects a DMA-capable I/O bus to the main memory. Like a traditional MMU, which translates CPU-visible virtual addresses to physical addresses, the IOMMU takes care of mapping device-visible virtual addresses (also called device addresses or I/O addresses in this context) to physical addresses. Some units also provide memory protection from misbehaving devices.
An example IOMMU is the Graphics Address Remapping Table (GART) used by AGP and PCI Express graphics cards.
AMD has published a specification for IOMMU technology in the HyperTransport architecture[1]. Intel has published a specification for IOMMU technology as Virtualization Technology for Directed I/O, abbreviated VT-d.[2] Information about the Sun IOMMU has been published in the Device Virtual Memory Access (DVMA) section of the Solaris Developer Connection.[3] The IBM Translation Control Entry (TCE) has been described in a document entitled Logical Partition Security in the IBM eServer pSeries 690.[4] The PCI-SIG has relevant work under the terms I/O Virtualization (IOV)[5] and Address Translation Services (ATS).




Contents


1 Advantages
2 Disadvantages
3 IOMMU in relation to virtualization
4 See also
5 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Advantages
The advantages of having an IOMMU, compared to direct physical addressing of the memory, include:

Large regions of memory can be allocated without the need to be contiguous in physical memory — the IOMMU will take care of mapping contiguous virtual addresses to the underlying fragmented physical addresses. Thus, the use of vectored I/O (scatter-gather lists) can sometimes be avoided.
For devices that do not support memory addresses long enough to address the entire physical memory, the device can still address the entire memory through the IOMMU. This avoids overhead associated with copying buffers to and from the memory space the peripheral can address.

For example, on contemporary x86 computers, more than 4 GiB of memory can be used, enabled by the PAE feature in an x86 processor. Still, an ordinary 32-bit PCI device simply cannot address the memory above the 4 GiB boundary, and thus it cannot perform DMA to it. Without an IOMMU, the operating system is forced to implement time consuming double buffers[6] (Windows nomenclature) also known as bounce buffers (Linux).


Memory protection from malicious or misbehaving devices: a device cannot read or write to memory that hasn't been explicitly allocated (mapped) for it. The memory protection is based on the fact that OS running on the CPU (see figure) exclusively controls both the MMU and the IOMMU. The devices are physically unable to circumvent or corrupt configured memory management tables.

With virtualization, guest operating systems can use hardware that is not specifically made for virtualization. Higher performance hardware such as graphics cards use DMA to access memory directly; in a virtual environment all the memory addresses are remapped by the virtual machine software, which causes DMA devices to fail. The IOMMU handles this remapping, allowing for the native device drivers to be used in a guest operating system.


In some architectures IOMMU performs also hardware interrupt remapping, in a manner similar to standard memory address remapping.
Peripheral memory paging can be supported by an IOMMU. A peripheral using the PCI-SIG PCIe Address Translation Services (ATS) Page Request Interface (PRI) extension can detect and signal the need for memory manager services.

For system architectures in which port I/O is a distinct address space from the memory address space, an IOMMU is not used when the CPU communicates with devices via I/O ports. In system architectures in which port I/O and memory are mapped into a suitable address space, an IOMMU can translate port I/O accesses.

[edit] Disadvantages
The disadvantages of having an IOMMU, compared to direct physical addressing of the memory, include:[7]

Some degradation of performance from translation and management overhead (e.g., page table walks).
Consumption of physical memory for the added I/O page (translation) tables. This can be mitigated if the tables can be shared with the processor.


[edit] IOMMU in relation to virtualization
When an operating system is running inside a virtual machine, including systems that use paravirtualization, such as Xen, it does not usually know the physical addresses of memory that it accesses. This makes providing direct access to the computer hardware difficult, because if the OS tried to instruct the hardware to perform a direct memory access (DMA), it would likely corrupt the memory, as the hardware does not know about the mapping between the virtual and real addresses used by the virtualized guest system. The corruption is avoided because the hypervisor or OS intervenes in the I/O operation to apply the translations; unfortunately, this delays the I/O operation.
An IOMMU can solve this problem by re-mapping the addresses accessed by the hardware according to the same (or a compatible) translation table used by the virtual machine guest.[8]

[edit] See also

Virtual memory
Memory-mapped I/O
Direct memory access


[edit] References

Bottomley, James (2004-05-01). "Using DMA". Linux Journal (Specialized Systems Consultants). http://www.linuxjournal.com/node/7104/print. 


^ "AMD I/O Virtualization Technology (IOMMU) Specification Revision 1.0". http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/34434.pdf. Retrieved on 2006-02-01. 
^ "Mainstreaming Server Virtualization: The Intel Approach". http://www.intel.com/business/technologies/idc_virtualization_wp.pdf. Retrieved on 2006-03-01. 
^ "DVMA Resources and IOMMU Translations". http://developers.sun.com/solaris/developer/support/driver/wps/pci/html/DMA.doc.html#289. Retrieved on 2007-04-30. 
^ "Logical Partition Security in the IBM eServer pSeries 690". http://www-03.ibm.com/servers/eserver/pseries/hardware/whitepapers/lpar_security.html. Retrieved on 2007-04-30. 
^ "I/O Virtualization specifications". http://www.pcisig.com/specifications/iov/. Retrieved on 2007-05-01. 
^ "Physical Address Extension - PAE Memory and Windows". Microsoft Windows Hardware Development Central. 2005. http://www.microsoft.com/whdc/system/platform/server/PAE/PAEdrv.mspx#E2D. Retrieved on 2008-04-07. 
^ Muli Ben-Yehuda, Jimi Xenidis, Michal Ostrowski (2007-06-27). "Price of Safety: Evaluating IOMMU Performance" (PDF). Proceedings of the Linux Symposium 2007, Ottawa, Ontario, Canada: IBM Research. Retrieved on 2007-07-02. 
^ "Xen FAQ: In DomU, how can I use 3D graphics". http://wiki.xensource.com/xenwiki/XenFaq#head-d5a7a247a5168517291228a6f02fd74b419badeb. Retrieved on 2006-12-12. 




Retrieved from "http://en.wikipedia.org/wiki/IOMMU"
Categories: Computer memory | Computer architecture | Computer peripherals 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
日本語









 This page was last modified on 29 January 2009, at 21:13 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
