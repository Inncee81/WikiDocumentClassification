













Tree traversal - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Tree_traversal";
		var wgTitle = "Tree traversal";
		var wgAction = "view";
		var wgArticleId = "597584";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279648350;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Tree traversal

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In computer science, tree-traversal refers to the process of visiting (examining and/or updating) each node in a tree data structure, exactly once, in a systematic way. Such traversals are classified by the order in which the nodes are visited. The following algorithms are described for a binary tree, but they may be generalized to other trees as well.




Contents


1 Traversal

1.1 Example
1.2 Sample implementations
1.3 Level order traversal
1.4 Queue-based level order traversal
1.5 Uses


2 Functional traversal
3 Iterative traversing
4 See also
5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Traversal
Compared to linear data structures like linked lists and one dimensional arrays, which have only one logical means of traversal, tree structures can be traversed in many different ways. Starting at the root of a binary tree, there are three main steps that can be performed and the order in which they are performed define the traversal type. These steps (in no particular order) are: performing an action on the current node (referred to as "visiting" the node), traversing to the left child node, and traversing to the right child node. Thus the process is most easily described through recursion.
To traverse a non-empty binary tree in preorder, perform the following operations recursively at each node, starting with the root node:

Visit the root.
Traverse the left subtree.
Traverse the right subtree.

(This is also called Depth-first traversal.)
To traverse a non-empty binary tree in inorder, perform the following operations recursively at each node:

Traverse the left subtree.
Visit the root.
Traverse the right subtree.

(This is also called Symmetric traversal.)

To traverse a non-empty binary tree in postorder, perform the following operations recursively at each node:

Traverse the left subtree.
Traverse the right subtree.
Visit the root.


Finally, trees can also be traversed in level-order, where we visit every node on a level before going to a lower level. This is also called Breadth-first traversal.

[edit] Example



In this binary search tree,

Preorder traversal sequence: F, B, A, D, C, E, G, I, H (root, left, right)
Inorder traversal sequence: A, B, C, D, E, F, G, H, I (left, root, right)

Note that the inorder traversal of this binary search tree yields an ordered list


Postorder traversal sequence: A, C, E, D, B, H, I, G, F (left, right, root)
Level-order traversal sequence: F, B, G, A, D, I, C, E, H





[edit] Sample implementations

preorder(node)
  print node.value
  if node.left ≠ null then preorder(node.left)
  if node.right ≠ null then preorder(node.right)


inorder(node)
  if node.left  ≠ null then inorder(node.left)
  print node.value
  if node.right ≠ null then inorder(node.right)


postorder(node)
  if node.left  ≠ null then postorder(node.left)
  if node.right ≠ null then postorder(node.right)
  print node.value


All sample implementations will require stack space proportional to the height of the tree. In a poorly balanced tree, this can be quite considerable.
We can remove the stack requirement by maintaining parent pointers in each node, or by threading the tree. In the case of using threads, this will allow for greatly improved inorder traversal, although retrieving the parent node required for preorder and postorder traversal will be slower than a simple stack based algorithm.
To traverse a threaded tree inorder, we could do something like this:

inorder(node)
  while hasleftchild(node) do
    node = node.left
  do
    visit(node)
    if (hasrightchild(node)) then
      node = node.right
      while hasleftchild(node) do
        node = node.left
    else
      while node.parent ≠ null and node = node.parent.right
        node = node.parent
      node = node.parent
  while node ≠ null

Note that a threaded binary tree will provide a means of determining whether a pointer is a child, or a thread. See threaded binary trees for more information.

[edit] Level order traversal
Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level.
This is commonly implemented using a queue data structure with the following steps (and using the tree below as an example):



Step 1: Push the root node onto the queue (node 2):

    New queue:           2- - - - - - - - - - 

Step 2:
Pop the node off the front of the queue (node 2).
Push that node's left child onto the queue (node 7).
Push that node's right child onto the queue (node 5).
Output that node's value (2).

    New queue:           7-5- - - - - - - - - 
    Output: 2

Step 3:
Pop the node off the front of the queue (node 7).
Push that node's left child onto the queue (node 2).
Push that node's right child onto the queue (node 6).
Output that node's value (7).

    New queue:           5-2-6- - - - - - - -
    Output: 2 7 

Step 4:
Pop the node off the front of the queue (node 5).
Push that node's left child onto the queue (NULL, so take no action).
Push that node's right child onto the queue (node 9).
Output that node's value (5).

    New queue:           2-6-9- - - - - - - -
    Output: 2 7 5

Step 5:
Pop the node off the front of the queue (node 2).
Push that node's left child onto the queue (NULL, so take no action).
Push that node's right child onto the queue (NULL, so take no action).
Output that node's value (2).

    New queue:           6-9- - - - - - - - - 
    Output: 2 7 5 2

Step 6:
Pop the node off the front of the queue (node 6).
Push that node's left child onto the queue (node 5).
Push that node's right child onto the queue (node 11).
Output that node's value (6).

    New queue:           9-5-11- - - - - - - - 
    Output: 2 7 5 2 6

Step 7:
Pop the node off the front of the queue (node 9).
Push that node's left child onto the queue (node 4).
Push that node's right child onto the queue (NULL, so take no action).
Output that node's value (9).

    New queue:           5-11-4- - - - - - - -
    Output: 2 7 5 2 6 9 

Step 8: You will notice that because the remaining nodes in the queue have no children, nothing else will be added to the queue, so the nodes will just be popped off and output consecutively (5, 11, 4). This gives the following:

    Final output: 2 7 5 2 6 9 5 11 4

which is a level-order traversal of the tree.

[edit] Queue-based level order traversal
Also, listed below is pseudocode for a simple queue based level order traversal, and will require space proportional to the maximum number of nodes at a given depth. This can be as much as the total number of nodes / 2. A more space-efficient approach for this type of traversal can be implemented using an iterative deepening depth-first search.

levelorder(root) 
  q = empty queue
  q.enqueue(root)
  while not q.empty do
    node := q.dequeue()
    visit(node)
    if node.left ≠ null
      q.enqueue(node.left)
    if node.right ≠ null
      q.enqueue(node.right)


[edit] Uses
Inorder traversal
It is particularly common to use an inorder traversal on a binary search tree because this will return values from the underlying set in order, according to the comparator that set up the binary search tree (hence the name).
To see why this is the case, note that if n is a node in a binary search tree, then everything in n 's left subtree is less than n, and everything in n 's right subtree is greater than or equal to n. Thus, if we visit the left subtree in order, using a recursive call, and then visit n, and then visit the right subtree in order, we have visited the entire subtree rooted at n in order. We can assume the recursive calls correctly visit the subtrees in order using the mathematical principle of structural induction. Traversing in reverse inorder similarly gives the values in decreasing order.
Preorder traversal
Traversing a tree in preorder while inserting the values into a new tree is common way of making a complete copy of a binary search tree.
One can also use preorder traversals to get a prefix expression (Polish notation) from expression trees: traverse the expression tree preorderly. To calculate the value of such an expression: scan from right to left, placing the elements in a stack. Each time we find an operator, we replace the two top symbols of the stack with the result of applying the operator to those elements. For instance, the expression ∗ + 2 3 4, which in infix notation is (2 + 3) ∗ 4, would be evaluated like this:

Using prefix traversal to evaluate an expression tree

Expression (remaining)
Stack


∗ + 2 3 4
<empty>


∗ + 2 3
4


∗ + 2
3 4


∗ +
2 3 4


∗
5 4


Answer
20



[edit] Functional traversal
We could perform the same traversals in a functional language like Haskell using code similar to this:

data Tree a = Nil | Node (Tree a) a (Tree a)

preorder Nil = []
preorder (Node left x right) = [x] ++ (preorder left) ++ (preorder right) 

postorder Nil = []
postorder (Node left x right) = (postorder left) ++ (postorder right) ++ [x]

inorder Nil = []
inorder (Node left x right) = (inorder left) ++ [x] ++ (inorder right)


[edit] Iterative traversing
All the above recursive algorithms require stack space proportional to the depth of the tree. Recursive traversal may be converted into an iterative one using various well-known methods.
A sample is shown here for postorder traversal using a visited flag:

nonRecursivePostorder(rootNode)
  nodeStack.push(rootNode)
  while (! nodeStack.empty())
    currNode = nodeStack.peek()
    if ((currNode.left != null) and (currNode.left.visited == false))
      nodeStack.push(currNode.left)
    else 
      if ((currNode.right != null) and (currNode.right.visited == false))
        nodeStack.push(currNode.right)
      else
        print currNode.value
        currNode.visited := true
        nodeStack.pop()

In this case, for each node is required to keep an additional "visited" flag, other than usual informations (value, left-child-reference, right-child-reference).
Another example is preorder traversal without using a visited flag (Java):


public void traverseTree(Node root) {
   Stack nodes = new Stack();
   nodes.push(root);
   Node currentNode;
   while (! nodes.isEmpty()){
      currentNode = nodes.pop();
      Node right = currentNode.right();
      if (right != null)
         nodes.push(right);
      Node left = currentNode.left();
      if (left != null)
         nodes.push(left);      
      System.out.println("Node data: "+currentNode.data);
   }
}



[edit] See also

Tree programming
Polish notation
Depth-first search
Breadth-first search
Threaded binary tree - linear traversal of binary tree
Nested set model


[edit] References

Dale, Nell. Lilly, Susan D. "Pascal Plus Data Structures". D. C. Heath and Company. Lexington, MA. 1995. Fourth Edition.
Drozdek, Adam. "Data Structures and Algorithms in C++". Brook/Cole. Pacific Grove, CA. 2001. Second edition.
http://www.math.northwestern.edu/~mlerma/courses/cs310-05s/notes/dm-treetran


[edit] External links

The Adjacency List Model for Processing Trees with SQL
Storing Hierarchical Data in a Database with traversal examples in PHP
Managing Hierarchical Data in MySQL
Working with Graphs in MySQL
N-ary Tree Traversal
Animation Applet of Binary Tree Traversal
Non-recursive traversal of DOM trees in JavaScript
Sample code for recursive and iterative tree traversal implemented in C.




Retrieved from "http://en.wikipedia.org/wiki/Tree_traversal"
Categories: Trees (structure) | Articles with example Haskell code | Articles with example Java code | Articles with example pseudocode | Graph algorithms 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


日本語
Polski
Tiếng Việt
Українська
中文
Deutsch
Svenska









 This page was last modified on 25 March 2009, at 19:36 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
