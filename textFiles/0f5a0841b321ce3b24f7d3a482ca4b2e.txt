













Design by contract - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Design_by_contract";
		var wgTitle = "Design by contract";
		var wgAction = "view";
		var wgArticleId = "39289";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281987425;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Design by contract

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Design by Contract (DbC) or Programming by Contract is an approach to designing computer software. It prescribes that software designers should define formal, precise and verifiable interface specifications for software components based upon the theory of abstract data types and the conceptual metaphor of a business contract. Thus, it can be considered as an evolution of the abstract data type theory.
Because Design by Contract is a registered trademark[1] of Interactive Software Engineering, Inc. in the United States, many developers refer to it as Programming by Contract or Contract Programming or contract-first development.




Contents


1 History
2 Description
3 Non-technical analogy
4 Language support

4.1 Languages with native support
4.2 Languages with third-party support
4.3 Generic tools


5 See also
6 Bibliography
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The term was coined by Bertrand Meyer in connection with his design of the Eiffel programming language and first described in various articles starting in 1986[2][3][4] and the two successive editions (1988, 1997) of his book Object-Oriented Software Construction. Eiffel Software applied for trademark registration for Design by Contract in December 2003, and it was granted in December 2004.[5][6] The current owner of these two trademarks is Interactive Software Engineering, Inc.[1][7]
Design by Contract has its roots in work on formal verification, formal specification and Hoare logic. The original contributions include:

A clear metaphor to guide the design process.
The application to inheritance, in particular a formalism for redefinition and dynamic binding.
The application to exception handling.
The connection with automatic software documentation.


[edit] Description
The central idea of DbC is a metaphor on how elements of a software system collaborate with each other, on the basis of mutual obligations and benefits. The metaphor comes from business life, where a "client" and a "supplier" agree on a "contract" which defines for example that:

The supplier must provide a certain product (obligation) and is entitled to expect that the client has paid its fee (benefit).
The client must pay the fee (obligation) and is entitled to get the product (benefit).
Both parties must satisfy certain obligations, such as laws and regulations, applying to all contracts.

Similarly, if a routine from a class in object-oriented programming provides a certain functionality, it may :

Impose a certain obligation to be guaranteed on entry by any client module that calls it: the routine's precondition — an obligation for the client, and a benefit for the supplier (the routine itself), as it frees it from having to handle cases outside of the precondition.
Guarantee a certain property on exit: the routine's postcondition — an obligation for the supplier, and obviously a benefit (the main benefit of calling the routine) for the client.
Maintain a certain property, assumed on entry and guaranteed on exit: the class invariant.

The contract is the formalization of these obligations and benefits. One could summarize design by contract by the "three questions" that the designer must repeatedly ask:

What does it expect?
What does it guarantee?
What does it maintain?

Many languages have facilities to make assertions like these. However, DbC considers these contracts to be so crucial to software correctness that they should be part of the design process. In effect, DbC advocates writing the assertions first.
The notion of a contract extends down to the method/procedure level; the contract for each method will normally contain the following pieces of information:

Acceptable and unacceptable input values or types, and their meanings
Return values or types, and their meanings
Error and exception conditions values or types, that can occur, and their meanings
Side effects
Preconditions, which subclasses may weaken (but not strengthen)
Postconditions, which subclasses may strengthen (but not weaken)
Invariants, which subclasses may strengthen (but not weaken)
(more rarely) Performance guarantees, e.g. for time or space used

When using contracts, the program code itself must never try to verify the contract conditions; the whole idea is that code should "fail hard", with contract verification being the safety net. DbC's "fail hard" property simplifies the debugging of contract behavior as the intended behaviour of each routine is clearly specified.
The contract conditions should never be violated in program execution; thus they can be either left in as debugging code or removed from the production version of the code altogether for performance reasons.
All class relationships are between Client classes and Supplier classes. A Client class is obliged to make calls to Supplier features where the resulting state of the Supplier is not violated by the Client call. Subsequently, the Supplier is obliged to provide a return state and data that does not violate the state requirements of the Client. For instance, a Supplier data buffer may require that data is present in the buffer when a delete feature is called. Subsequently, the Supplier guarantees to the client that when a delete feature finishes its work, the data item will, indeed, be deleted from the buffer. Other Design Contracts are concepts of "Class Invariant". The Class Invariant guarantees (for the local class) that the state of the class will be maintained within specified tolerances at the end of each feature execution.
Unit testing tests a module in isolation, to check that it meets its contract assuming its subcontractors meet theirs. Integration testing checks whether the various modules are working properly together. Design by Contract can also facilitate code reuse, since the contract for each piece of code is fully documented. The contracts for a module can also be regarded as a form of software documentation for the behavior of that module.

[edit] Non-technical analogy
A process in which a number of objects (people or software components, for example) interact to satisfy a goal is called a collaboration. When two objects collaborate together, one (the client) requests the services of the other (the supplier). The supplier in turn may request the services of other objects, and in those collaborations it is the client and they are the suppliers. The process only works correctly if all these individual collaborations work correctly. In a very real sense, the chain is only as strong as its weakest link.
Take the process of going on holiday, for example. Bertrand wants to spend two weeks in Florida. He books the holiday through DbC Holidays Inc., who specialise in U.S. package holidays. When he makes the booking (collaboration #1), Bertrand is the client and DbC Holidays are the supplier. DbC Holidays then arrange flights through Assertair Corp. (collaboration #2), and book a room at the Precondition Plaza Hotel in Miami (collaboration #3). In collaboration #2, DbC Holidays are the client and Assertair is the supplier, and in collaboration #3, the hotel is the supplier. And the chain of collaborations goes deeper and deeper (e.g. who does Assertair pay to service their jets?)
If any link in this chain of collaborations breaks, then the result could be that Bertrand's holiday is ruined. It's vital, therefore, that every player in the collaboration does what they're supposed to do. In any collaboration, client and supplier have certain obligations. These obligations (or "responsibilities", if you like) fall into three distinct types:

Things that the supplier promises to do as part of the service it offers to the client (e.g. Assertair promises DbC Holidays that Bertrand will be in Miami at a certain date and time)
Things that the client promises to do before using the service (e.g. DbC Holidays must ensure that Bertrand has his passport and tickets when he checks in for his flight)
Things that the supplier promises will always be true no matter what happens (e.g. The airline will always have adequate insurance to cover any accident)

Things that the supplier promises to do as part of the service are described as a special kind of rule called a postcondition. The postcondition tells the client what will be true if the service is executed correctly (e.g. "your customer will be in Miami by 15:30 on June 8").
If Bertrand turns up at the check-in desk without his passport, of course, then the airline can't live up to its side of the contract: he will not be allowed to board the plane without it. A rule that the client must satisfy before using a service is called a precondition.
A rule that states what must always be true is called an invariant. If the airline doesn't have adequate insurance then nobody is going anywhere!
Design By Contract is a discipline for building software such that the collaborations between objects are correct. A formula for correctness when a client uses the services of a supplier is given as:
If the invariant AND precondition are true before using the service, then the invariant AND the postcondition will be true after the service has been completed.
In DbC, the responsibilities are clear: the client must satisfy the precondition. This distinguishes it markedly from a related practice known as defensive programming, where the supplier is responsible for figuring out what to do when a precondition is broken. More often than not, the supplier throws an exception to inform the client that the precondition has been broken, and in both cases - DbC and defensive programming - the client must figure out how to respond to that. DbC makes the supplier's job easier.

[edit] Language support

[edit] Languages with native support
Languages that implement most DbC features natively include:

Cobra
D[8]
Eiffel
Fortress
Lisaac
Nice
Oxygene (formerly Chrome)
Sather
SPARK, via static analysis of Ada programs.
Spec#


[edit] Languages with third-party support
Various libraries, preprocessors and other tools have been developed for existing programming languages without native Design by Contract support:

C and C++, via the DBC for C preprocessor, GNU Nana, or the Digital Mars C++ compiler, via CTESK extension of C. Loki Library provides a mechanism named ContractChecker which verifies a class follows Design by Contract.
C#, via Code Contracts (a Microsoft Research project to be integrated into the .Net Framework 4.0)
Java, via iContract2, Contract4J, jContractor, Jcontract, C4J, CodePro Analytix, STclass, Jass preprocessor, OVal with AspectJ, Java Modeling Language (JML), SpringContracts for the Spring framework, or Modern Jass, Custos using AspectJ,JavaDbC using AspectJ, JavaTESK using extension of Java.
JavaScript, via Cerny.js or ecmaDebug.
Lisp

Common Lisp, via the macro facility or the CLOS metaobject protocol.
Scheme, via the PLT Scheme extension, emphasizing that each contract violation must blame the guilty party and must do so with an accurate explanation.[1]


Nemerle, via macros.
Perl, via the CPAN modules Class::Contract (by Damian Conway) or Carp::Datum (by Raphael Manfredi).
Python, using packages like zope.interface, PyDBC or Contracts for Python.
Ruby, via Brian McCallister's DesignByContract, Ruby DBC or ruby-contract.


[edit] Generic tools

Perfect Developer, via the Perfect specification language, can verify contracts with static code analysis and generate programs in languages such as C++ and Java.


[edit] See also

Component-based software engineering
Defensive programming
D programming language
Eiffel programming language
Formal methods
Hoare logic
Modular programming
Object-Oriented Software Construction
Perfect specification language
SPARK programming language
Test-driven development


[edit] Bibliography


^ a b Current status of United States Patent and Trademark Office registration for "DESIGN BY CONTRACT"
^ Meyer, Bertrand: Design by Contract, Technical Report TR-EI-12/CO, Interactive Software Engineering Inc., 1986
^ Meyer, Bertrand: Design by Contract, in Advances in Object-Oriented Software Engineering, eds. D. Mandrioli and B. Meyer, Prentice Hall, 1991, pp. 1-50
^ Meyer, Bertrand: Applying "Design by Contract", in Computer (IEEE), 25, 10, October 1992, pages 40-51, also available online
^ United States Patent and Trademark Office registration for "DESIGN BY CONTRACT"
^ United States Patent and Trademark Office registration for the graphic design with words "Design by Contract"
^ Current status of United States Patent and Trademark Office registration for the graphic design with words "Design by Contract"
^ Bright, Walter (2006-08-20). "D Programming Language, Contract Programming". Digital Mars. http://www.digitalmars.com/d/dbc.html. Retrieved on 2006-10-06. 




Mitchell, Richard, and McKim, Jim: Design by Contract: by example, Addison-Wesley, 2002
A wikibook describing DBC closely to the original model.



[edit] External links

An introduction to Design by Contract(TM)
Original IEEE Computer article
Isaac / Lisaac Project home
dlib C++ Library
Java Programming by Contract Class Utility
C2 Wiki: Design by Contract
Damian Conway's Class::Contract Perl module from CPAN
Raphael Manfredi's Carp::Datum Perl module from CPAN
GNU Nana
Digital Mars Contract Programming (DBC)
Class Contracts in Delphi Prism




Retrieved from "http://en.wikipedia.org/wiki/Design_by_contract"
Categories: Software design | Programming paradigms 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Italiano
日本語
Polski
Português
Русский
Slovenčina









 This page was last modified on 5 April 2009, at 23:21 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
