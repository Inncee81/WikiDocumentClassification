













Shellcode - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Shellcode";
		var wgTitle = "Shellcode";
		var wgAction = "view";
		var wgArticleId = "218067";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 284176426;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Shellcode

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In computer security, a shellcode is a small piece of code used as the payload in the exploitation of a software vulnerability. It is called "shellcode" because it typically starts a command shell from which the attacker can control the compromised machine. Shellcode is commonly written in machine code, but any piece of code that performs a similar task can be called shellcode. Because the function of a payload is not limited to merely spawning a shell, some have suggested that the name shellcode is insufficient. [1] However, attempts at replacing the term have not gained wide acceptance.




Contents


1 Types of shellcode

1.1 Local shellcode
1.2 Remote shellcode

1.2.1 Download and execute shellcode


1.3 Staged shellcode

1.3.1 Egg-hunt shellcode
1.3.2 Omelet shellcode




2 Shellcode execution strategy
3 Shellcode encoding

3.1 Percentage encoding
3.2 Null free shellcode
3.3 Alphanumeric and printable shellcode
3.4 Unicode proof shellcode


4 Platforms
5 See also
6 References
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Types of shellcode
Shellcode can either be "local" or "remote", depending on whether it gives an attacker control over the same machine as it runs on (local) or over another machine through a network (remote). In some situations when it is hard to inject and execute a shellcode with the desired funtionality directly, "staged" shellcode may be used.

[edit] Local shellcode
A local shellcode is used by an attacker who has limited access to a machine but can exploit a vulnerability in a process on that machine that has higher privileges. If successfully executed, the shellcode will provide the attacker access to the machine with the same higher privileges as the targeted process. Local shellcode is relatively easy to create; often the only thing it does is execute a shell executable.

[edit] Remote shellcode
A remote shellcode is used when an attacker wants to target a vulnerable process running on another machine on the local network or internet. If successfully executed, the shellcode can provide the attacker access to the target machine across the network. Remote shellcodes normally use standard TCP/IP socket connections to allow the attacker access to the shell on the target machine. Such shellcode can be sub-divided based on how this connection is set up: if the shellcode can establish this connection, it is called connect-back shellcode because the shellcode connects back to the attacker's machine. On the other hand, if the attacker needs to create the connection, the shellcode is called a bindshell because the shellcode binds to a certain port on which the attacker can connect to control it. A third, much less common type is socket-reuse shellcode. This type of shellcode is sometimes used when an exploit establishes a connection to the vulnerable process that is not closed before the shellcode is run. The shellcode can then re-use this connection to communicate with the attacker. Socket re-using shellcode is harder to create because the shellcode needs to find out which connection to re-use and the machine may have many connections open.
A firewall can be used to detect the outgoing connections made by connect-back shellcodes and the attempt to accept incoming connections made by bindshells. They can therefore offer some protection against an attacker, even if the system is vulnerable, by preventing the attacker from gaining access to the shell created by the shellcode. This is one reason why socket re-using shellcode is sometimes used because it does not create new connections and therefore is harder to detect and block.

[edit] Download and execute shellcode
This is a type of remote shellcode that downloads and executes some form of malware on the target system. This type of shellcode does not spawn a shell, but rather instructs the machine to download a certain executable file off the network, save it to disk and execute it. Nowadays, it is commonly used in drive-by download attacks, where a victim visits a malicious webpage that in turn attempts to run such a download and execute shellcode in order to install software on the victim's machine.

[edit] Staged shellcode
When the amount of data that an attacker can inject into the target process is too limited to execute useful shellcode directly, it may be possible to execute it in stages. First, a small piece of shellcode (stage 1) is executed. This code then downloads a larger piece of shellcode (stage 2) into the process' memory and executes it.

[edit] Egg-hunt shellcode
Another form of staged shellcode, which is used if an attacker can inject a larger shellcode into the process, but cannot determine where in the process it will end up. A small egg-hunt shellcode is injected into the process at a predictable location and executed. This code then searches the process' address space for the larger shellcode (the egg) and executes it.[2]

[edit] Omelet shellcode
This type of shellcode is similar to egg-hunt shellcode, but looks for multiple small blocks of data (eggs) and recombines them into one larger block (the omelet) that is subsequently executed. This is used when an attacker can only inject a number of small blocks of data into the process.[3]

[edit] Shellcode execution strategy
An exploit will commonly inject a shellcode into the target process before or at the same time as it exploits a vulnerability to gain control over the program counter. The program counter is adjusted to point to the shellcode, after which it gets executed and performs its task. Injecting the shellcode is often done by storing the shellcode in data sent over the network to the vulnerable process, by supplying it in a file that is read by the vulnerable process or through the command line or environment in the case of local exploits.

[edit] Shellcode encoding
Because most processes filter or restrict the data that can be injected, shellcode often need to be written to allow for these restrictions, this includes making the code small, null-free or alphanumeric. Various solutions have been found to get around such restrictions, including:

Design and implementation optimizations to decrease the size of the shellcode.
Implementation modifications to get around limitations in the range of bytes used in the shellcode.
Self-modifying code that modifies a number of the bytes of its own code before executing them to re-create bytes that are normally impossible to inject into the process.

Since intrusion detection can detect signatures of simple shellcodes being sent over the network, it is often encoded, made self-decrypting or polymorphic to avoid detection.

[edit] Percentage encoding
Exploits that target browsers commonly encode shellcode in a JavaScript string using Percent-encoding, "\uXXXX"-encoding or entity encoding. Some exploits also obfuscate the encoded shellcode string further to prevent detection by IDS. For example, on the IA-32 architecture, here's how two NOP instructions would look, first unencoded:

90             NOP
90             NOP

Then encoded into a string using percent-encoding (using the unescape() function to decode):

unescape("%u9090");

Next encoded into a string using "\uXXXX"-encoding:

"\u9090";

And finally encoded into a string using entity encoding:

"&#x9090;"

or

"&#37008;"


[edit] Null free shellcode
A vast majority of shellcodes are written without the use of null bytes because they are intended to be injected into a target process through null-terminated strings. When a null-terminated string is copied, it will be copied up to and including the first null but subsequent bytes of the shellcode will not be processed. When shellcode that contains nulls is injected in this way, only part of the shellcode would be injected, making it very unlikely to run successfully.
To produce null free shellcode from shellcode that contains null bytes one can substitute machine instructions that contain zeroes with instructions that have the same effect but are free of nulls. For example, on the IA-32 architecture one could replace this instruction:

B8 01000000    MOV EAX,1          // Set the register EAX to 0x000000001

which contains zeroes as part of the literal (1 expands to 0x00000001) with these instructions:

33C0           XOR EAX,EAX        // Set the register EAX to 0x000000000
40             INC EAX            // Increase EAX to 0x00000001

which have the same effect but take fewer bytes to encode and are free of nulls.

[edit] Alphanumeric and printable shellcode

See also: Alphanumeric code.

In certain circumstances, a target process will filter any byte from the injected shellcode that is not a printable or alphanumeric character. Under such circumstances, the range of instructions that can be used to write a shellcode becomes very limited. A solution to this problem was published by Rix in Phrack 57[4] in which he showed it was possible to turn any code into alphanumeric code. A technique often used is to create self-modifying code, because this allow the code to modify its own bytes to include bytes outside of the normally allowed range, thereby expanding the range of instructions it can use. Using this trick, a self-modifying decoder can be created that uses only bytes in the allowed range. The main code of the shellcode is encoded, also only using bytes in the allowed range. When the output shellcode is run, the decoder can modify its own code to be able to use any instruction it requires to function properly and then continues to decode the original shellcode. After decoding the shellcode the decoder transfers control to it, so it can be executed as normal.

[edit] Unicode proof shellcode
Modern programs use Unicode strings to allow internationalization of text. Often, these programs will convert incoming ASCII strings to Unicode before processing them. Unicode strings encoded in UTF-16 use two bytes to encode each character (or four bytes for some special characters). When an ASCII string is transformed into UTF-16, a zero byte is inserted after each byte in the original string. Obscou proved in Phrack 61[5] that it is possible to write shellcode that can run successfully after this transformation. Programs that can automatically encode any shellcode into alphanumeric UTF-16-proof shellcode exist, based on the same principle of a small self-modifying decoder that decodes the original shellcode.

[edit] Platforms
Most shellcode is written in machine code because of the low level at which the vulnerability being exploited gives an attacker access to the process. Shellcode is therefore often created to target one specific combination of processor, operating system and service pack, called a platform. For some exploits, due to the constraints put on the shellcode by the target process, a very specific shellcode must be created. However, it is not impossible for one shellcode to work for multiple exploits, service packs, operating systems and even processors.[6] Such versatility is commonly achieved by creating multiple versions of the shellcode that target the various platforms and creating a header that branches to the correct version for the platform the code is running on. When executed, the code behaves differently for different platforms and executes the right part of the shellcode for the platform it is running on.

[edit] See also

Shell (computing)
Buffer overflow
Heap overflow
Stack buffer overflow
Computer security
Alphanumeric code


[edit] References

^ Foster, James C.; McClure, Stuart (April 12, 2005), Sockets, Shellcode, Porting, & Coding: Reverse Engineering Exploits and Tool Coding for Security Professionals., Elsevier Science & Technology Books, ISBN 1-59749-005-9 
^ skape (2004-03-09). "Safely Searching Process Virtual Address Space". nologin. http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf. Retrieved on 2009-03-19. 
^ SkyLined (2009-03-16). "w32 SEH omelet shellcode". Skypher.com. http://skypher.com/wiki/index.php?title=Shellcode/w32_SEH_omelet_shellcode. Retrieved on 2009-03-19. 
^ Rix (2001-11-08). "Writing ia32 alphanumeric shellcodes". Phrack. http://www.phrack.org/issues.html?issue=57&id=15#article. Retrieved on 2008-02-29. 
^ obscou (2003-08-13). "Building IA32 'Unicode-Proof' Shellcodes". Phrack. http://www.phrack.org/issues.html?issue=61&id=11#article. Retrieved on 2008-02-29. 
^ eugene (2001-08-11). "Architecture Spanning Shellcode". Phrack. http://www.phrack.org/issues.html?issue=57&id=14#article. Retrieved on 2008-02-29. 


[edit] External links

An introduction to buffer overflows and shellcode
The Basics of Shellcoding (PDF) An overview of x86 shellcoding by Angelo Rosiello
An introduction to shellcode development
Contains x86 and non-x86 shellcode samples and an online interface for automatic shellcode generation and encoding, from the Metasploit Project
Contains x86 and non-x86 shellcode samples
a shellcode archive, sorted by Operating system.
Microsoft Windows and Linux shellcode design tutorial going from basic to advanced.
Windows and Linux shellcode tutorial containing step by step examples.
Designing shellcode demystified
ALPHA2: Zero tolerance by SkyLined A shellcode encoder that can turn any shellcode into both Unicode and ASCII, uppercase and mixedcase, alphanumeric shellcode.
Writing Small shellcode by Dafydd Stuttard A whitepaper explaining how to make shellcode as small as possible by optimizing both the design and implementation.
Writing IA32 Restricted Instruction Set Shellcode Decoder Loops by SkyLined A whitepaper explaining how to create shellcode when the bytes allowed in the shellcode are very restricted.
Beta: Multi-format shellcode encoding tool by SkyLined A shellcode encoder that can encode shellcode using the various encodings commonly used by browser exploits.
Smallest GNU/Linux x86 setuid(0) & exec(”/bin/sh”,0,0) Stable shellcode




Retrieved from "http://en.wikipedia.org/wiki/Shellcode"
Categories: Computer security exploits | Injection exploits 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Italiano
日本語
Bahasa Melayu
Polski
Русский









 This page was last modified on 16 April 2009, at 09:19 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
