













Software as a service - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Software_as_a_service";
		var wgTitle = "Software as a service";
		var wgAction = "view";
		var wgArticleId = "2262333";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282042799;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Software as a service

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Software as a Service (SaaS, typically pronounced 'sass') is a model of software deployment whereby a provider licenses an application to customers for use as a service on demand. SaaS software vendors may host the application on their own web servers or download the application to the consumer device, disabling it after use or after the on-demand contract expires. The on-demand function may be handled internally to share licenses within a firm or by a third-party application service provider (ASP) sharing licenses between firms.[citation needed] Examples of SaaS vendors include SAP Business ByDesign and Google Apps which provide common business applications online that are accessed from a web browser, while the software and data are stored on the servers.





Contents


1 Aims
2 History
3 Philosophy
4 Key characteristics
5 Implementation
6 SaaS and SOA
7 Adoption

7.1 Drivers
7.2 Limiting factors
7.3 Sales channels
7.4 Alternative pricing models


8 See also
9 References
10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Aims
On-demand licensing and use alleviates the customer's burden of equipping a device with every conceivable application. It also reduces traditional End User License Agreement (EULA) software maintenance, ongoing operation patches, and patch support complexity in an organization. On-demand licensing enables software to become a variable expense, rather than a fixed cost at the time of purchase. It also enables licensing only the amount of software needed versus traditional licenses per device. SaaS also enables the buyer to share licenses across their organization and between organizations, to reduce the cost of acquiring EULAs for every device in their firm.
Using SaaS can also conceivably reduce the up-front expense of software purchases, through less costly, on-demand pricing from hosting service providers. SaaS lets software vendors control and limit use, prohibits copies and distribution, and facilitates the control of all derivative versions of their software. SaaS centralized control often allows the vendor or supplier to establish an ongoing revenue stream with multiple businesses and users without pre-loading software in each device in an organization.
The sharing of end-user licenses and on-demand use may also reduce investment in server hardware or the shift of server use to SaaS suppliers of applications file services.

[edit] History
The concept of "software as a service" started to circulate prior to 1999[citation needed]. In December 2000 Bennett et al. noted the term as "beginning to gain acceptance in the marketplace".[1]
Whilst the phrase "software as a service" passed into in common usage, the CamelCase acronym "SaaS" was allegedly not coined until 2000-2001 in a white paper called "Strategic Backgrounder: Software as a Service" [2] by the Software & Information Industry's eBusiness Division published in Feb. 2001, but written in fall of 2000 according to internal Association records.

[edit] Philosophy
As a term, SaaS is generally associated by software professionals and business associates with business software and is typically thought of as a low-cost way for businesses to obtain rights to use software as needed versus licensing all devices with all applications. The on demand licensing enables the benefits of commercially licensed use without the associated complexity and potential high initial cost of equipping every device with the applications that are only used when needed.
Virtually all software fits the SaaS model well. Many Unix applications already have this functionality whereas EULA applications never had this flexibility before SaaS. A licensed copy of a word processor, for example, had to reside on the machine to create a document. The equipped program has no intrinsic value loaded on a computer that is turned off for the night. Worse yet, the same employee may need another fully paid license to write or edit a report at home on their own computer, while the work license is inoperable. Remote administration software attempts to resolve this issue through sharing CPU controls instead of licensing on demand. While promising, it requires leaving the licensed host computer on and it creates security issues from the remote accessing to run an application. SaaS achieves efficiencies by enabling the on demand licensing and management of the information and output, independent of the hardware location.
Some of the initial application areas showing success in using SaaS include:

Customer relationship management (CRM)[citation needed]
video conferencing[citation needed]
human resources[citation needed]
business continuity
IT service management[citation needed]
accounting[citation needed]
IT security[citation needed]
E-discovery[citation needed]
web analytics[citation needed]
web content management[citation needed]
e-mail[citation needed]

SaaS applications differ from earlier applications delivered over the Internet in that SaaS solutions were developed specifically to leverage web technologies such as the browser, thereby making them web-native.[citation needed] The data design and architecture of SaaS applications are specifically built with a 'multi-tenant' backend, thus enabling multiple customers or users to access a shared data model. This further differentiates SaaS from client/server or 'ASP' (Application Service Provider) solutions in that SaaS providers leverage enormous economies of scale in deployment, management, support and through the Software Development Lifecycle.

[edit] Key characteristics
Characteristics of SaaS software include:[3][dead link]

network-based access to, and management of, commercially available software
activities managed from central locations rather than at each customer's site, enabling customers to access applications remotely via the Web
application delivery typically closer to a one-to-many model (single instance, multi-tenant architecture) than to a one-to-one model, including architecture, pricing, partnering, and management characteristics
centralized feature updating, which obviates the need for end-users to download patches and upgrades.
frequent integration into a larger network of communicating software - either as part of a mashup or as a plugin to a platform as a service. (Service oriented architecture is naturally more complex than traditional models of software deployment.)

Providers of SaaS generally price applications on a per-user basis, sometimes with a relatively small minimum number of users and often with additional fees for extra bandwidth and storage. SaaS revenue streams to the vendor are therefore lower initially than traditional software license fees, but are also recurring, and therefore viewed as more predictable, much like maintenance fees for licensed software.
In addition to the characteristics mentioned above, SaaS software turns the tragedy of the commons on its head and frequently[weasel words] has these additional benefits:

More feature requests from users since there is frequently no marginal cost for requesting new features;
Faster releases of new features since the entire community of users benefits from new functionality; and
The embodiment of recognized best practices — since the community of users drives the software publisher to support best practice.


[edit] Implementation
Historians can generally classify SaaS architectures as belonging to one of four "maturity levels", whose key attributes are configurability, multi-tenant efficiency, and scalability.[4] Each level is distinguished from the previous one by the addition of one of those three attributes:

Level 1 - Ad-Hoc/Custom: At the first level of maturity, each customer has its own customized version of the hosted application and runs its own instance of the application on the host's servers. Migrating a traditional non-networked or client-server application to this level of SaaS typically requires the least development effort and reduces operating costs by consolidating server hardware and administration.


Level 2 - Configurable: The second maturity-level provides greater program flexibility through configurable metadata, so that many customers can use separate instances of the same application code. This allows the vendor to meet the different needs of each customer through detailed configuration options, while simplifying maintenance and updating of a common code base.


Level 3 - Configurable, Multi-Tenant-Efficient: The third maturity level adds multi-tenancy to the second level, so that a single program instance serves all customers. This approach enables more efficient use of server resources without any apparent difference to the end user, but ultimately comes up against limits in scalability.


Level 4 - Scalable, Configurable, Multi-Tenant-Efficient: The fourth and final SaaS maturity level adds scalability through a multitier architecture supporting a load-balanced farm of identical application instances, running on a variable number of servers. The provider can increase or decrease the system's capacity to match demand by adding or removing servers, without the need for any further alteration of applications software architecture.

SaaS architectures may also use virtualization, either in addition to multi-tenancy, or in place of it.[5] One of the principal benefits of virtualization is that it can increase the system's capacity without additional programming. On the other hand, a considerable amount of programming may be required to construct a more efficient, multi-tenant application. Combining multi-tenancy and virtualization provides still greater flexibility to tune the system for optimal performance.[6] In addition to full operating system-level virtualization, other virtualization techniques applied to SaaS include application virtualization and virtual appliances.
The development of SaaS applications may use various types of software components and frameworks. These tools can reduce the time-to-market and the cost of converting a traditional on-premise software product or building and deploying a new SaaS solution. Examples include components for subscription management, grid computing software, web application frameworks, and complete SaaS platform products.[7]

[edit] SaaS and SOA
Much like any other software, Software as a Service can also take advantage of Service Oriented Architecture to enable software applications to communicate with each other. Each software service can act as a service provider, exposing its functionality to other applications via public brokers, and can also act as a service requester, incorporating data and functionality from other services. Enterprise Resource Planning (ERP) Software providers such as SAP AG exemplify the use of SOA with their SaaS offering called SAP Business ByDesign fully leveraging Service Oriented Architecture.

[edit] Adoption

[edit] Drivers
The traditional rationale for outsourcing of IT systems involves applying economies of scale to the operation of applications, such that a service provider can offer better, cheaper, more reliable applications than companies can themselves. The use of SaaS-based applications has grown dramatically, as reported by many of the analyst firms that cover the sector.[citation needed] But as of 2009, SaaS has only truly flourished in recent years. Several important changes to the way people work have made this rapid acceptance possible:

Computers have become widespread: Most information workers have access to a computer and are familiar with conventions from mouse usage to web interfaces. As a result, the learning curve for new applications is lower and less hand-holding by internal IT is needed.
Computing itself has become a commodity: In the past, corporate mainframes were jealously guarded as strategic advantages. More recently, the applications were viewed as strategic. Today, people know it’s the business processes and the data itself—customer records, workflows, and pricing information—that matters. Computing and application licenses are cost centers, and as such, they’re suitable for cost reduction and outsourcing. The adoption of SaaS could also drive Internet-scale to become a commodity.[8]
Insourcing IT systems requires expensive overhead including salaries, health care, liability and physical building space.
Applications have tended to standardize: with some notable, industry-specific exceptions, most people spend most of their time using standardized applications. An expense-reporting page, an applicant screening tool, a spreadsheet, or an e-mail system are all sufficiently ubiquitous and well understood that most users can switch from one system to another easily. This is evident from the number of web-based calendaring, spreadsheet, and e-mail systems that have emerged in recent years.
Parametric applications are usable: In older applications, one could often only change a workflow by modifying the code. But in more recent applications, particularly web-based ones, significantly new applications can be created from parameters and macros. This allows organizations to create many different kinds of business logic atop a common application platform. Many SaaS providers allow a wide range of customization within a basic set of functions.
A specialized software provider can target global markets: A company that made software for human resource management at boutique hotels might once have had a hard time finding enough of a market to sell its applications. But a hosted application can instantly reach the entire market, making specialization within a vertical market not only possible, but preferable. This in turn means that SaaS providers can often deliver products that meet their markets' needs more closely than traditional "shrinkwrap" vendors could.
Web systems show reliability: Despite sporadic outages and slow-downs, most people are willing to use the public Internet, the Hypertext Transfer Protocol and the TCP/IP stack to deliver business functions to end users.
Security is sufficiently well trusted and transparent: With the broad adoption of SSL, organizations have a way of reaching their applications without the complexity and burden of end-user configurations or VPNs.
Availability of enablement technology: According to IDC,[3] organizations developing enablement technology that allow other vendors to quickly build SaaS applications will play an important role in driving the adoption of SaaS. Because of SaaS' relative infancy, many companies have either built enablement tools or platforms or are in the process of engineering enablement tools or platforms. A Saugatuck study shows that the industry will most likely converge to three or four enablers that will act as SaaS Integration Platforms (SIPs).[9]
Bandwidth of wide-area networks has grown drastically following Moore's Law (more than 100% increase each 24 months) and is about to reach slow local networks bandwidths. Added to network quality of service improvement this has driven people and companies to trustfully access remote locations and applications with low latencies and acceptable speeds.


[edit] Limiting factors





This section is missing citations or needs footnotes. Please help add inline citations to guard against copyright violations and factual inaccuracies. (May 2008)


While the SaaS model has many advantages, it also has drawbacks. For example, data transfers take place at Internet, rather than local Ethernet speeds; the provider may go bankrupt and the firewall may not permit integration with back end systems. It may not be easy to judge the importance of such issues when an implementation is first started, however they are largely resolved by the Hybrid SaaS model. Other concerns are detailed below.
Widespread implementation of SaaS requires well defined services. That can achieve an economy of scale and the capacity to balance supply and demand. This requires areas of IT that are ubiquitous and commodity-like. SaaS is therefore not suitable for innovative or highly specialized niche systems, though SaaS may be used to provide one or more components in such systems.
As with manufacturing, a lack of substitutability and second sourcing options with any commodity creates a strategic weakness for any customer in terms of security, competition and pricing. Various forms of this weakness, such as "vendor lock-in", are often cited[by whom?] as a barrier to adoption of SaaS as the current industry lacks portability and interoperability between vendors. This means that to change from one vendor to another will take a considerable amount of effort and time. This situation is resolvable by the introduction of open sourced standards and the development of markets based upon such standards.[10]
Whilst the severe lack of substitutability remains unresolved, many vendors[which?] counter the concerns over potential security and operational risk with the argument that the professionals operating SaaS applications may have much better security and redundancy tools available to them.
Furthermore the concern that SaaS applications pose some difficulty for businesses that need extensive customization is countered[by whom?] with the claim that many vendors have made progress with both customization and publication of their programming interfaces. Note that customization will reduce substitutability and given that SaaS covers commodity-like activities, the strategic benefit of customization is highly dubious.
In addition to this, the availability of open-source applications, inexpensive hardware and low-cost bandwidth combine to offer compelling economic reasons for businesses to operate their own software applications, particularly as open-source solutions have increased in quality and become easier to install.
Users of SaaS need to have confidence in the provider of the service, particularly if the application stores the user's data. The provider needs to be trusted with both the intention and the ability to safeguard this information.

[edit] Sales channels
With products below the $100 range and its focus on the mid market, direct selling can become an expensive undertaking. SaaS companies seek alternatives by selling through value-added resellers (VARs), Managed Service Providers (MSPs), Master Managed Service Providers (MMSPs) and similar alliance partners. But since SaaS is not only a different delivery mechanism but a different business model and different technology as well, selling through channels has its own challenges.

[edit] Alternative pricing models
One reason for developing SaaS applications is the opportunity to implement alternative pricing models that focus on establishing and maintaining recurring revenue streams. Most SaaS vendors charge some kind of monthly "hosting" or "subscription" fee. Opportunities also exist to charge per transaction, event, or other unit of value to the customer. These alternative pricing models come about because customers actually "lease" the software from the vendors and the vendors have the ability to view all transactional activity within the system.

[edit] See also

Service bureau
Application service provider
Cloud computing
Everything as a service
Master Managed Service Provider
Mobile enterprise
Online office suite
Secure Virtual Office
Software plus services
Supply chain
Utility computing


[edit] References


^ Bennett, Keith; et al. (December 2000). "Service-based software: the future for flexible software" (PDF) in Seventh Asia-Pacific Software Engineering Conference, 2000. APSEC 2000.. Proceedings: Seventh Asia-Pacific Software Engineering Conference, 2000.: 214-221. doi:10.1109/APSEC.2000.896702. Retrieved on 2009-03-16.  For bibliographic details see http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=896702 for example.
^ Strategic Backgrounder: Software as a Service
^ a b Traudt, Erin; Amy Konary (June 2005). "2005 Software as a Service Taxonomy and Research Guide". IDC. 7. http://www.idc.com/getdoc.jsp?containerId=33453&pageType=PRINTFRIENDLY#33453-S-0001. Retrieved on 2006-08-25. 
^ "Architecture strategies for catching the long tail". April 2006. http://msdn2.microsoft.com/en-us/library/aa479069.aspx. Retrieved on 2008-05-24. 
^ Wainewright, Phil (October 2007). "Workstream prefers virtualization to multi-tenancy". http://blogs.zdnet.com/SAAS/?p=400. Retrieved on 2008-05-24. 
^ Chong, Fred (October 2006). "Multi-tenancy and Virtualization". http://blogs.msdn.com/fred_chong/archive/2006/10/23/multi-tenancy-and-virtualization.aspx. Retrieved on 2008-05-24. 
^ Schuller, Sinclair (March 2007). "Repealing the SaaS Tax". http://itmanagement.earthweb.com/article.php/3663266. Retrieved on 2008-05-24. 
^ http://www.saasblogs.com/2006/09/26/scale-as-a-commodity-2/ SaaSBlogs: Scale as a Commodity
^ "SaaS 2.0: Saugatuck Study Shows Rapid SaaS Evolution to Business Platforms". April 2006. http://pdfserver.prweb.com/pdfdownload/377561/pr.pdf#search=%22saugatuck%20%20sip%20saas%20filetype%3Apdf%22.. Retrieved on 2006-09-01. 
^ Breaking down the saga of vendor lock-in



[edit] External links

Describing the Elephant: The Different Faces of IT as Service, positions SaaS in a broader context
E-Procurement - Electronic Data Integration Comes of Age- The Application of SaaS to Electronic Data Integration
SaaS Systems Development Life Cycle Project
Larry Ellison weighs in on the success of SaaS
Defense on the profitability of the SaaS model
SaaS backup and recovery
Bessemer's 10 laws for SaaS companies
SaaS myth explained
InterWest Partners SaaS Blog




Retrieved from "http://en.wikipedia.org/wiki/Software_as_a_service"
Categories: Business models | Cloud applications | Everything as a service | Software distribution | Services management and marketing | Service-oriented (business computing) | Software industry | Cloud computingHidden categories: All articles with unsourced statements | Articles with unsourced statements since March 2009 | All articles with dead external links | Articles with dead external links since May 2008 | All pages needing cleanup | Articles with specifically-marked weasel-worded phrases since March 2009 | Articles with unsourced statements since May 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Deutsch
Español
Français
한국어
Bahasa Indonesia
Italiano
עברית
Монгол
Nederlands
日本語
Polski
Português
Русский
Русский
Tiếng Việt
Українська
中文









 This page was last modified on 6 April 2009, at 05:20.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
