













Standard Widget Toolkit - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Standard_Widget_Toolkit";
		var wgTitle = "Standard Widget Toolkit";
		var wgAction = "view";
		var wgArticleId = "468205";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279529872;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Standard Widget Toolkit

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Standard Widget Toolkit


The Eclipse IDE, an SWT-based application


Developed by
Free software community


Latest release
3.4 / 2008-06-17; 294 days ago


Preview release
3.5 M5


Operating system
Cross-platform


Available in
Multilingual


Type
widget toolkit for the Java platform


License
Eclipse Public License


Website
http://www.eclipse.org/swt/


The Standard Widget Toolkit (SWT) is a graphical widget toolkit for use with the Java platform. It was originally developed by IBM and is now maintained by the Eclipse Foundation in tandem with the Eclipse IDE. It is an alternative to the AWT and Swing Java GUI toolkits provided by Sun Microsystems as part of the Java Platform, Standard Edition.
SWT is written in Java. To display GUI elements, the SWT implementation accesses the native GUI libraries of the operating system using JNI (Java Native Interface) in a manner that is similar to those programs written using operating system-specific APIs. Programs that call SWT are portable, but the implementation of the toolkit, despite the fact that it is written in Java, is unique for each platform.
The toolkit is licensed under the Eclipse Public License, an Open Source Initiative approved open source license.[1]




Contents


1 Java GUI toolkit history
2 Design
3 Performance
4 Look and feel
5 Extensibility and comparison to other Java code
6 Example
7 Platform support
8 Applications
9 Use on the web
10 Use outside Java
11 Development
12 See also
13 References
14 Documentation
15 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Java GUI toolkit history
AWT (the Abstract Window Toolkit) was the first Java GUI toolkit, introduced with JDK 1.0 as one component of the Sun Microsystems Java platform. The original AWT was a simple Java wrapper around native (operating system-supplied) widgets such as menus, windows and buttons.
Swing was the next generation GUI toolkit introduced by Sun in J2SE 1.2. Swing was developed in order to provide a richer set of GUI components than AWT. Swing GUI elements are 100% Java with no native code: instead of wrapping native GUI components, Swing draws its own components by using Java2D to call low level operating system drawing routines.
The roots of SWT go back to work that Object Technology International, or OTI, did in the 1990s when creating multiplatform, portable, native widget interfaces for Smalltalk (originally for OTI Smalltalk, which became IBM Smalltalk in 1993). IBM Smalltalk's Common Widget layer provided fast, native access to multiple platform widget sets while still providing a common API without suffering the "lowest common denominator" problem typical of other portable graphical user interface (GUI) toolkits. IBM was developing their VisualAge development integrated development environment (IDE) that was written in Smalltalk. They decided to open-source the project, which led to the development of Eclipse, intended to compete against other IDEs such as Microsoft Visual Studio. Eclipse is written in Java, and IBM developers, deciding that they needed a toolkit that had "native look and feel" and "native performance", created SWT as a Swing replacement[2].

[edit] Design
SWT is a wrapper around native code objects, such as GTK+ objects, Motif objects etc. Because of this, SWT widgets are often referred to as "heavyweight", evoking images of a light Java wrapper around a "heavy" native object. In cases where native platform GUI libraries do not support the functionality required for SWT, SWT implements its own GUI code in Java, similar to Swing. In essence, SWT is something of a compromise between the low level performance and look and feel of AWT and the high level ease of use of Swing [3] [4].
According to the Eclipse Foundation, "SWT and Swing are different tools that were built with different goals in mind. The purpose of SWT is to provide a common API for accessing native widgets across a spectrum of platforms. The primary design goals are high performance, native look and feel, and deep platform integration. Swing, on the other hand, is designed to allow for a highly customizable look and feel that is common across all platforms."[5]
It has been argued that SWT features a clean design, in part inspired by Erich Gamma of Design Patterns fame.[6]
SWT is a relatively simpler toolkit than Swing, with less (possibly) extraneous functionality for the average developer.[7] This has led some people to argue that SWT lacks functionality when compared to Swing.[8]
James Gosling, the creator of the Java language, has argued that SWT is too simple, and that SWT is a difficult toolkit to port to new platforms for the same reason that AWT used to have porting platforms – that it is too simple, too low level, and too tied to the Win32 GUI API, leading to problems adapting the SWT API to other GUI toolkits, such as Motif and OS X Carbon.[7]
Although SWT does not implement the popular Model-View-Controller architecture used in Swing and many other high level GUI toolkits, the JFace library, which is developed as part of the same Eclipse project, does provide a platform-independent, higher-level Model-View-Controller abstraction on top of SWT. Developers may choose to use JFace to provide more flexible and abstract data models for complex SWT controls such as trees, tables and lists, or access those controls directly as needed.

[edit] Performance
SWT was designed to be a "high performance" GUI toolkit; faster, more responsive and lighter on system resource usage than Swing.[9] There has been some attempted benchmarking of SWT and Swing, which concluded that SWT was more efficient than Swing, although the applications benchmarked in this case were not complex enough to draw solid conclusions for all possible SWT or Swing uses.[10]. More "real-life" benchmarks show no clear winner, and showed that the results greatly depend on the context and the environments[11].

[edit] Look and feel
SWT widgets have the same "look and feel" as native widgets because they often are the same native widgets. This is in contrast to the Swing toolkit where the widgets are close copies of the native widgets. In some cases the difference is distinguishable. For example the Mac OS X tree widget features a subtle animation when a tree is expanded and default buttons actually have an animated pulsing glow to focus the user's attention on them. The default Swing version of these widgets do not animate.
Since SWT is simply a wrapper around native GUI code, it does not require large amounts of updates when that native code is changed, providing that operating system vendors are careful not to break clients of their API when the operating systems are updated. The same cannot be said of Swing — Swing supports the ability to change the look and feel of the running application with "pluggable look and feels" which enable emulating the native platform user interface using themes, which must be updated to mirror operating system GUI changes (such as theme or other look and feel updates).
SWT aims for "deep platform integration", the Eclipse reference to SWT's use of native widgets. According to Mauro Marinillia of developer.com, "whenever one needs a tight integration with the native platform, SWT can be a plus".[12] This deep integration can be useful in a number of ways, for example enabling SWT to wrap ActiveX objects on Microsoft Windows.

[edit] Extensibility and comparison to other Java code
Due to the use of native code, SWT classes do not allow for easy inheritance for all widget classes, which some people consider can hurt extensibility.[12] This can make customizing existing widgets more difficult to achieve with SWT than if one were using Swing[13]. Both toolkits support writing new widgets using only Java code, however in SWT extra work is needed to make the new widget work on every platform[13].
SWT widgets, unlike almost any other Java toolkit, requires manual object deallocation, as opposed to the standard Java practice of automatic garbage collection. SWT objects must be explicitly deallocated using the ".dispose()" function, which is analogous to the C language's "free".[14] If this is not done, memory leaks or other unintended behavior may result. On this matter, some have commented that "explicitly de-allocating the resources could be a step back in development time (and costs) at least for the average Java developer." and that "this is a mixed blessing. It means more control (and more complexity) for the SWT developer instead of more automation (and slowness) when using Swing." [12] The need for manual object deallocation when using SWT is largely due to SWT's use of native objects. As these objects are not tracked by the Java JVM, the JVM is unable to ascertain whether or not these native objects are in use, and thus unable to garbage collect them at an appropriate time.
In practice, the only SWT objects which a developer must explicitly dispose are the subclasses of Resource, such as Image, Color, and Font objects.[citation needed]

[edit] Example
The following is a basic Hello World program using SWT. It shows a window (Shell) and a label.


import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
 
public class HelloWorld {
   public static void main (String[] args) {
      Display display = new Display();
      Shell shell = new Shell(display);
      Label label = new Label(shell, SWT.NONE);
      label.setText("Hello World");
      label.pack();
      shell.pack();
      shell.open();
      while (!shell.isDisposed()) {
          if (!display.readAndDispatch ()) display.sleep (); 
      } 
      display.dispose ();
   }
}

Contrary to Swing, a Display class is necessary to access the underlying operating system, and its resources must be explicitly disposed of when they are no longer used.

[edit] Platform support




The Azureus BitTorrent client in a GTK+ environment


SWT must be ported to every new GUI library that needs supporting. Unlike Swing and AWT, SWT is not available on every Java-supported platform since SWT is not part of the Java release. There is also some evidence that the performance of SWT on platforms other than Windows is noticeably less efficient.[8] Since SWT uses a different native library for each platform, SWT developers may be exposed to platform specific bugs.
SWT exposes developers to more low level details than Swing. This is because SWT is technically just a layer over native library provided GUI functionality – that said, exposing the programmer to native GUI code seems to be part of the design intent of SWT: "Its goal is not to provide a rich user-interface design framework but rather the thinnest possible user-interface API that can be implemented uniformly on the largest possible set of platforms while still providing sufficient functionality to build rich graphical user interface (GUI) applications." [15]
Since the SWT implementation is different for each platform, a platform specific SWT (JAR file) must be distributed with each application.
As of July 2008 SWT supports the following platforms and / or GUI libraries:

Windows XP, Windows Vista:

Win32
WPF (under development)


AIX, FreeBSD, Linux, HP-UX:

Motif
GTK+


Mac OS X:

Carbon
Cocoa (under development)


QNX Photon
Pocket PC


[edit] Applications
Applications using SWT include:

IBM Rational Software products: Rational Application Developer, Rational Software Architect, Rational Team Concert and others.
IBM Lotus Software including Notes, Sametime, Symphony and Expeditor
Vuze, formerly known as Azureus
Eclipse and its plug-ins
GumTree Platform (scientific workbench)
Haystack (information manager)
RSSOwl feed aggregator
uDig GIS tool


[edit] Use on the web
Recent open source efforts in the eclipse community have led to a porting of SWT (and JFace) into a widget toolkit appropriate for the web. The result has been the Eclipse RAP, which combines the qooxdoo AJAX library with the SWT API. Like other Java AJAX projects (such as Echo2 and Google Web Toolkit), the usage of the SWT API allows developers to quickly develop applications for the web in much the same way as they would for the desktop.

[edit] Use outside Java
Since January 2008, SWT has been available for C++, which is called SWT C++, from PureNative Software. SWT C++ is implemented in 100% native C++, for C++ development. SWT C++ runs without a Java Runtime Environment (JRE), and therefore does not use JNI. SWT C++ is made possible by NewJ[16] Desktop for C++, which is a 100% native C++ implementation of the core Java APIs, and SWT Camp[17], a developer kit for producing SWT C++ from the SWT Java implementation source code. Presently, SWT C++ is only supported for Microsoft Windows and Microsoft Visual C++ 7.1 (Visual Studio 2003).
Starting in 2006 there was a SWT-3.2 port to the D programming language called DWT.[18] Since then the project supports Windows 32-bit and also Linux GTK 32-bit for SWT-3.4. The DWT project also has an addon package that contains a port of JFace and Eclipse Forms.[19]

[edit] Development
There is some activity to "unify" Swing and SWT, largely due to the popularity of Eclipse.
There are several different approaches being attempted to integrate Swing and SWT:

SwingWT is a project which intends to provide Swing developers with an alternative Swing implementation – one which uses an SWT back end to display its widgets, thus providing the native look and feel and performance advantages of SWT along with the same programming model as Swing.[20]
SWTSwing is a project which intends to provide a Swing back end for SWT. In effect, SWT could be run using "Swing native objects" instead of, for example, GTK or Windows native objects. This would enable SWT to work on every platform that Swing supports.[21]


[edit] See also




Free software portal




List of widget toolkits


[edit] References


^ Open Source Initiative. "Licenses By Name". http://www.opensource.org/licenses/. Retrieved on 2007-03-24. 
^ "FAQ: Why does Eclipse use SWT?". http://wiki.eclipse.org/FAQ_Why_does_Eclipse_use_SWT%3F. Retrieved on 2007-03-24. 
^ Steve Northover. "SWT: Implementation Strategy for Java Natives". http://www.eclipse.org/articles/Article-SWT-Design-1/SWT-Design-1.html. Retrieved on 2001-03-22. 
^ Carolyn MacLeod and Steve Northover. "SWT: Managing Operating System Resources". http://www.eclipse.org/articles/swt-design-2/swt-design-2.html. Retrieved on 2001-11-27. 
^ "FAQ: Is SWT better than Swing?". http://wiki.eclipse.org/FAQ_Is_SWT_better_than_Swing%3F. Retrieved on 2008-02-16. 
^ Ben Galbraith. "An Introduction to SWT". http://www.javalobby.org/eps/swt_intro/. Retrieved on 2007-03-24. 
^ a b Ella Morton. "James Gosling Q & A". http://www.builderau.com.au/program/work/0,39024650,39176462,00.htm. Retrieved on 2007-03-24. 
^ a b "Performance Benchmarks of Nine Languages". http://developers.slashdot.org/article.pl?sid=04/01/09/1340223. Retrieved on 2007-03-24. 
^ Akan, Ozgur (November 19, 2004). "Why I choose SWT against Swing". http://weblogs.java.net/blog/aiqa/archive/2004/11/why_i_choose_sw.html. Retrieved on 2006-11-07. 
^ Swing vs. SWT Performance - Have a Look at the Call Stacks
^ Igor, Križnar (2005-05-10). "SWT Vs. Swing Performance Comparison" (PDF). cosylab.com. http://cosylib.cosylab.com/pub/CSS/DOC-SWT_Vs._Swing_Performance_Comparison.pdf. Retrieved on 2008-05-24.  "Initial expectation before performing this benchmark was to find SWT outperform Swing. This expectation stemmed from greater responsiveness of SWT-based Java applications (e.g., Eclipse IDE) compared to Swing-based applications. However, this expectation could not be quantitatively confirmed." 
^ a b c Marinilli, Mauro. "Swing and SWT: A Tale of Two Java GUI Libraries". http://www.developer.com/java/other/article.php/2179061. Retrieved on 2006-11-07. 
^ a b "Creating Your Own Widgets using SWT". eclipse.org. 2007-03-22. http://www.eclipse.org/articles/Article-Writing%20Your%20Own%20Widget/Writing%20Your%20Own%20Widget.htm. Retrieved on 2008-12-13.  "Subclassing may cause bad system-level bugs, and runs the risk of leaking resources(...)Subclassing Canvas or Composite is the best way to ensure that your widget works on all SWT platforms(...)When subclassing anything other than Composite or Canvas you must override the method protected void checkSubclass() to do nothing" 
^ The Java developers guide to Eclipse, 2nd ed., p359
^ FAQ What is SWT - Eclipsepedia
^ NewJ - The core Java APIs in C++, for C++
^ SWT Camp - The SWT C++ Do-It-Yourself Kit
^ DWT - Port of SWT and friends to the D programming language
^ Eclipse Forms
^ SwingWT - The Swing/AWT API over SWT library
^ The SWTSwing project



[edit] Documentation


Steve Northover, Mike Wilson. SWT: The Standard Widget Toolkit. Addison-Wesley. 
Rob Warner, Robert L. Harris (2004). The definitive guide to SWT and JFace. Apress. 
Eric Clayberg and Dan Rubel (2004). Eclipse: Building commercial-quality plug-in. Addison-Wesley. 
Erich Gamma and Kent Beck (2004). Contributing to Eclipse. Addison-Wesley. 
Sherry Shavor et al (2004). The Java Developers Guide to Eclipse. Addison-Wesley. 
Matthew Scarpino, Stephen Holder, Stanford Ng and Laurent Mihalkovic (2004). SWT/JFace in Action. Manning. 



[edit] External links

SWT main page
Further information on SWT
Information on Eclipse, including SWT information within a "platform plug-in developer guide"
SWT Javadoc API documented at eclipse.org
SWT tutorial and general documentation about eclipse








v • d • e

Eclipse Foundation






AspectJ · BIRT · Buckminster · Eclipse · Equinox · EclipseLink · Standard Widget Toolkit · Mylyn · Jetty  · JFace · Rich AJAX Platform






License: Eclipse Public License · Website: http://www.eclipse.org/












v • d • e

List of Widget toolkits





Low-level

Macintosh Toolbox/Carbon · Windows API · Intrinsics · Intuition · Xlib






High-level





On Amiga OS


BOOPSI · Magic User Interface · Zune · ReAction GUI







On Mac OS
and Mac OS X


Cocoa · MacApp · MacZoop · PowerPlant







On Microsoft
Windows


Microsoft Foundation Class Library · Windows Template Library · SmartWin++ · Object Windows Library · Visual Component Library · Windows Forms · Windows Presentation Foundation







On Unix,
under the X


Xaw · Motif · LessTif · InterViews







Cross-
platform






Based on
Flash


Adobe Flex · Gnash · SWF2EXE Software







Based on XML,
AJAX or SVG


GladeXML · XAML · XML User Interface · XUL · CougarXML · Rialto Toolkit · Dojo Toolkit · jQuery · script.aculo.us · Echo · qooxdoo · MooTools · Google Web Toolkit · Yahoo! UI Library · Ext · Pyjamas







Based on Java


Abstract Window Toolkit · Swing · Standard Widget Toolkit







Based on
C or C++


Agar · CEGUI · Component Library for Cross Platform · dlib C++ Library · FLTK · FOX toolkit · OpenGL User Interface Library · GTK+ · IUP · Juce · Qt · Tk · TnFOX · Visual Component Framework · wxWidgets · YAAF · XForms · XVT







Based on
Pascal


IP Pascal · Lazarus · fpGUI







Based on
Objective C


GNUstep















Retrieved from "http://en.wikipedia.org/wiki/Standard_Widget_Toolkit"
Categories: Java platform | Widget toolkits | Free development toolkits and libraries | Java APIs | Eclipse | Eclipse technology | Eclipse softwareHidden categories: All articles with unsourced statements | Articles with unsourced statements since April 2007 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Bahasa Indonesia
Italiano
Magyar
Nederlands
日本語
Polski
Русский
Українська
中文









 This page was last modified on 25 March 2009, at 06:13.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
