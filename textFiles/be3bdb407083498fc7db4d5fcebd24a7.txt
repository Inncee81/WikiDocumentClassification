













Environment variable - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Environment_variable";
		var wgTitle = "Environment variable";
		var wgAction = "view";
		var wgArticleId = "349504";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281793780;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-bash .de1, .source-bash .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-bash  {}
.source-bash .head {}
.source-bash .foot {}
.source-bash .imp {font-weight: bold; color: red;}
.source-bash .ln-xtra {color: #cc0; background-color: #ffc;}
.source-bash li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-bash li.li2 {font-weight: bold;}
.source-bash .kw1 {color: #b1b100;}
.source-bash .kw3 {color: #000066;}
.source-bash .co1 {color: #808080; font-style: italic;}
.source-bash .es0 {color: #000099; font-weight: bold;}
.source-bash .br0 {color: #66cc66;}
.source-bash .st0 {color: #ff0000;}
.source-bash .nu0 {color: #cc66cc;}
.source-bash .re0 {color: #0000ff;}
.source-bash .re1 {color: #0000ff;}
.source-bash .re2 {color: #0000ff;}
.source-bash .re3 {color: #808080; font-style: italic;}
.source-bash .re4 {color: #0000ff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-dos {line-height: normal;}
.source-dos li, .source-dos pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for dos
 * CSS class: source-dos, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-dos .de1, .source-dos .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-dos  {}
.source-dos .head {}
.source-dos .foot {}
.source-dos .imp {font-weight: bold; color: red;}
.source-dos .ln-xtra {color: #cc0; background-color: #ffc;}
.source-dos li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-dos li.li2 {font-weight: bold;}
.source-dos .kw1 {color: #00b100; font-weight: bold;}
.source-dos .kw2 {color: #000000; font-weight: bold;}
.source-dos .kw3 {color: #b1b100; font-weight: bold;}
.source-dos .kw4 {color: #0000ff; font-weight: bold;}
.source-dos .co1 {color: #808080; font-style: italic;}
.source-dos .co2 {color: #808080; font-style: italic;}
.source-dos .br0 {color: #33cc33;}
.source-dos .br1 {color: #33cc33;}
.source-dos .st0 {color: #ff0000;}
.source-dos .re0 {color: #b100b1; font-weight: bold;}
.source-dos .re1 {color: #448844;}
.source-dos .re2 {color: #448888;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Environment variable

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Environment variables are a set of dynamic named values that can affect the way running processes will behave on a computer.




Contents


1 Synopsis
2 Getting and setting environment variables

2.1 DOS and Windows
2.2 UNIX
2.3 Unexported variables


3 Security
4 Common environment variables

4.1 Examples of DOS environment variables
4.2 Examples of UNIX environment variables
4.3 Examples from Microsoft Windows

4.3.1 Discrete value variables
4.3.2 System path variables
4.3.3 User management variables




5 Default Values on Microsoft Windows
6 See also
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Synopsis
In all Unix and Unix-like systems, each process has its own private set of environment variables. By default, when a process is created it inherits a duplicate environment of its parent process, except for explicit changes made by the parent when it creates the child. At API level, these changes must be done between fork and exec. Alternatively, from shells such as bash, you can change environment variables for a particular command invocation by indirectly invoking it via env or using the ENVIRONMENT_VARIABLE=VALUE <command> notation. All Unix operating system flavors as well as DOS and Microsoft Windows have environment variables; however, they do not all use the same variable names. Running programs can access the values of environment variables for configuration purposes. Examples of environment variables include:

PATH - lists directories the shell searches, for the commands the user may type without having to provide the full path.
HOME (Unix-like) and userprofile (Microsoft Windows) - indicate where a user's home directory is located in the file system.
TERM (Unix-like) - specifies the type of computer terminal or terminal emulator being used (e.g., vt100 or dumb).
PS1 (Unix-like) - specifies how the prompt is displayed in the Bourne shell and variants.
MAIL (Unix-like) - used to indicate where a user's mail is to be found.

Shell scripts and batch files use environment variables to store temporary values for reference later in the script, and also to communicate data and preferences to child processes.
In Unix, an environment variable that is changed in a script or compiled program will only affect that process and possibly child processes. The parent process and any unrelated processes will not be affected. In DOS changing a variable's value (or removing it) inside a BATCH file will change the variable for the duration of command.com's existence.
In Unix, the environment variables are normally initialized during system startup by the system init scripts, and hence inherited by all other processes in the system. Users can, and often do, augment them in the profile script for the shell they are using. In Microsoft Windows, environment variables defaults are stored in the windows registry or set in autoexec.bat.

[edit] Getting and setting environment variables
The variables can be used both in scripts and on the command line. They are usually referenced by putting special symbols in front of or around the variable name. For instance, to display the program search path on a DOS or Windows system, the user could type in this command:


echo %PATH%

Other scripting and shell environments sometimes use other symbols for the same purpose, such as the commonly used dollar sign syntax used by many Unix shells:


echo $PATH


[edit] DOS and Windows
In DOS and Windows, the set command without any arguments displays all environment variables along with their values.
To set a variable to a particular value, use:


set VARIABLE=value

However, this is temporary. Permanent change to the environment variable can be achieved through editing the registry (not recommended for novices) and using the Windows Resource Kit application setx.exe. With the introduction of Windows Vista, the setx command became part of Windows. The most common method of setting an environment variable in Windows is via <Control Panel:System:Advanced:Environment Variables>.
To see the current value of a particular variable, use:


set VARIABLE

or


echo %VARIABLE%


[edit] UNIX
The env, set, and printenv commands display all environment variables and their values. env and set are also used to set environment variables and are often incorporated directly into the shell. printenv can also be used to print a single variable by giving that variable name as the sole argument to the command.
In UNIX, the following commands can also be used, but are often dependent on a certain shell.

export VARIABLE=value  # for Bourne, bash, and related shells
setenv VARIABLE value  # for csh and related shells


[edit] Unexported variables
In UNIX shells, variables may be assigned without the export keyword. Variables defined in this way are displayed by the set command, but are not true environment variables, as they are stored in the shell and not in the kernel. They will not be detected by the printenv command and are not inherited by child processes.

VARIABLE=value

However, if used in front of a program to run, the variables will appear as real environment variables to the program:

VARIABLE=value program_name [arguments]

There is no equivalent in the DOS or Windows environments.

[edit] Security
On Unix, a setuid program is given an environment chosen by its caller, but it runs with different authority from its caller. The dynamic linker will usually load code from locations specified by the environment variables LD_LIBRARY_PATH and LD_PRELOAD and run it with the process's authority. If a setuid program did this, it would be insecure, because its caller could get it to run arbitrary code and hence misuse its authority. For this reason, libc unsets these environment variables at startup in a setuid process.

[edit] Common environment variables

[edit] Examples of DOS environment variables

%COMSPEC%

This variable contains the full path to the command processor, command.com.

%PATH%

This variable contains a semicolon-delimited list of directories in which the command interpreter will search for executable files. Equivalent to the UNIX $PATH variable (although note that PATH on Windows additionally performs the same task as LD_LIBRARY_PATH on Unix-like systems). Note that %PATH% can also be set like this PATH=c:\dos; where SET isn't required.

%TEMP% and %TMP%

These variables contain the path to the directory where temporary files should be stored.

[edit] Examples of UNIX environment variables

$PATH

Contains a colon-separated list of directories that the shell searches for commands that do not contain a slash in their name (Commands with slashes are interpreted as a file name to execute, and the shell attempts to execute them as they are). See Path (computing)

$HOME

Contains the location of the user's home directory. Although the current user's home directory can also be found out through the C functions getpwuid and getuid, $HOME is often used for convenience in various shell scripts (and other contexts).

$PWD

This variable points to the current directory. Equivalent to the output of the command pwd when called without arguments.

$DISPLAY

Contains the identifier for the display that X11 programs should use by default.

$LD_LIBRARY_PATH

On many Unix systems with a dynamic linker, contains a colon-separated list of directories that the dynamic linker should search for shared objects when building a process image after exec, before searching in any other directories.

$LANG, $LC_ALL

LANG expands to the default system locale; LC_ALL can be used to override this. For example, if its value is pt_BR, then the language is set to (Brazilian) Portuguese and the locale to Brazil.

$TZ

Refers to Time zone. It can take values like GMT, AST, etc.

[edit] Examples from Microsoft Windows

[edit] Discrete value variables
These variables generally expand to discrete values, such as the current working directory, the current date, or a random number. Some of these are true environment variable and will be expanded by all functions that handle environment variables. Others, like %CD% simply look like environment variables and will only be expanded by some functions and shells. They are not case sensitive.

%CD%

This variable points to the current directory. Equivalent to the output of the command cd when called without arguments.

%DATE%

This variable expands to the current date. The date is displayed according to the current user's date format preferences.
The following is a way of reformatting the date and time for use in file copies. The example assumes UK format of day month year and the time is set for a 24 hour clock.


@echo off 
echo %DATE% %TIME%
set MTH=%DATE:~4,2%
set DAY=%DATE:~7,2%
set YR=%DATE:~10,4%
set HR=%TIME:~0,2%
set HR0=%TIME:~0,1%
if "%HR0%"==" " set HR=0%TIME:~1,1%
set MIN=%TIME:~3,2%
set SEC=%TIME:~6,2%
set MYDATE=%YR%%MTH%%DAY%-%HR%%MIN%%SEC%
echo %MYDATE%


%ERRORLEVEL%

This variable points to the current error level. If there was an error in the previous command, this is what you need to check against to find out about that.

%RANDOM%

This variable returns a random number between 0 and 32767

%TIME%

This variable points to the current time. The time is displayed according to the current user's time format preferences.

[edit] System path variables
These variables refer to locations of critical operating system resources, and as such generally are not user-dependent.

%AppData%

Contains the full path to the Application Data folder of the logged-in user. Does not work on Windows NT 4.0 SP6 UK.

%ComSpec%

This variable contains the full path to the command processor; on Windows NT based operating systems this is cmd.exe, while on Windows 9x and ME it is the DOS command processor, COMMAND.COM.

%PATH%

This variable contains a semicolon-delimited (do not put spaces in between) list of directories in which the command interpreter will search for executable files. Equivalent to the UNIX $PATH variable.

%ProgramFiles%

This variable points to Program Files directory, which stores all the installed program of Windows and others. The default on English-language systems is C:\Program Files. In 64-bit editions of Windows (XP, 2003, Vista), there are also %ProgramFiles(x86)% which defaults to C:\Program Files (x86) and %ProgramW6432% which defaults to C:\Program Files. The %ProgramFiles% itself depends on whether the process requesting the environment variable is itself 32-bit or 64-bit (this is caused by Windows-on-Windows 64-bit redirection).

%CommonProgramFiles%

This variable points to Common Files directory. The default is C:\Program Files\Common Files.

%SystemDrive%

The %SystemDrive% variable is a special system-wide environment variable found on Microsoft Windows NT and its derivatives. Its value is the drive upon which the system folder was placed. Also see next item.
The value of %SystemDrive% is in most cases C:.

%SystemRoot%

The %SystemRoot% variable is a special system-wide environment variable found on Microsoft Windows NT and its derivatives. Its value is the location of the system folder, including the drive and path.
The drive is the same as %SystemDrive% and the default path on a clean installation depends upon the version of the operating system. By default, on a clean installation:

Windows NT 5.1 (Windows XP) and newer versions use \WINDOWS
Windows NT 5.0 (Windows 2000), Windows NT 4.0 and Windows NT 3.1 use \WINNT
Windows NT 3.5x uses \WINNT35


%WinDir%

This variable points to the Windows directory (on Windows NT-based operating systems it is identical to the %SystemRoot% variable, above). If the System is on drive C: then the default values are:

C:\WINDOWS on Windows 95, Windows 98, Windows Me, Windows XP, Windows Server 2003, Windows Vista and Windows Server 2008
C:\WINNT for Windows NT 4, and Windows 2000

Note that Windows NT 4 Terminal Server Edition by default installs to C:\WTSRV.

[edit] User management variables
These variables store information related to resources and settings owned by various user profiles within the system. As a general rule, these variables do not refer to critical system resources or locations that are necessary for the OS to run.

%AllUsersProfile%

The %AllUsersProfile% variable expands to the full path to the All Users profile directory. This profile contains resources and settings that are used by all system accounts. Shortcut links copied to the All Users' Start menu or Desktop folders will appear in every user's Start menu or Desktop, respectively.

%UserDomain%

The variable holds the name of the Workgroup or Windows Domain to which the current user belongs. The related variable, %LOGONSERVER%, holds the hostname of the server that authenticated the current user's logon credentials (name and password). For Home PCs, and PCs in a Workgroup, the authenticating server is usually the PC itself. For PCs in a Windows Domain, the authenticating server is a domain controller (a primary domain controller, or PDC, in Windows NT 4-based domains).

%UserProfile%

The %UserProfile% variable is a special system-wide environment variable found on Microsoft Windows NT and its derivatives. Its value is the location of the current user's profile directory, in which is found that user's HKCU registry hive (NTUSER).
Users can also use the %USERNAME% variable to determine the active users login identification.

[edit] Default Values on Microsoft Windows


Variable
Windows XP
Windows Vista


 %ALLUSERSPROFILE%
C:\Documents and Settings\All Users
C:\ProgramData


 %APPDATA%
C:\Documents and Settings\{username}\Application Data
C:\Users\{username}\AppData\Roaming


 %COMPUTERNAME%
{computername}
{computername}


 %COMMONPROGRAMFILES%
C:\Program Files\Common Files
C:\Program Files\Common Files


 %COMMONPROGRAMFILES(x86)%
C:\Program Files (x86)\Common Files
C:\Program Files (x86)\Common Files


 %COMSPEC%
C:\Windows\System32\cmd.exe
C:\Windows\System32\cmd.exe


 %HOMEDRIVE%
C:\
C:\


 %HOMEPATH%
\Documents and Settings\{username}
\Users\{username}


 %PATH%
C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;{plus program paths}
C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;{plus program paths}


 %PATHEXT%
.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.WSF;.WSH
.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh;.msc


 %PROGRAMFILES%
C:\Program Files
C:\Program Files


 %PROGRAMFILES(X86)%
C:\Program Files (x86) (only in 64-bit version)
C:\Program Files (x86) (only in 64-bit version)


 %PROMPT%
Code for current command prompt format. Code is usually $P$G
Code for current command prompt format. Code is usually $P$G


 %SYSTEMDRIVE%
C:
C:


 %SystemRoot%
The Windows directory, usually C:\Windows, formerly C:\WINNT
C:\Windows


 %TEMP% and %TMP%
C:\Documents and Settings\{username}\Local Settings\Temp
C:\Users\{username}\AppData\Local\Temp


 %USERNAME%
{username}
{username}


 %USERPROFILE%
C:\Documents and Settings\{username}
C:\Users\{username}


 %WINDIR%
C:\Windows
C:\Windows


 %PUBLIC%

C:\Users\Public



[edit] See also

List of Unix programs
List of DOS commands
Environment Modules


[edit] External links

environ(7): user environment – Linux man page
Environment Variable Reference — Has a list showing which environment variables are for 9x WinNTx etc
Accessing Environment Variables — Has a list showing which environment variables are for 9x WinNTx etc
Windows XP Command Shell Overview with a list of environment variables — Microsoft.com
How To Manage Environment Variables in Windows XP — Microsoft.com
Path Manager (pathman.exe) — Command line tool from Microsoft for editing PATH environment variable on Windows
Environment Variables in Windows XP — Computer Education
RapidEE (Rapid Environment Editor) — Windows environment variables editor
(EnvMan) Windows Environment Variables Manager — Environment Variables Editor for Windows
Managing Search PATH on Windows — Easy interactive way of editing PATH environment variable on Windows
Dealing with Environment Variables in c# — How to set environment variables in c#




Retrieved from "http://en.wikipedia.org/wiki/Environment_variable"
Categories: Operating system technology | Computer configuration | Variable (computer programming) 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Български
Deutsch
Español
Français
한국어
日本語
Polski
Português
Русский
Suomi
Українська









 This page was last modified on 4 April 2009, at 23:19.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
