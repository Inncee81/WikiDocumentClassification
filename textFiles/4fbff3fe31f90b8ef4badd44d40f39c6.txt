













ANSI escape code - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "ANSI_escape_code";
		var wgTitle = "ANSI escape code";
		var wgAction = "view";
		var wgArticleId = "65930";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 278883203;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); ANSI escape code

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
ANSI escape sequences are used to control text formatting and other output options on text terminals. In this context, ANSI refers to the ANSI X3.64 standard (which was withdrawn in 1997). It was replaced by ISO/IEC 6429, which is equivalent to ECMA-48.
Most of these escape sequences start with the characters ESC (ASCII decimal 27/hex 0x1B/octal 033) and [ (left bracket). This sequence is called CSI for Control Sequence Introducer (or Control Sequence Initiator). There is a single-character CSI (155/0x9B/0233) as well. The ESC+[ two-character sequence is more often used than the single-character alternative, for details see C0 and C1 control codes. Devices supporting only ASCII (7-bits), or which implement 8-bit code pages which use the 0x80–0x9F control character range for other purposes will recognize only the two-character sequence. Though some encodings use multiple bytes per character, in this topic all characters are single-byte.




Contents


1 Support

1.1 Windows and DOS


2 Codes
3 Examples
4 See also
5 Notes
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Support
Most terminal emulators running on Unix-like systems such as Linux have support built in, as do such systems' native consoles.

[edit] Windows and DOS
Windows 95, Windows 98 and DOS systems need a device driver for the ANSI escape sequences - the de facto standard being ANSI.SYS, but others are used as well. Console windows in Windows versions based on NT (Windows NT 4.0, Windows 2000, Windows XP, Windows Server 2003, Windows Vista and Windows Server 2008) do not natively support ANSI Escape sequences, though some support is possible. By adding the following line to the CONFIG.NT file located in the Windows System32 directory, ANSI output from 16-bit legacy programs executing under the NTVDM will be interpreted:

DEVICE=%SystemRoot%\system32\ANSI.SYS

Some support is also offered through alternate command processors such as JP Software's 4NT and Michael J. Mefford's ANSI.COM.
If ANSI.SYS is loaded in MS-DOS, the escape character can be specified as $e in the prompt command, e.g. prompt $e[44m;... would specify a blue background as part of the prompt. In most modern programming languages it can be specified as "\x1B" (Perl and Ruby also offer the equivalent "\e"), in Java it can be specified as "\u001B", and in BASIC it can be specified as CHR$(27) or CHR$(&H1B).
32-bit character-mode (subsystem:console) Windows applications don't write ANSI escape sequences to the console. They must interpret the escape code actions and call the native Console API instead to accomplish the proper result. If you do write the sequences directly, all you'll get is the text of the sequence on the screen, not the action intended. To add ANSI support, one must parse the string for ANSI escape sequences and apply the actions oneself using the Console API. For example, if you pull out \e[1;31m from your text stream on the way to a Console for display, you'd read that to mean change the foreground color to bright red and do so with something like this:

foreground = FOREGROUND_RED|FOREGROUND_INTENSITY;
SetConsoleTextAttribute(ConOut, background|foreground);

The Windows hardware abstraction layer does not permit user-mode applications to set the underlying VGA registers. The Window's Console API has some restrictions regarding the blink, underline and reverse VGA attributes.

The API provides bright background colors rather than blink[1].
The following attribute bits for SetConsoleTextAttribute() have no effect even though they are listed[2]:


COMMON_LVB_REVERSE_VIDEO
COMMON_LVB_UNDERSCORE


Blink could be emulated in an application with a timer.
Reverse-video can be emulated quite easily.
The color palette cannot be changed unless running Vista[3].

Note: most devices only support a subset of the SGR (Select Graphic Rendition) codes.

[edit] Codes
The general structure of an ANSI escape sequence is CSI n1 ; n2... letter. The numbers are optional parameters, and the final byte specifies the command. The default value used for omitted parameters varies with the command; it is usually 1 or 0. If trailing parameters are omitted, the trailing semicolons may also be omitted.
The final byte is technically any character in the range 64 to 126 (hex 0x40 to 0x7e, ASCII @ to ~), and may be extended with leading intermediate bytes in the range 32 to 47 (hex 0x20 to 0x2f). Only the case of a single intermediate byte of 32 is currently standardized.
Some of the ANSI escape sequences are private (not covered by the standard). There are two ways these are encoded:

if the first byte of the string is in the range 60 to 63 (hex 0x3C to 0x3F, ASCII '<', '=', '>' and '?')
if the final byte is in the range 112 to 126 (hex 0x70 to 0x7e, ASCII p to ~).

Examples of private escape codes include the DECTCEM (DEC text cursor enable mode) shown below. It was first introduced for the VT-300 series of video terminals.

Some ANSI escape sequences (not a complete list)

Code
Name
Effect


CSI n A
CUU - CUrsor Up
Moves the cursor n (default 1) cells in the given direction. If the cursor is already at the edge of the screen, this has no effect.


CSI n B
CUD - CUrsor Down


CSI n C
CUF - CUrsor Forward


CSI n D
CUB - CUrsor Back


CSI n E
CNL - Cursor Next Line
Moves cursor to beginning of the line n (default 1) lines down.


CSI n F
CPL - Cursor Previous Line
Moves cursor to beginning of the line n (default 1) lines up.


CSI n G
CHA - Cursor Horizontal Absolute
Moves the cursor to column n.


CSI n ; m H
CUP - CUrsor Position
Moves the cursor to row n, column m. The values are 1-based, and default to 1 (top left corner) if omitted. A sequence such as CSI ;5H is a synonym for CSI 1;5H as well as CSI 17;H is the same as CSI 17H and CSI 17;1H


CSI n J
ED - Erase Data
Clears part of the screen. If n is zero (or missing), clear from cursor to end of screen. If n is one, clear from cursor to beginning of the screen. If n is two, clear entire screen (and moves cursor to upper left on MS-DOS ANSI.SYS).


CSI n K
EL - Erase in Line
Erases part of the line. If n is zero (or missing), clear from cursor to the end of the line. If n is one, clear from cursor to beginning of the line. If n is two, clear entire line. Cursor position does not change.


CSI n S
SU - Scroll Up
Scroll whole page up by n (default 1) lines. New lines are added at the bottom. (not ANSI.SYS)


CSI n T
SD - Scroll Down
Scroll whole page down by n (default 1) lines. New lines are added at the top. (not ANSI.SYS)


CSI n ; m f
HVP - Horizontal and Vertical Position
Moves the cursor to row n, column m. Both default to 1 if omitted. Same as CUP


CSI n [;k] m
SGR - Select Graphic Rendition
Sets SGR parameters. After CSI can be zero or more parameters separated with ;. With no parameters, CSI m is treated as CSI 0 m (reset / normal), which is typical of most of the ANSI escape sequences.


CSI 6 n
DSR - Device Status Report
Reports the cursor position to the application as (as though typed at the keyboard) ESC[n;mR, where n is the row and m is the column. (May not work on MS-DOS.)


CSI s
SCP - Save Cursor Position
Saves the cursor position.


CSI u
RCP - Restore Cursor Position
Restores the cursor position.


CSI ?25l
DECTCEM
Hides the cursor.


CSI ?25h
DECTCEM
Shows the cursor.



Color table[4]

Intensity
0
1
2
3
4
5
6
7
9


Normal
Black
Red
Green
Yellow[5]
Blue
Magenta
Cyan
White
reset


Bright
Black
Red
Green
Yellow
Blue
Magenta
Cyan
White



SGR (Select Graphic Rendition) parameters

Code
Effect
Note


0
Reset / Normal
all attributes off


1
Intensity: Bold



2
Intensity: Faint
not widely supported


3
Italic: on
not widely supported. Sometimes treated as inverse.


4
Underline: Single



5
Blink: Slow
less than 150 per minute


6
Blink: Rapid
MS-DOS ANSI.SYS; 150 per minute or more


7
Image: Negative
inverse or reverse; swap foreground and background


8
Conceal
not widely supported


21
Underline: Double
not widely supported


22
Intensity: Normal
not bold and not faint


24
Underline: None



25
Blink: off



27
Image: Positive



28
Reveal
conceal off


30–39
Set foreground color, normal intensity
3x, where x is from the color table above


40–49
Set background color, normal intensity
4x, where x is from the color table above


90–99
Set foreground color, high intensity
aixterm


100–109
set background color, high intensity
aixterm



[edit] Examples
CSI 2 J — This clears the screen and, on some devices, locates the cursor to the y,x position 1,1 (upper left corner).
CSI 32 m — This makes text green. On MS-DOS, normally the green would be dark, dull green, so you may wish to enable Bold with the sequence CSI 1 m which would make it bright green, or combined as CSI 32 ; 1 m. MS-DOS ANSI.SYS uses the Bold state to make the character Bright; also the Blink state can be set (via INT 10, AX 1003h, BL 00h) to render the Background in the Bright mode. MS-DOS ANSI.SYS does not support SGR codes 90–97 and 100–107 directly.
CSI 0 ; 6 8 ; "DIR" ; 13 p — This re-assigns the key F10 to send to the keyboard buffer the string "DIR" and ENTER, which in the DOS command line would display the contents of the current directory. (MS-DOS ANSI.SYS only) This is a private-use code (as indicated by the letter p), using a non-standard extension to include a string-valued parameter. Following the letter of the standard would consider the sequence to end at the letter D.
CSI s — This saves the cursor position. Using the sequence CSI u will restore it to the position. Say the current cursor position is 7(y) and 10(x). The sequence CSI s will save those two numbers. Now you can move to a different cursor position, such as 20(y) and 3(x), using the sequence CSI 20 ; 3 H or CSI 20 ; 3 f. Now if you use the sequence CSI u the cursor position will return to 7(y) and 10(x). Some terminals require the DEC sequences ESC 7 / ESC 8 instead which is more widely supported.

[edit] See also

ANSI art
Control character
AVATAR


[edit] Notes


^ See blink VGA register details.
^ See this discussion for more detail
^ See details on SetConsoleScreenBufferInfoEx() and the CONSOLE_SCREEN_BUFFER_INFOEX structure
^ The names are standard, however the exact shade/hue/value of colors are not standardized and will depend on the device used to display them.
^ On terminals based on CGA compatible hardware, such as ANSI.SYS running on DOS, this normal intensity foreground color is rendered as Orange. CGA RGBI monitors contained hardware to modify the dark yellow color to an orange/brown color by reducing the green component. See this ansi art as an example.



[edit] External links

Standard ECMA-48: Control Functions for Coded Character Sets 5th edition (June 1991)
ANSI.SYS -- ansi terminal emulation escape sequences
ANSI/VT100 Terminal Control Escape Sequences Note: VT100s do not do color
Xterm / Escape Sequences
AIXterm / Escape Sequences
A collection of escape sequences for terminals that are vaguely compliant with ECMA-48 and friends.
ANSI Escape Sequences








v • d • e

Standards of Ecma International






ANSI escape code · C++/CLI · C# · CD-ROM · CLI · DDS · E4X · ECMAScript · Eiffel · FAT · FD · HVD · Office Open XML · U3D · UDF · UDO · UMD · UWB






List of Ecma standards








Retrieved from "http://en.wikipedia.org/wiki/ANSI_escape_code"
Categories: Computer and telecommunication standards | Ecma standards | ANSI standards 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Español
Suomi









 This page was last modified on 22 March 2009, at 04:46 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
