













ext3 - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Ext3";
		var wgTitle = "Ext3";
		var wgAction = "view";
		var wgArticleId = "39195";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280992817;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); ext3

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

ext3

Developer
Stephen Tweedie


Full name
Third extended file system


Introduced
November 2001 (Linux 2.4.15)


Partition identifier
0x83 (MBR)
EBD0A0A2-B9E5-4433-87C0-68B6B72699C7 (GPT)


Structures


Directory contents
Table, hashed B-tree with dir_index enabled


File allocation
bitmap (free space), table (metadata)


Bad blocks
Table


Limits


Max file size
16 GiB – 2 TiB


Max number of files
Variable, allocated at creation time[1]


Max filename length
255 bytes


Max volume size
2 TiB – 16 TiB


Allowed characters in filenames
All bytes except NUL and '/'


Features


Dates recorded
modification (mtime), attribute modification (ctime), access (atime)


Date range
December 14, 1901 - January 18, 2038


Date resolution
1s Nanosecond (using undocumented big i-node)


Attributes
No-atime, append-only, synchronous-write, no-dump, h-tree (directory), immutable, journal, secure-delete, top (directory), allow-undelete


File system permissions
Unix permissions, ACLs and arbitrary security attributes (Linux 2.6 and later)


Transparent compression
No


Transparent encryption
No (provided at the block device level)


Single Instance Storage
No


Supported operating systems
Linux, BSD, Windows (through an IFS)


The ext3 or third extended filesystem is a journaled file system that is commonly used by the Linux kernel. It is the default file system for many popular Linux distributions. Stephen Tweedie first revealed that he was working on extending ext2 in Journaling the Linux ext2fs Filesystem in 1998 [2] paper and later in a February 1999 kernel mailing list posting[3] and the filesystem was merged with the mainline Linux kernel in November 2001 from 2.4.15 onward.[4] Its main advantage over ext2 is journaling which improves reliability and eliminates the need to check the file system after an unclean shutdown.




Contents


1 Advantages

1.1 Size limits
1.2 Journaling levels


2 Disadvantages

2.1 Functionality
2.2 Defragmentation
2.3 Compression
2.4 No checksumming in journal


3 ext4
4 See also
5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Advantages
Although its performance (speed) is less attractive than competing Linux filesystems such as JFS, ReiserFS and XFS, it has a significant advantage in that it allows in-place upgrades from the ext2 file system without having to back up and restore data. Ext3 also uses less CPU power than ReiserFS and XFS.[5] It is also considered safer than the other Linux file systems due to its relative simplicity and wider testing base.
The ext3 file system adds, over its predecessor:

A Journaling file system
Online file system growth
HTree indexing for larger directories. An HTree is a specialized version of a B-tree — not to be confused with the H tree fractal.

Without these, any ext3 file system is also a valid ext2 file system. This has allowed well-tested and mature file system maintenance utilities for maintaining and repairing ext2 file systems to also be used with ext3 without major changes. The ext2 and ext3 file systems share the same standard set of utilities, e2fsprogs, which includes a fsck tool. The close relationship also makes conversion between the two file systems (both forward to ext3 and backward to ext2) straightforward.
While in some contexts the lack of "modern" filesystem features such as dynamic inode allocation and extents could be considered a disadvantage, in terms of recoverability this gives ext3 a significant advantage over file systems with those features. The file system metadata is all in fixed, well-known locations, and there is some redundancy inherent in the data structures that may allow ext2 and ext3 to be recoverable in the face of significant data corruption, where tree-based file systems may not be recoverable.

[edit] Size limits
ext3 has a maximum size for both individual files and the entire filesystem. For the filesystem as a whole that limit is 231−1 blocks. Both limits are dependent on the block size of the filesystem; the following chart summarizes the limits[6]:


Block size
Max file size
Max filesystem size


1 KiB
16 GiB
<2 TiB


2 KiB
256 GiB
<4 TiB


4 KiB
2 TiB
<8 TiB


8 KiB[limits 1]
2 TiB
<16 TiB



^ 8 KiB block size is only available on architectures which allow 8 KiB pages, such as Alpha.


[edit] Journaling levels
There are three levels of journaling available in the Linux implementation of ext3:

Journal (lowest risk)
Both metadata and file contents are written to the journal before being committed to the main file system. Because the journal is relatively continuous on disk, this can improve performance in some circumstances. In other cases, performance gets worse because the data must be written twice - once to the journal, and once to the main part of the filesystem.


Ordered (medium risk)
Only metadata is journaled; file contents are not, but it's guaranteed that file contents are written to disk before associated metadata is marked as committed in the journal. This is the default on many Linux distributions. If there is a power outage or kernel panic while a file is being written or appended to, the journal will indicate the new file or appended data has not been "committed", so it will be purged by the cleanup process. (Thus appends and new files have the same level of integrity protection as the "journaled" level.) However, files being overwritten can be corrupted because the original version of the file is not stored. Thus it's possible to end up with a file in an intermediate state between new and old, without enough information to restore either one or the other (the new data never made it to disk completely, and the old data is not stored anywhere). Even worse, the intermediate state might intersperse old and new data, because the order of the write is left up to the disk's hardware.[7] [8]


Writeback (highest risk)
Only metadata is journaled; file contents are not. The contents might be written before or after the journal is updated. As a result, files modified right before a crash can become corrupted. For example, a file being appended to may be marked in the journal as being larger than it actually is, causing garbage at the end. Older versions of files could also appear unexpectedly after a journal recovery. The lack of synchronization between data and journal is faster in many cases. XFS and JFS use this level of journaling, but ensure that any "garbage" due to unwritten data is zeroed out on reboot.


[edit] Disadvantages

[edit] Functionality
Since ext3 aims to be backwards compatible with the earlier ext2, many of the on-disk structures are similar to those of ext2. Because of that, ext3 lacks a number of features of more recent designs, such as extents, dynamic allocation of inodes, and block suballocation.[9] There is a limit of 31998 sub-directories per one directory, stemming from its limit of 32000 links per inode.[10]
ext3, like most current Linux filesystems, cannot be fsck-ed while the filesystem is mounted for writing. Attempting to check a file system that is already mounted may detect bogus errors where changed data has not reached the disk yet, and corrupt the file system in an attempt to "fix" these errors.

[edit] Defragmentation
There is no online ext3 defragmentation tool that works on the filesystem level. An offline ext2 defragmenter, e2defrag, exists but requires that the ext3 filesystem be converted back to ext2 first. But depending on the feature bits turned on in the filesystem, e2defrag may destroy data; it does not know how to treat many of the newer ext3 features.[11]
There are userspace defragmentation tools like Shake[12] and defrag[13][14]. Shake works by allocating space for the whole file bolt upright and hoping that it will make the newly allocated file less fragmented. It also tries to write files used at the same time next to each other. Defrag works by copying each file over itself. However they only work if the filesystem is reasonably empty. A true defragmentation tool does not exist for ext3.[15]
That being said, as the Linux System Administrator Guide states, "Modern Linux filesystem(s) keep fragmentation at a minimum by keeping all blocks in a file close together, even if they can't be stored in consecutive sectors. Some filesystems, like ext3, effectively allocate the free block that is nearest to other blocks in a file. Therefore it is not necessary to worry about fragmentation in a Linux system."[16]
While ext3 is more resistant to file fragmentation than the FAT filesystem, nonetheless ext3 filesystems can and do get fragmented over time.[17] Consequently the successor to the ext3 filesystem, ext4, includes a filesystem defragmentation utility and support for extents (contiguous file regions).

[edit] Compression
Support for transparent compression is available as an unofficial patch for ext3. This patch is a direct port of e2compr and still needs further development, it compiles and boots well with upstream kernels[citation needed] but journaling is not implemented yet. The current patch is named e3compr and can be found here: http://sourceforge.net/projects/e3compr/

[edit] No checksumming in journal
Ext3 does not do checksumming when writing to the journal. If barrier=1 is not enabled as a mount option (in /etc/fstab), and if the hardware is doing out-of-order write caching, one runs the risk of severe filesystem corruption during a crash.[18][19]
Consider the following scenario: If hard disk writes are done out-of-order (due to modern hard disks caching writes in order to amortize write speeds), it is likely that one will write a commit block of a transaction before the other relevant blocks are written. If a power failure or unrecoverable crash should occur before the other blocks get written, the system will have to be rebooted. Upon reboot, the file system will replay the log as normal, and replay the "winners" (transactions with a commit block, including the invalid transaction above which happened to be tagged with a valid commit block). The unfinished disk write above will thus proceed, but using corrupt journal data. The file system will thus mistakenly overwrite normal data with corrupt data while replaying the journal. There is a test program available to trigger the problematic behavior. If checksums had been used, where the blocks of the "fake winner" transaction were tagged with a mutual checksum, the file system could have known better and not replayed the corrupt data onto the disk. Journal checksumming has been added to EXT4.[20]
The ext3 barrier option is not enabled by default on almost all popular Linux distributions[citation needed] except openSUSE, and thus most distributions are at risk. In addition, filesystems going through the device mapper interface (including software RAID and LVM implementations) may not support barriers, and will issue a warning if that mount option is used.[21][22] There are also some disks that do not properly implement the write cache flushing extension necessary for barriers to work, which causes a similar warning.[23] In these situations, where barriers are not supported or practical, reliable write ordering is possible by turning off the disk's write cache and using the data=journal mount option.[24]

[edit] ext4
Main article: ext4
An enhanced version of the filesystem was announced by Theodore Ts'o [25] on June 28, 2006 under the name of ext4. On October 11, 2008, the patches that mark ext4 as stable code were merged in the Linux 2.6.28 source code repositories, marking the end of the development phase and recommending its adoption.

[edit] See also

ext2
ext4
List of file systems
Comparison of file systems
Extended file attributes


[edit] References


^ The maximum number of inodes (and hence the maximum number of files and directories) is set when the file system is created. If V is the volume size in bytes, then the default number of inodes is given by V/213 (or the number of blocks, whichever is less), and the minimum by V/223. The default was deemed sufficient for most applications. The max number of subdirectories in one directory is fixed to 32000.
^ Stephen C. Tweedie (May 1998). "Journaling the Linux ext2fs Filesystem" (PDF). Proceedings of the 4th Annual LinuxExpo, Durham, NC. http://jamesthornton.com/hotlist/linux-filesystems/ext3-journal-design.pdf. Retrieved on 2007-06-23. 
^ Stephen C. Tweedie (February 17 1999). "Re: fsync on large files". Linux kernel mailing list. http://marc.info/?l=linux-kernel&m=91926557602501&w=2. 
^ Rob Radez (November 23 2001). "2.4.15-final". Linux kernel mailing list. http://marc.info/?l=linux-kernel&m=100650331813822&w=2. 
^ Justin Piszcz. "Benchmarking Filesystems Part II". Linux Gazette (122). http://linuxgazette.net/122/TWDT.html#piszcz. 
^ Matthew Wilcox. "Documentation/filesystems/ext2.txt". Linux kernel source documentation. http://www.charmed.com/txt/ext2.txt. 
^ curious onloooker: Speeding up ext3 filesystems
^ Common threads: Advanced filesystem implementor's guide, Part 8
^ Rob Radez (2005). "Extents,delayed allocation". future of ext3. http://ext2.sourceforge.net/2005-ols/paper-html/node18.html. 
^ "How many sub-directories?". (Web link).
^ Andreas Dilger. "Post to the ext3-users mailing list". ext3-users mailing list post. http://marc.info/?l=ext3-users&m=116231468911590&w=2. 
^ Vleu.net: Shake
^ Defrag written in shell
^ http://bazaar.launchpad.net/~jdong/pyfragtools/trunk/files Defrag written in Python
^ RE: searching for ext3 defrag/file move program
^ http://www.tldp.org/LDP/sag/html/filesystems.html
^ "We found heavily fragmented free areas on an intensively used IMAP server which stores all its emails in individual files - although more than 900 GB of the total disk space of 1.4 TB were still available." http://www.heise-online.co.uk/open/Tuning-the-Linux-file-system-Ext3--/features/110398/3
^ Re: Frequent metadata corruption with ext3 + hard power-off
^ Re: Frequent metadata corruption with ext3 + hard power-off
^ ext4: Add the journal checksum feature
^ Re: write barrier over device mapper supported or not?
^ XFS and zeroed files
^ Barrier Sync
^ Re: Frequent metadata corruption with ext3 + hard power-off
^ LKML: "Theodore Ts'o": Proposal and plan for ext2/3 future development work



[edit] External links

Linux ext3 FAQ as of 2004-10-14.
Introducing ext3 - IBM developerWorks Advanced filesystem implementor's guide, Part 7
Ext2 File System For Windows GPL ext2/ext3 file system driver for Windows NT/2000/XP (opensource, supports read & write)
Ext2 Installable File System For Windows ext2/ext3 file system driver for MS Windows NT/2000/XP (freeware, supports read & write on Windows NT4.0/2000/XP/2003/Vista on x86/AMD64)
EXT2 IFS ext2/ext3 file system driver (read only) for MS Windows NT/2000/XP (opensource), latest version in the web archive
Explore2fs An explorer-like GUI tool for accessing ext2/ext3 filesystems under MS Windows
ext2/ext3 resizing tools
Presentation on EXT3 Journaling Filesystem by Dr. Stephen Tweedie at the Ottawa Linux Symposium, 20 July 2000
Tutorial - Determining Your EXT3 Size Limits




Retrieved from "http://en.wikipedia.org/wiki/Ext3"
Categories: Disk file systems | Linux file systemsHidden categories: All articles with unsourced statements | Articles with unsourced statements since December 2008 | Articles with unsourced statements since August 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Česky
Deutsch
Español
Esperanto
Euskara
Français
Galego
한국어
Italiano
Lietuvių
Bahasa Melayu
Nederlands
日本語
Polski
Português
Русский
Slovenčina
Slovenščina
Svenska
Türkçe
中文









 This page was last modified on 1 April 2009, at 01:49.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
