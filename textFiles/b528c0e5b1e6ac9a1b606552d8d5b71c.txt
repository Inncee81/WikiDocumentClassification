













Grails (framework) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Grails_(framework)";
		var wgTitle = "Grails (framework)";
		var wgAction = "view";
		var wgArticleId = "5377531";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283288691;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-groovy {line-height: normal;}
.source-groovy li, .source-groovy pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for groovy
 * CSS class: source-groovy, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-groovy .de1, .source-groovy .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-groovy  {}
.source-groovy .head {}
.source-groovy .foot {}
.source-groovy .imp {font-weight: bold; color: red;}
.source-groovy .ln-xtra {color: #cc0; background-color: #ffc;}
.source-groovy li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-groovy li.li2 {font-weight: bold;}
.source-groovy .kw1 {color: #b1b100;}
.source-groovy .kw2 {color: #000000; font-weight: bold;}
.source-groovy .kw3 {color: #aaaadd; font-weight: bold;}
.source-groovy .kw4 {color: #993333;}
.source-groovy .kw5 {color: #663399;}
.source-groovy .kw6 {color: #CC0099;}
.source-groovy .kw7 {color: #FFCC33;}
.source-groovy .kw8 {color: #993399;}
.source-groovy .kw9 {color: #993399; font-weight: bold;}
.source-groovy .co1 {color: #808080; font-style: italic;}
.source-groovy .co2 {color: #a1a100;}
.source-groovy .coMULTI {color: #808080; font-style: italic;}
.source-groovy .es0 {color: #000099; font-weight: bold;}
.source-groovy .br0 {color: #66cc66;}
.source-groovy .st0 {color: #ff0000;}
.source-groovy .nu0 {color: #cc66cc;}
.source-groovy .me1 {color: #006600;}
.source-groovy .me2 {color: #006600;}
.source-groovy .re0 {color: #0000ff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-xml {line-height: normal;}
.source-xml li, .source-xml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for xml
 * CSS class: source-xml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-xml .de1, .source-xml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-xml  {}
.source-xml .head {}
.source-xml .foot {}
.source-xml .imp {font-weight: bold; color: red;}
.source-xml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-xml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-xml li.li2 {font-weight: bold;}
.source-xml .coMULTI {color: #808080; font-style: italic;}
.source-xml .es0 {color: #000099; font-weight: bold;}
.source-xml .br0 {color: #66cc66;}
.source-xml .st0 {color: #ff0000;}
.source-xml .nu0 {color: #cc66cc;}
.source-xml .sc0 {color: #00bbdd;}
.source-xml .sc1 {color: #ddbb00;}
.source-xml .sc2 {color: #339933;}
.source-xml .sc3 {color: #009900;}
.source-xml .re0 {color: #000066;}
.source-xml .re1 {font-weight: bold; color: black;}
.source-xml .re2 {font-weight: bold; color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Grails (framework)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Grails




Latest release
1.1 / 2009-03-10; 33 days ago


Written in
Groovy


Operating system
Cross platform


Platform
Cross platform (JVM)


Type
Web application framework


License
Apache License 2.0


Website
http://grails.org


Grails is an open source web application framework which leverages the Groovy programming language (which is in turn based on the Java platform). It is intended to be a high-productivity framework by following the "coding by convention" paradigm, providing a stand-alone development environment and hiding much of the configuration detail from the developer.
Grails was previously known as 'Groovy on Rails' (March 2006: the name was dropped in response to a request by David Heinemeier Hansson, founder of the Ruby on Rails framework.[1]). Work began in July 2005, with the 0.1 release on March 29, 2006 and the 1.0 release announced on February 18, 2008.
G2One - The Groovy Grails Company [2] - was acquired by SpringSource [3] in November, 2008.




Contents


1 Overview
2 High productivity

2.1 No XML configuration
2.2 Ready-to-use development environment
2.3 Functionality available through mixins


3 Web framework

3.1 Controllers
3.2 Views
3.3 Ajax support
3.4 Dynamic tag libraries


4 Persistence

4.1 Model
4.2 Methods

4.2.1 Dynamic Instance Methods
4.2.2 Dynamic Static (Class) methods


4.3 Scaffolding
4.4 Legacy Database Models


5 Creating a Grails project
6 Target audience
7 Integration with the Java platform
8 Books
9 Magazine
10 References
11 See also
12 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
Grails has been developed with a number of goals in mind:

Provide a high-productivity web framework for the Java platform.
Re-use proven Java technologies such as Hibernate and Spring under a simple, consistent interface
Offer a consistent framework which reduces confusion and is easy to learn.
Offer documentation for those parts of the framework which matter for its users.
Provide what users expect in areas which are often complex and inconsistent:

Powerful and consistent persistence framework.
Powerful and easy to use view templates using GSP (Groovy Server Pages).
Dynamic tag libraries to easily create web page components.
Good Ajax support which is easy to extend and customize.


Provide sample applications which demonstrate the power of the framework.
Provide a complete development mode, including web server and automatic reload of resources.

Grails has been designed to be easy to learn, easy to develop applications and extensible. It attempts to offer the right balance between consistency and powerful features.

[edit] High productivity
Grails has three properties which increase developer productivity significantly when compared to traditional Java web frameworks:

No XML configuration
Ready-to-use development environment
Functionality available through mixins


[edit] No XML configuration
Creating web applications in Java traditionally involves configuring environments and frameworks at the start and during development. This configuration is very often externalized in XML files to ease configuration and avoid embedding configuration in application code.
XML was initially welcomed as it provided greater consistency to configure applications. In recent years however it has become apparent that although XML is great for configuration it can be tedious to set up an environment. This may take away productivity as developers spend time understanding and maintaining framework configuration as the application grows. Adding or changing functionality in applications which use XML configuration adds an extra step to the change process next to writing application code which slows down productivity and may take away the agility of the entire process.
Grails takes away the need to add configuration in XML files. Instead the framework uses a set of rules or conventions while inspecting the code of Grails-based applications. For example, a class name which ends with Controller (for example BookController) is considered a web controller.

[edit] Ready-to-use development environment
When using traditional Java web toolkits, it's up to developers to assemble deployment units which can be tedious. Grails comes with a complete development environment which includes a web server to get developers started right away. All required libraries are part of the Grails distribution and Grails prepares the Java web environment for deployment automatically.

[edit] Functionality available through mixins
Grails features dynamic methods on several classes through mixins. A mixin is a method which is added to a class dynamically as if the functionality was compiled in the program.
These dynamic methods allow developers to perform operations without having to implement interfaces or extend base classes. Grails provides dynamic methods based on the type of class. For example domain classes have methods to automate persistence operations like save, delete and find.

[edit] Web framework
The Grails web framework has been designed according to the MVC paradigm.

[edit] Controllers
Grails uses controllers to implement the behaviour of web pages. Below is an example of a controller:


 class BookController {
    def list = {
       [ books: Book.findAll() ]
    }
 }

The controller above has a list action which returns a model containing all books in the database. To create this controller the grails command is used, as shown below:

grails create-controller

This command requests the controller name and creates a class in the grails-app/controller directory of the Grails project. Creating the controller class is sufficient to have it recognized by Grails. The list action maps to http://localhost:8080/book/list in development mode.

[edit] Views
Grails supports JSP and GSP. The example below shows a view written in GSP which lists the books in the model prepared by the controller above:


<html>
  <head>
    <title>Our books</title>
  </head>
  <body>
    <ul>
      <g:each in="${books}">
        <li>${it.title} (${it.author.name})</li>
      </g:each>
    </ul>
  </body>
</html>

This view should be saved as grails-app/views/book/list.gsp of the Grails project. This location maps to the BookController and list action. Placing the file in this location is sufficient to have it recognized by Grails.
There is also a GSP tag reference available.

[edit] Ajax support
Grails supports several Ajax libraries including OpenRico, Prototype and YUI [4]. You can use existing tag libraries which create HTML with Ajax code. You can also easily create your own tag libraries.

[edit] Dynamic tag libraries
Grails provides a large number of tag libraries out of the box. However you can also create and reuse your own tag libraries easily:


 def formatDate = { attrs ->
    out << new java.text.SimpleDateFormat(attrs.format).format(attrs.date)
 }

The formatDate tag library above formats a java.util.Date object to a String. This tag library should be added to the grails-app/taglib/ApplicationTagLib.groovy file or in a file ending with TagLib.groovy in the grails-app/taglib directory.
Below is a snippet from a GSP file which uses the formatDate tag library:

<g:formatDate format="yyyyMMdd" date="${myDate}"/>

To use a dynamic tag library in a GSP no import tags have to be used. Dynamic tag libraries can also be used in JSP files although this requires a little more work. [3]

[edit] Persistence

[edit] Model
The domain model in Grails is persisted to the database using GORM (Grails Object Relational Mapping). Domain classes are saved in the grails-app/domain directory and can be created using the grails command as shown below:

grails create-domain-class

This command requests the domain class name and creates the appropriate file. Below the code of the Book class is shown:


 class Book {
    String title
    Person author
 }

Creating this class is all that is required to have it managed for persistence by Grails. With Grails 0.3, GORM has been improved and e.g. adds the properties id and version itself to the domain class if they are not present.

[edit] Methods
The domain classes managed by GORM have 'magic' dynamic and static methods to perform persistence operations on these classes and its objects. [4]

[edit] Dynamic Instance Methods
The save() method saves an object to the database:


 def book = new Book(title:"The Da Vinci Code", author:Author.findByName("Dan Brown"))
 book.save()

The delete() method deletes an object from the database:


 def book = Book.findByTitle("The Da Vinci Code")
 book.delete()

The refresh() method refreshes the state of an object from the database:


 def book = Book.findByTitle("The Da Vinci Code")
 book.refresh()

The ident() method retrieves the object's identity assigned from the database:


 def book = Book.findByTitle("The Da Vinci Code")
 def id = book.ident()


[edit] Dynamic Static (Class) methods
The count() method returns the number of records in the database for a given class:


 def bookCount = Book.count()

The exists() method returns true if an object exists in the database with a given identifier:


 def bookExists = Book.exists(1)

The find() method returns the first object from the database based on an object query statement:


 def book = Book.find("from Book b where b.title = ?", [ 'The Da Vinci Code' ])

Note that the query syntax is Hibernate HQL.

The findAll() method returns all objects existing in the database:


 def books = Book.findAll()

The findAll() method can also take an object query statement for returning a list of objects:


 def books = Book.findAll("from Book")

The findBy*() methods return the first object from the database which matches a specific pattern:


 def book = Book.findByTitle("The Da Vinci Code")

Also:


 def book = Book.findByTitleLike("%Da Vinci%")

The findAllBy*() methods return a list of objects from the database which match a specific pattern:


 def books = Book.findAllByTitleLike("The%")

The findWhere*() methods return the first object from the database which matches a set of named parameters:


 def book = Book.findWhere(title:"The Da Vinci Code")


[edit] Scaffolding
Grails supports scaffolding to support CRUD operations (Create, Read, Update, Delete). Any domain class can be scaffolded by creating a scaffolding controller as shown below:


 class BookController {
    def scaffold = true
 }

By creating this class you can perform CRUD operations on http://localhost:8080/book. Currently Grails does not provide scaffolding for associations.

[edit] Legacy Database Models
The persistence mechanism in GORM is implemented via Hibernate. As such, legacy databases may be mapped to GORM classes using standard Hibernate mapping files.

[edit] Creating a Grails project
A Grails project is created as follows:

Follow the download and installation guidelines on the Grails web site. [5]
Open a command prompt and type:


grails create-app

This command will request the name of the project and will create a project directory with the same name. Change to this directory to use the grails command.
By running the grails run-app you can now try the http://localhost:8080/ URL.

[edit] Target audience
The target audience for Grails is:

Java developers who are looking for an integrated development environment to create web based applications.
Developers without Java experience looking for a high-productivity environment to build web based applications.


[edit] Integration with the Java platform
Grails is built on top of and is part of the Java platform meaning it's very easy to integrate with Java libraries, frameworks and existing code bases. The most prominent feature Grails offers in this area is the transparent integration of classes which are mapped with the Hibernate ORM framework. This means existing applications which use Hibernate can use Grails without recompiling the code or reconfiguring the Hibernate classes while using the dynamic persistence methods discussed above. [6]
One consequence of this is that scaffolding can be configured for Java classes mapped with Hibernate. Another consequence is that the capabilities of the Grails web framework are fully available for these classes and the applications which use them.

[edit] Books

Getting Started with Grails
Apress Grails books
Grails in Action


[edit] Magazine

GroovyMag for Groovy and Grails developer


[edit] References


^ Dropping Groovy on Rails name
^ [1]
^ [2]
^ Yahoo! UI library



[edit] See also

Groovy_(programming_language)
JRuby
Griffon (framework) - A Desktop framework inspired by Grails


[edit] External links

Grails home page
Groovy home page
Grails Screencasts
Introduction To Grails, by Jeff Brown, Principal Software Engineer, Object Computing, Inc. (OCI)
Getting Started with Grails, by Jason Rudolph, as part of the InfoQ Enterprise Development series of books - available as a free PDF download to registered users
Grails Tutorials fresh grails posts, from the blogosphere, with code snippets and tutorials to get started quickly
Grails Tutorial Gentle introduction to Grails
Grails Brasil Largest brazilian Grails user group









v • d • e

List of Web Application Frameworks





Actionscript

PureMVC






ASP.NET

ASP.NET MVC · BFC · DotNetNuke · MonoRail · Umbraco






ColdFusion

ColdSpring · Fusebox · Mach-II · Model-Glue · onTap






Common Lisp

ABCL-web · blow · BKNR · SymbolicWeb · UnCommon Web






Java

Apache Struts · AppFuse · Flexive · Google Web Toolkit · IT Mill Toolkit · ItsNat · JavaServer Faces · JBoss Seam · Makumba · OpenXava · Reasonable Server Faces · RIFE · Restlet · Spring · Stripes · Tapestry · WebWork · Wicket · ZK






JavaScript (client-side)

Ample SDK · Clean AJAX · CougarXML · Dojo · Echo · Ext · jQuery · midori · MochiKit · MooTools · OpenLink AJAX · Prototype JavaScript · Pyjamas · qooxdoo · Rialto · Rico · script.aculo.us · SmartClient · SproutCore · Spry · Yahoo! UI Library · Google Web Toolkit






JavaScript (server-side)

AppJet · Jaxer






Perl

Catalyst · Interchange · Mason






PHP

Akelos · CakePHP · Chisimba · CodeIgniter · Drupal · Horde · Kohana · Kolibri · KumbiaPHP · Midgard · PEAR · PHPNuke · PHPonTrax · Seagull · Simplicity · Symfony · Zend · Zoop






Python

CherryPy · Django · Karrigell · Nevow · Pyjamas · Pylons · Quixote · Spyce · TurboGears · Twisted · web2py · Zope






Ruby

Adhearsion · Camping · eRuby (RHTML) · Merb · Nitro · RubyCocoa · Ruby on Rails






Smalltalk

AIDA/Web · Seaside






Other languages

Application Express (PL/SQL) · Fusebox (ColdFusion and PHP) · OpenACS (Tcl) · Yaws (Erlang) · HAppS (Haskell) · Cappuccino (Objective-J)









Retrieved from "http://en.wikipedia.org/wiki/Grails_(framework)"
Categories: Java platform | Web application frameworks 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
Français
Italiano
日本語
Русский









 This page was last modified on 12 April 2009, at 01:58 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
