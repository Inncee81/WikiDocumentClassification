













Model View Presenter - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Model_View_Presenter";
		var wgTitle = "Model View Presenter";
		var wgAction = "view";
		var wgArticleId = "15972767";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 265498592;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Model View Presenter

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article may require cleanup to meet Wikipedia's quality standards. Please improve this article if you can. (December 2008)







This article may require copy-editing for grammar, style, cohesion, tone or spelling. You can assist by editing it now. A how-to guide is available. (December 2008)


Model View Presenter is a software pattern considered a derivative of the Model-view-controller.




Contents


1 Pattern description
2 Pattern history
3 Pattern implementation in .NET

3.1 Model-View-Presenter frameworks under .NET


4 Pattern implementation in Java

4.1 Model-View-Presenter Frameworks Under Java
4.2 Model-View-Presenter Web Frameworks Under Java


5 See also
6 References
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Pattern description
The View is defined as an interface that the Presenter will use for getting and setting data to and from the Model. The View implementation will instantiate the Presenter object and provide a reference to itself (the formal constructor parameter is the View interface while the actual parameter is a concrete View class). When the event methods of the View are triggered, they will do nothing but invoke a method of the Presenter which has no parameters and no return value. The Presenter will then get data from the View, through the View interface variable that the Presenter stored when the constructor was called. The Presenter then invokes methods of the Model, and sets data from the Model into the View through the View interface.
From a layering point of view, the Presenter class might be considered as belonging to the application layer in a multilayered architectured object-oriented system with common layers but it can also be seen as a Presenter layer of its own between the Application layer and the User Interface layer.

[edit] Pattern history
The Model View Presenter ("MVP") software pattern originated in the early 1990s at Taligent, a joint venture of Apple, IBM, and HP, and was the underlying programming model for application development in Taligent's C++-based CommonPoint environment. The pattern was later migrated by Taligent to Java and popularized in a paper by Taligent CTO Mike Potel[1]. After the demise of Taligent in 1997, the MVP pattern was adapted by Andy Bower and Blair McGlashan of Dolphin Smalltalk to form the basis for their Smalltalk user interface framework[2]. In 2006, Microsoft began incorporating MVP into their documentation and examples for user interface programming in the .NET framework[3]. The evolution and multiple variants of the MVP pattern, including the relationship of MVP to other design patterns such as MVC, were analyzed in detail in articles by Martin Fowler[4] and Derek Greer[5].
It is often claimed that this pattern has "Retired" (11 Jul 06) since Martin Fowler said so[6]. He split the pattern into Supervising Controller [7] and Passive View [8]. Nevertheless, the pattern name still lives on the internet, and a Google search for the pattern still generates 34000+ hits, including a link to an article that has been published in MSDN Magazine [9].

[edit] Pattern implementation in .NET
In a .NET environment the same Presenter class can be used for ASP.NET application and a Windows Forms application. The presenter gets and sets information from/to the View through an interface that in .NET can be implemented by both Windows Forms class and an ASPX page (the code-behind class can implement the View interface).
Instead of manually implementing the pattern, one of the Model-View-Presenter frameworks may be used. Below are listed some of such frameworks under the .NET platform.

[edit] Model-View-Presenter frameworks under .NET

MVC# Framework
NMVP Framework
Web Client Software Factory


[edit] Pattern implementation in Java
In a Java (AWT/Swing/SWT) application, the MVP pattern can be used by letting the UI class implement a view interface.
The same approach can be used for Java thin (web based) applications since modern Java Component Based Web Frameworks allow development of client side logic using the same component approach as thick clients. To implement MVP in Google Web Toolkit one just needs to let any Component implement the view interface. The same approach is possible using the Echo2 web framework since the web framework uses Swing classes in its core.


[edit] Model-View-Presenter Frameworks Under Java
AWT
Swing
SWT


[edit] Model-View-Presenter Web Frameworks Under Java
Google Web Toolkit
Echo2

[edit] See also

Model-view-controller
Common layers in an information system logical architecture


[edit] References

^ "MVP: Model-View-Presenter. The Taligent Programming Model for C++ and Java." Mike Potel
^ "Twisting the Triad. The evolution of the Dolphin Smalltalk MVP application framework." Andy Bower, Blair McGlashan
^ "Microsoft patterns and practices"
^ "GUI Architectures" Martin Fowler
^ "Interactive Application Architecture Patterns" Derek Greer
^ Retirement note for Model View Presenter Pattern
^ Supervising Controller
^ Passive View
^ MSDN Magazine article about MVP (August 2006)


[edit] External links

Model-View-Presenter at WardsWiki




Retrieved from "http://en.wikipedia.org/wiki/Model_View_Presenter"
Categories: Software design patterns | Software architectureHidden categories: Cleanup from December 2008 | All pages needing cleanup | Wikipedia articles needing copy edit from December 2008 | All articles needing copy edit 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Русский









 This page was last modified on 21 January 2009, at 15:43 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
