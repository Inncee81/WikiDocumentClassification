













INI file - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "INI_file";
		var wgTitle = "INI file";
		var wgAction = "view";
		var wgArticleId = "1908172";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281450522;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-ini {line-height: normal;}
.source-ini li, .source-ini pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for ini
 * CSS class: source-ini, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-ini .de1, .source-ini .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-ini  {}
.source-ini .head {}
.source-ini .foot {}
.source-ini .imp {font-weight: bold; color: red;}
.source-ini .ln-xtra {color: #cc0; background-color: #ffc;}
.source-ini li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-ini li.li2 {font-weight: bold;}
.source-ini .co0 {color: #666666; font-style: italic;}
.source-ini .es0 {}
.source-ini .br0 {color: #000066; font-weight:bold;}
.source-ini .st0 {color: #933;}
.source-ini .nu0 {}
.source-ini .me0 {}
.source-ini .sc0 {}
.source-ini .re0 {color: #000066; font-weight:bold;}
.source-ini .re1 {color: #000099;}
.source-ini .re2 {color: #660066;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); INI file

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
The INI file format is a de facto standard for configuration files. INI files are simple text files with a basic structure. They are commonly associated with Microsoft Windows, but are also used on other platforms. The use of the "INI file" has been deprecated in Windows and corresponding data should be placed in the registry. The name "INI file" comes from the filename extension usually used, ".INI", that stands for "initialization". Sometimes, files using the INI file format will use a different extension, such as ".CFG", ".conf", or ".TXT".







Contents


1 Format

1.1 Varying features
1.2 Escapes


2 Example
3 Accessing INI files
4 File mapping
5 Alternatives
6 See also
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>




[edit] Format

Parameters

The basic element contained in an INI file is the parameter. Every parameter has a name and a value, delimited by an equals sign (=). The name appears to the left of the equals sign.


 name = value


Sections

Parameters may be grouped into arbitrarily-named sections. The section name appears on a line by itself, in square brackets ([ and ]). All parameters after the section declaration are associated with that section. There is no explicit "end of section" delimiter; sections end at the next section declaration, or the end of the file. Sections may not be nested.


 [section]


Comments

Semicolons (;) indicate the start of a comment. Comments continue to the end of the line. Everything between the semicolon and the End of Line is ignored.


 ; comment text


[edit] Varying features
The INI file format is not well defined. Many programs support features beyond the basics described above. The following is a list of some common features, which may or may not be implemented in any given program.

Blank Lines

Some rudimentary programs do not allow blank lines. Every line must therefore be a section head, a parameter and value pair, or a comment.

Whitespace

Interpretation of whitespace varies. Most implementations ignore leading and trailing whitespace around the outside of the parameter name. Some even ignore whitespace within value names (for example, making "host name" and "hostname" equivalent). Some implementations also ignore leading and trailing whitespace around the parameter value; others consider all characters following the equals sign (including whitespace) to be part of the value.

Quoted values

Some implementations allow values to be quoted, typically using double quotes and/or apostrophes. This allows for explicit declaration of whitespace, and/or for quoting of special characters (equals, semicolon, etc.). The standard Windows function GetPrivateProfileString supports this, and will remove quotation marks that surround the values.

Comments

Some software supports the use of the number sign (#) as an alternative to the semicolon for indicating comments.
In some implementations, a comment may begin anywhere on a line, including on the same line after parameters or section declarations. In others, any comments must occur on lines by themselves.

Backslashes and escapes

See "Escapes", in this article.

Duplicate names

Most implementations only support having one parameter with a given name in a section. The second occurrence of a parameter name may cause an abort; the second occurrence may be ignored (and the value discarded); the second occurrence may override the first occurrence (discard the first value). Some programs use duplicate parameter names to implement multi-valued parameters.
Interpretation of multiple section declarations with the same name also varies. In some implementations, duplicate sections simply merge their parameters together, as if they occurred contiguously. Others may abort, or ignore some aspect of the INI file.

Name/value delimiter

Some implementations allow a colon (:) as the name/value delimiter (instead of the equals sign).

Hierarchy

Most commonly, INI files have no hierarchy of sections within sections. Some files appear to have a heirarchical naming convention, however. For section A, subsection B, sub-sub-section C, parameter P and value V, they may accept entries such as [A.B.C] and P=V (Windows' xstart.ini), [A\B\C] and P=V (the IBM Windows driver file devlist.ini), or [A] and B,C,P = V (Microsoft Visual Studio file AEMANAGR.INI).
It is unclear whether these are simply naming conventions that an application happens to use in order to give the appearance of a hierarchy, or whether the file is being read by a module that actually presents this hierarchy to the application programmer.

[edit] Escapes
Some implementations also offer varying support for an escape character, typically with the backslash (\). Some support "line continuation", where a backslash followed immediately by EOL (end-of-line) causes the line break to be ignored, and the "logical line" to be continued on the next actual line from the INI file. Implementation of various "special characters" with sequences escapes is also seen.

Common escape sequences

Sequence
Meaning


\\
\ (a single backslash, escaping the escape character)


\0
Null character


\a
Bell/Alert/Audible


\b
Backspace, Bell character for some applications


\t
Tab character


\r
Carriage return


\n
Newline


\;
Semicolon


\#
Number sign


\=
Equals sign


\:
Colon


\x????
Unicode character with hexadecimal codepoint corresponding to ????



[edit] Example
Following is an example INI file for an imaginary program. It has two sections, one for the owner of the software, and one for a payroll database connection. Comments note who modified the file last, and why an IP address is used instead of a DNS name.


; last modified 1 April 2001 by John Doe
[owner]
name=John Doe
organization=Acme Products
 
[database]
server=192.0.2.42     ; use IP address in case network name resolution is not working
port=143
file = "acme payroll.dat"


[edit] Accessing INI files
Under Windows, the Profile API is the programming interface used to read and write settings from classic Windows .ini files. For example, the GetPrivateProfileString function retrieves a string from the specified section in an initialization file.
The following sample program demonstrates reading parameter values from the above sample INI file (Let the name of configuration file be dbsettings.ini)


#include <Windows.h>
int main(int argc, _TCHAR *argv[])
{
  _TCHAR dbserver[1000];
  int dbport;
  GetPrivateProfileString("database", "server", "127.0.0.1", dbserver, 1000, "dbsettings.ini");
  dbport = GetPrivateProfileInt("database", "port", 143, "dbsettings.ini");
  return 0;
}


[edit] File mapping
Initialisation File Mapping[1][2] creates a mapping between an INI file and the Registry. It was introduced with Windows NT and Windows 95 as a way to migrate from storing settings in classic .ini files to the new Windows Registry. File mapping traps the Profile API calls and, using settings from the IniFileMapping Registry section, directs reads and writes to appropriate places in the Registry.
Using the Example above, a string call could be made to fetch the name key from the owner section from a settings file called, say, dbsettings.ini. The returned value should be the string "John Doe":

GetPrivateProfileString("owner", "name", ... , "c:\\programs\\oldprogram\dbsettings.ini");

INI mapping takes this Profile API call, ignores any path in the given filename and checks to see if there is a Registry key matching the filename under:

HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\
   CurrentVersion\IniFileMapping

If this exists, it looks for an entry name matching the requested section. If an entry is found INI mapping uses the corresponding entry data as a pointer to another part of the Registry. It then looks up the requested INI setting in that part of the Registry.
If no matching entry name is found and there is entry data under the (Default) entry name, INI mapping uses that data instead. Thus each section name does not need its own entry.


HKEY_LOCAL_MACHINE\Software\...\IniFileMapping\dbsettings.ini


(Default)
@USR:Software\oldprogs\inisettings\all


database
USR:Software\oldprogs\inisettings\db


So, in this case the profile call for the [owner] section is mapped through to:


HKEY_CURRENT_USER\Software\oldprogs\inisettings\all


name
John Doe


organization
Acme Products


where the "name" Registry entry name is found to match the requested INI key. The value of "John Doe" is then returned to the Profile call. In this case, the @ prefix on the default prevents any reads from going to the dbsettings.ini file on disk. The result is that any settings not found in the Registry are not looked for in the INI file.
The "database" Registry entry does not have the @ prefix on the value; thus, for the [database] section only, settings in the Registry are taken first followed by settings in the dbsettings.ini file on disk.

[edit] Alternatives
Starting with Windows 95, Microsoft began strongly promoting the use of Windows registry over the INI file.
More recently, XML-based configuration files have become a popular choice for encoding configuration in text files. Although not as readable, XML allows arbitrarily complex levels and nesting, and has standard mechanisms for encoding binary data. INI files are typically limited to two levels (sections and parameters) and do not handle binary data well. Additionally, data serialization formats, such as JSON and YAML can serve as configuration formats. These latter formats can nest arbitrarily and represent objects of unlimited complexity, but don't have a lightweight syntax like the ini file.

[edit] See also

WIN.INI
SYSTEM.INI
Sysedit
MSConfig


[edit] References


^ Initialization Files and the Registry, Windows NT Workstation Resource Kit, Microsoft TechNet
^ Administering the NT Registry, Managing the Windows NT Registry, Paul Robichaux, O'Reilly Media



[edit] External links

http://nini.sourceforge.net/ C# ini-parser
http://sdl-cfg.sourceforge.net/ C/C++ ini-parser
http://ndevilla.free.fr/iniparser/ A C based ini-parser
http://vb.mvps.org/samples/kpINI/ Classic VB ini-parser
http://ini4j.sourceforge.net/ A Java API for working with ini files
http://www.cloanto.com/specs/ini.html Unofficial specification
http://www.chaoslizard.org/devel/bohr/wiki/Docs/Ni/FileFormat The particular syntax allowed by one INI parser library with hierarchical extensions




Retrieved from "http://en.wikipedia.org/wiki/INI_file"
Categories: Computer file formats | Configuration files 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
Français
한국어
Italiano
Nederlands
Polski
Русский









 This page was last modified on 3 April 2009, at 06:17 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
