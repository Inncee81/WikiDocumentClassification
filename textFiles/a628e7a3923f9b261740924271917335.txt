













OpenCL - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "OpenCL";
		var wgTitle = "OpenCL";
		var wgAction = "view";
		var wgArticleId = "17861917";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282222416;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); OpenCL

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For the cryptographic library formerly named OpenCL, see Botan (programming library).
OpenCL (Open Computing Language) is a framework for writing programs that execute across heterogeneous platforms consisting of CPUs, GPUs, and other processors. OpenCL includes a language (based on C99) for writing kernels (functions that execute on OpenCL devices), plus APIs that are used to define and then control the heterogeneous platform. OpenCL provides parallel programming using both task-based and data-based parallelism.
The purpose of OpenCL is analogous to that of OpenGL and OpenAL, which are open industry standards for 3D graphics and computer audio respectively. OpenCL extends the power of the GPU beyond graphics (GPGPU). OpenCL is managed by the non-profit technology consortium Khronos Group.




Contents


1 History
2 Example
3 Implementation
4 See also
5 References
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
OpenCL was initially conceived by Apple Inc., which holds trademark rights, and refined into an initial proposal in collaboration with technical teams at AMD, Intel and Nvidia. Apple submitted this initial proposal to the Khronos Group. On June 16, 2008 the Khronos Compute Working Group was formed[1] with representatives from CPU, GPU, embedded-processor, and software companies. This group worked for five months to finish the technical details of the specification for OpenCL 1.0 by November 18, 2008.[2] This technical specification was reviewed by the Khronos members and approved for public release on December 8, 2008.[3]
OpenCL is scheduled to be introduced in Mac OS X v10.6 ('Snow Leopard'). According to an Apple press release:[4]

Snow Leopard further extends support for modern hardware with Open Computing Language (OpenCL), which lets any application tap into the vast gigaflops of GPU computing power previously available only to graphics applications. OpenCL is based on the C programming language and has been proposed as an open standard.

AMD has decided to support OpenCL (and DirectX 11) instead of the now deprecated Close to Metal in its Stream framework.[5][6] RapidMind announced their adoption of OpenCL underneath their development platform, in order to support GPUs from multiple vendors with one interface.[7] Nvidia announced on December 9, 2008 to add full support for the OpenCL 1.0 specification to its GPU Computing Toolkit.[8]

[edit] Example
This example will compute a Fast Fourier Transformation: [9]


// create a compute context with GPU device
context = clCreateContextFromType(0, CL_DEVICE_TYPE_GPU, NULL, NULL, NULL);
 
// create a work-queue
queue = clCreateWorkQueue(context, NULL, NULL, 0);
 
// allocate the buffer memory objects
memobjs[0] = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, sizeof(float)*2*num_entries, srcA);
memobjs[1] = clCreateBuffer(context, CL_MEM_READ_WRITE, sizeof(float)*2*num_entries, NULL);
 
// create the compute program
program = clCreateProgramFromSource(context, 1, &fft1D_1024_kernel_src, NULL);
 
// build the compute program executable
clBuildProgramExecutable(program, false, NULL, NULL);
 
// create the compute kernel
kernel = clCreateKernel(program, "fft1D_1024");
 
// create N-D range object with work-item dimensions
global_work_size[0] = n;
local_work_size[0] = 64;
range = clCreateNDRangeContainer(context, 0, 1, global_work_size, local_work_size);
 
// set the args values
clSetKernelArg(kernel, 0, (void *)&memobjs[0], sizeof(cl_mem), NULL);
clSetKernelArg(kernel, 1, (void *)&memobjs[1], sizeof(cl_mem), NULL);
clSetKernelArg(kernel, 2, NULL, sizeof(float)*(local_work_size[0]+1)*16, NULL);
clSetKernelArg(kernel, 3, NULL, sizeof(float)*(local_work_size[0]+1)*16, NULL);
 
// execute kernel
clExecuteKernel(queue, kernel, NULL, range, NULL, 0, NULL);

The actual calculation: (Based on Fitting FFT onto the G80 Architecture)[10]


// This kernel computes FFT of length 1024. The 1024 length FFT is decomposed into 
// calls to a radix 16 function, another radix 16 function and then a radix 4 function 
 
__kernel void fft1D_1024 (__global float2 *in, __global float2 *out, 
                          __local float *sMemx, __local float *sMemy) { 
  int tid = get_local_id(0); 
  int blockIdx = get_group_id(0) * 1024 + tid; 
  float2 data[16]; 
 
  // starting index of data to/from global memory 
  in = in + blockIdx;  out = out + blockIdx; 
 
  globalLoads(data, in, 64); // coalesced global reads 
  fftRadix16Pass(data);      // in-place radix-16 pass 
  twiddleFactorMul(data, tid, 1024, 0); 
 
  // local shuffle using local memory 
  localShuffle(data, sMemx, sMemy, tid, (((tid & 15) * 65) + (tid >> 4))); 
  fftRadix16Pass(data);               // in-place radix-16 pass 
  twiddleFactorMul(data, tid, 64, 4); // twiddle factor multiplication 
 
  localShuffle(data, sMemx, sMemy, tid, (((tid >> 4) * 64) + (tid & 15))); 
 
  // four radix-4 function calls 
  fftRadix4Pass(data);
  fftRadix4Pass(data + 4); 
  fftRadix4Pass(data + 8);
  fftRadix4Pass(data + 12); 
 
  // coalesced global writes 
  globalStores(data, out, 64); 
}


[edit] Implementation
On 10th December 2008, both AMD and NVIDIA demonstrated the world's first public OpenCL demo, they shared a 75 minute presentation at Siggraph Asia 2008. AMD showed a sample on CPU accelerated OpenCL demo explaining the scalability of OpenCL on 1 and more cores while NVIDIA showed a sample on GPU accelerated demo.[11][12]
On 26th March 2009 GDC 2008 AMD and Havok demonstrated the first working implementation for OpenCL accelerating Havok Cloth on AMD Radeon HD 4000 series GPU.[13]

[edit] See also

CUDA
BrookGPU
Lib Sh
Intel Larrabee
Grand Central (technology)


[edit] References


^ Khronos Group (2008-06-16). Khronos Launches Heterogeneous Computing Initiative. Press release. http://www.khronos.org/news/press/releases/khronos_launches_heterogeneous_computing_initiative/. Retrieved on 2008-06-18. 
^ "OpenCL gets touted in Texas". MacWorld. 2008-11-20. http://www.macworld.com/article/136921/2008/11/opencl.html?lsrc=top_2. 
^ Khronos Group (2008-12-08). The Khronos Group Releases OpenCL 1.0 Specification. Press release. http://www.khronos.org/news/press/releases/the_khronos_group_releases_opencl_1.0_specification/. 
^ Apple Inc. (2008-06-09). Apple Previews Mac OS X Snow Leopard to Developers. Press release. http://www.apple.com/pr/library/2008/06/09snowleopard.html. Retrieved on 2008-06-09. 
^ AMD (2008-08-06). AMD Drives Adoption of Industry Standards in GPGPU Software Development. Press release. http://www.amd.com/us-en/Corporate/VirtualPressRoom/0,,51_104_543~127451,00.html. Retrieved on 2008-08-14. 
^ "AMD Backs OpenCL, Microsoft DirectX 11". eWeek. 2008-08-06. http://www.eweek.com/c/a/Desktops-and-Notebooks/AMD-Backing-OpenCL-and-Microsoft-DirectX-11/. Retrieved on 2008-08-14. 
^ "HPCWire: RapidMind Embraces Open Source and Standards Projects". HPCWire. 2008-11-10. http://www.hpcwire.com/topic/applications/RapidMind_Embraces_Open_Source_and_Standards_Projects.html. Retrieved on 2008-11-11. 
^ Nvidia (2008-12-09). NVIDIA Adds OpenCL To Its Industry Leading GPU Computing Toolkit. Press release. http://www.nvidia.com/object/io_1228825271885.html. Retrieved on 2008-12-10. 
^ "OpenCL". SIGGRAPH2008. 2008-08-14. http://s08.idav.ucdavis.edu/munshi-opencl.pdf. Retrieved on 2008-08-14. 
^ "Fitting FFT onto G80 Architecture". Vasily Volkov and Brian Kazian, UC Berkeley CS258 project report. May 2008. http://www.cs.berkeley.edu/~kubitron/courses/cs258-S08/projects/reports/project6_report.pdf. Retrieved on 2008-11-14. 
^ "OpenCL Demo, AMD CPU". 2008-12-10. http://www.youtube.com/watch?v=sLv_fhQlqis. Retrieved on 2009-03-28. 
^ "OpenCL Demo, NVIDIA GPU". 2008-12-10. http://www.youtube.com/watch?v=PJ1jydg8mLg. Retrieved on 2009-03-28. 
^ "AMD and Havok demo OpenCL accelerated physics". PC Perspective. 2009-03-26. http://www.pcper.com/comments.php?nid=6954. Retrieved on 2009-03-28. 



[edit] External links

Official site
OpenCL header files and specification
OpenCL overview
OpenCL World
The first public demonstration of OpenCL running on a GPU was done by NVIDIA on December 12, 2008 at Siggraph Asia.
AMD's OpenCL parallel computing demo from Siggraph Asia 2008.
OpenCL: What you need to know - article published in Macworld, August 2008
HPCWire: OpenCL on the Fast Track
The Khronos Group Releases OpenCL 1.0 Specification









v • d • e

Mac OS X





Applications

Address Book · Automator · Calculator · Chess · Dashboard · Dictionary · DVD Player · Finder · Front Row · Grapher · iCal · iChat · iSync · iTunes · Mail · Photo Booth · Preview · QuickTime · Safari · Stickies · TextEdit






Utilities

Activity Monitor · AirPort Utility · Archive Utility · Audio MIDI Setup · Bluetooth File Exchange · ColorSync · Console · Crash Reporter · DigitalColor Meter · Directory Utility · DiskImageMounter · Disk Utility · Font Book · Grab · Help Viewer · Image Capture · Installer · Keychain Access · Migration Assistant · Network Utility · ODBC Administrator · Remote Install Mac OS X · Screen Sharing · Software Update · System Preferences · System Profiler · Terminal · Universal Access · VoiceOver · X11






Technology and
user interface

Command key · Option key · Apple menu · AppleScript · Aqua · Audio Units · Bonjour · Boot Camp · BootX · Carbon · Cocoa · ColorSync · Core Animation · Core Audio · Core Data · Core Foundation · Core Image · Core OpenGL · Core Text · Core Video · CUPS · Darwin · Dock · Exposé · FileVault · Grand Central · icns · Inkwell · I/O Kit · Kernel panic · Keychain · Mach-O · MacRuby · Menu extra · OpenCL · Preference Pane · Property list · Quartz · QuickTime · Quick Look · Rosetta · Smart Folders · Spaces · Speakable items · Spotlight · Stacks · Time Machine · Uniform Type Identifier · Universal binary · WebKit · Xgrid · XNU · ZFS









Retrieved from "http://en.wikipedia.org/wiki/OpenCL"
Categories: GPGPU 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
Français
한국어
Italiano
Nederlands
日本語
Polski
Português
Русский
ไทย









 This page was last modified on 6 April 2009, at 23:26.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
