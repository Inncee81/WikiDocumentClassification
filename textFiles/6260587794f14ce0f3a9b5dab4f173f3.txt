













GNU Compiler Collection - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "GNU_Compiler_Collection";
		var wgTitle = "GNU Compiler Collection";
		var wgAction = "view";
		var wgArticleId = "12323";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281834473;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); GNU Compiler Collection

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

GNU Compiler Collection




Developed by
GNU Project


Initial release
May 23, 1987 (1987-05-23)[1]


Latest release
4.4.0 / 2009-03-13; 23 days ago


Operating system
Cross-platform


Platform
GNU


Type
Compiler


License
GNU General Public License, GNU Lesser General Public License


Website
gcc.gnu.org


The GNU Compiler Collection (usually shortened to GCC) is a compiler system produced by the GNU Project supporting various programming languages. GCC is a key component of the GNU toolchain. As well as being the official compiler of the GNU system, GCC has been adopted as the standard compiler by most other modern Unix-like computer operating systems, including GNU/Linux, the BSD family and Mac OS X. GCC has been ported to a wide variety of processor architectures, and is widely deployed as a tool in commercial, proprietary and closed source software development environments. GCC is also available for most embedded platforms, for example Symbian,[2] AMCC and Freescale Power Architecture-based chips.[3] The compiler can target a wide variety of platforms, including videogame consoles such as the Playstation 2[4] and Sega Dreamcast.[5] Several companies make a business out of supplying and supporting gcc ports to various platforms, and chip manufacturers today consider a gcc port almost essential to the success of an architecture.
Originally named the GNU C Compiler, because it only handled the C programming language, GCC 1.0 was released in 1987, and the compiler was extended to compile C++ in December of that year.[1] Front ends were later developed for Fortran, Pascal, Objective C, Java, and Ada, among others.[6]
The Free Software Foundation (FSF) distributes GCC under the GNU General Public License (GNU GPL) and the GNU Lesser General Public License (GNU LGPL). GCC is free software.




Contents


1 History

1.1 EGCS


2 Uses
3 Languages
4 Architectures
5 Structure

5.1 Front-ends
5.2 Optimization
5.3 Back-end


6 Debugging GCC programs
7 License
8 Criticism
9 See also
10 References
11 Further reading
12 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
Richard Stallman started GCC in 1985. He extended an existing compiler to compile C. The compiler originally compiled Pastel, an extended, nonportable dialect of Pascal, and was written in Pastel. It was rewritten in C by Len Tower and Stallman,[7] and released in 1987[8] as the compiler for the GNU Project, in order to have a compiler available that was free software. Its development was supervised by the Free Software Foundation.[9]

[edit] EGCS
By 1991, GCC 1.x had reached a point of stability, but architectural limitations prevented many desired improvements, so the Free Software Foundation (FSF) started work on GCC 2.x. But during the mid-1990s, the FSF kept such close control on what was added to the official version of GCC 2.x that GCC was used as one example of the "cathedral" development model in Eric S. Raymond's essay The Cathedral and the Bazaar.
As GCC was free software, programmers wanting to work in other directions—particularly those writing interfaces for languages other than C—were free to develop their own fork of the compiler. Multiple forks proved inefficient and unwieldy, however, and the difficulty in getting work accepted by the official GCC project was greatly frustrating for many.
In 1997, a group of developers formed EGCS (Experimental/Enhanced GNU Compiler System),[10] to merge several experimental forks into a single project. The basis of the merger was a gcc development snapshot taken between the 2.7 and 2.81 releases. Projects merged included g77 (Fortran), PGCC (Pentium-optimized GCC), many C++ improvements, and many new architectures and operating system variants.[11][12]
EGCS development proved considerably more vigorous than GCC development, so much so that the FSF officially halted development on their GCC 2.x compiler, "blessed" EGCS as the official version of GCC and appointed the EGCS project as the GCC maintainers in April 1999. Furthermore, the project explicitly adopted the "bazaar" model over the "cathedral" model. With the release of GCC 2.95 in July 1999, the two projects were once again united.

[edit] Uses
GCC is often the compiler of choice for developing software that is required to execute on a wide variety of hardware and/or operating systems. System-specific compilers provided by hardware or OS vendors can differ substantially, complicating both the software's source code and the scripts which invoke the compiler to build it. With GCC, most of the compiler is the same on every platform, so only code which explicitly uses platform-specific features must be rewritten for each system.
GCC is now maintained by a varied group of programmers from around the world. It has been ported to more kinds of processors and operating systems than any other compiler.[13]

[edit] Languages
The standard compiler release 4.3 includes front ends for C, C++ (G++), Java (GCJ), Ada (GNAT), Objective-C, Objective-C++, and Fortran (GFortran). Also available, but not in standard are Modula-2, Modula-3, Pascal, PL/I, D (gdc), Mercury, VHDL (GHDL).[14] A popular parallel language extension, OpenMP, is also supported.
The Fortran front end was g77 before version 4.0, which only supports Fortran 77. In newer versions, g77 is dropped in favor of the new GFortran front end that supports Fortran 95. A front end for CHILL was previously included, but has been dropped owing to a lack of maintenance.
A few experimental branches exist to support additional languages, such as the GCC UPC compiler[15] for Unified Parallel C.

[edit] Architectures
GCC target processor families as of version 4.3 include:


Alpha
ARM
Atmel AVR
Blackfin
HC12
H8/300
IA-32 (x86)
x86-64
IA-64
Motorola 68000
MIPS
PA-RISC
PDP-11
PowerPC
R8C/M16C/M32C
SPU
System/390/zSeries
SuperH
SPARC
VAX


Lesser-known target processors supported in the standard release have included:


A29K
ARC
ETRAX CRIS
D30V
DSP16xx
FR-30
FR-V
Intel i960
IP2000
M32R
68HC11
MCORE
MMIX
MN10200
MN10300
Motorola 88000
NS32K
ROMP
Stormy16
V850
Xtensa
AVR32


Additional processors have been supported by GCC versions maintained separately from the FSF version:


D10V
LatticeMico32
MeP
Motorola 6809
MicroBlaze
MSP430
Nios II and Nios
PDP-10
TIGCC (m68k variant)
Z8000
PIC24/dsPIC


When retargeting GCC to a new platform, bootstrapping is often used.

[edit] Structure
GCC's external interface is generally standard for a UNIX compiler. Users invoke a driver program named gcc, which interprets command arguments, decides which language compilers to use for each input file, runs the assembler on their output, and then possibly runs the linker to produce a complete executable binary.
Each of the language compilers is a separate program that inputs source code and outputs assembly code. All have a common internal structure. A per-language front end parses the source code in that language and produces an abstract syntax tree ("tree" for short).
These are if necessary converted to the middle-end's input representation, called GENERIC form; the middle-end then gradually transforms the program towards its final form. Compiler optimizations and static code analysis techniques (such as FORTIFY_SOURCE,[16] a compiler directive which attempts to discover some buffer overflows) are applied to the code. These work on multiple representation, mostly the architecture-independent GIMPLE representation and the architecture-dependent RTL representation. Finally, assembly language is produced using architecture-specific pattern matching originally based on an algorithm of Jack Davidson and Chris Fraser.
GCC is written primarily in C except for parts of the Ada front end. The distribution includes the standard libraries for Ada, C++, and Java whose code is mostly written in those languages.[17]

[edit] Front-ends
Frontends vary internally, having to produce trees that can be handled by the backend. Currently, the parsers are all hand-coded recursive descent parsers, though there is no reason why a parser generator could not be used for new front-ends in the future.
Until recently, the tree representation of the program was not fully independent of the processor being targeted. Confusingly, the meaning of a tree was somewhat different for different language front-ends, and front-ends could provide their own tree codes. This was simplified with the introduction of GENERIC and GIMPLE.
In 2005, with GCC 4.0, two new forms of language-independent trees were introduced. These new tree formats are called GENERIC (more complex, based on the GCC 3.x Java front-end's intermediate representation) and GIMPLE (a simplified GENERIC, in which various constructs are lowered to multiple GIMPLE instructions). The C, C++ and Java front ends produce GENERIC directly in the front end. Other front ends instead have different intermediate representations after parsing and convert these to GENERIC.
In either case, the so-called "gimplifier" then lowers this more complex form into the simpler SSA-based GIMPLE form which is the common language for a large number of new powerful language- and architecture-independent global (function scope) optimizations.

[edit] Optimization
Optimization on trees does not generally fit into what most compiler developers would consider a front end task, as it is not language dependent and does not involve parsing. A common, even though somewhat contradictory, name for this part of the compiler is "middle end."
The exact set of GCC optimizations varies from release to release as it develops, but includes the standard algorithms, such as loop optimization, jump threading, common subexpression elimination, instruction scheduling, and so forth. The RTL optimizations are of less importance with the addition of global SSA-based optimizations on GIMPLE trees,[18] as RTL optimizations have a much more limited scope, and have less high-level information.
Some of these optimizations performed at this level include dead code elimination, partial redundancy elimination, global value numbering, sparse conditional constant propagation, and scalar replacement of aggregates. Array dependence based optimizations such as automatic vectorization and automatic parallelization are also performed. Profile-guided optimization is also possible as demonstrated here: http://gcc.gnu.org/install/build.html#TOC4

[edit] Back-end
The behavior of GCC's back end is partly specified by preprocessor macros and functions specific to a target architecture, for instance to define the endianness, word size, and calling conventions. The front part of the back end uses these to help decide RTL generation, so although GCC's RTL is nominally processor-independent, the initial sequence of abstract instructions is already adapted to the target. At any moment, the actual RTL instructions forming the program representation have to comply with the machine description of the target architecture.
Towards the end of compilation, valid RTL is further reduced to a strict form in which each instruction refers to real machine registers and real instructions from the target's instruction set. Forming strict RTL is a very complicated task, done mostly by the register allocation first but completed only by a separate "reloading" phase which must account for the vagaries of all of GCC's targets.
The final phase is somewhat anticlimactic, because the patterns to match were generally chosen during reloading, and so the assembly code is simply built by running substitutions of registers and addresses into the strings specifying the instructions.

[edit] Debugging GCC programs
The primary tool used to debug GCC code is the GNU Debugger (gdb). Among more specialized tools are Valgrind for finding memory errors and leaks. The GNU Profiler (gprof) can determine how much time is spent in which routines, and how often they are called; this requires programs to be compiled with profiling options.

[edit] License
"GCC 4.2.1 was the last release of GCC covered by version 2 of the GNU General Public License. All subsequent releases are released under GPL version 3." [19]

[edit] Criticism





This article's Criticism or Controversy section(s) may mean the article does not present a neutral point of view of the subject. It may be better to integrate the material in such sections into the article as a whole.


GCC has received criticism from OpenBSD developers such as Theo de Raadt and Otto Moerbeek for being large, buggy, and slow, and for generating poor code.[20] Due to this criticism, and the relatively restrictive GPL that GCC is licensed under (as compared to the BSD license preferred by the various BSD projects), there is an attempt to replace GCC with compilers such as PCC in NetBSD and OpenBSD[21] or LLVM in FreeBSD.[22]

[edit] See also




Free software portal




List of compilers


[edit] References


^ a b "GCC Releases". GNU Project. http://www.gnu.org/software/gcc/releases.html. Retrieved on 2006-12-27. 
^ "Symbian GCC Improvement Project". http://www.inf.u-szeged.hu/symbian-gcc/. Retrieved on 2007-11-08. 
^ "Linux Board Support Packages". http://www.freescale.com/webapp/sps/site/overview.jsp?code=CW_BSP&fsrch=1. Retrieved on 2008-08-07. 
^ "setting up gcc as a cross-compiler". ps2stuff. 2002-06-08. http://ps2stuff.playstation2-linux.com/gcc_build.html. Retrieved on 2008-12-12. 
^ "sh4 g++ guide". Archived from the original on 2002-12-20. http://web.archive.org/web/20021220025554/http://www.ngine.de/gccguide.html. Retrieved on 2008-12-12.  "This guide is intended for people who want to compile C++ code for their Dreamcast systems" 
^ "Programming Languages Supported by GCC". GNU Project. http://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/G_002b_002b-and-GCC.html#G_002b_002b-and-GCC. Retrieved on 2006-12-27. 
^ Stallman, Richard M. (February 1986). "GNU Status". GNU's Bulletin (Free Software Foundation) 1 (1). http://web.cecs.pdx.edu/~trent/gnu/bull/01/bull01.txt. Retrieved on 2006-09-26. 
^ Tower, Leonard (1987) "GNU C compiler beta test release," comp.lang.misc USENET newsgroup; see also http://gcc.gnu.org/releases.html#timeline
^ Stallman, Richard M. (2001) "Contributors to GCC," in Using and Porting the GNU Compiler Collection (GCC) for gcc version 2.95 (Cambridge, Mass.: Free Software Foundation)
^ "Pentium Compiler FAQ". http://home.schmorp.de/pgcc-faq.html#egcs. 
^ "A Brief History of GCC". http://gcc.gnu.org/wiki/History. 
^ "The Short History of GCC development". http://www.softpanorama.org/People/Stallman/history_of_gcc_development.shtml. 
^ Linux Information Project (LINFO) accessed 2007-03-20
^ GCC Front Ends, GCC.org, Retrieved May 11, 2008.
^ "GCC UPC (GCC Unified Parallel C) | intrepid.com". intrepid.com<!. 2006-02-20. http://www.intrepid.com/upc.html. Retrieved on 2009-03-11. 
^ "Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE)". fedoraproject.org. http://fedoraproject.org/wiki/Security/Features. Retrieved on 2009-03-11. 
^ "languages used to make GCC". http://www.ohloh.net/projects/gcc/analyses/latest. 
^ Tree SSA: Main Page[dead link]
^ "Tools: GCC 4.2.1 Released". http://kerneltrap.org/node/13975.  080208 kerneltrap.org
^ "More on OpenBSD's new compiler - Mambo". Thejemreport.com. 2007-10-15. http://www.thejemreport.com/content/view/369/. Retrieved on 2009-03-11. 
^ "Towards a BSD-licensed Compiler". It.toolbox.com. http://it.toolbox.com/blogs/bsd-guru/towards-a-bsdlicensed-compiler-19289. Retrieved on 2009-03-11. 
^ "BuildingFreeBSDWithClang - FreeBSD Wiki". Wiki.freebsd.org. http://wiki.freebsd.org/BuildingFreeBSDWithClang. Retrieved on 2009-03-11. 



[edit] Further reading


Richard M. Stallman: Using and Porting the GNU Compiler Collection, Free Software Foundation, ISBN 0-595-10035-X
Richard M. Stallman: Using Gcc: The Gnu Compiler Collection Reference, Free Software Foundation, ISBN 1-882114-39-6
Brian J. Gough: An Introduction to GCC, Network Theory Ltd., ISBN 0-9541617-9-3
Arthur Griffith, GCC: The Complete Reference. McGrawHill/Osborne. ISBN 0-07-222405-3.
The Jem Report: More on OpenBSD's New Compiler: [1]



[edit] External links



Wikibooks has a book on the topic of
GNU C Compiler Internals




GCC homepage
Collection of GCC architecture/internals documents
Marketing Cygnus Support, an essay covering GCC development for the 1990s, with 30 monthly reports for in the "Inside Cygnus Engineering" section near the end.
An Introduction to GCC, by Brian Gough
The official GCC manuals and user documentation, by the GCC developers
Kerner, Sean Michael (2005-04-22). "Open Source GCC 4.0: Older, Faster". internetnews.com. http://www.internetnews.com/dev-news/article.php/3499881. 
Kerner, Sean Michael (2006-03-02). "New GCC Heavy on Optimization". internetnews.com. http://www.internetnews.com/dev-news/article.php/3588926. 
EGCS 1.0 announcement
EGCS 1.0 features list
Fear of Forking, an essay by Rick Moen recording seven well-known forks, including the GCC/EGCS one
A compiler course project based on GCC in University of Rochester








v • d • e

GNU Project





History

GNU Manifesto · Free Software Foundation · History of free software







Licences

GNU General Public License · GNU Lesser General Public License · Affero General Public License · GNU Free Documentation License · GPL linking exception






Software

GNU (variants) · Hurd · GNOME · Gnuzilla · IceCat · Gnash · Bash · GCC · GNU Emacs · glibc · Coreutils · Build system · Bazaar · LilyPond · Other GNU packages and programs






Public speakers

Robert J. Chassell · Loïc Dachary · Ricardo Galli · Joshua Gay · Georg C. F. Greve · Federico Heinz · Benjamin Mako Hill · Bradley M. Kuhn · Matt Lee · Eben Moglen · Alexandre Oliva · Richard Stallman · John Sullivan






Other topics

GNU/Linux naming controversy · Revolution OS













v • d • e

Free and open source software





General

Copyleft · Events and Awards · Free software · Free Software Definition · Gratis versus Libre · Open source software






Free software
portal









Notable packages

Apache · CUPS · Firefox · GNOME · KDE · OpenOffice.org · Thunderbird · X Window System






Operating systems

AROS · BSD · Darwin · FreeDOS · GNU · Haiku · Linux · Mach · MINIX · OpenSolaris · ReactOS






Development

GCC · LLVM · Java · Open64 · Perl · PHP · Python · Lua · Ruby · Tcl · libJIT






History

GNU · Linux · Mozilla (Application Suite · Firefox · Thunderbird)






Organizations

Apache Software Foundation · Blender Foundation · Eclipse Foundation · FLOSS Manuals · freedesktop.org · Free Software Foundation · GNOME Foundation · GNU Project · Google Code · Linux Foundation · Mozilla Foundation · Open Source Geospatial Foundation · Open Source Initiative · SourceForge · Xiph.Org Foundation · X.Org Foundation






Licences

Apache · BSD · GNU GPL · LGPL · MIT · MPL · Permissive · Microsoft Public License · Microsoft Reciprocal License · FSF approved licenses






Challenges

Binary blob · Digital rights management · License proliferation · Mozilla software rebranding · Proprietary software · SCO-Linux controversies · Security · Software patents · Tivoization · Trusted Computing






Other topics

Alternative terms · Community · Linux distribution · Forking · Movement · Microsoft Open Specification Promise · Revolution OS · Comparison with closed source






List of open source software packages








Retrieved from "http://en.wikipedia.org/wiki/GNU_Compiler_Collection"
Categories: GNU project | 1987 software | Java development tools | Compilers | C compilers | C++ compilers | Fortran compilers | GNU project software | Free compilers and interpreters | Free cross-platform softwareHidden categories: All articles with dead external links | Articles with dead external links since March 2009 | Cleanup from section 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Bosanski
Català
Česky
Dansk
Deutsch
Eesti
Español
Esperanto
Euskara
فارسی
Français
Galego
한국어
Hrvatski
Italiano
עברית
Latina
Lietuvių
Magyar
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Slovenčina
Slovenščina
Српски / Srpski
Suomi
Svenska
ไทย
Tiếng Việt
Türkçe
Українська
中文









 This page was last modified on 5 April 2009, at 03:59.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
