













Greenspun's Tenth Rule - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Greenspun\'s_Tenth_Rule";
		var wgTitle = "Greenspun\'s Tenth Rule";
		var wgAction = "view";
		var wgArticleId = "1210851";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283638664;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Greenspun's Tenth Rule

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Greenspun's Tenth Rule of Programming is a common aphorism in computer programming and especially programming language circles. It states:[1]

Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.[2]





Contents


1 Origin
2 Meaning
3 Morris's Corollary
4 Prolog follow-up
5 Erlang follow-up
6 Generalization
7 See also
8 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Origin
The rule was written sometime around 1993 by Philip Greenspun. Although it is known as his tenth rule, there are in fact no preceding rules, only the tenth. The reason for this according to Greenspun: "Sorry, Han-Wen, but there aren't 9 preceding laws. I was just trying to give the rule a memorable name."[3]

[edit] Meaning
The interpretation is that programmers, constrained by low-level, primitive tools like C, often work around the limitations of their languages by inventing and implementing features found in more expressive languages such as Lisp.

[edit] Morris's Corollary
Well-known hacker Robert Morris later added the corollary:

…including Common Lisp[4].

This can be viewed as a commentary on the difficulty of creating an efficient implementation of the large and complex Common Lisp language, or simply a joke about Lisp's eval function. Both Greenspun's rule and Morris's corollary are examples of a characteristic style of hacker humor known as "ha ha only serious".[5]
(Nonetheless, most Common Lisp systems are not written in C or Fortran. Exceptions exist, such as GNU CLISP; however, systems such as Steel Bank Common Lisp are written chiefly in Lisp itself, just as C compilers are usually written in C.)

[edit] Prolog follow-up

Any sufficiently complicated LISP program is going to contain a slow implementation of half of Prolog. [6]

Addresses the fact that pure Prolog programs are likely to include Lisp-like isles, and pure Lisp programs are likely to do the converse.

[edit] Erlang follow-up
With the advent of distributed computing and popularization of concepts implemented in Erlang, Robert Virding postulated that:

Any sufficiently complicated concurrent program in another language contains an ad hoc informally-specified bug-ridden slow implementation of half of Erlang. [7]

This has been later referred to as Armstrong's corollary

[edit] Generalization
The rule is often modified by replacing "Common Lisp" with the speaker's functional language of choice, such as Scheme or Haskell. Making it a snowclone of the form:

Any sufficiently complicated platform contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of a functional programming language.[citation needed]


[edit] See also

Inner-platform effect
Turing tarpit
Zawinski's law of software envelopment


[edit] References


^ Revenge of the Nerds, by Paul Graham.
^ Philip Greenspun's Research
^ 10th rule of programming
^ Paul Graham quotes.
^ Jargon File entry on "ha ha only serious"
^ comp.lang.prolog: why not use LISP-imp of Prolog as opposed to Prolog itself?
^ [erlang-questions] Erlang concurrency





Retrieved from "http://en.wikipedia.org/wiki/Greenspun%27s_Tenth_Rule"
Categories: Lisp programming language | Rules of thumbHidden categories: All articles with unsourced statements | Articles with unsourced statements since April 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Русский









 This page was last modified on 13 April 2009, at 20:36 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
