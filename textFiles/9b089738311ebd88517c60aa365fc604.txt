













Nintendo DS homebrew - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Nintendo_DS_homebrew";
		var wgTitle = "Nintendo DS homebrew";
		var wgAction = "view";
		var wgArticleId = "3941934";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 284829991;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Nintendo DS homebrew

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





It has been suggested that Nintendo DS storage devices be merged into this article or section. (Discuss)


Nintendo DS homebrew is software written for the Nintendo DS by hobbyist programmers, as opposed to a software/game production company. Software is typically written using unofficial development kits and is used on the DS via third-party rewritable game cartridges.




An Onyx Nintendo DS Lite running DS Organize on an M3 Simply Flash cart






Nintendo DS Lite with SuperCard DS Lite and MicroSD card.






Contents


1 Storage devices

1.1 SLOT-1 and SLOT-2 devices


2 Booting tools

2.1 FlashMe
2.2 NoPass
2.3 Older methods


3 Checking the firmware version
4 Homebrew utilising expanded RAM
5 Programming
6 DLDI
7 Notable homebrew
8 See also
9 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Storage devices
For more details on this topic, see Nintendo DS storage devices.
Since the Nintendo DS is not sold with a storage medium, a third-party storage solution is required to store homebrew.

[edit] SLOT-1 and SLOT-2 devices
The earliest solutions for homebrew employed a storage device in the GBA cartridge slot (referred to as "SLOT-2") and a booting tool in the DS cartridge slot (referred to as "SLOT-1"). These two-tool combinations are commonly referred to as "SLOT-2" or "1st Generation" devices. Later on, cards that only utilized the DS slot to store and run homebrew software were developed. These devices are referred to as "SLOT-1" or "2nd Generation" cards.
There are a few main differences between the two technologies used:

SLOT-1 devices do not require the user to purchase and use a separate booting tool in addition to a storage device.
Only SLOT-2 devices are capable of running GBA homebrew directly. (Although programs such as "gbaldr" can be used to copy a GBA program from a SLOT-1 card to a Game Boy Advance flash cartridge in SLOT-2.)
Homebrew compatibility has typically been better on SLOT-2 cards because they have been around longer, and thus supported more. And so, many early programs were written for them specifically. This has changed with increasing adoption of SLOT-1 devices by developers and the introduction of Dynamically Linked Device Interface (DLDI) drivers, which allow a piece of homebrew to be written to work with any DLDI-supporting device. Previously, a FAT library had to be recompiled for each new device, which was time-consuming. However, not all developers have adopted this technology yet, and many programs from before 2007 have since been abandoned and may never be updated.
SLOT-2 devices sometimes contain extra RAM (similar to the SLOT-2 RAM expansion cartridge that comes with the Nintendo DS Browser) or rumble capabilities that can be utilized by homebrew or, for the rumble, Nintendo games. However, the serial design of SLOT-1 does not lend itself to being used for RAM or rumble expansion, and therefore SLOT-1 devices do not offer extra RAM or rumble capability. (Separate RAM/rumble expansion packs for SLOT-2 can still be purchased.)

SLOT-2 devices include basic GBA flash cartridges, the GBA Movie Player and the related M3 Perfect, the Max Media Dock, and the SuperCard.
SLOT-1 devices include the related DSTT, YushenDS Card, R4DS, M3 DS Simply, and their clones, N-Card, MK5, EDGE, iTouch DS, SuperCard DS One, CycloDS Evolution, the AceKard, the DS Link, the DS-Xtreme, the NinjaPass X9, EZ-Flash V, the Datel Games n' Music, M3DS, G6 Real, Acekard 2, Acekard 2i and DSTTi.
Each one of the available solutions for Game Boy Advance or Nintendo DS emulation differ mainly in size, compatibility with commercial ROM images, bundled special features (such as included media players), availability, and cost. To store homebrew, all flash cards will utilize either built-in flash memory or will use external flash memory cards, like microSD or CompactFlash. Due to the way Nintendo states the capacity of their official game carts, internal memory capacity is measured in bits, while external cards will use bytes. To know how much internal memory a bit card has in bytes, one has to divide the capacity by eight. For example, the "256 Mbit" cards popular during the GBA era held 32 megabytes.

[edit] Booting tools
Running DS homebrew using a SLOT-2 storage device requires a booting tool. A booting tool is a device that sends the DS' program counter to an address in the GBA slot, allowing programs to be run from storage there. A booting tool is not required for SLOT-1 devices, nor is a booting tool required to use GBA homebrew on the DS.

[edit] FlashMe
One of the most prevalent booting tools is the program FlashMe. This is a modified firmware for the DS. Once it is installed over the existing firmware on the DS, homebrew applications can be booted directly from SLOT-2. In addition to being a booting tool, it also protects the DS from trojan horse programs and removes the RSA check on DS Download Play, allowing the user to use WifiME (Wireless Multi Boot) to download homebrew applications. Optionally, it can disable the health and safety warning shown when the device is powered on. Many users of SLOT-1 devices still install FlashMe because of these extra features.
Since the FlashMe installation program is itself a homebrew program, another homebrew booting tool is required for its installation. The other homebrew booting tool is only needed once, at install time, and therefore can either be borrowed for this occasion or sold after use. Upgrades to FlashMe can be booted from the existing FlashMe installation.

[edit] NoPass
The other method commonly seen is a device called a NoPass. This is a physical card, sold under brand names such as SuperKey and MAX Media Launcher, that resembles a DS Game Card. The program inside contains instructions that immediately send the program counter to the GBA slot. Some SLOT-1 cards, such as the M3 DS Simply, have this built into their firmware so they can act as a slot 2 booting device; other SLOT-1 cards can run a program stored on the card to jump to SLOT-2 in the same way.

[edit] Older methods
Before the encryption on SLOT-1 was reverse-engineered, which allowed the creation of SLOT-1 storage and NoPass devices, booting tools had to exploit flaws in early versions of the Nintendo DS' firmware or in specific games. Booting tools under this category include PassMe, which exploited a flaw in the DS firmware's header check for Game Cards; WiFiMe, which exploited a flaw in the DS firmware's header check for DS Download Play; and PassMe2, which exploited a flaw in the DS BIOS. Some PassMe and PassMe2 devices came with a serial port for some homebrew apps to use. PassMe and WiFiMe worked only with early versions of the DS firmware, causing mild confusion until a method of checking a DS's firmware version involving crashing PictoChat was discovered. But because these methods require a DS with older firmware, must be programmed to work with a specific game, or leave chunky dongles hanging off the back of the DS, these booting tools have seen decreasing popularity as of 2006[update].

[edit] Checking the firmware version




Firmware v5 on DS Lite displays two magenta screens.


In the third quarter of 2005, after SLOT-2 cards first became popular, Nintendo changed the firmware of new DS units to lock out the "PassMe" booting tool, starting with the iQue DS. A different, more difficult exploit for the new firmware was discovered a bit later. In January 2006, the homebrew community found a way to determine the version of firmware installed on a DS, so that the user could determine which exploit to buy. It involved the behavior of PictoChat if a DS Game Card or Game Boy Advance cartridge is ejected or the lid is closed. In the first version, PictoChat would freeze; later versions would change both screens to a solid color, with a different color for each firmware version.It is commonly called "The Pink Screen of Death.[1]
The version results are as follows:

v1: Pictochat hangs/no colour appears
v2: two greyish blue screens
v3: two dark green screens
v4: two golden yellow screens
v5: two magenta screens (DS lite units have this, along with a few pink original DSs)
v6: two dark blue screens (un-confirmed new DSes have this)
iQue: two dark green screens


[edit] Homebrew utilising expanded RAM
Many homebrew programmers have encountered difficult to navigate obstacles while developing their projects as a result of the DS's relatively weak CPU and little RAM.[citation needed] The introduction of the Nintendo DS Memory Expansion Pak (included with Nintendo DS Browser) and the recent inclusion of extra RAM in some Slot-2 devices (SuperCard SD/CF/Lite, EZ3-in-1), as well as the 1GB of NAND memory in the Acekard RPG, has allowed programmers to overcome some of these obstacles.

[edit] Programming
Homebrew DS applications are generally programmed using C/C++. A popular toolchain is devkitARM. A few libraries that make programming easier include libnds, libfat, dswifi and PAlib. libfat helps developers write to a FAT file system on the homebrew storage device while dswifi allows developers use WiFi on the DS. Several tutorials have been written about the various aspects of the system. fpc4nds is a port of FreePascal for cross compile for DS.
Popular development packages:

devkitPro offers devkitARM, libnds, dswifi, libfat and maxmod.

Tools and libraries:

DS Game Maker A piece of free software that allows users to make DS Games with absolutely no programming required.
libfat Library for using the filesystem (successor of GBA NDS FAT)
Maxmod, an addon library which supports playback of MOD, S3M, XM, and IT modules.
libellen, a library addon for libnds, which allows easy development for basic concepts, such as sprites, and backgrounds.
PAlib (Programmers Arsenal), a library which simplifies DS development so users do not need to learn about the hardware of the console. [2]
GBA NDS FAT Library for using the Filesystem (outdated)

Other tools and libraries:

MicroLua, a new library which uses Lua scripts. Scripts can be written and compiled on the DS itself, for handy development.
DSLua, an old outdated Nintendo DS library using Lua (.lua) programmed scripts.
Python, a converted Stackless Python port, which runs Python (.py) scripts. A updated version of this available at DSPython.


[edit] DLDI
One of the biggest issues of programming homebrew on the DS is accessing a card's file system. This is due to each homebrew device using a different interface to access an inserted media card. This has been solved by the introduction of DLDI (Dynamically Linked Disc Interface) drivers, which superseded the use of drivers statically linked into the homebrew application during compilation. The current FAT library, libfat, is provided with the ability to use these drivers. Its predecessor, GBA NDS FAT, can be modified to use these drivers too.
A problem with early DS homebrew was that many programs were not compatible with certain flash cards. Each card requires its own routine to access the storage device (CF/SD/etc). A program compiled before the release of a certain card would not have the required routines to support that card. Additionally, including all of these routines would bloat the program. DLDI (Dynamically Linked Device Interface) solves this issue by removing the access routines from the programs. Instead, a module containing the routines for a given card is patched into the executable by the user using a simple graphical or command-line utility. This ensures forward-compatibility, as the driver for a card can be inserted into any DLDI-compatible program, and prevents bloat by removing support code for other cards from the program.
DLDI patches and patching tools can be found at DLDI Wiki.
Modern Slot-1 flash cards (usually starting from 2007 or newer, like R4 DS or M3 DS Real) automatically patch compatible homebrew with the designated DLDI driver on startup to eliminate the need of manual patching on the PC.

[edit] Notable homebrew
Main article: List of Nintendo DS Homebrew
Homebrew applications for GBA or DS add many features to the DS. There are many internet related tools like web browsers, instant messengers, and email clients. Multimedia programs allow users to enjoy movies, music, ebooks, comics, and pictures on the DS. Emulators let people play games designed for another system.

DSLinux is a port of Linux to the DS. [3]
GEOS is a GUI initially developed for the Commodore 64.
MoonShell plays movies and several music formats, views images and text files, and launches other homebrew. [4]
DSOrganize includes file browser, launcher, web browser, organizer, media player, and other features. [5]
Eigenmath DS free computer algebra system ported to Nintendo DS
Woopsi Nintendo DS GUI library
Colors! is a simplistic digital painting application for Nintendo DS. [6]
Inferno-ds is a port of the distributed operating system Inferno to the Nintendo DS. [7]
SvSIP is a VoIP/SIP client for Nintendo DS.[8]


[edit] See also

Nintendo DS storage devices


[edit] References


^ DS Firmware - PHWiki
^ http://wiki.devkitpro.org/index.php/PAlib
^ DSLinux homepage
^ Infantile Paralysiser: MoonShell Ver1.71 Top page
^ DSOrganize home page
^ Colors!
^ inferno-ds home page
^ SvSIP home page





Retrieved from "http://en.wikipedia.org/wiki/Nintendo_DS_homebrew"
Categories: Nintendo DS homebrew | Video game development | Firmware | Aftermarket firmware | Homebrew softwareHidden categories: Articles to be merged since January 2009 | All articles to be merged | Articles containing potentially dated statements from 2006 | All articles containing potentially dated statements | All articles with unsourced statements | Articles with unsourced statements since April 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Français









 This page was last modified on 19 April 2009, at 16:37 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
