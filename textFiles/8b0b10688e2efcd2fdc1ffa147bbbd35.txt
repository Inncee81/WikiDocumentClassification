













Unix philosophy - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Unix_philosophy";
		var wgTitle = "Unix philosophy";
		var wgAction = "view";
		var wgArticleId = "223176";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279026164;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Unix philosophy

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
The Unix philosophy is a set of cultural norms and philosophical approaches to developing software based on the experience of leading developers of the Unix operating system.




Contents


1 McIlroy: A Quarter Century of Unix
2 Pike: Notes on Programming in C
3 Mike Gancarz: The UNIX Philosophy
4 Worse is better
5 Eric Raymond
6 Controversy
7 Quotes
8 See also
9 References
10 Notes
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] McIlroy: A Quarter Century of Unix
Doug McIlroy, the inventor of Unix pipes and one of the founders of the Unix tradition, summarized the philosophy as follows:[1]


This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.


This is usually severely abridged to "do one thing and do it well".

[edit] Pike: Notes on Programming in C
Rob Pike offers the following five maxims of complexity in programming in Notes on Programming in C,[2] though they can be easily viewed as points of a Unix philosophy:[citation needed]

You cannot tell where a program is going to spend its time. Bottlenecks occur in surprising places, so do not try to second guess and put in a speed hack until you've proven that's where the bottleneck is.
Measure. Do not tune for speed until your performance analysis tool tells you which part of the code overwhelms the rest.
Fancy algorithms tend to run more slowly on small data sets than simple algorithms. They tend to have a large constant factor in O(n) analysis, and n is usually small. So don't get fancy unless Rule 2 indicates that n is big enough.
Simplify your algorithms and data structures wherever it makes sense because fancy algorithms are more difficult to implement without defects. The data structures in most programs can be built from array lists, linked lists, hash tables, and binary trees.
Data dominates. If you have chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.

Pike's rules 1 and 2 restate Donald Knuth's[3] famous maxim "Premature optimization is the root of all evil." Ken Thompson rephrased Pike's rules 3 and 4 as "When in doubt, use brute force." Rules 3 and 4 are instances of the design philosophy KISS. Rule 5 was previously stated by Fred Brooks in The Mythical Man-Month. Jon Bentley's Programming Pearls also has a chapter on the same design principle. Rule 5 is often shortened to "write stupid code that uses smart data", and is an instance of the guideline "If your data structures are good enough, the algorithm to manipulate them should be trivial."

[edit] Mike Gancarz: The UNIX Philosophy
In 1994 Mike Gancarz (a member of the team that designed the X Window System), drew on his own experience with Unix, as well as discussions with fellow programmers and people in other fields who depended on Unix, to produce The UNIX Philosophy which sums it up in 9 paramount precepts:

Small is beautiful.
Make each program do one thing well.
Build a prototype as soon as possible.
Choose portability over efficiency.
Store data in flat text files.
Use software leverage to your advantage.
Use shell scripts to increase leverage and portability.
Avoid captive user interfaces.
Make every program a filter.

The 10 lesser tenets are ones which are not universally agreed upon as part of the Unix philosophy, and in some cases, are hotly debated (Monolithic kernel vs. Microkernels):

Allow the user to tailor the environment.
Make operating system kernels small and lightweight.
Use lowercase and keep it short.
Save trees.
Silence is golden.
Think parallel.
The sum of the parts is greater than the whole.
Look for the 90-percent solution.
Worse is better.
Think hierarchically.


[edit] Worse is better
Main article: Worse is better
Richard P. Gabriel suggests that a key advantage of Unix was that it embodied a design philosophy he termed "Worse is better". In the "Worse is better" design style, simplicity of both the interface and the implementation is more important than any other attribute of the system — including correctness, consistency and completeness. Gabriel argues that this design style has key evolutionary advantages, though he questions the quality of some results.
For example, in the early days UNIX was a monolithic kernel (which means that user processes carried out kernel system calls all on the user stack). If a signal was delivered to a process while it was blocked on a long-term I/O in the kernel, then what should be done? Should the signal be delayed, possibly for a long time (maybe indefinitely) while the I/O completed? The signal handler could not be executed when the process was in kernel mode, with sensitive kernel data on the stack. Should the kernel back-out the system call, and store it, for replay and restart later, assuming that the signal handler completes successfully?
In these cases Ken Thompson and Dennis Ritchie favored simplicity over perfection. The UNIX system would occasionally return early from a system call with an error stating that it had done nothing - the "Interrupted System Call" - an error number 4 (EINTR) in today's systems. Of course the call had been aborted in order to call the signal handler. This could only happen for a handful of long-running system calls, i.e. read(), write(), open(), select(), etc. On the plus side, this made the I/O system many times simpler to design and understand. The vast majority of user programs were never affected because they didn't handle or experience signals other than SIGINT/^C and would die right away if one was raised. For the few other programs - things like shells or text editors that respond to job control keypresses - small wrappers could be added to system calls so as to retry the call right away if this EINTR error was raised. Problem solved, in a simple way.

[edit] Eric Raymond
Eric S. Raymond, in his book The Art of Unix Programming[4], summarizes the Unix philosophy as the widely-used KISS Principle of "Keep it Simple, Stupid" [5]. He also provides a series of design rules:

Rule of Modularity: Write simple parts connected by clean interfaces.
Rule of Clarity: Clarity is better than cleverness.
Rule of Composition: Design programs to be connected to other programs.
Rule of Separation: Separate policy from mechanism; separate interfaces from engines.
Rule of Simplicity: Design for simplicity; add complexity only where you must.
Rule of Parsimony: Write a big program only when it is clear by demonstration that nothing else will do.
Rule of Transparency: Design for visibility to make inspection and debugging easier.
Rule of Robustness: Robustness is the child of transparency and simplicity.
Rule of Representation: Fold knowledge into data so program logic can be stupid and robust.[6]
Rule of Least Surprise: In interface design, always do the least surprising thing.
Rule of Silence: When a program has nothing surprising to say, it should say nothing.
Rule of Repair: When you must fail, fail noisily and as soon as possible.
Rule of Economy: Programmer time is expensive; conserve it in preference to machine time.
Rule of Generation: Avoid hand-hacking; write programs to write programs when you can.
Rule of Optimization: Prototype before polishing. Get it working before you optimize it.
Rule of Diversity: Distrust all claims for "one true way".
Rule of Extensibility: Design for the future, because it will be here sooner than you think.


[edit] Controversy
It is controversial as to whether the Free Software Foundation's GNU work-alikes of standard Unix programs (such as diff, find, etc) follow the "Unix Philosophy" or misunderstand it. Certainly at least some Unix old timers claim the latter, since GNU tools are often substantially larger and more featureful than their Unix equivalents.
Already in 1983 Brian Kernighan and Rob Pike wrote a paper titled Program Design in the UNIX Environment and gave a presentation on UNIX Style, or cat -v Considered Harmful criticizing BSD's expansion of the functionality of basic Unix tools like cat.
This trend only became much more significant with the advent of GNU and commercial Unix variants, and it is common for a single program to provide numerous features based on how it is called (for example, a program that both compresses and decompresses a file based on what name it is called by; an extreme example being the embedded Linux application BusyBox, which consolidates the most common command line functions into a single binary).

[edit] Quotes

"Unix is simple. It just takes a genius to understand its simplicity." – Dennis Ritchie
"UNIX was not designed to stop its users from doing stupid things, as that would also stop them from doing clever things." – Doug Gwyn
"Unix never says 'please'." – Rob Pike
"Unix is user-friendly. It just isn't promiscuous about which users it's friendly with." – Steven King
"Those who don't understand UNIX are condemned to reinvent it, poorly." – Henry Spencer


[edit] See also

Unix architecture
Plan 9 from Bell Labs
Pipes and filters
The Elements of Style – One of the sources of inspiration for the Unix philosophy.
The UNIX-HATERS Handbook
Software engineering
Hacker (programmer subculture)


[edit] References

The Unix Programming Environment by Brian Kernighan and Rob Pike, 1984
Notes on Programming in C, Rob Pike, September 21, 1989
A Quarter Century of Unix, Peter H. Salus, Addison-Wesley, May 31, 1994 (ISBN 0-201-54777-5)
Philosophy — from The Art of Unix Programming, Eric S. Raymond, Addison-Wesley, September 17, 2003 (ISBN 0-13-142901-9)
Final Report of the Multics Kernel Design Project by M. D. Schroeder, D. D. Clark, J. H. Saltzer, and D. H. Wells, 1977.
The UNIX Philosophy, Mike Gancarz, ISBN 1555581234


[edit] Notes


^ Basics of the Unix Philosophy
^ Rob Pike. "Notes on Programming in C". http://www.lysator.liu.se/c/pikestyle.html. Retrieved on 2008-07-08. 
^ Knuth, Donald: Structured Programming with Goto Statements. Computing Surveys 6:4 (1974), 261–301.
^ Raymond, Eric (2003-09-19). The Art of Unix Programming. Addison-Wesley. ISBN 0-13-142901-9. http://www.catb.org/~esr/writings/taoup/html/. Retrieved on 2009-02-09. 
^ Raymond, Eric (2003-09-19). "The Unix Philosophy in One Lesson". The Art of Unix Programming. Addison-Wesley. ISBN 0-13-142901-9. http://www.catb.org/~esr/writings/taoup/html/ch01s07.html. Retrieved on 2009-02-09. 
^ Raymond, Eric (19 September 2003). "Basics of the Unix Philosophy". The Art of Unix Programming. Addison-Wesley. ISBN 0-13-142901-9. http://www.catb.org/~esr/writings/taoup/html/ch01s06.html#id2878263. Retrieved on 2009-02-09. 



[edit] External links

The Unix Philosophy: A Brief Introduction - by The Linux Information Project (LINFO)
Joel on Software - Biculturalism
The truth about Unix: The user interface is horrid




Retrieved from "http://en.wikipedia.org/wiki/Unix_philosophy"
Categories: Software development philosophies | UnixHidden categories: All articles with unsourced statements | Articles with unsourced statements since December 2007 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Français
日本語
Português
Русский
中文









 This page was last modified on 22 March 2009, at 22:11 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
