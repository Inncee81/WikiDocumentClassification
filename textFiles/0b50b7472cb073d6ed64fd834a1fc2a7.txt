













Markov decision process - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Markov_decision_process";
		var wgTitle = "Markov decision process";
		var wgAction = "view";
		var wgArticleId = "1125883";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277662823;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Markov decision process

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Markov decision processes (MDPs), named after Andrey Markov, provide a mathematical framework for modeling decision-making in situations where outcomes are partly random and partly under the control of the decision maker. MDPs are useful for studying a wide range of optimization problems solved via dynamic programming and reinforcement learning. MDPs were known at least as early as the 1950s (cf. Bellman 1957). Much research in the area was spawned due to Ronald A. Howard's book, Dynamic Programming and Markov Processes, in 1960. Today they are used in a variety of areas, including robotics, automated control, economics and in manufacturing.
More precisely a Markov Decision Process is a discrete time stochastic control process characterized by a set of states; in each state there are several actions from which the decision maker must choose. For a state s and an action a, a state transition function Pa(s) determines the transition probabilities to the next state. The decision maker earns a reward for each state transition. The state transitions of an MDP possess the Markov property: given the state of the MDP at time t is known, transition probabilities to the state at time t + 1 are independent of all previous states or actions.
Markov decision processes are an extension of Markov chains; the difference is the addition of actions (allowing choice) and rewards (giving motivation). If there were only one action, or if the action to take were fixed for each state, a Markov decision process would reduce to a Markov chain.




Contents


1 Definition
2 Solution

2.1 Notable variants

2.1.1 Value iteration
2.1.2 Policy iteration
2.1.3 Modified policy iteration
2.1.4 Prioritized sweeping




3 Extensions

3.1 Partial observability
3.2 Reinforcement Learning
3.3 Minor extensions


4 Alternative notations
5 See also
6 References
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Definition
A Markov decision process is a list of four objects , where

S is the state space,
A is the action space,
 is the probability that action a in state s at time t will lead to state s' at time t + 1,
Ra(s,s') is the immediate reward (or expected immediate reward) received after transition to state s' from state s with transition probability Pa(s,s').

The goal is to maximize some cumulative function of the rewards, typically the discounted sum over a potentially infinite horizon:



where  is the discount rate and satisfies . It is typically close to 1.

[edit] Solution
The solution to a Markov Decision Process can be expressed as a policy π, a function from states to actions. Note that once a Markov decision process is combined with a policy in this way, this fixes the action for each state and the resulting combination behaves like a Markov chain.
The standard family of algorithms to calculate the policy requires storage for two arrays indexed by state: value V, which contains real values, and policy π which contains actions. At the end of the algorithm, π will contain the solution and V(s0) will contain the discounted sum of the rewards to be earned (on average) by following that solution.
The algorithm then has the following two kinds of steps, which are repeated in some order for all the states until no further changes take place.






Their order depends on the variant of the algorithm; one can also do them for all states at once or state by state, and more often to some states than others. As long as no state is permanently excluded from either of the steps, the algorithm will eventually arrive at the correct solution.

[edit] Notable variants

[edit] Value iteration
In value iteration (Bellman 1957), which is also called backward induction, the π array is not used; instead, the value of π(s) is calculated whenever it is needed.
Substituting the calculation of π(s) into the calculation of V(s) gives the combined step:




[edit] Policy iteration
In policy iteration (Howard 1960), step one is performed once, and then step two is repeated until it converges. Then step one is again performed once and so on.
Instead of repeating step two to convergence, it may be formulated and solved as a set of linear equations.
This variant has the advantage that there is a definite stopping condition: when the array π does not change in the course of applying step 1 to all states, the algorithm is completed.

[edit] Modified policy iteration
In modified policy iteration (van Nunen, 1976;Puterman and Shin 1978), step one is performed once, and then step two is repeated several times. Then step one is again performed once and so on.

[edit] Prioritized sweeping
In this variant, the steps are preferentially applied to states which are in some way important - whether based on the algorithm (there were large changes in V or π around those states recently) or based on use (those states are near the starting state, or otherwise of interest to the person or program using the algorithm).

[edit] Extensions

[edit] Partial observability
Main article: partially observable Markov decision process
The solution above assumes that the state s is known when action is to be taken; otherwise π(s) cannot be calculated. When this assumption is not true, the problem is called a partially observable Markov decision process or POMDP.

[edit] Reinforcement Learning
If the probabilities are unknown, the problem is one of reinforcement learning (Sutton and Barto, 1998;Gosavi, 2003).
For this purpose it is useful to define a further function, which corresponds to taking the action a and then continuing optimally (or according to whatever policy one currently has):



While this function is also unknown, experience during learning is based on (s,a) pairs (together with the outcome s'); that is, "I was in state s and I tried doing a and s' happened)". Thus, one has an array Q and uses experience to update it directly. This is known as Q-learning.
The power of reinforcement learning lies in its ability to solve the Markov decision process without computing the transition probabilities; note that transition probabilities are needed in value and policy iteration. Also, reinforcement learning can be combined with function approximation, and thereby one can solve problems with a very large number of states. Reinforcement Learning can also be handily performed within Monte Carlo simulators of systems.

[edit] Minor extensions
These extensions are minor in that they complicate the notation, but make no real difference to the problem or its solution.

The reward may be a function of the action as well as the state, R(s,a).
The reward may be a function of the resulting state as well as the action and state, R(s,a,s').
The action space may be different at each state, so that it is As rather than A.


[edit] Alternative notations
The terminology and notation for MDPs are not entirely settled; there are two main streams — one using action, reward, value and γ, while the other uses control, cost, cost-to-go and α. In addition, the notation for the transition probability varies.


in this article
alternative
comment


action a
control u



reward R
cost g
g is the negative of R


value V
cost-to-go J
J is the negative of V


policy π
policy μ



discounting factor 
discounting factor α



transition probability Pa(s,s')
transition probability pss'(a)



In addition, transition probability is sometimes written Pr(s,a,s'), Pr(s' | s,a) or, rarely, ps's(a).

[edit] See also

Partially observable Markov decision process
Dynamic programming
Bellman equation for applications to economics.


[edit] References

R. Bellman. A Markovian Decision Process. Journal of Mathematics and Mechanics 6, 1957.
R. E. Bellman. Dynamic Programming. Princeton University Press, Princeton, NJ, 1957. Dover paperback edition (2003), ISBN 0486428095.
Ronald A. Howard Dynamic Programming and Markov Processes, The M.I.T. Press, 1960.
D. Bertsekas. Dynamic Programming and Optimal Control. Volume 2, Athena, MA, 1995.
M. L. Puterman. Markov Decision Processes. Wiley, 1994.
H.C. Tijms. A First Course in Stochastic Models. Wiley, 2003.
Sutton, R. S. and Barto A. G. Reinforcement Learning: An Introduction. The MIT Press, Cambridge, MA, 1998.
A. Gosavi, "Simulation-based Optimization: Parametric Optimization Techniques and Reinforcement Learning. Springer (Kluwer), Boston, 2003.
J.A. E. E van Nunen. A set of successive approximation methods for discounted Markovian decision problems. Z. Operations Research, 20:203-208, 1976.
S. P. Meyn, 2007. Control Techniques for Complex Networks, Cambridge University Press, 2007. ISBN-13: 9780521884419. Appendix contains abridged Meyn & Tweedie.


[edit] External links

MDP Toolbox for Matlab - An excellent tutorial and Matlab toolbox for working with MDPs.
Reinforcement Learning An Introduction by Richard S. Sutton and Andrew G. Barto
SPUDD A structured MDP solver for download by Jesse Hoey




Retrieved from "http://en.wikipedia.org/wiki/Markov_decision_process"
Categories: Stochastic processes | Optimal decisions | Dynamic programming | Machine learning 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Français
Deutsch
中文









 This page was last modified on 16 March 2009, at 15:54 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
