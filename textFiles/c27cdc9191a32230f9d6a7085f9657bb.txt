













Scripting language - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Scripting_language";
		var wgTitle = "Scripting language";
		var wgAction = "view";
		var wgArticleId = "21490336";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282087960;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Scripting language

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
"scripting" redirects here. For other uses, see script.





This article is missing citations or needs footnotes. Please help add inline citations to guard against copyright violations and factual inaccuracies. (July 2008)


A scripting language, script language or extension language is a programming language that allows some control of a single or many software application(s). "Scripts" are often treated as distinct from "programs", which execute independently from any other application. At the same time they are distinct from the core code of the application, which is usually written in a different language, and by being accessible to the end-user they enable the behavior of the application to be adapted to the user's needs. Scripts are often, but not always, interpreted from the source code or "semi-compiled" to bytecode which is interpreted, unlike the applications they are associated with, which are traditionally compiled to native machine code for the system on which they run. Scripting languages are nearly always embedded in the application with which they are associated.
The name "script" is derived from the written script of the performing arts, in which dialogue is set down to be spoken by human actors. Early script languages were often called batch languages or job control languages. Such early scripting languages were created to shorten the traditional edit-compile-link-run process.




Contents


1 Historical overview
2 Types of scripting languages

2.1 Job control languages and shells
2.2 GUI Scripting
2.3 Application-specific languages
2.4 Web browsers
2.5 Web servers
2.6 Text processing languages
2.7 General-purpose dynamic languages
2.8 Extension/embeddable languages


3 Market analysis
4 References
5 See also
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Historical overview
The first interactive shells were developed in the 1960s to enable remote operation of the first time-sharing systems, and these generated a demand for scripting, to relieve the human operator of the tedium of re-entering sequences of commands at a computer terminal keyboard, so from there were developed simple macro commands, files containing sequences of commands, which eventually developed into shell scripts. In a parallel development, the larger and more complex applications developed embedded scripting facilities, at first very rudimentary, to facilitate batch mode operation where a human operator would not be present to guide the program. Thus part of the program was devoted to interpreting instructions written by the user in a (usually quite specialized) instruction language — a computer program within a computer program.
Historically, there was a clear distinction between "real" high speed programs written in languages such as C, and simple, slow scripts written in languages such as Bourne Shell or Awk. But as technology improved, the performance differences shrank and interpreted languages like Java, Lisp, Perl and Python emerged and gained in popularity to the point where they are considered general-purpose programming languages and not just languages that "drive" an interpreter.
Languages such as Tcl and Lua, were specifically designed as general purpose scripting languages that could be embedded in any application or used on their own. Other systems such as Visual Basic for Applications (VBA) provided strong integration with the automation facilities of an underlying system. Embedding of such general purpose scripting languages instead of developing a new language for each application also had obvious benefits, relieving the application developer of the need to code a language translator from scratch and allowing the user to apply skills learned elsewhere.
Early web servers used scripting languages via the Common Gateway Interface, ASP, or PHP. But most larger applications are now written in Java (JSP), Coldfusion, PHP or .Net.
Some software incorporates several different scripting languages. Modern web browsers typically provide a language for writing extensions to the browser itself, and several standard embedded languages for controlling the browser, including ECMAScript (more commonly known as JavaScript), CSS, and HTML.

[edit] Types of scripting languages

[edit] Job control languages and shells
Main article: Shell script
A major class of scripting languages has grown out of the automation of job control, which relates to starting and controlling the behavior of system programs. (In this sense, one might think of shells as being descendants of IBM's JCL, or Job Control Language, which was used for exactly this purpose.) Many of these languages' interpreters double as command-line interpreters such as the Unix shell or the MS-DOS COMMAND.COM. Others, such as AppleScript, add scripting capability to computing environments lacking a command-line interface.

[edit] GUI Scripting
With the advent of graphical user interfaces came a specialized kind of scripting language for controlling a computer. These languages interact with the same graphic windows, menus, buttons, and so on that a system generates. These languages are typically used to automate repetitive actions or configure a standard state. In principle they could be used to control any application running on a GUI-based computer; but, in practice, the support for such languages depends on the application and operating system. Such languages are also called "macros" when control is through simulated key presses or mouse clicks.

[edit] Application-specific languages
Many large application programs include an idiomatic scripting language tailored to the needs of the application user. Likewise, many computer game systems use a custom scripting language to express the programmed actions of non-player characters and the game environment. Languages of this sort are designed for a single application; and, while they may superficially resemble a specific general-purpose language (e.g. QuakeC, modeled after C), they have custom features that distinguish them. Emacs Lisp, while a fully formed and capable dialect of Lisp, contains many special features that make it most useful for extending the editing functions of Emacs. An application-specific scripting language can be viewed as a domain-specific programming language specialized to a single application.

[edit] Web browsers
Main article: Client-side scripting
Web browsers are typically used to render HTML, but in time a host of special-purpose languages has developed to control their operation. These include ECMAScript, a very versatile procedural scripting language superficially resembling Java; Cascading Style Sheets, which enable style metadata to be abstracted from content; XML which can be used for content in conjunction with style metadata, as an alternative to HTML; VBScript by Microsoft, which only works in Internet Explorer; and XSLT, a presentation language that transforms XML content into a new form. Techniques involving the combination of XML and JavaScript scripting to improve the user's subjective impression of responsiveness have become significant enough to acquire a name: AJAX. The Document Object Model standard ensures that all browsers respond in a predictable manner to the same JavaScript.
The Mozilla project has developed its own system for extending the user interface of the browser itself, called XUL.

[edit] Web servers
Main article: Server-side scripting
On the server side of the HTTP link, application servers and other dynamic content servers such as Web content management systems provide content through a large variety of techniques and technologies typified by the scripting approach. Particularly prominent in this area are PHP, ColdFusion, JSP and ASP, but other developments such as Ruby on Rails have carved out a niche.

[edit] Text processing languages
The processing of text-based records is one of the oldest uses of scripting languages. Many, such as Unix's AWK, sed, and grep were originally designed to aid programmers in automating tasks that involved Unix text-based configuration and log files. Of primary importance here is the regular expression, a language developed for the formal description of the lexical structure of text, and used by all of these tools.
Perl was originally designed to overcome the limitations of these tools and has grown to be one of the most widespread general purpose languages.

[edit] General-purpose dynamic languages
See also: Dynamic programming language
Some languages, such as Perl, began as scripting languages but were developed into programming languages suitable for broader purposes. Other similar languages – frequently interpreted, memory-managed, or dynamic – have been described as "scripting languages" for these similarities, even if they are more commonly used for applications programming. They are usually not called "scripting languages" by their own users.

[edit] Extension/embeddable languages
A number of languages have been designed for the purpose of replacing application-specific scripting languages by being embeddable in application programs. The application programmer (working in C or another systems language) includes "hooks" where the scripting language can control the application. These languages serve the same purpose as application-specific extension languages but with the advantage of allowing some transfer of skills from application to application. JavaScript began as and primarily still is a language for scripting inside web browsers; however, the standardization of the language as ECMAScript has made it popular as a general purpose embeddable language. In particular, the Mozilla implementation SpiderMonkey is embedded in several environments such as the Yahoo! Widget Engine. Other applications embedding ECMAScript implementations include the Adobe products Adobe Flash (ActionScript) and Adobe Acrobat (for scripting PDF files).
Tcl was created as an extension language but has come to be used more frequently as a general purpose language in roles similar to Python, Perl, and Ruby.

[edit] Market analysis
The most popular scripting language, as of 2008, is JavaScript. The second most popular is PHP. Perl is the third most popular scripting language, but in North America it enjoys significantly more popularity.[1]

[edit] References

^ PHP, JavaScript, Ruby, Perl, Python, and Tcl Today: The State of the Scripting Universe - CIO.com


[edit] See also

Architecture description language
Build automation
Domain-specific language
Glue code
Interpreted language
List of programming languages
Macro and preprocessor languages
Ousterhout's dichotomy
Programming in the large and programming in the small
Shebang (Unix)
Shell script
Shell (computing)
System programming
Web template languages


[edit] External links

Patterns for Scripted Applications
A study of the Script-Oriented Programming (SOP) suitability of selected languages — from The Scriptometer
A Slightly Skeptical View on Scripting Languages by Dr. Nikolai Bezroukov
Rob van der Woude's Scripting Pages — Administrative scripting related information (includes examples)
Are Scripting Languages Any Good? A Validation of Perl, Python, Rexx, and Tcl against C, C++, and Java (PDF) — 2003 study
Scripting: Higher Level Programming for the 21st Century by John K. Ousterhout
In praise of scripting: real programming pragmatism] by Ronald Loui
Scripting on the Java platform — JavaWorld









v • d • e

Types of programming languages






Array · Aspect-oriented · Assembly · Class-based · Compiled · Concurrent · Curly bracket · Data-oriented · Data-structured · Dataflow · Declarative · Domain-specific · Dynamic · Esoteric · Event-driven · Extensible · Functional · High-level · Imperative · Interpreted · Logic · Low-level · Machine · Macro · Metaprogramming · Multi-paradigm · Non-English-based · Object-oriented · Off-side rule · Pipeline · Procedural · Prototype-based · Reflective · Rule-based · Scripting · Synchronous · Visual









Retrieved from "http://en.wikipedia.org/wiki/Scripting_language"
Categories: Scripting languages | Programming paradigmsHidden categories: Articles with unsourced statements since July 2008 | All articles with unsourced statements 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Azərbaycan
Български
Català
Česky
Dansk
Deutsch
Español
Français
한국어
Bahasa Indonesia
Italiano
Latviešu
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Slovenčina
Српски / Srpski
Suomi
Svenska
தமிழ்
Türkçe
Українська
中文









 This page was last modified on 6 April 2009, at 11:21.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
