













Karnaugh map - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Karnaugh_map";
		var wgTitle = "Karnaugh map";
		var wgAction = "view";
		var wgArticleId = "10854684";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279228052;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Karnaugh map

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




An example Karnaugh map


The Karnaugh map, also known as a Veitch diagram (KV-map or K-map for short), is a tool to facilitate the simplification of Boolean algebra integrated circuit expressions. The Karnaugh map reduces the need for extensive calculations by taking advantage of human pattern-recognition and permitting the rapid identification and elimination of potential race hazards.
The Karnaugh map was invented in 1952 by Edward W. Veitch. It was further developed in 1953 by Maurice Karnaugh, a physicist at Bell Labs, to help simplify digital electronic circuits.
In a Karnaugh map the boolean variables are transferred (generally from a truth table) and ordered according to the principles of Gray code in which only one variable changes in between squares. Once the table is generated and the output possibilities are transcribed, the data is arranged into the largest even group possible and the minterm is generated through the axiom laws of boolean algebra.




Contents


1 Properties

1.1 Procedures
1.2 Relationships
1.3 Toroidally connected
1.4 Size of map


2 Example

2.1 Truth table
2.2 Karnaugh map
2.3 Solution
2.4 Inverse
2.5 Don't cares


3 Race hazards

3.1 Examples of 2-variable maps


4 See also
5 References
6 Further reading
7 External links

7.1 Software







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Properties







A four variable minterm Karnaugh map. Note: the four boolean variables A, B, C, and D. The top side of the grid the first "0" represents the possibility of the input NOT A, the second "0" represents NOT B, a "1" represents A, and so forth. There are sixteen permutations out of the four variables, and thus sixteen possible outputs.










4 set Venn diagram with numbers (0-15) and set names (A-D) matching above minterm diagram






[edit] Procedures
A Karnaugh map may contain any number of boolean variables, but is most often used when there are fewer than six variables. Each variable contributes two possibilities: the initial value, and its inverse; it therefore organizes all possibilities of the system. The variables are arranged in Gray code in which only one possibility of one variable changes between two adjacent grid boxes.
Once the variables have been defined, the output possibilities are transcribed according to the grid location provided by the variables. Thus for every possibility of a boolean input or variable the output possibility is defined.
When the Karnaugh map has been completed, to derive a minimized function the "1s" or desired outputs are grouped into the largest possible rectangular groups in which the number of grid boxes (output possibilities) in the groups must be equal to a power of 2. For example, the groups may be 4 boxes in a line, 2 boxes high by 4 boxes long, 2 boxes by 2 boxes, and so on. "Don't care(s)" possibilities (generally represented by a "X") are grouped only if the group created is larger than the group with "Don't care" is excluded. The boxes can be used more than once only if it generates the least number of groups. All "1s" or desired output possibilities must be contained within a grouping.
The groups generated are then converted to a boolean expression by: locating and transcribing the variable possibility attributed to the box, and by the axiom laws of boolean algebra—in which if the (initial) variable possibility and its inverse are contained within the same group the variable term is removed. Each group provides a "product" to create a "sum-of-products" in the boolean expression.
To determine the inverse of the Karnaugh map, the "0s" are grouped instead of the "1s". The two expressions are non-complementary.

[edit] Relationships
Each square in a Karnaugh map corresponds to a minterm (and maxterm). The picture to the right shows the location of each minterm on the map. A Venn diagram of four sets—labeled A, B, C, and D—is shown to the right that corresponds to the 4-variable K-map of minterms just above it:

Variable A of the K-map corresponds set A in the Venn diagram; etc.
Minterm m0 of the K-map corresponds to area 0 in the Venn diagram; etc.
Minterm m9 is ABCD (or 1001) in the K-map corresponds only to where sets A & D intersect in the Venn diagram.

Thus, a specific minterm identifies a unique intersection of all four sets. The Venn diagram can include an infinite number of sets and still correspond to the respective Karnaugh maps. With increasing number of sets and variables, both Venn diagram and Karnaugh map increase in complexity to draw and manage.

[edit] Toroidally connected
The grid is toroidally connected, so the rectangular groups can wrap around edges. For example m9 can be grouped with m1; just as m0, m8, m2, and m10 can be combined into a four-by-four group.

[edit] Size of map
The size of the Karnaugh map with n Boolean variables is determined by 2n. The size of the group within a Karnaugh map with n Boolean variables and k number of terms in the resulting Boolean expression is determined by 2nk. Common sized maps are of 2 variables which is a 2×2 map, 3 variables which is a 2×4 map, and 4 variables which is a 4×4 map.








2-variable k-map









3-variable k-map









4-variable k-map






[edit] Example
Karnaugh maps are used to facilitate the simplification of Boolean algebra functions. The following is an unsimplified Boolean Algebra function with Boolean variables A, B, C, D, and their inverses. They can be represented in two different functions:

f(A,B,C,D) = ∑(6,8,9,10,11,12,13,14) Note: The values inside ∑ are the minterms to map (i.e. which rows have output 1 in the truth table).



[edit] Truth table
Using the defined minterms, the truth table can be created:


#
A
B
C
D
f(A,B,C,D)


0
0
0
0
0
0


1
0
0
0
1
0


2
0
0
1
0
0


3
0
0
1
1
0


4
0
1
0
0
0


5
0
1
0
1
0


6
0
1
1
0
1


7
0
1
1
1
0


8
1
0
0
0
1


9
1
0
0
1
1


10
1
0
1
0
1


11
1
0
1
1
1


12
1
1
0
0
1


13
1
1
0
1
1


14
1
1
1
0
1


15
1
1
1
1
0



[edit] Karnaugh map




K-map showing minterms and boxes covering the desired minterms. The brown region is an overlapping of the red (square) and green regions.


The input variables can be combined in 16 different ways, so the Karnaugh map has 16 positions, and therefore is arranged in a 4 × 4 grid.
The binary digits in the map represent the function's output for any given combination of inputs. So 0 is written in the upper leftmost corner of the map because ƒ = 0 when A = 0, B = 0, C = 0, D = 0. Similarly we mark the bottom right corner as 1 because A = 1, B = 0, C = 1, D = 0 gives ƒ = 1. Note that the values are ordered in a Gray code, so that precisely one variable changes between any pair of adjacent cells.
After the Karnaugh map has been constructed the next task is to find the minimal terms to use in the final expression. These terms are found by encircling groups of 1s in the map. The groups must be rectangular and must have an area that is a power of two (i.e. 1, 2, 4, 8…). The rectangles should be as large as possible without containing any 0s. The optimal groupings in this map are marked by the green, red and blue lines. Note that groups may overlap. In this example, the red and green groups overlap. The red group is a 2 × 2 square, the green group is a 4 × 1 rectangle, and the overlap area is indicated in brown.
The grid is toroidally connected, which means that the rectangular groups can wrap around edges, so  is a valid term, although not part of the minimal set—this covers Minterms 8, 10, 12, and 14.
Perhaps the hardest-to-visualize wrap-around term is  which covers the four corners—this covers minterms 0, 2, 8, 10.

[edit] Solution
Once the Karnaugh Map has been constructed and the groups derived, the solution can be found by eliminating extra variables within groups using the axiom laws of boolean algebra. It can be implied that rather than eliminating the variables that change within a grouping, the minimal function can be derived by noting which variables stay the same.
For the Red grouping:

The variable A maintains the same state (1) in the whole encircling, therefore it should be included in the term for the red encircling.
Variable B does not maintain the same state (it shifts from 1 to 0), and should therefore be excluded.
C does not change: it is always 0.
D changes.

Thus the first term in the Boolean sum-of-products expression is 
For the Green grouping we see that A and B maintain the same state, but C and D both change. B is 0 and has to be negated before it can be included. Thus the second term is 
In the same way, the Blue grouping gives the term 
The solutions of each grouping are combined into: 

[edit] Inverse
The inverse of a function is solved in the same way by grouping the 0s instead.
The three terms to cover the inverse are all shown with grey boxes with different colored borders:

brown—
gold—
blue—BCD

This yields the inverse:



Through the use of De Morgan's laws, the product of sums can be determined:





[edit] Don't cares




The minterm 15 is dropped and replaced as a don't care, this removes the green term completely but restricts the blue inverse term


Karnaugh maps also allow easy minimizations of functions whose truth tables include "don't care" conditions (that is, sets of inputs for which the designer doesn't care what the output is) because "don't care" conditions can be included in a ring to make it larger. They are usually indicated on the map with a dash or X.
The example to the right is the same above example but with minterm 15 dropped and replaced as a don't care. This allows the red term to expand all the way down and, thus, removes the green term completely.
This yields the new minimum equation:



Note that the first term is just A not . In this case, the don't care has dropped a term (the green); simplified another (the red); and removed the race hazard (the yellow as shown in a following section).
Also, since the inverse case no longer has to cover minterm 15, minterm 7 can be covered with  rather than  with similar gains.

[edit] Race hazards




Above k-map with the  term added to avoid race hazards


Karnaugh maps are useful for detecting and eliminating race hazards. They are very easy to spot using a Karnaugh map, because a race condition may exist when moving between any pair of adjacent, but disjointed, regions circled on the map.

In the above example, a potential race condition exists when C is 1 and D is 0, A is 1, and B changes from 1 to 0 (moving from the blue state to the green state). For this case, the output is defined to remain unchanged at 1, but because this transition is not covered by a specific term in the equation, a potential for a glitch (a momentary transition of the output to 0) exists.
There is a second glitch in the same example that is more difficult to spot: when D is 0 and A and B are both 1, with C changing from 1 to 0 (moving from the blue state to the red state). In this case the glitch wraps around from the top of the map to the bottom.

Whether these glitches do occur depends on the physical nature of the implementation, and whether we need to worry about it depends on the application.
In this case, an additional term of  would eliminate the potential race hazard, bridging between the green and blue output states or blue and red output states: this is shown as the yellow region.
The term is redundant in terms of the static logic of the system, but such redundant, or consensus terms, are often needed to assure race-free dynamic performance.
Similarly, an additional term of  must be added to the inverse to eliminate another potential race hazard. Applying De Morgan's laws creates another product of sums expression for F, but with a new factor of .

[edit] Examples of 2-variable maps
The following are all the possible 2-variable, 2 × 2 Karnaugh maps. Listed with each is the minterms as a function of ∑() and the race hazard free (see previous section) minimum equation.








∑(0); K = 0









∑(1); K = A′B′









∑(2); K = AB′









∑(3); K = A′B











∑(4); K = AB









∑(1,2); K = B′









∑(1,3); K = A′









∑(1,4); K = A′B′ + AB











∑(2,3); K = AB′ + A′B









∑(2,4); K = A









∑(3,4); K = B









∑(1,2,3); K = A′ + B′











∑(1,2,4); K = A + B′









∑(1,3,4); K = A′ + B









∑(2,3,4); K = A + B









∑(1,2,3,4); K = 1






[edit] See also

Circuit minimization
Espresso heuristic logic minimizer
List of boolean algebra topics
Quine-McCluskey algorithm
Venn diagram


[edit] References





This article does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (September 2008)



[edit] Further reading

Karnaugh, Maurice (November 1953). "The Map Method for Synthesis of Combinational Logic Circuits". Transactions of American Institute of Electrical Engineers part I 72 (9): 593–599. 
Katz, Randy (1998) [1994]. Contemporary Logic Design. The Benjamin/Cummings. pp. pp. 70–85. doi:10.1016/0026-2692(95)90052-7. ISBN 0-8053-2703-7. 
Vingron, Dr. Shimon Peter (2004) [2004]. "Karnaugh Maps". Switching Theory: Insight Through Predicate Logic. Berlin, Heidelberg, New York: Springer-Verlag. pp. pp. 57–76. ISBN 3-540-40343-4. 
Wickes, William W.. Logic Design with Integrated Circuits. New York: John Wiley & Sons. pp. pp. 36–49. Library of Congress Catalog Number: 68-21185.  "a refinement of the Venn diagram in that circles are replaced by squares and arranged in a form of matrix. The Veitch diagram labels the squares with the minterms. Karnaugh assigned 1s and 0s to the squares and their labels and deduced the numbering scheme in common use" 


[edit] External links



Wikimedia Commons has media related to: Karnaugh maps 



Detect Overlapping Rectangles, by Herbert Glarner.
Using Karnaugh maps in practical applications, Circuit design project to control traffic lights.
Karnaugh Map Example
Minimization of Boolean Functions


[edit] Software
Software applications are available to assist with Karnaugh mapping:

Boolean Function Simplification Software, freeware application for the Palm OS.
GKMap, free software application at SourceForge.net.
GPA141, Java applet for solving 5-variable Karnaugh maps available only in French.
Karnaugh Map Minimizer, free software application at SourceForge.net.
Karnaugh map minimization software, freeware application available in English, Czech, and German.
Karma, Java applet, Java binary application, C binary application from Nangate UFRGS Research Lab.
Karnaugh Map Explorer 1.0, JavaScript application.
Karno freeware application, published 1999.




Retrieved from "http://en.wikipedia.org/wiki/Karnaugh_map"
Categories: Boolean algebra | Logic in computer science | Diagrams | Electronics optimizationHidden categories: Articles lacking sources from September 2008 | All articles lacking sources 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Česky
Deutsch
Eesti
Español
Français
Galego
Italiano
עברית
Magyar
Nederlands
日本語
Polski
Português
Română
Русский
Slovenčina
Српски / Srpski
Suomi
Svenska
Tiếng Việt
中文









 This page was last modified on 23 March 2009, at 20:57.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
