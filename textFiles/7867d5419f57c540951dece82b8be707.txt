













Permutation - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Permutation";
		var wgTitle = "Permutation";
		var wgAction = "view";
		var wgArticleId = "44027";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281290319;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-java .de1, .source-java .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-java  {}
.source-java .head {}
.source-java .foot {}
.source-java .imp {font-weight: bold; color: red;}
.source-java .ln-xtra {color: #cc0; background-color: #ffc;}
.source-java li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-java li.li2 {font-weight: bold;}
.source-java .kw1 {color: #b1b100;}
.source-java .kw2 {color: #000000; font-weight: bold;}
.source-java .kw3 {color: #aaaadd; font-weight: bold;}
.source-java .kw4 {color: #993333;}
.source-java .co1 {color: #808080; font-style: italic;}
.source-java .co2 {color: #a1a100;}
.source-java .coMULTI {color: #808080; font-style: italic;}
.source-java .es0 {color: #000099; font-weight: bold;}
.source-java .br0 {color: #66cc66;}
.source-java .st0 {color: #ff0000;}
.source-java .nu0 {color: #cc66cc;}
.source-java .me1 {color: #006600;}
.source-java .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-actionscript {line-height: normal;}
.source-actionscript li, .source-actionscript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for actionscript
 * CSS class: source-actionscript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-actionscript .de1, .source-actionscript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-actionscript  {}
.source-actionscript .head {}
.source-actionscript .foot {}
.source-actionscript .imp {font-weight: bold; color: red;}
.source-actionscript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-actionscript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-actionscript li.li2 {font-weight: bold;}
.source-actionscript .kw1 {color: #b1b100;}
.source-actionscript .kw2 {color: #000000; font-weight: bold;}
.source-actionscript .kw3 {color: #0066CC;}
.source-actionscript .co1 {color: #808080; font-style: italic;}
.source-actionscript .co2 {color: #808080; font-style: italic;}
.source-actionscript .coMULTI {color: #808080; font-style: italic;}
.source-actionscript .es0 {color: #000099; font-weight: bold;}
.source-actionscript .br0 {color: #66cc66;}
.source-actionscript .st0 {color: #ff0000;}
.source-actionscript .nu0 {color: #cc66cc;}
.source-actionscript .me1 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Permutation

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other uses, see Permutation (disambiguation).
In several fields of mathematics the term permutation is used with different but closely related meanings. They all relate to the notion of mapping the elements of a set to other elements of the same set, i.e., exchanging (or "permuting") elements of a set.




Contents


1 Definitions

1.1 In combinatorics
1.2 In group theory


2 Counting permutations
3 Permutations in group theory

3.1 Notation


4 Product and inverse of permutations
5 Special permutations
6 Properties of permutations

6.1 Ascents, descents and runs
6.2 Inversions


7 Permutations in computing
8 Numbering permutations

8.1 Algorithms to generate permutations

8.1.1 Unordered generation
8.1.2 Lexicographical order generation




9 Software and hardware implementations

9.1 Calculator functions
9.2 Spreadsheet functions


10 See also
11 Notes
12 References
13 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Definitions
The general concept of permutation can be defined more formally in different contexts:

[edit] In combinatorics
In combinatorics, a permutation is usually understood to be a sequence containing each element from a finite set once, and only once. The concept of sequence is distinct from that of a set, in that the elements of a sequence appear in some order: the sequence has a first element (unless it is empty), a second element (unless its length is less than 2), and so on. In contrast, the elements in a set have no order; {1, 2, 3} and {3, 2, 1} are different ways to denote the same set.
However, there is also a traditional more general meaning of the term "permutation" used in combinatorics. In this more general sense, permutations are those sequences in which, as before, each element occurs at most once, but not all elements of the given set need to be used.
For a related notion in which the ordering of the selected elements form a set, for which the ordering is irrelevant, see Combination.

[edit] In group theory
In group theory and related areas, the elements of a permutation need not be arranged in a linear order, or indeed in any order at all. Under this refined definition, a permutation is a bijection from a finite set onto itself. This allows for the definition of groups of permutations; see Permutation group.

[edit] Counting permutations
In this section only, the traditional definition from combinatorics is used: a permutation is an ordered sequence of elements selected from a given finite set, without repetitions, and not necessarily using all elements of the given set. For example, given the set of letters {C, E, G, I, N, R}, some permutations are ICE, RING, RICE, NICER, REIGN and CRINGE, but also RNCGI – the sequence need not spell out an existing word. ENGINE, on the other hand, is not a permutation, because it uses the elements E and N twice.
If n  denotes the size of the set – the number of elements available for selection – and only permutations are considered that use all n  elements, then the total number of possible permutations is equal to n!, where "!" is the factorial operator. This can be shown informally as follows. In constructing a permutation, there are n  possible choices for the first element of the sequence. Once it has been chosen, n − 1 elements are left, so for the second element there are only n − 1 possible choices. For the first two elements together, that gives us

n × (n − 1) possible permutations.

For selecting the third element, there are then n − 2 elements left, giving, for the first three elements together,

n × (n − 1) × (n − 2) possible permutations.

Continuing in this way until there are only 2 elements left, there are 2 choices, giving for the number of possible permutations consisting of n − 1 elements:

n × (n − 1) × (n − 2) × ... × 2.

The last choice is now forced, as there is exactly one element left. In a formula, this is the number

n × (n − 1) × (n − 2) × ... × 2 × 1

(which is the same as before because the factor 1 does not make a difference). This number is, by definition, the same as n!.
In general the number of permutations is denoted by  ,, or sometimes , where:

n  is the number of elements available for selection, and
r  is the number of elements to be selected (0 ≤ r ≤ n).

For the case where r = n  it has just been shown that P(n, r) = n!. The general case is given by the formula:



As before, this can be shown informally by considering the construction of an arbitrary permutation, but this time stopping when the length r  has been reached. The construction proceeds initially as above, but stops at length r.  The number of possible permutations that has then been reached is:

P(n, r) = n × (n − 1) × (n − 2) × ... × (n − r + 1).

So:

n! = n × (n − 1) × (n − 2) × ... × 2 × 1
     = n × (n − 1) × (n − 2) × ... × (n − r + 1) × (n − r) × ... × 2 × 1
     = P(n, r) × (n − r) × ... × 2 × 1
     = P(n, r) × (n − r)!.

But if n! = P(n, r) × (n − r)!, then P(n, r) = n! / (n − r)!.
For example, if there is a total of 10 elements and we are selecting a sequence of three elements from this set, then the first selection is one from 10 elements, the next one from the remaining 9, and finally from the remaining 8, giving 10 × 9 × 8 = 720. In this case, n = 10 and r = 3. Using the formula to calculate P(10,3),



In the special case where n = r  the formula above simplifies to:



The reason why 0! = 1 is that 0! is an empty product, which always equals 1.
In the example given in the header of this article, with 6 integers {1..6}, this would be: P(6,6) = 6! / (6−6)! = (1×2×3×4×5×6) / 0! = 720 / 1 = 720.
Since it may be impractical to calculate n! if the value of n  is very large, a more efficient algorithm is to calculate:

P(n, r) = n × (n − 1) × (n − 2) × ... × (n − r + 1).

Other, older notations include nPr, Pn,r, or nPr. A common modern notation is (n)r which is called a falling factorial. However, the same notation is used for the rising factorial (also called Pochhammer symbol)

n(n + 1)(n + 2)⋯(n + r − 1)r.

With the rising factorial notation, the number of permutations is (n − r + 1)r.

[edit] Permutations in group theory
As explained in a previous section, in group theory the term permutation (of a set) is reserved for a bijective map (bijection) from a finite set onto itself. The earlier example, of making permutations out of numbers 1 to 10, would be translated as a map from the set {1, …, 10} to itself.
More abstractly, a permutation can be considered a filtration (an chain of subsets): the ordering {0,1,2} corresponds to the filtration . From the point of view of the field with one element, an ordering on a set corresponds to a maximal flag (a filtration on a vector space), considering a set to be a vector space over the field with one element; this connects properties of the symmetric group and other Coxeter groups with properties of algebraic groups.

[edit] Notation
There are two main notations for such permutations. In relation notation, one can just arrange the "natural" ordering of the elements being permuted on a row, and the new ordering on another row (first example below):



stands for the permutation s of the set {1,2,3,4,5} defined by s(1)=2, s(2)=5, s(3)=4, s(4)=3, s(5)=1.
If we have a finite set E of n elements, it is by definition in bijection with the set {1,…,n}, where this bijection f corresponds just to numbering the elements. Once they are numbered, we can identify the permutations of the set E with permutations of the set {1,…,n}. (In more mathematical terms, the function that maps a permutation s of E to the permutation f o s o f−1 of {1,…,n} is a morphism from the symmetric group of E into that of {1,…,n}, see below.)
Alternatively, we can write the permutation in terms of how the elements change when the permutation is successively applied. This is referred to as the permutation's decomposition in a product of disjoint cycles using cycle notation (last three examples above). It works as follows: starting from one element x, we write the sequence (x s(x) s2(x) …) until we get back the starting element (at which point we close the parenthesis without writing the starting element for a second time). This is called the cycle associated to x's orbit following s. Then we take an element we did not write yet and do the same thing, until we have considered all elements. In the above example, we get: s = (1 2 5) (3 4).
Each cycle (x1 x2 … xL) stands for the permutation that maps xi on xi+1 (i=1…L−1) and xL on x1, and leaves all other elements invariant. L is called the length of the cycle. Since these cycles have by construction disjoint supports (i.e. they act non-trivially on disjoint subsets of E), they do commute (for example, (1 2 5) (3 4) = (3 4)(1 2 5)). The order of the cycles in the (composition) product does not matter, while the order of the elements in each cycles does matter (up to cyclic change; see also cycles and fixed points). The canonical way of representing such cycles is to start by the smallest element of each cycle.
A 1-cycle (cycle of length 1) simply fixes the element contained in it, so it is often not written explicitly. Some authors define a cycle to exclude cycles of length 1.
Cycles of length two are called transpositions; such permutations merely exchange the place of two elements. (Conversely, a matrix transposition is itself an important example of a permutation.)

[edit] Product and inverse of permutations
Main article: Symmetric group
One can define the product of two permutations as follows. If we have two permutations, P and Q, the action of first performing P and then Q will be the same as performing some single permutation R. The product of P and Q is then defined to be that permutation R. Viewing permutations as bijections, the product of two permutations is thus the same as their composition as functions. There is no universally agreed notation for the product operation between permutations, and depending on the author a formula like PQ may mean either P ∘ Q or Q ∘ P. Since function composition is associative, so is the product operation on permutations: (P ∘ Q) ∘ R = P ∘ (Q ∘ R).
Likewise, since bijections have inverses, so do permutations, and both P ∘ P−1 and P−1 ∘ P are the "identity permutation" (see below) that leaves all positions unchanged. Thus, it can be seen that permutations form a group.
As for any group, there is a group isomorphism on permutation groups, obtained by assigning to each permutation its inverse, and this isomorphism is an involution, giving a dual view on any abstract result. Since (P ∘ Q)−1 = Q−1 ∘ P−1, from an abstract point of view it is immaterial whether PQ represents "P before Q" or "P after Q". For concrete permutations, the distinction is, of course, quite material.

[edit] Special permutations
If we think of a permutation that "changes" the position of the first element to the first element, the second to the second, and so on, we really have not changed the positions of the elements at all. Because of its action, we describe it as the identity permutation because it acts as an identity function. Conversely, a permutation which changes the position of all elements (no element is mapped to itself) is called a derangement.
If one has some permutation, called P, one may describe a permutation, written P−1, which undoes the action of applying P. In essence, performing P then P−1 is equivalent to performing the identity permutation. One always has such a permutation since a permutation is a bijective map. Such a permutation is called the inverse permutation. It is computed by exchanging each number and the number of the place which it occupies.
An even permutation is a permutation which can be expressed as the product of an even number of transpositions, and the identity permutation is an even permutation as it equals (1 2)(1 2). An odd permutation is a permutation which can be expressed as the product of an odd number of transpositions. It can be shown that every permutation is either odd or even and can't be both.
One theorem regarding the inverse permutation is the effect of a conjugation of a permutation by a permutation in a permutation group. If we have a permutation Q=(i1 i2 … in) and a permutation P, then PQP−1 = (P(i1) P(i2) … P(in)).
We can also represent a permutation in matrix form; the resulting matrix is known as a permutation matrix.

[edit] Properties of permutations

[edit] Ascents, descents and runs
An ascent in a permutation is any position i where the following value is bigger than the current one. That is, if  is a permutation, then any position i with pi < pi + 1 is called an ascent.
For example, the permutation 3452167 has the ascends 1,2,5,6.
Similarly, a descent is a position i with pi > pi + 1.
The number of permutations with a given number of ascents or descents is equal to the Eulerian number A(n,k), where n is the number of elements of the permutation and k is the given number of ascents or descents.[1]
An ascending run of a permutation is a subsequence of the permutation in which the values raise from position to position.
For example, the permutation 3452167 has the ascending runs 345,2,167.
If a permutation has k − 1 descents, then it must be the union of k ascending runs. Hence, the number of permutations with k ascending runs is the same as the number of permutations with k − 1 descents.[2]

[edit] Inversions
An inversion is a pair of entries of a permutation which appear in ascending order, even though the entry that appears first is greater than the entry that appears second.[3]
For example, the permutation 23154 has three inversions: (2,1),(3,1),(5,4).
The number of permutations with k inversions is expressed by Mahonian numbers[4]

[edit] Permutations in computing
Some of the older textbooks look at permutations as assignments, as mentioned above. In computer science terms, these are assignment operations, with values

1, 2, …, n

assigned to variables

x1, x2, …, xn.

Each value should be assigned only once.
The assignment/substitution difference is then illustrative of one way in which functional programming and imperative programming differ — pure functional programming has no assignment mechanism. The mathematics convention is nowadays that permutations are just functions and the operation on them is function composition; functional programmers follow this. In the assignment language a substitution is an instruction to switch round the values assigned, simultaneously; a well-known problem.

[edit] Numbering permutations
Factoradic numbers can be used to assign unique numbers to permutations, such that given a factoradic of k one can quickly find the corresponding permutation.

[edit] Algorithms to generate permutations

[edit] Unordered generation
For every number k, with 0 ≤ k < n!, the following algorithm generates a unique permutation of the initial sequence sj, j=1…n:

 function permutation(k, s) {
     for j = 2 to length(s) {
        swap s[(k mod j) + 1] with s[j]; // note that our array is indexed starting at 1
        k := k / j;        // integer division cuts off the remainder
     }
     return s;
 }

The formula k mod j returns the least significant digit of k in the factorial base and k := k / j removes that digit, shifting the remaining digits to the right. The first line of the for loop, at each step, swaps the jth element with one of the elements that are currently before it. If we consider the swaps in reverse order, we see that it implements a backwards Selection sort, first putting the nth element in the correct place, then the n-1st, etc. Since there is exactly one way to selection sort a permutation, this algorithm generates a unique permutation for each choice of k.
The Fisher-Yates shuffle is based on the same principle as this algorithm.

[edit] Lexicographical order generation
For every number k, with 0 ≤ k < n!, the following algorithm generates the corresponding lexicographical permutation of the initial sequence sj, j= 1…n:

 function permutation(k, s) {
     var int n:= length(s); factorial:= 1;
     for j= 2 to n- 1 {             // compute (n- 1)!
         factorial:= factorial* j;
     }
     for j= 1 to n- 1 {
         tempj:= (k/ factorial) mod (n+ 1- j);
         temps:= s[j+ tempj]
         for i= j+ tempj to j+ 1 step -1 {
             s[i]:= s[i- 1];      // shift the chain right
         }
         s[j]:= temps;
         factorial:= factorial/ (n- j);
     }
     return s;
 }

Notation

k / j denotes integer division of k by j, i.e. the integral quotient without any remainder, and
k mod j is the remainder following integer division of k by j.
s[n] denotes the nth element of sequence s.


A Java implementation:


static public<E> E[] permutation(E[] s, int num) {
       // s is the input elements array and num
       // is the number which represents the permutation
 
	int factorial = 1;
	for(int i = 2; i < s.length; i++)
		factorial *= i; // calculates the factorial of (s.length - 1)
 
	if (num/s.length >= factorial) // Optional. if the number is not in the
                                     // range of [0, s.length! - 1] 
		return null;
 
	for(int i = 0; i < s.length - 1; i++){//go over the array
 
               // calculates the next cell from the cells left
               // (the cells in the range [i, s.length - 1])
		int tempi = (num / factorial) % (s.length - i);
 
               // Temporarily saves the value of the cell needed 
               // to add to the permutation this time 
		E temp = s[i + tempi];
 
               // shift all elements to "cover" the "missing" cell
		for(int j = i + tempi; j > i; j--)
			s[j] = s[j-1];
 
		s[i] = temp; // put the chosen cell in the correct spot
 
		factorial /= (s.length - (i + 1)); // updates the factorial
 
	}
 
	return s;
}


An Actionscript implementation:


function permutation(n:Number, k:Number):Array {
	var r:Array = [], j:Number = 1, i:Number, p:Number;
	r[n-1] = 0;
	while(j++<n){
		p = i = n-j;
		r[p] = Math.floor((k/=(j-1))%j);
		while(i++<n)
			if(r[i] >= r[p])
				++r[i];
	}
	return r;
}


[edit] Software and hardware implementations

[edit] Calculator functions
Most calculators have a built-in function for calculating the number of permutations, called nPr or PERM on many. The permutations function is often only available through several layers of menus; how to access the function is usually indicated in the documentation for calculators that support it.

[edit] Spreadsheet functions
Most spreadsheet software also provides a built-in function for calculating the number of permutations, called PERMUT in many popular spreadsheets. Apple's Numbers '08 software notably did not include such a function[5] but this was rectified in Apple's Numbers '09 software package.

[edit] See also


Alternating permutation
Binomial coefficient
Combination
Combinatorics
Convolution
Cyclic order
Cyclic permutation
Even and odd permutations
Factoradic
Superpattern
Josephus permutation
List of permutation topics
Levi-Civita symbol
Permutation group
Probability
Random permutation
Rencontres numbers
Sorting network
Substitution cipher
Symmetric group
Twelvefold way
Weak order of permutations



[edit] Notes


^ Combinatorics of Permutations, ISBN 1584884347, M. Bona, 2004, p. 3
^ Combinatorics of Permutations, ISBN 1584884347, M. Bona, 2004, p. 4f
^ Combinatorics of Permutations, ISBN 1584884347, M. Bona, 2004, p. 43
^ Combinatorics of Permutations, ISBN 1584884347, M. Bona, 2004, p. 43ff
^ Curmi, Jamie (2009-01-10). "Summary of Functions in Excel and Numbers" (PDF). http://curmi.com/blog/wp-content/uploads/2009/01/functions-in-excel-and-numbers-09.pdf. Retrieved on 2009-01-26. 



[edit] References

Miklos Bona. "Combinatorics of Permutations", Chapman Hall-CRC, 2004. ISBN 1-58488-434-7.
Donald Knuth. The Art of Computer Programming, Volume 4: Generating All Tuples and Permutations, Fascicle 2, first printing. Addison-Wesley, 2005. ISBN 0-201-85393-0.
Donald Knuth. The Art of Computer Programming, Volume 3: Sorting and Searching, Second Edition. Addison-Wesley, 1998. ISBN 0-201-89685-0. Section 5.1: Combinatorial Properties of Permutations, pp.11–72.


[edit] External links

Many Common types of permutation and combination math problems, with detailed solutions
Permutations and Puzzles on Graphs
Web-based calculator of permutations and combinations
Actionscript Permutation Generator Explained




Retrieved from "http://en.wikipedia.org/wiki/Permutation"
Categories: Abstract algebra | Combinatorics | Factorial and binomial topics | Permutations 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Български
Česky
Dansk
Deutsch
Español
Esperanto
Euskara
Français
한국어
Bahasa Indonesia
Italiano
עברית
Lietuvių
Magyar
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Sicilianu
Simple English
Slovenčina
Српски / Srpski
Shqip
Suomi
Svenska
தமிழ்
ไทย
Tiếng Việt
Türkçe
Українська
اردو
中文









 This page was last modified on 2 April 2009, at 13:56.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
