













Esoteric programming language - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Esoteric_programming_language";
		var wgTitle = "Esoteric programming language";
		var wgAction = "view";
		var wgArticleId = "53398";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281396305;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Esoteric programming language

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article includes a list of references or external links, but its sources remain unclear because it lacks inline citations. Please improve this article by introducing more precise citations where appropriate. (February 2008)


An esoteric programming language (sometimes shortened to esolang) is a programming language designed as a test of the boundaries of computer programming language design, as a proof of concept, or as a joke. There is usually no intention of the language being adopted for real-world programming. Such languages are often popular among hackers and hobbyists. This use of esoteric is meant to distinguish these languages from more popular programming languages.
Usability is rarely a high priority for such languages; often quite the opposite. The usual aim is to remove or replace conventional language features while still maintaining a language that is Turing-complete, or even one for which the computational class is unknown.




Contents


1 History
2 Esoteric programming terms

2.1 Turing tarpit
2.2 Language paradigm
2.3 Funges
2.4 Nondeterministic language
2.5 Despotic language
2.6 Stateful encoding


3 Internet community
4 Examples
5 References
6 External links

6.1 Lists
6.2 Authors
6.3 Funges







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The earliest, and still the canonical example of an esoteric language was INTERCAL, designed in 1972 by James M. Lyon and Don Woods, with the stated intention of being unlike any other programming language the authors were familiar with. It parodies elements of established programming languages of the day, such as Fortran, COBOL, and assembly language.
Twenty years later, Wouter van Oortmerssen created FALSE, a small stack-oriented programming language, with syntax designed to make the code inherently obfuscated, confusing, and unreadable. It is also noteworthy for having a compiler of only 1024 bytes. This inspired Urban Müller to create an even smaller language, the now-famous brainfuck, which consists of only eight recognized characters. Along with Chris Pressey's Befunge (like FALSE, but with a two-dimensional instruction pointer), brainfuck is now one of the most well-supported esoteric programming languages. These are canonical examples of minimal Turing tarpits and needlessly obfuscated language features; brainfuck's minimality borders on elegant and pure language design; in fact it is related to the P′′ family of Turing machines.

[edit] Esoteric programming terms

[edit] Turing tarpit
A Turing tarpit is a Turing-complete programming language whose number of commands, operators, or equivalent objects is very small. These include brainfuck (8 commands, all with 0 operands), OISC (1 command, 3 operands), and Thue (1 command, 2 operands).

[edit] Language paradigm
The paradigm of a language can fall into a number of categories, and these categories are used to get a general understanding of the way that a specific language operates. These include imperative/despotic languages such as brainfuck, in which instructions describe how to change data; functional languages such as Unlambda, in which data and code are more or less interchangeable and execution is the repeated application of functions to the results of other functions; and rewriting languages such as Thue, in which transformation functions are applied to an initial state.

[edit] Funges
A funge is an esoteric programming language which models its programs as metric spaces with coordinate systems (often, but not necessarily, Cartesian) and which execute instructions located at points in their program space by moving an instruction pointer (a position vector which indicates the currently executing instruction) through that space. Different instructions determine the direction in which the instruction pointer moves, and consequently, the sequence of instructions that is executed.
The current official standard for the behaviour of these programming languages is the Funge-98 Specification. This specification is a generalisation of the semantics of the Befunge programming language, which has a two-dimensional toroidal topology. Languages which adhere closely to this standard, such as Unefunge (one-dimensional) and Trefunge (three-dimensional), are sometimes called funges, while more "distant relatives" which differ in significant respects, such as Wierd, are referred to as fungeoids.

[edit] Nondeterministic language
For a deterministic language, if one is given the current state of a program, the next state can always be predicted. This is not true for a nondeterministic language. Most languages are deterministic, because nondeterministic languages such as Java2K often give unreliable results, and getting even trivial programs to have a reliable output is often a monumental task. Nondeterministic languages have only a certain probability (less than one) of behaving the way that they are expected to.
Nondeterministic languages are useful for exploring large search spaces, such as grammars, where exhaustive search is impractical. Random text generators such as the Dada Engine and rmutt are examples of this kind of nondeterminstic language.
More esoterically, nondeterministic algorithms have been employed in the theoretical investigation of hypercomputation.

[edit] Despotic language
A despotic language is a Turing tarpit with a stateful encoding, namely a language in which commands are used to select from a finite range of operations and apply these operations to the current state of the program. Examples include reMorse, Whirl and, arguably, INTERCAL.

[edit] Stateful encoding
A system of encoding programs such that each substring of the encoding is an instruction to locate the next instruction in a list. An example based on reMorse or THRAT would be:

Select Next Operation in list
Perform Operation

With the list of operations either standard (as in reMorse or THRAT) or dynamic (as in reMorse4ever).

[edit] Internet community
There is a small but thriving community on the Internet of hobbyists who program in and design esoteric programming languages.
The esolang community is active sporadically, and topics of discussion range from debate as to whether a language is Turing-complete to how one would go about representing abstract and hard to visualise mathematical concepts in a programming environment. There is a mailing list, but it is nearly abandoned and most discussion happens on the wiki (see below) or on irc.
Turing completeness is a favorite topic of discussion, since it is not immediately obvious whether or not a language is Turing complete, and it often takes rather large intuitive leaps to come to a solution. New languages with new features are always being created, so proof of Turing completeness is always a challenge.
A related pursuit among programming language enthusiasts is the writing of obfuscated code.

[edit] Examples
Below are some characteristic examples of esoteric programming languages:

LOLCODE is designed to resemble the speech of lolcats. The following is the "hello world" example:


HAI   
CAN HAS STDIO?   
VISIBLE "HAI WORLD!"   
KTHXBYE 


Befunge and its ilk allow the instruction pointer to roam in multiple dimensions through the code. For example the following program displays "Hello World" by pushing the characters in reverse order onto the stack, then printing the characters in a loop which circulates clockwise through the instructions >, :, v, _, comma, and ^.


"dlroW olleH">:v
             ^,_@


Brainfuck is designed for extreme minimalism and leads to obfuscated code, with programs containing only 8 distinct characters. e.g. the following program outputs "Hello World":


++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.


Chef is designed to make programs look like cooking recipes. e.g. the following statement pushes an item onto a stack:


Put cinnamon into 2nd mixing bowl


FALSE is a stack-based language with single-character commands and variables. For example, to calculate 3 + 1 by evaluating (λ x → x + 1)(3): 3[1+]!
One instruction set computer is a machine language with only one operation. This is actually a class of languages because one can define such a language for any given operation.
Piet is a visual language whose programs are bitmaps that resemble abstract art.
Velato uses MIDI files as input, with the interval between successive notes determining each command.
Shakespeare is designed to make programs look like Shakespearean plays. e.g. the following statement declares a point in the program which can be reached via a GOTO-type statement: Act I: Hamlet's insults and flattery..
Whitespace only considers the layout of whitespace and ignores all non-whitespace characters.
AAAAAAAAAAAAAA!!!! consists entirely of the letter A, spaces, commas, and exclamation points.
INTERCAL, short for "Compiler Language With No Pronounceable Acronym".
Taxi Programming Language, a language that uses a pointer analogy of a taxi.


[edit] References


[edit] External links

C2 WikiWeb
Esolang wiki — A Wiki dedicated to esoteric programming languages.


[edit] Lists

List of esolangs on the esolang wiki
Obfuscated Programming Languages at the Open Directory Project
The Esoteric Programming Languages Webring
Cat's Eye Technologies: Esoteric topics in computer programming (archived version from the Wayback Machine)
The Turing tarpit
The retrocomputing museum
Weird programming languages


[edit] Authors

New Cat's Eye Technologies Site
DM's Esoteric Programming Languages — Esoteric programming languages by David Morgan-Mar.
Esoteric programming languages by Gerson Kurz.
bigzaphod.org — Esoteric programming languages by Sean Heber.
Cliffle's Esoterica — Esoteric programming languages by Cliff L. Biffle.
Wouter van Oortmerssen's web pages — Esoteric programming languages by Wouter van Oortmerssen.


[edit] Funges

http://www.imaginaryrobots.net/projects/funge/
http://quadium.net/funge/
http://www.rcfunge98.com/ - Official home of the Rc/Funge-98 interpreter
EsCo - Universal compiler for esoteric languages








v • d • e

Types of programming languages






Array · Aspect-oriented · Assembly · Class-based · Compiled · Concurrent · Curly bracket · Data-oriented · Data-structured · Dataflow · Declarative · Domain-specific · Dynamic · Esoteric · Event-driven · Extensible · Functional · High-level · Imperative · Interpreted · Logic · Low-level · Machine · Macro · Metaprogramming · Multi-paradigm · Non-English-based · Object-oriented · Off-side rule · Pipeline · Procedural · Prototype-based · Reflective · Rule-based · Scripting · Synchronous · Visual









Retrieved from "http://en.wikipedia.org/wiki/Esoteric_programming_language"
Categories: Esoteric programming languagesHidden categories: Articles lacking in-text citations 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
Français
한국어
Íslenska
Italiano
Nederlands
日本語
Polski
Português
Русский
Suomi
Українська









 This page was last modified on 2 April 2009, at 23:47.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
