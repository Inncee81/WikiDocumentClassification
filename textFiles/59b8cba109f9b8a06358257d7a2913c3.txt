













Big Design Up Front - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Big_Design_Up_Front";
		var wgTitle = "Big Design Up Front";
		var wgAction = "view";
		var wgArticleId = "3182285";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 284032203;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Big Design Up Front

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Big Design Up Front (BDUF) is a term for any software development approach, in which the program's design is to be completed and perfected before that program's implementation is started. It is often associated with the waterfall model of software development.
The argument between the proponents and critics of BDUF has somewhat degenerated into a "holy war", with most people believing that a compromise between BDUF and the more extreme variants of agile software development is the best solution to most software development problems.




Contents


1 Arguments for Big Design Up Front
2 Arguments against Big Design Up Front
3 See also
4 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Arguments for Big Design Up Front
Proponents of BDUF argue that time spent in planning is a worthwhile investment, and reference numerous studies which have concluded that less time and effort is spent fixing a bug in the early stages of a software products lifecycle than when that same bug is found and must be fixed later. That is, it is much easier to fix a requirements bug in the requirements phase than to fix that same bug in the implementation phase, as to fix a requirements bug in the implementation phase requires scrapping at least some implementation and design work which has already been completed.
Joel Spolsky, a popular online commentator on software development, has argued strongly in favor of Big Design Up Front:[1]

"Many times, thinking things out in advance saved us serious development headaches later on. ... [on making a particular specification change] ... Making this change in the spec took an hour or two. If we had made this change in code, it would have added weeks to the schedule. I can’t tell you how strongly I believe in Big Design Up Front, which the proponents of Extreme Programming consider anathema. I have consistently saved time and made better products by using BDUF and I’m proud to use it, no matter what the XP fanatics claim. They’re just wrong on this point and I can’t be any clearer than that."

However, some argue that what Joel calls Big Design Up Front doesn't resemble the BDUF criticized by advocates of XP and other agile software development methodologies.[2][3][clarification needed]

[edit] Arguments against Big Design Up Front
Critics (notably those from an agile software development background) argue that BDUF is poorly adaptable to changing requirements, that its proponents are dinosaurs clinging to an outdated and invalidated methodology, and that BDUF assumes that designers are able to foresee problem areas without extensive prototyping and at least some investment into implementation. Also in most projects there is a significant lack of comprehensive written (or even well known) requirements. So in BDUF a lot of assumptions are made that later proove to be false but are designed and possibly already coded.

[edit] See also

List of software development philosophies
Waterfall model
Agile software development


[edit] References

^ Joel Spolsky (2005-08-17). "The Project Aardvark Spec". Joel on Software. http://www.joelonsoftware.com/articles/AardvarkSpec.html. Retrieved on 2006-04-26. 
^ "A 20 page spec for a 3 month project is a great thing! But it's not BDUF, it's SDUF" Rich Rogers[1]
^ "Unfortunately, looking at his spec., it seems to bear little relation to the type of BDUF that XP and other agile programmers inveigh against." Curt Sampson[2]




Retrieved from "http://en.wikipedia.org/wiki/Big_Design_Up_Front"
Categories: Software development processHidden categories: All pages needing cleanup | Wikipedia articles needing clarification from February 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Nederlands









 This page was last modified on 15 April 2009, at 17:31 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
