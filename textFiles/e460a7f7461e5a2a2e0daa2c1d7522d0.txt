













Extensible Firmware Interface - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Extensible_Firmware_Interface";
		var wgTitle = "Extensible Firmware Interface";
		var wgAction = "view";
		var wgArticleId = "866065";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280085776;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Extensible Firmware Interface

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




Extensible Firmware Interface’s position in the software stack.


The Extensible Firmware Interface (EFI) is a specification that defines a software interface between an operating system and platform firmware. EFI is intended as a significantly improved replacement of the old legacy BIOS firmware interface historically used by all IBM PC-compatible personal computers.[1] The EFI specification was originally developed by Intel, and is now managed by the Unified EFI Forum and is officially known as Unified EFI (UEFI).




Contents


1 History
2 Contents

2.1 Services
2.2 Protocols
2.3 Device drivers
2.4 Boot manager
2.5 Disk support
2.6 The EFI shell
2.7 Extensions


3 Implementation and adoption

3.1 Intel Platform Innovation Framework for EFI
3.2 Platforms that use UEFI or the Framework
3.3 Operating systems
3.4 Virtualization Support


4 Graphic feature
5 Criticism
6 See also
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The original motivation for EFI came during early development of the first Intel-HP Itanium systems in the mid-1990s. PC BIOS limitations (16-bit processor mode, 1 MB addressable space, PC AT hardware dependencies, etc.) were seen as clearly unacceptable for the larger server platforms Itanium was targeting. The initial effort to address these concerns was initially called Intel Boot Initiative and was later renamed to EFI.[2]
EFI specification 1.02 was released by Intel on December 12, 2000. (Version 1.01 was the original issue; it had incorrect legal and trademark information and was quickly withdrawn.[3])
EFI specification 1.10 was released by Intel on December 1, 2002. It included the EFI driver model as well as several minor enhancements to 1.02.
In 2005, Intel contributed this specification to the UEFI Forum, who is now responsible for its development[4] and promotion. EFI was renamed to Unified EFI (UEFI) to reflect this; most documentation uses both terms interchangeably.
The UEFI Forum released version 2.1 of the UEFI specification on January 7, 2007; as of March 2007, it is the latest publicly available specification. It added and improved cryptography, network authentication, and the User Interface Architecture (Human Interface Infrastructure in UEFI).

[edit] Contents




Interaction between the EFI boot manager and EFI drivers


The interface defined by the EFI specification includes data tables that contain platform information, and boot and runtime services that are available to the OS loader and OS.
Some existing enhancements to PC BIOS, such as the Advanced Configuration and Power Interface (ACPI) and System Management BIOS (SMBIOS), are also present in EFI, as they do not rely on a 16-bit runtime interface.

[edit] Services
EFI defines boot services, which include text and graphical console support on various devices, bus, block and file services, and runtime services, such as date, time and NVRAM services.

[edit] Protocols
EFI defines protocol. A protocol is a set of software interfaces used for communication between two binary modules. All EFI drivers must provide services to others via protocols.

[edit] Device drivers
In addition to standard architecture-specific device drivers, the EFI specification provides for a processor-independent device driver environment, called EFI Byte Code or EBC. System firmware is required by the UEFI specification to carry an interpreter for any EBC images that reside in or are loaded into the environment. In that sense, EBC is similar to Open Firmware, the hardware-independent firmware used in PowerPC-based Apple Macintosh and Sun Microsystems SPARC computers, amongst others.
Some architecture-specific (non-EBC) EFI device driver types can have interfaces for use from the operating system. This allows the OS to rely on EFI for basic graphics and network support until OS specific drivers are loaded.

[edit] Boot manager
An EFI boot manager is also used to select and load the operating system, removing the need for a dedicated boot loader mechanism (the OS boot loader is an EFI application).

[edit] Disk support
In addition to the standard PC disk partition scheme, Master boot record (MBR), EFI adds support for a new partitioning scheme: GUID Partition Table (GPT). GPT does not suffer from many of the limitations of MBR, in particular limits on number and size of disk partitions (up to 4 partitions per disk, up to 2TB per partition). The EFI specification does not include a description for a file system; implementations of EFI typically support FAT32 as their file system.[5]

[edit] The EFI shell
The EFI community has created an open source shell environment;[6] rather than booting directly into a full OS, on some implementations, the user can boot to the EFI shell. The shell is an EFI application; it can reside directly within the platform ROM, or on a device for which the drivers are in ROM.
The shell can be used to execute other EFI applications, such as setup, OS install, diagnostic or configuration utilities, and system flash updates; it can also be used to play CDs or DVDs without having to boot to a complete operating system, provided that an EFI application with the appropriate features is written. Shell commands also make it possible to copy or move files and directories between supported file systems. Drivers can be loaded and unloaded, and a complete TCP/IP stack can also be used from within the shell.
The EFI shell supports scripting through .nsh files, a type of batch file.
Shell command names are often inherited from the DOS command line interpreter COMMAND.COM or the Unix shell. The shell can be viewed as a functional replacement for the DOS command line interface and the BIOS text user interface.
Currently the shell is mainly used for development purposes. Most of the EFI-enabled products don't include the shell binary.

[edit] Extensions
Extensions to EFI can be loaded from virtually any non-volatile storage device attached to the computer. For example, an original equipment manufacturer (OEM) can sell systems with an EFI partition on the hard drive, which would add additional functions to the standard EFI firmware stored on the motherboard’s ROM.

[edit] Implementation and adoption

[edit] Intel Platform Innovation Framework for EFI
The Intel Platform Innovation Framework for EFI (also known as “the Framework”) is a set of specifications developed by Intel in conjunction with EFI. While EFI specifies the OS-to-firmware interface, the Framework specifies the structure used to build the firmware beneath the OS-to-firmware interface.
In particular, the Framework includes all the steps needed to initialize the platform after power-on. These inner workings of firmware are not defined as part of the EFI specification, but some are part of the Platform Initialization Specification developed by UEFI. The Framework has been tested on Intel XScale, Intel Itanium and IA32 platforms.
Compatibility with x86 operating systems that require “legacy BIOS” interfaces to operate is handled through a compatibility support module (CSM). The CSM includes a 16-bit binary (CSM16) supplied by a BIOS vendor and a “thunk” layer to connect CSM16 to the Framework.
Intel developed a reference codebase for the Framework, codenamed “Tiano”. Tiano is a complete, legacy-free firmware implementation that includes support for EFI. Tiano does not include the 16-bit portion of the CSM, but provides the interfaces required to add one supplied by a BIOS vendor. Intel does not make the complete Tiano implementation available to end-users.
A portion of the Tiano codebase (“the Foundation”) has been released as open source to the TianoCore project as the EFI Developer Kit (EDK). This implementation covers EFI and some hardware initialization code, but does not constitute feature-complete firmware by itself. Several licenses have been used for this code, including the BSD license and the Eclipse Public License.
Products based on EFI, UEFI & the Framework specifications are available through independent BIOS vendors, such as Phoenix Technologies, American Megatrends (AMI) and Insyde Software. Some vendor implementations are entirely based on the Tiano implementation, while others are designed to be specification compliant without relying on Intel’s reference implementation.[7]

[edit] Platforms that use UEFI or the Framework
Intel’s first Itanium workstations and servers, released in 2000, supported EFI 1.02.
Hewlett-Packard’s first Itanium 2 systems, released in 2002, supported EFI 1.10; they were able to boot Windows, Linux, FreeBSD and HP-UX; OpenVMS added support in June, 2003.
All Itanium or Itanium 2 systems must ship with EFI compliant firmware in order to comply with all DIG64 specifications.
In November 2003, Gateway introduced the Gateway 610 Media Center, the first x86 Windows-based computer system to use firmware based on the Framework, Insyde Software's InsydeH2O. It still relied on a legacy BIOS implemented as a compatibility support module (CSM) to boot Windows.
In January 2006, Apple Inc. shipped its first Intel-based Macintosh computers. These systems use EFI and the Framework instead of Open Firmware, which had been used on its previous PowerPC-based systems.[8] On April 5, 2006, Apple first released Boot Camp, which produces a Windows drivers disk and a non-destructive partitioning tool to allow the installation of Windows XP or Vista without requiring a reinstallation of Mac OS X. A firmware update was also released that added legacy BIOS support to its EFI implementation. Subsequent Macintosh models shipped with the newer firmware. Now all current Macintosh systems are also able to boot legacy BIOS Operating Systems such as Windows XP and Vista. (With the exception of the Xserve platform)
The grand majority of Intel motherboards ship with Framework-based firmware. During 2005, more than one million Intel systems shipped with the Framework.[9] New mobile, desktop and server products, using the Framework, started shipping in 2006. For instance, all boards that use the Intel 945 chipset series use the Framework. However, the production firmware usually does not include EFI support, and is limited to legacy BIOS.[10]
Since 2005, EFI has also been implemented on non-PC architectures, such as embedded systems based on XScale cores.[11]
The EDK includes an NT32 target, which allows EFI firmware and EFI applications to run within a Windows application. But there no hardware direct access allowed by EDK NT32. It means only a subset of EFI application and drivers can be executed at EDK NT32 target.
In 2007 HP released the 8000 series multifunction printers with EFI compliant firmware.[12]
In 2007, a Chinese computer company named Great Wall Computer,.Co released its first EFI enabled desktop. It offers a bios level finger print solution and a graphic bios setup based on EFI. Intel showed this system during the first key note speech at IDF 2007 in Beijing.
In 2008, many more x64 systems have transitioned to use the UEFI technology. While some of these systems still only support booting the BIOS-based OSes via CSM, other systems started to support booting UEFI-based OSes. For example, IBM x3450 server, MSI motherboards with ClickBIOS, all HP EliteBook Notebook and Tablet PCs, newer HP Compaq Notebook PCs (e.g., 6730b, 6735b, etc.). It is projected that by late 2009 or early 2010, more than 50% of the shipping x86-64 units will be UEFI based.

[edit] Operating systems
An operating system that supports boot from (U)EFI is called (U)EFI-aware OS defined by (U)EFI spec. Here term boot from (U)EFI means directly boot system using (U)EFI OS loader stored at any of the storage device. The default location for OS loader is \EFI\BOOT\[architecture name]\boot[architecture name].efi. Here architecture name can be IA32, X64, IA64 and other options. Some OS vendors may have their own OS loader. They may also change the default boot location.

Linux systems have been able to use EFI at boot time since early 2000, using the elilo EFI boot loader or, more recently, EFI versions of grub.[13]
HP-UX has used (U)EFI as its boot mechanism on IA-64 systems since 2002.
HP OpenVMS has used (U)EFI since its initial evaluation release in December 2003, and for production releases since January 2005[14].
Apple has adopted EFI for its line of Intel-based Macs. Mac OS X v10.4 Tiger for Intel and Mac OS X v10.5 Leopard support EFI v1.10 in 32-bit mode, even on 64-bit CPUs (newer Macs have 64-bit EFI).[15]
The Itanium versions of Windows 2000 (Advanced Server Limited Edition and Datacenter Server Limited Edition) supported EFI 1.10 in 2002. Windows Server 2003 for IA-64, Windows XP 64-bit Edition, and Windows 2000 Advanced Server Limited Edition, all of which are for the Intel Itanium family of processors, support EFI, a requirement of the platform through the DIG64 specification.[16]
Microsoft introduced UEFI support for x64 Windows operating systems with Windows Server 2008 and Windows Vista Service Pack 1. Microsoft has released a video with Andrew Ritz and Jamie Schwarz explaining Pre-OS support involving UEFI on Windows Vista and Windows Server 2008.[17]


[edit] Virtualization Support

HP Integrity Virtual Machine supports UEFI boot on HP Integrity Servers. It also provides virtualized UEFI environment for the guest UEFI-aware OSes.
Microsoft Hyper-V supports UEFI boot on x64 servers.


[edit] Graphic feature
EFI supports graphical menus and features, such as is implemented on Aptio or Great Wall UEFI.[18]
There are two protocols defined by EFI spec can be used for graphics output. The first one is UGA, which stands for Universal Graphic Adapters. The second one is GOP, which stands for Graphic Output Protocol. The two are similar. UGA is only supported at EFI 1.1 or older specs. EFI does not define how a system should look. This depends fully on the implementation by BIOS vendors. Currently most EFI enabled machines only have a legacy BIOS-like UI.

[edit] Criticism
EFI has been criticized for bringing more complexity to the system, without bringing significant advantages[19] and disabling fully open-source BIOS replacements like OpenBIOS and Coreboot.[20]

[edit] See also

x86-64
Advanced Configuration and Power Interface (ACPI)
Basic Input/Output System (BIOS)
Booting
Coreboot
El Torito
Functional specification
Live USB
Open Firmware
OpenBIOS
System Management BIOS (SMBIOS)
System Management Mode
Unified EFI Forum


[edit] References


^ Michael Kinney. “Solving BIOS Boot Issues with EFI”. Intel DeveloperUPDATEMagazine. September 2000, p. 1.
^ Dong Wei, Beyond BIOS (foreword), Intel Press, 2006, ISBN 9-780974-364902
^ See the Revision History section of specification version 1.10
^ Unified EFI Forum. “UEFI - About UEFI"
^ fat-driver.Tianocore.org for info on EFI FAT driver. (requires registration)
^ efi-shell.tianocore.org for EFI shell information
^ Intel Platform Innovation Framework for EFI on the Intel site
^ Apple Computer. “Universal Binary Programming Guidelines, Second Edition: Extensible Firmware Interface (EFI)"
^ Intel, Framework Overview
^ An Intel pdf with information about EFI on their boards [1]
^ Overview of the Intel Platform Innovation Framework
^ HP Printer’s site [2]
^ EFI version of Grub (Debian Linux) - Retrieved on 1 May 2008.
^ HP OpenVMS Release History - Retrieved on 16 September 2008
^ rEFIt - Windows Vista and EFI
^ Microsoft Windows Server TechCenter. “Extensible Firmware Interface"
^ Microsoft Pre-OS Video
^ Intel shows PC booting Windows with UEFI firmware
^ Linux: Linus On The Extensible Firmware Interface
^ Interview: Ronald G Minnich



[edit] External links

UEFI Homepage
EFI Architecture Dr. Dobbs Portal Article
EFI Linux gnu toolchain (gnu-efi)
EFI Linux Loader project (ELILO)
rEFIt, a boot menu and maintenance toolkit for EFI-based machines.
Intel’s EFI page
Intel’s Framework page
Intel List of commands
Intel-sponsored open-source EFI Framework initiative
Microsoft’s official stance on EFI




Retrieved from "http://en.wikipedia.org/wiki/Extensible_Firmware_Interface"
Categories: BIOS | Macintosh firmware 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Bosanski
Česky
Deutsch
Español
Français
한국어
Italiano
Nederlands
日本語
Polski
Português
Русский
Slovenščina
Suomi
Svenska
中文









 This page was last modified on 27 March 2009, at 21:20.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
