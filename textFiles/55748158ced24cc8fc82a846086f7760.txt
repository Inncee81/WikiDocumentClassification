













C standard library - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "C_standard_library";
		var wgTitle = "C standard library";
		var wgAction = "view";
		var wgArticleId = "324378";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280100104;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); C standard library

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
The C standard library consists of a set of sections of the ISO C standard which describe a collection of header files and library routines used to implement common operations, such as input/output and string handling, in the C programming language. The C standard library is an interface standard described by a document; it is not an actual library of software routines available for linkage to C programs. No such implementation is properly called C standard library.
Note there is the term C library which may either informally be used as a synonym for C standard library (as in "malloc is the name of a function in the C library"); or may refer to to a particular implementation which provides the C standard library features and other features (as in "this compiler comes with a very reliable C library for ISO C and POSIX programming"); or to any library whatsoever which has an interface for linking to C programs (as in "this software company offers a C library of Fast Fourier Transform functions").
The term C run-time library is used on some platforms to refer to a set of base libraries, which may be distributed in dynamically linkable form with an operating system (with or without header files), or distributed with a C compiler. Another term sometimes used is libc. Not just any library is called the run-time library; run time in this context means the run-time support package associated with a compiler which is understood to make a language complete. The run-time support provides not only the C standard library functions, but possibly other material needed create an environment for the C program, such as initialization prior to the invocation of the main function, or subroutines to provide arithmetic operations missing from the CPU that are needed by code generated by the C compiler.


C Standard Library headers




assert.h
complex.h
ctype.h
errno.h
fenv.h
float.h
inttypes.h
iso646.h
limits.h
locale.h
math.h
setjmp.h
signal.h
stdarg.h
stdbool.h
stddef.h
stdint.h
stdio.h
stdlib.h
string.h
tgmath.h
time.h
wchar.h
wctype.h









Contents


1 History
2 ISO Standard

2.1 ISO C library headers


3 The C standard library in other languages
4 Compiler built-in functions
5 POSIX standard library
6 Implementations
7 See also
8 References
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The C programming language, before it was standardized, did not provide built-in functionalities such as I/O operations (unlike traditional languages such as Cobol and Fortran). Over time, user communities of C shared ideas and implementations of what is now called C standard libraries to provide that functionality. Many of these ideas were incorporated eventually into the definition of the standardized C programming language.
Both Unix and C were created at AT&T's Bell Laboratories in the late 1960s and early 1970s. During the 1970s the C programming language became increasingly popular. Many universities and organizations began creating their own variations of the language for their own projects. By the beginning of the 1980s compatibility problems between the various C implementations became apparent. In 1983 the American National Standards Institute (ANSI) formed a committee to establish a standard specification of C known as "ANSI C". This work culminated in the creation of the so-called C89 standard in 1989. Part of the resulting standard was a set of software libraries called the ANSI C standard library.
Later revisions of the C standard have added several new required header files to the library. Support for these new extensions varies between implementations.
The headers <iso646.h>, <wchar.h>, and <wctype.h> were added with Normative Addendum 1 (hereafter abbreviated as NA1), an addition to the C Standard ratified in 1995.
The headers <complex.h>, <fenv.h>, <inttypes.h>, <stdbool.h>, <stdint.h>, and <tgmath.h> were added with C99, a revision to the C Standard published in 1999.

[edit] ISO Standard
The ISO C standard library consists of 24 C header files which can be included into a programmer's project with a single directive. Each header file contains one or more function declarations, data type definitions and macros. The contents of these header files follows.
In comparison to some other languages (for example Java) the standard library is minuscule. The library provides a basic set of mathematical functions, string manipulation, type conversions, and file and console-based I/O. It does not include a standard set of "container types" like the C++ Standard Template Library, let alone the complete graphical user interface (GUI) toolkits, networking tools, and profusion of other functionality that Java provides as standard. The main advantage of the small standard library is that providing a working ISO C environment is much easier than it is with other languages, and consequently porting C to a new platform is relatively easy.
Many other libraries have been developed to supply equivalent functionality to that provided by other languages in their standard library. For instance, the GNOME desktop environment project has developed the GTK+ graphics toolkit and GLib, a library of container data structures, and there are many other well-known examples. The variety of libraries available has meant that some superior toolkits have proven themselves through history. The considerable downside is that they often do not work particularly well together, programmers are often familiar with different sets of libraries, and a different set of them may be available on any particular platform.

[edit] ISO C library headers


<assert.h>
Contains the assert macro, used to assist with detecting logical errors and other types of bug in debugging versions of a program.


<complex.h>
A set of functions for manipulating complex numbers. (New with C99)


<ctype.h>
Contains functions used to classify characters by their types or to convert between upper and lower case in a way that is independent of the used character set (typically ASCII or one of its extensions, although implementations utilizing EBCDIC are also known).


<errno.h>
For testing error codes reported by library functions.


<fenv.h>
For controlling floating-point environment. (New with C99)


<float.h>
Contains defined constants specifying the implementation-specific properties of the floating-point library, such as the minimum difference between two different floating-point numbers (_EPSILON), the maximum number of digits of accuracy (_DIG) and the range of numbers which can be represented (_MIN, _MAX).


<inttypes.h>
For precise conversion between integer types. (New with C99)


<iso646.h>
For programming in ISO 646 variant character sets. (New with NA1)


<limits.h>
Contains defined constants specifying the implementation-specific properties of the integer types, such as the range of numbers which can be represented (_MIN, _MAX).


<locale.h>
For setlocale() and related constants. This is used to choose an appropriate locale.


<math.h>
For computing common mathematical functions


<setjmp.h>
Declares the macros setjmp and longjmp, which are used for non-local exits


<signal.h>
For controlling various exceptional conditions


<stdarg.h>
For accessing a varying number of arguments passed to functions.


<stdbool.h>
For a boolean data type. (New with C99)


<stdint.h>
For defining various integer types. (New with C99)


<stddef.h>
For defining several useful types and macros.


<stdio.h>
Provides the core input and output capabilities of the C language. This file includes the venerable printf function.


<stdlib.h>
For performing a variety of operations, including conversion, pseudo-random numbers, memory allocation, process control, environment, signalling, searching, and sorting.


<string.h>
For manipulating several kinds of strings.


<tgmath.h>
For type-generic mathematical functions. (New with C99)


<time.h>
For converting between various time and date formats.


<wchar.h>
For manipulating wide streams and several kinds of strings using wide characters - key to supporting a range of languages. (New with NA1)


<wctype.h>
For classifying wide characters. (New with NA1)



[edit] The C standard library in other languages
Some languages include the functionality of the standard C library in their own libraries. The library may be adapted to better suit the language's structure, but the operation semantics are kept similar. The C++ programming language, for example, includes the functionality of the ANSI C standard library in the namespace std (like std::printf, std::atoi, std::feof, etc.), in header files with similar names to the C ones ("cstdio", "cmath", "cstdlib", etc). Other languages that take similar approaches are D and the predominant implementation of Python known as CPython. In the latter, for example, the built-in file object is defined as "implemented using C's stdio package"[1], so that the available operations (open, read, write, etc.) are expected to have the same behavior as the corresponding C functions.

[edit] Compiler built-in functions
Some compilers (for example, GCC[1]) provide built-in versions of many of the functions in the C standard library; that is, the implementations of the functions are written into the compiled object file, and the program calls the built-in versions instead of the functions in the C library shared object file. This reduces function call overhead, especially if function calls are replaced with inline variants, and allows other forms of optimisation (as the compiler knows the control-flow characteristics of the built-in variants), but may cause confusion when debugging (for example, the built-in versions cannot be replaced with instrumented variants).
However, the built-in functions must behave like ordinary functions in accordance with ISO C. The main implication is that the program must be able to create a pointer to these functions by taking their address, and invoke the function by means of that pointer. If two pointers to the same function are derived in two different translation unit in the program, these two pointers must compare equal; that is, the address comes by resolving the name of the function, which has external (program-wide) linkage.

[edit] POSIX standard library
Main article: C POSIX library
POSIX (and SUS) specifies a number of routines that should be available over and above those in the C standard library proper; these are often implemented alongside the C standard library functionality, with varying degrees of closeness. For example, glibc implements functions such as fork within libc.so, but before NPTL was merged into glibc it constituted a separate library with its own linker flag. Often, this POSIX-specified functionality will be regarded as part of the library; the C library proper may be identified as the ANSI or ISO C library.

[edit] Implementations
Unix-like systems typically have a C library in shared library form, but the header files (and compiler toolchain) may be absent from an installation so C development may not be possible. The C library is considered part of the operating system on Unix-like systems. The C functions, including the ISO C standard ones, are widely used by programs, and are regarded as if they were not only an implementation of something in the C languge, but also de facto part of the operating system interface. Unix-like operating systems generally cannot function if the C library is erased.
By contrast, on Microsoft Windows, the core system dynamic libraries (DLL's) do not provide an implementation of the C standard library; this is provided by each compiler individually. Compiled applications written in C are either statically linked with a C library, or linked to a dynamic version of the library that is shipped with these applications, rather than relied upon to be present on the targetted systems. Functions in a compiler's C library are not regarded as interfaces to Microsoft Windows.
Many other implementations exist, provided with both various operating systems and C compilers.
Although there exist too many implementations to list, some popular implementations follow:

BSD libc, implementations distributed under BSD operating systems.
GNU C Library, the most common implementation used in Unix-like systems such as GNU/Linux.
Dinkum C99 Library from Dinkumware, most common commercially licensed one
Microsoft C Run-time Library, an implementation of Dinkumware' Dinkum C++ Library
dietlibc, an alternative small implementation of the C standard library
uClibc, a C standard library for embedded Linux systems (MMU-less)
Newlib, a C standard library for embedded systems (MMU-less)[2]
klibc, primarily for booting Linux systems.
EGLIBC, variant of glibc for embedded systems.


[edit] See also

List of C functions
C++ standard library


[edit] References


^ Other built-in functions provided by GCC, GCC Manual
^ Re: Does Newlib support mmu-less CPUs?



[edit] External links

The C Standard Library: A detailed description of the header files
The C Library Reference Guide
Microsoft C Run-Time Libraries on MSDN
NetBSD C libraries manual and full C library source: A good academic reference.








v • d • e

C programming language





Libraries

C standard library · glibc · Dietlibc · uClibc · Newlib · more






Features

String · Syntax · Preprocessor · Variable types and declarations · Functions






Descendants

C++ · Objective-C · D · C#






C and Other Languages

C and C++ (Compatibility · Operators) · Comparison of Pascal and C · C to Java byte-code compiler






Category








Retrieved from "http://en.wikipedia.org/wiki/C_standard_library"
Categories: C standard library | C programming language 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Dansk
Deutsch
Ελληνικά
Español
Français
한국어
Italiano
日本語
Polski
Русский
Tiếng Việt
中文









 This page was last modified on 27 March 2009, at 22:38.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
