













XSL Transformations - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "XSL_Transformations";
		var wgTitle = "XSL Transformations";
		var wgAction = "view";
		var wgArticleId = "34211";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280878708;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-xml {line-height: normal;}
.source-xml li, .source-xml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for xml
 * CSS class: source-xml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-xml .de1, .source-xml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-xml  {}
.source-xml .head {}
.source-xml .foot {}
.source-xml .imp {font-weight: bold; color: red;}
.source-xml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-xml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-xml li.li2 {font-weight: bold;}
.source-xml .coMULTI {color: #808080; font-style: italic;}
.source-xml .es0 {color: #000099; font-weight: bold;}
.source-xml .br0 {color: #66cc66;}
.source-xml .st0 {color: #ff0000;}
.source-xml .nu0 {color: #cc66cc;}
.source-xml .sc0 {color: #00bbdd;}
.source-xml .sc1 {color: #ddbb00;}
.source-xml .sc2 {color: #339933;}
.source-xml .sc3 {color: #009900;}
.source-xml .re0 {color: #000066;}
.source-xml .re1 {font-weight: bold; color: black;}
.source-xml .re2 {font-weight: bold; color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); XSL Transformations

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

XSL Transformations




Filename extension
.xsl, .xslt


Internet media type
application/xslt+xml[1]


Developed by
World Wide Web Consortium


Type of format
Stylesheet language


Extended from
XML


Standard(s)
1.0 (Recommendation),
2.0 (Recommendation)


Extensible Stylesheet Language Transformations (XSLT) is an XML-based language used for the transformation of XML documents into other XML or "human-readable" documents. The original document is not changed; rather, a new document is created based on the content of an existing one.[2] The new document may be serialized (output) by the processor in standard XML syntax or in another format, such as HTML or plain text.[3] XSLT is most often used to convert data between different XML schemas or to convert XML data into HTML or XHTML documents for web pages, creating a dynamic web page, or into an intermediate XML format that can be converted to PDF documents.
As a language, XSLT is influenced by functional languages,[4] and by text-based pattern matching languages like SNOBOL and awk. Its most direct predecessor was DSSSL, a language that performed the same function for SGML that XSLT performs for XML[5]. XSLT can also be considered as a Turing-complete[6][7][8][9] template processor.




Contents


1 Origins
2 Overview

2.1 Template rule processing


3 Processor implementations
4 Performance
5 XSLT and XPath
6 XSLT and XQuery compared
7 XSLT media types
8 XSLT examples

8.1 Example 1 (transforming XML)
8.2 Example 2 (transforming XML to XHTML)


9 References
10 See also
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Origins
XSLT is developed by the World Wide Web Consortium (W3C). The most recent version is XSLT 2.0[10], which reached W3C recommendation status on 23 January 2007. As of 2008, however, XSLT 1.0[11] is still more widely used and implemented.
Originally, XSLT was part of the W3C's Extensible Stylesheet Language (XSL) development effort of 1998–1999, a project that also produced XSL Formatting Objects and the XML Path Language, XPath. The editor of the first version was James Clark. XSLT 1.0 was published as a Recommendation by the W3C on 16 November 1999. After an abortive attempt to create a version 1.1 in 2001[12], the XSL working group joined forces with the XQuery working group to create XPath 2.0[13], with a richer data model and type system based on XML Schema. XSLT 2.0, developed under the editorship of Michael Kay, was built on this foundation in 2002–2006.
Most of this article is applicable to both XSLT versions; any differences are noted in the text.

[edit] Overview




Diagram of the basic elements and process flow of Extensible Stylesheet Language Transformations.


The XSLT processing model involves:

one or more XML source documents;
one or more XSLT stylesheet modules;
the XSLT template processing engine (the processor); and
one or more result documents.

The XSLT processor ordinarily takes two input documents[14]—an XML source document, and an XSLT stylesheet—and produces an output document. The XSLT stylesheet contains the XSLT program text (or ‘source code’ in other languages) and is itself an XML document. It describes a collection of template rules: instructions and other directives that guide the processor in the production of the output document.

[edit] Template rule processing
The XSLT language is declarative—rather than listing an imperative sequence of actions to perform in a stateful environment, template rules only define how to handle a node matching a particular XPath-like pattern, if the processor should happen to encounter one, and the contents of the templates effectively comprise functional expressions that directly represent their evaluated form: the result tree, which is the basis of the processor's output.
The processor follows a fixed algorithm: Assuming a stylesheet has already been read and prepared, the processor builds a source tree from the input XML document. It then starts by processing the source tree's root node, finding in the stylesheet the best-matching template for that node, and evaluating the template's contents. Instructions in each template generally direct the processor to either create nodes in the result tree, or process more nodes in the source tree in the same way as the root node. Output is derived from the result tree.

[edit] Processor implementations
XSLT processor implementations fall into two main categories: server-side, and client-side.
Although client-side XSLT processing has been available in Microsoft's Internet Explorer since 1999 (or even earlier, but in a form that was incompatible with the W3C specifications), adoption has been slower because of the widespread deployment of older and alternative browsers without XSLT support. For similar reasons, adoption of XSLT 2.0 in such environments remains limited.
XSLT processors may be delivered as standalone products, or as components of other software including web browsers, application servers, frameworks such as Java and .NET, or even operating systems. For example, Windows XP comes with the MSXML3 library, which includes an XSLT 1.0 processor. Earlier versions may be upgraded and there are many alternatives. See the external links section.

[edit] Performance





This section needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (October 2007)


The performance of XSLT processors has steadily improved as the technology has become more mature, although the very first processor, James Clark's xt, was unbeaten for several years[15].
Most of the earlier XSLT processors were interpreters; in more recent products, code generation is increasingly common, using portable intermediate languages such as Java bytecode or .NET Common Intermediate Language as the target. However, even the interpretive products generally offer separate analysis and execution phases, allowing an optimized expression tree to be created in memory and reused to perform multiple transformations: this gives substantial performance benefits in online publishing applications where the same transformation is applied many times per second to different source documents.[16] This separation is reflected in the design of XSLT processing APIs such as JAXP (Java API for XML Processing).
Early XSLT processors had very few optimizations; stylesheet documents were read into Document Object Models and the processor would act on them directly. XPath engines were also not optimized. Increasingly, however, XSLT processors use the kind of optimization techniques found in functional programming languages and database query languages, notably static rewriting of the expression tree for example to move calculations out of loops, and lazy pipelined evaluation to reduce the use of memory for intermediate results and allow "early exit" when the processor can evaluate an expression such as following-sibling::*[1] without a complete evaluation of all subexpressions. Many processors also use tree representations that are much more efficient (in both space and time) than general purpose DOM implementations.

[edit] XSLT and XPath
For more details on this topic, see XPath.
XSLT relies upon the W3C's XPath language for identifying subsets of the source document tree, as well as for performing calculations. XPath also provides a range of functions, which XSLT itself further augments. This reliance upon XPath adds a great deal of power and flexibility to XSLT.
XSLT 2.0 relies on XPath 2.0; both specifications were published on the same date. Similarly, XSLT 1.0 works with XPath 1.0.

[edit] XSLT and XQuery compared
For more details on this topic, see XQuery#XQuery and XSLT compared.
XSLT capabilities overlap with XQuery, which was initially conceived as a query language for large collections of XML documents.
The XSLT 2.0 and XQuery 1.0 standards were developed by separate working groups within W3C, working together to ensure a common approach where appropriate. They share the same data model, type system, and function library, and both include XPath 2.0 as a sublanguage.
The two languages, however, are rooted in different traditions and serve the needs of different communities. XSLT was primarily conceived as a stylesheet language whose primary goal was to render XML for the human reader on screen, on the web (as web template language), or on paper. XQuery was primarily conceived as a database query language in the tradition of SQL.
Because the two languages originate in different communities, XSLT is stronger in its handling of narrative documents with more flexible structure, while XQuery is stronger in its data handling, for example when performing relational joins.

[edit] XSLT media types
As of 2009, there is no MIME/Internet media type registered for XSLT.
The XSLT 1.0 Recommendation (1999) says "The MIME media types text/xml and application/xml should be used for XSLT stylesheets. It is possible that a media type will be registered specifically for XSLT stylesheets; if and when it is, that media type may also be used." It goes on to use text/xml in an example of how to embed a stylesheet with the xml-stylesheet processing instruction.
RFC 3023 points out potential technical problems with text/* types in general, and proposes application/xslt+xml as an ideal media type for XSLT. The XSLT 2.0 Recommendation (January 2007) includes a formal application to register this media type. However, at the time of writing (January 2009) the process of registration has not yet been completed, and RFC 3023 warns that "... this media type should not be used until such registration has been completed."
Pre-1.0 working drafts of XSLT used text/xsl in their embedding examples, and this type was implemented and continues to be promoted by Microsoft in Internet Explorer and MSXML. It is also widely recognized in the xml-stylesheet processing instruction by other browsers. In practice, therefore, users wanting to control transformation in the browser using this processing instruction are obliged to use this unregistered media type.[17]

[edit] XSLT examples
Sample of incoming XML document


<?xml version="1.0" ?>
<persons>
  <person username="JS1">
    <name>John</name>
    <family-name>Smith</family-name>
  </person>
  <person username="MI1">
    <name>Morka</name>
    <family-name>Ismincius</family-name>
  </person>
</persons>


[edit] Example 1 (transforming XML)
This XSLT stylesheet provides templates to transform the XML document:


<?xml version="1.0" ?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml" indent="yes"/> 
 
<xsl:template match="/persons">
       <root> <xsl:apply-templates select="person"/> </root>
</xsl:template>
 
<xsl:template match="person">
	<name username="{@username}">
	   <xsl:value-of select="name" />
	</name>
</xsl:template>
 
</xsl:stylesheet>

Its evaluation results in a new XML document, having another structure:


<?xml version="1.0" encoding="UTF-8"?>
<root>
      <name username="JS1">John</name>
      <name username="MI1">Morka</name>
</root>


[edit] Example 2 (transforming XML to XHTML)
Example XSLT Stylesheet:


<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet 
 version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns="http://www.w3.org/1999/xhtml">
 
<xsl:output method="xml" indent="yes" encoding="UTF-8"/>
 
<xsl:template match="/persons">
	<html>
	<head> <title>Testing XML Example</title> </head>
	<body>
		<h1>Persons</h1>
		<ul>
		<xsl:apply-templates select="person">
			<xsl:sort select="family-name" />
		</xsl:apply-templates>
		</ul>
	</body>
	</html>
</xsl:template>
 
<xsl:template match="person">
	<li>
		<xsl:value-of select="family-name"/><xsl:text>, </xsl:text>
		<xsl:value-of select="name"/>
	</li>
</xsl:template>
 
</xsl:stylesheet>

XHTML output that this would produce (whitespace has been adjusted here for clarity):





<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head> <title>Testing XML Example</title> </head>
<body>
	<h1>Persons</h1>
	<ul>
	   <li>Ismincius, Morka</li>
	   <li>Smith, John</li>
	</ul>
</body>
</html>


 

How the XHTML appears when rendered in a web browser.



In order for a web browser to be able to automatically apply an XSL transformation to an XML document, an XML stylesheet processing instruction can be inserted into XML. So, for example, if the stylesheet in Example 2 above were available as "example2.xsl", the following instruction could be added to the original incoming XML:[18]


<?xml-stylesheet href="example2.xsl" type="text/xsl" ?>

(In this example, text/xsl is technically incorrect according to the W3C specifications, but it is the only media type that is widely supported across current (2009) browsers.)

[edit] References


^ XSL Transformations (XSLT) Version 2.0
^ XSL Transformations (XSLT)
^ See e. g., http://www.w3.org/TR/xslt#output, specifying alternate output methods.
^ Dimitre Novatchev. "Higher-Order Functional Programming with XSLT 2.0 and FXSL". ExtremeMarkupLanguages. http://www.idealliance.org/papers/extreme/proceedings/html/2006/Novatchev01/EML2006Novatchev01.html. Retrieved on January 18 2007. 
^ http://www.w3.org/TR/NOTE-XSL.html
^ Kepser, Stephan. (2004).
^ A Simple Proof for the Turing-Completeness of XSLT and XQuery. International Digital Enterprise Alliance.
^ Universal Turing Machine in XSLT
^ index
^ http://www.w3.org/TR/xslt20/
^ http://www.w3.org/TR/xslt/
^ http://www.w3.org/TR/xslt11/
^ http://www.w3.org/TR/xpath20/
^ Typically, documents are XML files, but the specifications avoid excluding other representations, such as in-memory DOM trees or other conforming input streams.
^ XML.com: XSLT Processor Benchmarks
^ Saxon: Anatomy of an XSLT processor - An article describing the implementation and optimization details of a popular Java-based XSLT processor.
^ Kay, Michael (2008). XSLT 2.0 and XPath 2.0 Programmer's Reference. Wiley. p. 100. ISBN 978-0-470-19274-0. 
^ "XSL Transformations (XSLT) Version 1.0: W3C Recommendation - Embedding Stylesheets". W3C. 16 November 1999. http://www.w3.org/TR/xslt#section-Embedding-Stylesheets. Retrieved on 2009-01-06. 



[edit] See also

XSLT elements - a list of some commonly used XSLT structures
XML transformation language - any computer language designed specifically to transform an input XML document into an output XML document that satisfies some specific goal
Extensible Stylesheet Language - a family of languages of which XSLT is a member
XQuery and XSLT compared
XML template engine - including a list of XSLT processor implementations
Tree programming
Identity transform - a starting point for filter chains that add or remove data elements from XML trees in a transformation pipeline
Apache Cocoon - a Java-based framework for processing data with XSL and other transformers.
Omnimark - another structured text processing language (and a proprietary software)


[edit] External links

For implementations, see XML template engine.


Documentation


XSLT 1.0 W3C Recommendation
XSLT 2.0 W3C Recommendation
XSLT Frequently Asked Questions
Zvon XSLT 1.0 Reference
XSL Concepts and Practical Use by Norman Walsh
Tutorial from developerWorks by IBM (1 hour)
Zvon XSLT Tutorial
XSLT Tutorial by W3 Schools
Quick tutorial
What kind of language is XSLT?
XSLT and Scripting Languages
schema-aware.com - examples of schema-aware XSLT


Mailing lists


The XSLT mailing list hosted by Mulberrytech


Books


XSLT by Doug Tidwell, published by O’Reilly (ISBN 0-596-00053-7)
XSLT Cookbook by Sal Mangano, published by O’Reilly (ISBN 0-596-00974-7)
XSLT 2.0 Programmer's Reference by Michael Kay (ISBN 0-764-56909-0)
XSLT 2.0 and XPath 2.0 Programmer's Reference by Michael Kay (ISBN 978-0-470-19274-0)
XSLT 2.0 Web Development by Dmitry Kirsanov (ISBN 0-13-140635-3)
XSL Companion, 2nd Edition by Neil Bradley, published by Addison-Wesley (ISBN 0-201-77083-0)
XSLT and XPath on the Edge (Unlimited Edition) by Jeni Tennison, published by Hungry Minds Inc, U.S. (ISBN 0-7645-4776-3)
XSLT & XPath, A Guide to XML Transformations by John Robert Gardner and Zarella Rendon, published by Prentice-Hall (ISBN 0-13-040446-2)


XSLT code libraries


EXSLT is a widespread community initiative to provide extensions to XSLT.
FXSL is a library implementing support for Higher-order functions in XSLT. FXSL is written in XSLT itself.
The XSLT Standard Library xsltsl, provides the XSLT developer with a set of XSLT templates for commonly used functions. These are implemented purely in XSLT, that is they do not use any extensions. xsltsl is a SourceForge project.
Kernow A GUI for Saxon that provides a point and click interface for running transforms.
xslt.js – Transform XML with XSLT JavaScript library that transforms XML with XSLT in the browser.


Further examples


XSLT Examples using JavaScript based on wiki examples and w3schools XSLT on the Client








v • d • e

XSL






XSLT (elements) • XSL-FO • XPath 1.0, 2.0













v • d • e

Standards of the World Wide Web Consortium





Recommendations

Canonical XML · CDF · CSS · DOM · HTML · MathML · OWL · P3P · PLS · RDF · RDF Schema · SISR · SMIL · SOAP · SRGS · SSML · SVG · SPARQL · Timed Text · VoiceXML · WSDL · XForms · XHTML · XLink · XML · XML Base · XML Encryption · XML Events · XML Information Set · XML Schema · XML Signature · XPath · XPointer · XQuery · XSL · XSL-FO · XSLT






Notes

XAdES · XHTML+SMIL






Working Drafts

CCXML · CURIE · HTML 5 · InkML · WICD · XFDL · XFrames · XBL · XHTML+MathML+SVG · XProc  · OWL 2






Guidelines

Web Content Accessibility Guidelines






deprecated

HDML · JSSS · PGML · VML









Retrieved from "http://en.wikipedia.org/wiki/XSL_Transformations"
Categories: Declarative programming languages | Functional languages | Markup languages | Transformation languages | World Wide Web Consortium standards | XML-based programming languages | XML-based standardsHidden categories: Articles needing additional references from October 2007 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Česky
Dansk
Deutsch
Español
Euskara
فارسی
Français
한국어
Bahasa Indonesia
Íslenska
Italiano
Lietuvių
Magyar
Bahasa Melayu
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Suomi
Svenska
Tiếng Việt
Türkçe
Українська
Žemaitėška
中文









 This page was last modified on 31 March 2009, at 15:40.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
