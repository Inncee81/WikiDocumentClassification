













Modulo operation - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Modulo_operation";
		var wgTitle = "Modulo operation";
		var wgAction = "view";
		var wgArticleId = "1352428";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282103236;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Modulo operation

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




Quotient (red) and remainder (green) functions using different algorithms.


In computing, the modulo operation finds the remainder of division of one number by another.
Given two numbers, a (the dividend) and n (the divisor), a modulo n (abbreviated as a mod n) is the remainder, on division of a by n. For instance, the expression "7 mod 3" would evaluate to 1, while "9 mod 3" would evaluate to 0. Although typically performed with a and n both being integers, many computing systems allow other types of numeric operands.
See modular arithmetic for an older and related convention applied in number theory.




Contents


1 Remainder calculation for the modulo operation
2 Modulo operation expression
3 Performance issues
4 See also
5 Notes
6 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>



[edit] Remainder calculation for the modulo operation

Modulo operators in various programming languages

Language
Operator
Result has the same sign as


ActionScript
%
Dividend


Ada
mod
Divisor


rem
Dividend


ASP
Mod
Not defined


BASIC
Mod
Not defined


C (ISO 1990)
%
Implementation defined


C (ISO 1999)
%
Dividend


C++
%
Implementation defined[1]


C#
%
Dividend


Clojure
rem
Dividend


ColdFusion
MOD
Dividend


Common Lisp
mod
Divisor


rem
Dividend


Eiffel
\\
Dividend


Microsoft Excel
=MOD()
Divisor


Euphoria
remainder
Dividend


FileMaker
Mod
Divisor


Fortran
mod
Dividend


modulo
Divisor


GML (Game Maker)
mod
Dividend


Haskell
mod
Divisor


rem
Dividend


J
|~
Divisor


Java
%
Dividend


JavaScript
%
Dividend


Lua
%
Divisor


MathCad
mod(x,y)
Divisor


Mathematica
Mod
Divisor


MATLAB
mod
Divisor


rem
Dividend


Objective Caml
mod
Not defined


Occam
\
Dividend


Pascal (Delphi)
mod
Dividend


Perl
%
Divisor[1]


PHP
%
Dividend


PL/I
mod
Divisor (ANSI PL/I)


PowerBuilder
mod(x,y)
 ?


Prolog (ISO 1995)
mod
Divisor


rem
Dividend


Python
%
Divisor


QBasic
MOD
Dividend


R
%%
Divisor


RPG
%REM
Dividend


Ruby
%
Divisor


Scheme
modulo
Divisor


SenseTalk
modulo
Divisor


rem
Dividend


Smalltalk
\\
Divisor


SQL (SQL:1999)
mod(x,y)
Dividend


Tcl
%
Divisor


Torque Game Engine
%
Dividend


TI-BASIC
fPart(x/y)*y
Dividend


Verilog (2001)
%
Dividend


VHDL
mod
Divisor


rem
Dividend


Visual Basic
Mod
Dividend


There are various ways of defining a remainder, and computers and calculators have various ways of storing and representing numbers, so what exactly constitutes the result of a modulo operation depends on the programming language and/or the underlying hardware.
In nearly all computing systems, the quotient q and the remainder r satisfy


 is an integer


Pascal and Algol68 do not satisfy these for negative divisors. Some programming languages, such as C89, don't even define a result if either of n or a is negative. See the table for details. a modulo 0 is undefined in the majority of systems, although some do define it to be a.
Many implementations use truncated division where the quotient is defined by truncation q = trunc(a/n) and the remainder by r=a-n q. With this definition the quotient is rounded towards zero and the remainder has the same sign as the dividend.
Knuth[2] described floored division where the quotient is defined by the floor function q=floor(a/n) and the remainder r is



Here the quotient rounds towards negative infinity and the remainder has the same sign as the divisor.
Raymond T. Boute[3] introduces the Euclidean definition which is consistent with the division algorithm. Let q be the integer quotient of a and n, then:





Two corollaries are that




As described by Leijen,[4]

Boute argues that Euclidean division is superior to the other ones in terms of regularity and useful mathematical properties, although floored division, promoted by Knuth, is also a good definition. Despite its widespread use, truncated division is shown to be inferior to the other definitions.

Common Lisp also defines round- and ceiling-division where the quotient is given by q=round(a/n), q=ceil(a/n). IEEE 754 defines a remainder function where the quotient is a/n rounded according to the round to nearest convention.

[edit] Modulo operation expression
Some calculators have a mod() function button, and many programming languages have a mod() function or similar, expressed as mod(a, n), for example. Some also support expressions that use "%", "mod", or "Mod" as a modulo or remainder operator, such as

a % n

or

a mod n.


[edit] Performance issues
Modulo operations might be implemented such that division with remainder is calculated each time. For special cases, there are faster alternatives on some hardware. For example, the modulo of powers of 2 can alternatively be expressed as a bitwise AND operation:

x % 2n == x & (2n - 1).

Examples (assuming x is an integer):

x % 2 == x & 1
x % 4 == x & 3
x % 8 == x & 7

In devices and software that implement bitwise operations more efficiently than modulo, these alternative forms can result in faster calculations.
In the C programming language, compiling with heavy speed optimizations will typically (depending on compiler and hardware) automatically convert modulo operations to bitwise AND in the assembly file.
In some compilers, the modulo operation is implemented as mod(a, n) = a - n * floor(a / n). When performing both modulo and division on the same numbers, one can get the same result somewhat more efficiently by avoiding the actual modulo operator, and using the formula above on the result, avoiding an additional division operation.

[edit] See also

Modulo and modulo (jargon) — many uses of the word "modulo", all of which grew out of Carl F. Gauss's introduction of modular arithmetic in 1801.


[edit] Notes

^  Perl usually uses arithmetic modulo operator that is machine-independent. See the Perl documentation for exceptions and examples.
^  Mathematically, these two choices are but two of the infinite number of choices available for the inequality satisfied by a remainder.


[edit] References

^ ISO/IEC 14882:2003 : Programming languages -- C++, 5.6.4: ISO, IEC, 2003 . "the binary % operator yields the remainder from the division of the first expression by the second. .... If both operands are nonnegative then the remainder is nonnegative; if not, the sign of the remainder is implementation-defined".
^ Knuth, Donald. E. (1972). The Art of Computer Algorithms. Addison-Wesley. 
^ Boute, Raymond T. (April 1992). "The Euclidean definition of the functions div and mod". ACM Transactions on Programming Languages and Systems (TOPLAS) (ACM Press (New York, NY, USA)) 14 (2): 127 – 144. doi:10.1145/128861.128862. http://portal.acm.org/citation.cfm?id=128862&coll=portal&dl=ACM. 
^ Leijen, Daan (December 3, 2001). "Division and Modulus for Computer Scientists" (PDF). http://www.cs.uu.nl/~daan/download/papers/divmodnote.pdf. Retrieved on 2006-08-27. 




Retrieved from "http://en.wikipedia.org/wiki/Modulo_operation"
Categories: Computer arithmetic 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Dansk
Deutsch
Français
Bahasa Indonesia
Íslenska
‪Norsk (bokmål)‬
Polski
Română
Русский
Slovenščina
中文









 This page was last modified on 6 April 2009, at 13:10 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
