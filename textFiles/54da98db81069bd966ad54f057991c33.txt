













Low Level Virtual Machine - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Low_Level_Virtual_Machine";
		var wgTitle = "Low Level Virtual Machine";
		var wgAction = "view";
		var wgArticleId = "654611";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281451082;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Low Level Virtual Machine

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

LLVM

Developed by
LLVM Developer Group


Initial release
2000


Latest release
2.5 / 2009-03-02; 40 days ago


Written in
C++


Operating system
Cross-platform


Type
Compiler


License
University of Illinois/NCSA Open Source License


Website
http://llvm.org/


The Low Level Virtual Machine, generally known as LLVM, is a compiler infrastructure, written in C++, which is designed for compile-time, link-time, run-time, and "idle-time" optimization of programs written in arbitrary programming languages. Originally intended to replace the existing back-end in GCC with a more modern substrate, the success of LLVM has since spawned a wide variety of new front-ends intended to work with it and replace larger portions of the GCC stack.
The LLVM project started in 2000 at the University of Illinois at Urbana-Champaign, primarily under the direction of Chris Lattner. In early 2005, Apple Inc. hired Lattner and formed a team to work on the LLVM system for various uses within Apple's development systems.[1] Apple is the primary sponsor of ongoing LLVM development. It is released under an BSD-style license and has a wide group of active developers.




Contents


1 Description
2 Front-ends
3 References
4 See also
5 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Description
LLVM can replace most of the "lower levels" of the GCC toolchain, offering more aggressive optimization of GCCs three address code intermediate form (IF). LLVM supports a language-independent instruction set and type system. Each instruction is in static single assignment form (SSA), meaning that each variable (called a typed register) is assigned once and is frozen. This helps simplify the analysis of dependencies among variables. LLVM allows code to be compiled statically, as it is under the traditional GCC system, or left for late-compiling from the IF to machine code in a just-in-time compiler (JIT) in a fashion similar to Java.
Any form of type conversion, from coercion to the downcasting of an object, is performed explicitly using the cast instruction. LLVM has basic types, like integers of fixed sizes, and exactly five derived types: pointers, arrays, vectors, structures, and functions. A type construct in a concrete language can be represented by combining these basic types in LLVM. For example, a class in C++ can be represented by a combination of structures, functions and arrays of function pointers.
The LLVM JIT compiler is capable of optimizing unnecessary static branches out of a program at runtime, and is therefore useful for partial evaluation in cases where a program has many options—most of which can easily be determined unnecessary in a specific environment. Because of this, it is used in the OpenGL pipeline of Mac OS X v10.5 (Leopard) to provide support for missing hardware features.[2] Graphics code within the OpenGL stack was left in IF form, and then compiled when run on the target machine. On systems with high-end GPUs the resulting code was quite thin, passing the instructions onto the GPU with minimal changes. On systems with low-end graphics the code would create procedure to run on the local CPU to handle any instructions that the GPU could not run internally. LLVM was instrumental in improving performance on low-end machines using Intel GMA chipsets.

[edit] Front-ends
LLVM was originally written as a more aggressive, higher performance system for the existing GCC stack, and many of the GCC front-ends have been modified to work with it. LLVM currently supports the compilation of C, C++, Fortran, Objective-C, Ada, D, using front-ends derived from version 4.0.1 and 4.2 of the GNU Compiler Collection (GCC).
However, widespread interest in LLVM has led to a number of efforts to develop entirely new front-ends for a variety of languages. One that has received the most attention is clang, a new compiler supporting C, Obj-C and C++. Primarily supported by Apple, clang is aimed at replacing the C/Obj-C compiler in the GCC system with a modern system that is more easily integrated with IDEs and had wider support for multithreading. Obj-C development under GCC was somewhat moribund and Apple's changes to the language were supported in a separately maintained branch. Creating their own compiler allowed them to address many of the same problems LLVM addressed in terms of IDE integration and other modern features, while also making the primary development branch the primary Obj-C implementation.
The Essential Haskell Compiler can generate code for LLVM which, though the generator is in the early stages of development, has been shown in many cases to be more efficient than the C code generator.[3] There are many other components in various stages of development; including, but not limited to, a Java bytecode front-end, a CIL front-end, a CPython front-end, and a new graph coloring register allocator.

[edit] References


^ Adam Treat, mkspecs and patches for LLVM compile of Qt4
^ Chris Lattner (August 15, 2006). "A cool use of LLVM at Apple: the OpenGL stack". LLVMdev mailing list. http://lists.cs.uiuc.edu/pipermail/llvmdev/2006-August/006492.html. Retrieved on 2008-10-26. 
^ "Compiling Haskell To LLVM". http://www.cs.uu.nl/wiki/bin/view/Stc/CompilingHaskellToLLVM. Retrieved on 2009-02-22. 



[edit] See also




Free software portal




libJIT
GNU lightning
GNU Compiler Collection (GCC)
DotGNU
Clang C Compiler
OpenCL
Comparison of application virtual machines


[edit] External links

The LLVM Compiler Infrastructure Project
LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation — a published paper by Chris Lattner and Vikram Adve.
LLVM Language Reference Manual — describes the LLVM intermediate representation.
LLVM 2.0 Presentation — Google Tech Talk Presentation on LLVM 2.0
The LDC D compiler, with LLVM back-end








v • d • e

Free and open source software





General

Copyleft · Events and Awards · Free software · Free Software Definition · Gratis versus Libre · Open source software






Free software
portal









Notable packages

Apache · CUPS · Firefox · GNOME · KDE · OpenOffice.org · Thunderbird · X Window System






Operating systems

AROS · BSD · Darwin · FreeDOS · GNU · Haiku · Inferno · Linux · Mach · MINIX · OpenSolaris · Plan 9 · ReactOS · Syllable






Development

GCC · LLVM · Java · Open64 · Perl · PHP · Python · Lua · Ruby · Tcl · libJIT






History

GNU · Linux · Mozilla (Application Suite · Firefox · Thunderbird)






Organizations

Apache Software Foundation · Blender Foundation · Eclipse Foundation · FLOSS Manuals · freedesktop.org · Free Software Foundation · GNOME Foundation · GNU Project · Google Code · Linux Foundation · Mozilla Foundation · Open Source Geospatial Foundation · Open Source Initiative · SourceForge · Xiph.Org Foundation · X.Org Foundation






Licences

Apache · BSD · GNU GPL · LGPL · MIT · MPL · Permissive · Microsoft Public License · Microsoft Reciprocal License · FSF approved licenses






Challenges

Binary blob · Digital rights management · License proliferation · Mozilla software rebranding · Proprietary software · SCO-Linux controversies · Security · Software patents · Tivoization · Trusted Computing






Other topics

Alternative terms · Community · Linux distribution · Forking · Movement · Microsoft Open Specification Promise · Revolution OS · Comparison with closed source






List of open source software packages








Retrieved from "http://en.wikipedia.org/wiki/Low_Level_Virtual_Machine"
Categories: Free compilers and interpreters | Compilers | C compilers | C++ compilers | Fortran compilers | Register-based virtual machines 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Français
한국어
Italiano
日本語
Русский









 This page was last modified on 3 April 2009, at 06:23 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
