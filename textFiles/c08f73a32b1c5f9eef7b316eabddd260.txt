













Windows Installer - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Windows_Installer";
		var wgTitle = "Windows Installer";
		var wgAction = "view";
		var wgArticleId = "1158591";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280834706;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Windows Installer

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
This article is about the Microsoft Windows component.  For the installation of the operating system itself, see Windows Setup.

Windows Installer

Design by
Microsoft


Latest release
4.5


Operating system
Windows


Type
Installer


License
Proprietary


The Windows Installer (previously known as Microsoft Installer[1]) is an engine for the installation, maintenance, and removal of software on modern Microsoft Windows systems. The installation information, and often the files themselves, are packaged in installation packages, loosely relational databases structured as OLE Structured Storage Files and commonly known as "MSI files", from their default file extension. Windows Installer contains significant changes from its predecessor, Setup API. New features include a GUI framework and automatic generation of the uninstallation sequence. Windows Installer is positioned as an alternative to stand-alone executable installer frameworks such as older versions of InstallShield and Wise (later versions of both products are based on Windows Installer) and NSIS.
Microsoft encourages third parties to use Windows Installer as the basis for installation frameworks, so that they synchronize correctly with other installers and keep the internal database of installed products consistent. Important features such as rollback and versioning depend on a consistent internal database for reliable operation.




Contents


1 Logical structure of packages

1.1 Products
1.2 Components
1.3 Key paths
1.4 Features


2 Setup phases

2.1 User interface
2.2 Execute
2.3 Rollback


3 Other features

3.1 Advertisement
3.2 Installation on demand
3.3 Administrative installation
3.4 Custom Actions
3.5 Merge Modules and Nested Executables
3.6 Miscellaneous
3.7 Windows Vista


4 Diagnostic logging
5 Developing Installer Packages
6 ICE validation
7 Disadvantages
8 Versions
9 Tools
10 See also
11 References
12 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Logical structure of packages
A package describes the installation of one or more full products (Windows Installer does not handle dependencies between products) and is universally identified by a GUID (the PackageCode property). A product is made up of components, grouped into features.

[edit] Products
A single, installed, working program (or set of programs) is a product. A product is identified by a unique GUID (the ProductCode property). A product is not the same as a package: a single MSI package might install multiple different products. For example, an MSI might install French and English versions of a program, each of which is a different product.

[edit] Components
A component is the minimal part of a product—each component is treated by Windows Installer as a unit: the install developer cannot, for example, use a condition to specify to install just part of a component. Components can contain files, directories, COM components, registry keys, shortcuts, and other data. The end user does not directly interact with components.
Components are identified globally by GUIDs, thus the same component can be shared among several features of the same package or multiple packages, ideally through the use of Merge Modules (although, for this to work correctly, different components should not share any sub-components).

[edit] Key paths
A key path is a specific file, registry key, or ODBC data source that the package author specifies as critical for a given component. Because a file is the most common type of key path, the term key file is commonly used. A component can contain at most one key path; if a component has no explicit key path, the component's destination directory is taken to be the key path. When an MSI-based application is launched, Windows Installer checks the existence of these critical files or registry keys (that is, the key paths). If there is a mismatch between the current system state and the value specified in the MSI package (e.g., a key file is missing), then the related feature is re-installed. This process is also known as self-healing or self-repair. No two components should use the same key path.

[edit] Features
A feature is a hierarchical group of components—a feature can contain any number of components and other features (a feature contained in another feature is called a "subfeature"). Many software packages only involve one feature. More complex installation programs usually display a "custom setup" dialog box at run time, from which the end user can select which features to install or remove.
The package author defines the product features. A word-processing program, for example, might provide features for the main program executable, the program's help files, and optional spelling checker and stationery modules.

[edit] Setup phases

[edit] User interface
The user interface phase typically queries the target system and displays an installation wizard and enables the user to change various options that will affect the installation.
However, the user interface sequence should not make any changes to the system. Three reasons for this are as follows.

A user can install an MSI package in quiet mode, bypassing this phase entirely, by running the msiexec.exe command-line utility with the /qn (or /qb or /qr) option and specifying on the command line all the information that the wizard would normally gather. Therefore, any actions that occur in the user interface sequence will not be performed during a silent installation.
Similarly, clicking the Remove button in the Add or Remove Programs panel runs a product's uninstaller with a basic user interface, again with the result that any actions that occur in the user interface sequence will not be performed.
Actions that make system changes should not be scheduled in the user interface sequence as the user interface sequence runs with user privileges, and not with elevated privileges, as described in the following section.

Actions in the user interface sequence of a normal installation are defined in the InstallUISequence table. Similarly, there is an AdminUISequence in which you can place dialog boxes and actions to display and perform from within an administrative installation wizard.

[edit] Execute
When the user clicks the Finish or Install button in a typical MSI installation wizard, installation proceeds to the Execute phase, in which software components are actually installed. The Execute phase makes system changes, but does not display any user-interface elements.
Execute phase happens in two steps:
Immediate mode. In this phase, Windows Installer receives instructions, either from a user or an application, to install or uninstall features of a product. The requests cause the execution of sequences of actions, which query the installation database to build an internal script describing the execution phase in detail.
Deferred mode. In this phase, the script built in immediate mode is executed in the context of the privileged Windows Installer service (specifically, the LocalSystem account). The script must be executed by a privileged account because of the heterogeneity of the scenarios in which a setup operation is initiated—for example, elevated privileges are necessary to serve on-demand installation requests from non-privileged users. (In order to run with elevated privileges, however, the package must be deployed by a local administrator or advertised by a system administrator using Group Policy.)
Execute sequence actions for a normal installation are stored in the InstallExecuteSequence table. An MSI database can also contain AdminExecuteSequence and AdvtExecuteSequence tables to define actions to perform for administrative and advertised installations.

[edit] Rollback
All installation operations are transactional.[2] For each operation that Windows Installer performs, it generates an equivalent undo operation that would undo the change made to the system. In case any script action fails during deferred execution, or the operation is cancelled by the user, all the actions performed until that point are rolled back, restoring the system to its original state. Standard Windows Installer actions automatically write information into a rollback script; package authors who create custom actions that change the target system should also create corresponding rollback actions (as well as uninstallation actions and uninstallation-rollback actions). This mechanism can lead to the surprising situation whereby a failed uninstall leads to the application being re-installed.

[edit] Other features

[edit] Advertisement
Windows Installer can advertise a product rather than actually installing it.[3] The product will appear installed to the user, but it will not actually be installed until it is run for the first time by triggering an entry point (by means of a Start menu shortcut, by opening a document that the product is configured to handle, or by invoking an advertised COM class). A package can be advertised by an administrator using Group Policy or other deployment mechanism, or by running the msiexec executable with the /jm (for per-machine advertisement) or /ju (for per-user advertisement) switch. It should also be noted that some MSI packages authored in Installshield may prevent the use of these and other Native MSI features.
What is not known by most is that the user must have administrator privileges to complete this advertised installation. In most workplaces, end users are not administrators and this method of distribution will fail. MS created a workaround via Group Policies to "Elevate user privileges" during MSI installations. Administrators have since seen this GPO setting as a security hole since any MSI would automatically gain administrator privileges.

[edit] Installation on demand
Similar to advertisement, it consists in the installation of features as soon as the user tries to use them.[4] Again, depending on how the features need to be installed, the end-user may have to be an administrator on the PC for the feature to install.

[edit] Administrative installation
An administrative installation creates an uncompressed source image for a product, typically to be used for installing or running an application from a network location.[5] An administrative installation is not a typical installation, in that it does not create any shortcuts, register COM servers, create an Add or Remove Programs entry, and so on. Often an administrative installation enables a user to install the product in such a way that its features run from the uncompressed installation source.
Administrative installations are also useful when creating a Windows Installer patch, which requires uncompressed images of the earlier and current versions of a product in order to compute binary file differences. An administrative installation is performed by running the msiexec executable with the /a switch.

[edit] Custom Actions
The developer of an installer package may write code to serve their own purpose, delivered in a DLL. This can be executed during the installation sequences, including when the user clicks a button in the user interface, or during the InstallExecuteSequence. Custom Actions typically validate product license keys, or initialise more complex services. Developers should normally provide inverse custom actions for use during uninstallation.

[edit] Merge Modules and Nested Executables
A Windows Installer package may contain another package to be installed at the same time. These are ideally provided as a .msm file component, but may also be a separate executable program which will be unpacked from the installer package during the InstallExecuteSequence and can be run immediately. The file can then optionally be deleted before the end of the InstallExecuteSequence, and so is ideal for using with older installers.

[edit] Miscellaneous
Windows Installer allows applications to run directly from a network share, without the need for a local copy (run from source); it can repair broken installations by restoring damaged or deleted files, registry entries and application shortcuts; it supports per-user installation of applications; it can resolve component identifiers into paths, allowing applications to avoid hard-coded file paths; and it natively supports patches (.msp files made out of patch creation properties) and other customizations of packages through manipulations (transforms or .mst files) of a package's relational database. Version 2.0 onwards, it supports digital signatures and version 3.0 onwards, delta compression for patches.
It is also unique among installation software frameworks for Windows in that it is highly transparent. The full API and all command-line options are documented; packages are freely viewable and editable, both with free tools and programmatically (as opposed to the proprietary and even weakly encrypted packages of InstallShield); and the format for file archives is the well documented cabinet file format.

[edit] Windows Vista
Windows Installer 4.0, which was shipped with Windows Vista, incorporates new capabilities to take advantage of Vista's User Account Control architecture. MSI packages can be marked as not requiring elevated privileges to install, thus allowing a package to install without prompting the user for Administrator credentials. Windows Installer also works in conjunction with the Restart Manager; when installing or updating an application or system component with "full" user interface mode, the user will be displayed a list of affected applications that can be shut down, and then restarted after files have been updated. Installer actions running in silent mode perform these application restarts automatically. System services and tray applications can also be restarted in this manner.

[edit] Diagnostic logging
Windows Installer supports detailed logging as a powerful diagnostic tool.[6] Logging can be enabled in the following ways:

Command-line: If installing an MSI package from the command-line, the /L switch can be used to enable logging. For example, the following command installs Package.msi and outputs verbose logging to c:\Package.log:




msiexec /i Package.msi /l*v c:\Package.log




Windows Registry: The following registry value can be used to enable verbose logging:




Key: HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer
Value Name: Logging
Type: REG_SZ
Data: voicewarmupx



The resulting log is named MSI#####.log (where "#####" is a unique random identifier) and is placed in the user's Temp directory (the 'temp' directory location is per-user, and is pointed to by the environment variable %temp%).

Group Policy: The following Group Policy setting can be used to manage logging on multiple systems:




Computer Configuration -> Administrative Templates -> Windows Components -> Windows Installer -> Logging.




Windows Installer API: If installing an MSI package programmatically, the MsiEnableLog function call can be used to create a log file and set the logging level for the life of the calling process.


MsiLogging property: Windows Installer 4.0 introduces the MsiLogging property, which can be set to a list of flags indicating what information to log. The flags are similar to the flags that can be added to the /L switch to msiexec.exe or to the Logging policy setting. If MsiLogging is used, the MsiLogFileLocation property will be set to the location of the log file.

Although verbose logs are very useful for diagnosing Windows Installer problems, they can be very long and difficult to read without practice. A quick way to find the location of a problem in the log is to open it in a text editor (such as Notepad) and search for the phrase "Return Value 3". This entry commonly appears in logs close to the point where a critical error has occurred. The Windows Installer SDK provides a tool called WiLogUtl, which parses and annotates Windows Installer log files.
To output debug information in the log file, pass "x" on the command line or add it to the Logging registry value. For example, the following command installs Package.msi and outputs debug, verbose logging to c:\Package.log:



msiexec /i Package.msi /l*vx c:\Package.log




[edit] Developing Installer Packages
Creating an installer package for a new application is non-trivial. It is necessary to specify which files must be installed, to where, with what registry keys. Any non-standard operations can be done using Custom Actions, which are typically developed in DLLs. There are a number of commercial and freeware products to assist in creating installers; for example Installshield, Wise Installer and WiX. To varying degrees, the user interface and behaviour in less common situations such as unattended installation, may be configured. Once prepared, an installer package is "compiled" by reading the instructions and files from the developer's local machine, and creating the .msi file.
The user interface (dialog boxes) presented at the start of installation can be changed or configured by the setup engineer developing a new installer. There is a limited language of buttons, textfields and labels which can be arranged in a sequence of dialogue boxes. An installer package should be capable of running without any UI, for what is called "unattended installation".

[edit] ICE validation
Microsoft provides a set of Internal Consistency Evaluators, or ICEs, that can be used to detect potential problems with an MSI database.[7] The ICE rules are combined into CUB files, which are stripped-down MSI files containing custom actions that test the target MSI database's contents for validation warnings and errors. ICE validation can be performed with the Platform SDK tools Orca and msival2, or with validation tools that ship with the various authoring environments.
For example, some of the ICE rules are:

ICE09: Validates that any component destined for the System folder is marked as being permanent.
ICE24: Validates that the product code, product version, and product language have appropriate formats.
ICE33: Validates that the Registry table is not used for data better suited for another table (Class, Extension, Verb, and so on).

Addressing ICE validation warnings and errors is an important step in the release process.

[edit] Disadvantages
Though hard drive capacities have increased substantially some might consider the following as wasted space.
During installation, a copy of the .MSI package may be copied to the user's temporary directory prior to installation, even if the same package is stored locally. InstallShield products sometimes create an additional copy of the MSI in the temporary directory if the install package is localized. In general, the author of the MSI package controls this to an extent.
To prevent requiring the original installation source, Windows Installer packages and patches are cached in the %WinDir%\Installer directory (hidden by default). If the package builder chooses to use Installation on Demand or Repair feature in the package, the entire package (except for localization messages) and a stub .MSI package are copied to the %WinDir%\Installer directory.
A machine may be configured via group policy to create logs of all installation operations, such logs being created in the Windows temporary directory. These log files may be quite large with a full verbose log for a large package constituting several tens of megabytes. The log files can be useful for diagnostics, but if a user performs install related operations (install, uninstall, modify, repair or patching) with Windows Installer often, the space consumed by the logs can get out of hand. The logging policy is disabled by default, but some setup bootstrap programs may enable logging to assist customers in debugging installation problems. Microsoft does offer a tool called WILogUtl.exe to assist in processing Windows Installer log files.[8]
The technology of Windows Installer, which is based upon an SQL database inside the installer package file, is arguably over-complicated for its purpose. It defines a new language for dialog boxes, to be stored in SQL records, and turns a process that may be as simple as copying a file, into the work of a specialist software engineer, supported by an eco-system of tools.

[edit] Versions


Version
Shipped with[9]
Redistributable


1.0
Office 2000
-


1.1
Windows 2000
Windows 95/98/NT 4.0 SP6


1.2
Windows Me
-


2.0
Windows XP RTM/SP1, Windows 2000 SP3, Windows Server 2003
Windows 95/98/Me/NT 4.0 SP6/2000 below SP3


3.0
Windows XP SP2
Windows 2000 SP3/SP4, Windows XP RTM/SP1, Windows Server 2003


3.1
Windows Server 2003 SP1, Windows XP Professional x64 Edition, Windows XP SP3
Windows 2000 SP3/SP4, Windows XP RTM/SP1/SP2, Windows Server 2003


4.0
Windows Vista, Windows Server 2008
-


4.5[10]
Out-of-band release
Windows XP SP2 and later, Windows Server 2003 SP1 and later, Windows Vista and Windows Server 2008[11]


Windows Installer 5.0 will be released with Windows Server 2008 R2 and Windows 7[12]
To check which version is currently installed, type msiexec /? into the Windows Run box or command prompt.

[edit] Tools

WiX, with Visual Studio plugin
MSI Factory, WiX based tool for creating MSI based installers
msicreate, simple GUI wizard
MakeMSI and MsiDiff, feature rich scripting and MSI inspection tools
MSI2XML / XML2MSI, bi-directional Converter to XML
InstEd, is a free MSI editor
7-Zip extracts metadata and contents from MSI files
Total Commander plugin "InstallExplorer" can browse the contents


[edit] See also

List of installation software
Windows Installer CleanUp Utility
Merge Module
Installation
ZAP File - a way to perform an Application Installation when no MSI File exists.


[edit] References


^ when setup isn't just xcopy
^ Rollback Installation
^ Advertisement
^ Installation-On-Demand
^ Administrative Installation
^ Windows Installer Logging
^ Internal Consistency Evaluators - ICEs
^ WILogUtl.exe
^ Released Versions of Windows Installer
^ What's New in Windows Installer 4.5
^ [1]
^ [2]



[edit] External links

Windows installer start page
Windows Installer Team Blog at MSDN.


Windows Installer 4.5 expected around Q2-2008 (blog)


The Microsoft MSI FAQ
InstallSite.org "Resources for Setup Developers": This site publishes a useful released MSI version matrix.








v • d • e

Archive formats (comparison by type)





Archiving only

ar · cpio · shar · tar · LBR






Compression only

bzip2 · gzip · LZMA · SQ · compress






Archiving and compression

7z · ACE · ARC · Cabinet · cpt · DGCA · .dmg · GCA · kgb · LHA · LZX · RAR · qda · sit · SQX · zoo · ZIP






Software packaging and distribution

deb · pkg · RPM · MSI · JAR (WAR · RAR (Java) · EAR)













v • d • e

Windows components





Core

Aero · AutoRun · ClearType · Desktop Window Manager · DirectX · Explorer · Taskbar · Start menu · Shell (namespace · Special Folders · File associations) · Search (Saved search · iFilters) · Graphics Device Interface · Imaging Format · .NET Framework · Server Message Block  · XML Paper Specification · Active Scripting (WSH · VBScript · JScript) · COM (OLE · OLE Automation · DCOM · ActiveX · ActiveX Document · Structured storage · Transaction Server) · Previous Versions · Win32 console






Management
tools

Backup and Restore Center · command.com · cmd.exe · Control Panel (Applets) · Device Manager · Disk Cleanup · Disk Defragmenter · Driver Verifier · Event Viewer · Management Console · Netsh · Problem Reports and Solutions · Sysprep · System Policy Editor · System Configuration · Task Manager · System File Checker · System Restore · Windows Installer · PowerShell · Windows Update · WAIK · WinSAT · Windows Easy Transfer






Applications

Calculator · Calendar · Character Map · Contacts · DVD Maker · Fax and Scan · Internet Explorer · Journal · Mail · Magnifier · Media Center · Media Player · Meeting Space · Mobile Device Center · Mobility Center · Movie Maker · Narrator · Notepad · Paint · Photo Gallery · Private Character Editor · Remote Assistance · Sidebar · Snipping Tool · Sound Recorder · Speech Recognition · WordPad






Games

Chess Titans · FreeCell · Hearts · Hold 'Em · InkBall · Mahjong Titans · Minesweeper · Purble Place · Solitaire · Spider Solitaire  · Tinker






Kernel

Ntoskrnl.exe · hal.dll · System Idle Process · Svchost.exe · Registry · Windows service · Service Control Manager · DLL · EXE · NTLDR / Boot Manager · Winlogon · Recovery Console · I/O · WinRE · WinPE · Kernel Patch Protection






Services

BITS · Task Scheduler · Wireless Zero Configuration · Shadow Copy · Error Reporting · Multimedia Class Scheduler · CLFS






File systems

NTFS (Hard link · Junction point · Mount Point · Reparse point · Symbolic link · TxF · EFS) · FAT32·FAT16·FAT12 · exFAT · CDFS · UDF · DFS · IFS






Server

Domains · Active Directory · DNS · Group Policy · Roaming user profiles · Folder redirection · Distributed Transaction Coordinator · MSMQ · Windows Media Services · Rights Management Services · IIS · Terminal Services · WSUS · Windows SharePoint Services · Network Access Protection · DFS Replication · Remote Differential Compression · Print Services for UNIX · Remote Installation Services · Windows Deployment Services · System Resource Manager · Hyper-V






Architecture

NT series architecture · Object Manager · Startup process (Vista) · I/O request packets · Kernel Transaction Manager · Logical Disk Manager · Security Accounts Manager · Windows Resource Protection · LSASS · CSRSS · SMSS · MinWin






Security

UAC · BitLocker · Defender · DEP · Protected Media Path · Mandatory Integrity Control · UIPI · Windows Firewall · Security Center






Compatibility

Unix subsystem (Microsoft POSIX  · Interix) · Virtual DOS machine · Windows on Windows · WOW64













v • d • e

Windows command line programs and builtins (more)





File system
(basic)

attrib · cd · chdir · copy · del · deltree · dir · erase · expand · fdisk · format · makecab · md · mkdir · mklink · mountvol · move · ntbackup · rd · rename · ren · rmdir · robocopy · sfc · sys · type · xcopy






File system
(advanced)

assoc · cacls · chkdsk · chkntfs · comp · compact · convert · defrag · diskcomp · diskcopy · diskpart · fc · fixboot · fixmbr · fsutil · ftype · icacls · label · recover · reg · regsvr32 · replace · rsm · subst · tree · verify · vol · vssadmin






Processes

at · exit · kill · schtasks · start · sc · shutdown · taskkill · tasklist · tlist






User environment

append · chcp · color · date · finger · graftabl · mode · path · popd · pushd · runas · set · setver · setx · systeminfo · time · title · ver · whoami






Text processing

edit · edlin · more · sort






Shell programming

break · call · cmd · command · cscript · doskey · echo · endlocal · for · goto · if · pause · powershell · prompt · rem · setlocal · shift · forfiles · choice






Networking

arp · atmadm · cmstp · ftp · getmac · hostname · ipconfig · nbtstat · net · netsh · netstat · nslookup · pathping · ping · rcp · rexec · route · rsh · tcmsetup · telnet · tftp · tracert






Searching

find · findstr






Miscellaneous

bcdedit · bootcfg · cls · help · print · debug · exe2bin · lpq · lpr · msiexec · pentnt · w32tm · wmic









Retrieved from "http://en.wikipedia.org/wiki/Windows_Installer"
Categories: Installation software | Windows components | Microsoft application programming interfaces | Package management systems | Windows administration 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Dansk
Deutsch
Español
Français
한국어
Italiano
Nederlands
日本語
Polski
Português
Русский
Slovenčina
中文









 This page was last modified on 31 March 2009, at 10:15.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
