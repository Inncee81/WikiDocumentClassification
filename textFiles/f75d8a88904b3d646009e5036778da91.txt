













Computational geometry - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Computational_geometry";
		var wgTitle = "Computational geometry";
		var wgAction = "view";
		var wgArticleId = "176927";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277269955;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Computational geometry

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Computational geometry is a branch of computer science devoted to the study of algorithms which can be stated in terms of geometry. Some purely geometrical problems arise out of the study of computational geometric algorithms, and such problems are also considered to be part of computational geometry.
The main impetus for the development of computational geometry as a discipline was progress in computer graphics, computer-aided design and manufacturing (CAD/CAM), but many problems in computational geometry are classical in nature.
Other important applications of computational geometry include robotics (motion planning and visibility problems), geographic information systems (GIS) (geometrical location and search, route planning), integrated circuit design (IC geometry design and verification), computer-aided engineering (CAE) (programming of numerically controlled (NC) machines).
The main branches of computational geometry are:

Combinatorial computational geometry, also called algorithmic geometry, which deals with geometric objects as discrete entities. A groundlaying book in the subject by Preparata and Shamos dates the first use of the term "computational geometry" in this sense by 1975.[1]
Numerical computational geometry, also called machine geometry, computer-aided geometric design (CAGD), or geometric modeling, which deals primarily with representing real-world objects in forms suitable for computer computations in CAD/CAM systems. This branch may be seen as a further development of descriptive geometry and is often considered a branch of computer graphics or CAD. The term "computational geometry" in this meaning has been in use since 1971.[2]





Contents


1 Combinatorial computational geometry

1.1 Problem classes

1.1.1 Static problems
1.1.2 Geometric query problems
1.1.3 Dynamic problems
1.1.4 Variations




2 Numerical computational geometry
3 See also
4 References
5 Further reading

5.1 Journals

5.1.1 Combinatorial/algorithmic computational geometry




6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Combinatorial computational geometry
The primary goal of research in combinatorial computational geometry is to develop efficient algorithms and data structures for solving problems stated in terms of basic geometrical objects: points, line segments, polygons, polyhedra, etc.
Some of these problems seem so simple that they were not regarded as problems at all until the advent of computers. Consider, for example, the Closest pair problem:

Given n points in the plane, find the two with the smallest distance from each other.

One could compute the distances between all the pairs of points, of which there are n(n-1)/2, then pick the pair with the smallest distance. This brute-force algorithm takes O(n2) time; i.e. its execution time is proportional to the square of the number of points. A classic result in computational geometry was the formulation of an algorithm that takes O(n log n). Randomized algorithms that take O(n) expected time, as well as a deterministic algorithm that takes O(n log log n) time, have also been discovered.
Computational geometry focuses heavily on computational complexity since the algorithms are meant to be used on very large datasets containing tens and hundreds of million points. For large data sets, the difference between O(n2) and O(n log n) can be the difference between days and seconds of computation.

[edit] Problem classes
The core problems in computational geometry may be classified in different ways, according to various criteria. The following general classes may be distinguished.

[edit] Static problems
In the problems of this category, some input is given and the corresponding output needs to be constructed or found. Some fundamental problems of this type are:

Convex hull: Given a set of points, find the smallest convex polyhedron/polygon containing all the points.
Line segment intersection: Find the intersections between a given set of line segments.
Delaunay triangulation
Voronoi diagram: Given a set of points, partition the space according to which point is closest.
Linear programming
Closest pair of points: Given a set of points, find the two with the smallest distance from each other.
Euclidean shortest path: Connect two points in a Euclidean space (with polyhedral obstacles) by a shortest path.
Polygon triangulation: Given a polygon, partition its interior into triangles

The computational complexity for this class of problems is estimated by the time and space (computer memory) required to solve a given problem instance.

[edit] Geometric query problems
In geometric query problems, commonly known as geometric search problems, the input consists of two parts: the search space part and the query part, which varies over the problem instances. The search space typically needs to be preprocessed, in a way that multiple queries can be answered efficiently.
Some fundamental geometric query problems are:

Range searching: Preprocess a set of points, in order to efficiently count the number of points inside a query region.
Point location: Given a partitioning of the space into cells, produce a data structure that efficiently tells in which cell a query point is located.
Nearest neighbor: Preprocess a set of points, in order to efficiently find which point is closest to a query point.
Ray tracing: Given a set of objects in space, produce a data structure that efficiently tells which object a query ray intersects first.

If the search space is fixed, the computational complexity for this class of problems is usually estimated by:

the time and space required to construct the data structure to be searched in
the time (and sometimes an extra space) to answer queries.

For the case when the search space is allowed to vary, see "Dynamic problems".

[edit] Dynamic problems
A yet another major class are the dynamic problems, in which the goal is to find an efficient algorithm for finding a solution repeatedly after each incremental modification of the input data (addition or deletion input geometric elements). Algorithms for problems of this type typically involve dynamic data structures. Any of the computational geometric problems may be converted into a dynamic one. For example, the range searching problem may be converted into the dynamic range searching problem by providing for addition and/or deletion of the points. The dynamic convex hull problem is to keep track of the convex hull, e.g., for the dynamically changing set of points, i.e., while the input points are inserted or deleted.
The computational complexity for this class of problems is estimated by:

the time and space required to construct the data structure to be searched in
the time and space to modify the searched data structure after an incremental change in the search space
the time (and sometimes an extra space) to answer a query.


[edit] Variations
Some problems may be treated as belonging to either of the categories, depending on the context. For example, consider the following problem.

Point in polygon: Decide whether a point is inside or outside a given polygon.

In many applications this problem is treated as a single-shot one, i.e., belonging to the first class. For example, in many applications of computer graphics a common problem is to find which area on the screen is clicked by a mouse cursor. However in some applications the polygon in question is invariant, while the point represents a query. For example, the input polygon may represent a border of a country and a point is a position of an aircraft, and the problem is to determine whether the aircraft violated the border. Finally, in the previously mentioned example of computer graphics, in CAD applications the changing input data are often stored in dynamic data structures, which may be exploited to speed-up the point-in-polygon queries.
In some contexts of query problems there are reasonable expectations on the sequence of the queries, which may be exploited either for efficient data structures or for tighter computational complexity estimates. For example, in some cases it is important to know the worst case for the total time for the whole sequence of N queries, rather than for a single query. See also "amortized analysis".

[edit] Numerical computational geometry
Main article: computer-aided geometric design
This branch is also known as geometric modelling and computer-aided geometric design (CAGD).
Core problems are curve and surface modelling and representation.
The most important instruments here are parametric curves and parametric surfaces, such as Bezier curves, spline curves and surfaces. An important non-parametric approach is the level set method.
Application areas include shipbuilding, aircraft, and automotive industries. The modern ubiquity and power of computers means that even perfume bottles and shampoo dispensers are designed using techniques unheard of by shipbuilders of 1960s.

[edit] See also

List of combinatorial computational geometry topics
List of numerical computational geometry topics
CAD/CAM/CAE
Robotics
Solid modeling
Computational topology
Digital geometry
Computational Geometry Algorithms Library (CGAL)
Space partitioning
Wikiversity:Topic:Computational geometry


[edit] References

^ Franco P. Preparata and Michael Ian Shamos (1985). Computational Geometry - An Introduction. Springer-Verlag. 1st edition: ISBN 0-387-96131-3; 2nd printing, corrected and expanded, 1988: ISBN 3-540-96131-3. 
^ A.R. Forrest, "Computational geometry", Proc. Royal Society London, 321, series 4, 187-195 (1971)


[edit] Further reading

List of books in computational geometry


[edit] Journals

[edit] Combinatorial/algorithmic computational geometry
Below is the list of the major journals that have been publishing research in geometric algorithms. Please notice with the appearance of journals specifically dedicated to computational geometry, the share of geometric publications in general-purpose computer science and computer graphics journals decreased.

ACM Computing Surveys
ACM Transactions on Graphics
Acta Informatica
Advances in Geometry
Algorithmica
Ars Combinatoria
Computational Geometry: Theory and Applications
Communications of the ACM
Computer Aided Geometric Design
Computer Graphics and Applications
Computer Graphics World
Discrete & Computational Geometry
Geombinatorics
Geometriae Dedicata
IEEE Transactions on Graphics
IEEE Transactions on Computers
IEEE Transactions on Pattern Analysis and Machine Intelligence
Information Processing Letters
International Journal of Computational Geometry and Applications
Journal of Combinatorial Theory, series B
Journal of the ACM
Journal of Algorithms
Journal of Computer and System Sciences
Management Science
Pattern Recognition
Pattern Recognition Letters
SIAM Journal on Computing
SIGACT News; featured the "Computational Geometry Column" by Joseph O'Rourke
Theoretical Computer Science
The Visual Computer


[edit] External links

Computational Geometry
Computational Geometry Pages
Geometry In Action
"Strategic Directions in Computational Geometry — Working Group Report" (1996)




Retrieved from "http://en.wikipedia.org/wiki/Computational_geometry"
Categories: Geometric algorithms | Computational science 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Deutsch
Euskara
فارسی
Français
한국어
日本語
Português
Русский
Slovenščina
中文









 This page was last modified on 14 March 2009, at 22:19.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
