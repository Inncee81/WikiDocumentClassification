













Class diagram - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Class_diagram";
		var wgTitle = "Class diagram";
		var wgAction = "view";
		var wgArticleId = "2527630";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280624226;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Class diagram

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





The introduction to this article provides insufficient context for those unfamiliar with the subject.
Please help improve the article with a good introductory style. (February 2009)






Hierarchy of UML 2.0 Diagrams, shown as a class diagram


In software engineering, a class diagram in the Unified Modeling Language (UML), is a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, and the relationships between the classes.




Contents


1 Members

1.1 Visibility
1.2 Scope


2 Relationships

2.1 Instance Level Relationships

2.1.1 External links
2.1.2 Association
2.1.3 Aggregation
2.1.4 Composition
2.1.5 Differences between Composition and Aggregation


2.2 Class Level Relationships

2.2.1 Generalization
2.2.2 Realization


2.3 General Relationship

2.3.1 Dependency


2.4 Multiplicity


3 See also
4 References
5 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Members
The UML provide mechanisms to represent class members, such as attributes and methods, and additional information about them.

[edit] Visibility
To specify the visibility of a class member (attributes and methods) there are the following notations that must be placed before the member's name.[1]:


+
public
visible to all elements that can access the contents of the namespace that owns it.


#
protected
visible to elements that have a generalization relationship to the namespace that owns it.


-
private
only visible inside the namespace that owns it.


~
package
owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility. Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility). Outside the nearest enclosing package, an element marked as having package visibility is not visible.



[edit] Scope
The UML specifies two types of scope for members: instance and classifier[1]. In the case of instance members, the scope is a specific instance. For attributes, it means that its value can vary between instances. For methods, it means that its invocation affects the instance state, in other words, affects the instance attributes. Otherwise, in the classifier member, the scope is the class. For attributes, it means that its value is equal for all instances. For methods, it means that its invocation do not affect the instance state. Classifier members are commonly recognized as "static" in many programming languages. To indicate that a member has the classifier scope, its name must be underlined. Otherwise, as default, the instance scope is considered.

[edit] Relationships
A relationship is a general term covering the specific types of logical connections found on class and object diagrams. UML shows the following relationships:

[edit] Instance Level Relationships

[edit] External links
A Link is the basic relationship among objects. It is represented as a line connecting two or more object boxes. It can be shown on an object diagram or class diagram. A link is an instance of an association.

[edit] Association




Class diagram example of association between two classes


An Association represents a family of links. Binary associations (with two ends) are normally represented as a line, with each end connected to a class box. Higher order associations can be drawn with more than two ends. In such cases, the ends are connected to a central diamond.
An association can be named, and the ends of an association can be adorned with role names, ownership indicators, multiplicity, visibility, and other properties. There are five different types of association. Bi-directional and uni-directional associations are the most common ones. For instance, a flight class is associated with a plane class bi-directionally. Associations can only be shown on class diagrams.
Example: "department offers courses", is an association relationship.

[edit] Aggregation




Class diagram showing Aggregation between two classes


Aggregation is a variant of the "has a" or association relationship; aggregation is more specific than association. It is an association that represents a part-whole relationship. As a type of association, an aggregation can be named and have the same adornments that an association can. However, an aggregation may not involve more than two classes.
Aggregation can occur when a class is a collection or container of other classes, but where the contained classes do not have a strong life cycle dependency on the container--essentially, if the container is destroyed, its contents are not.
In UML, it is graphically represented as a clear diamond shape on the containing class end of the tree of lines that connect contained class(es) to the containing class.

[edit] Composition




Class diagram showing Composition between two classes at top and Aggregation between two classes at bottom


Composition is a stronger variant of the "has a" or association relationship; composition is more specific than aggregation. It is represented with a solid diamond shape.
Composition usually has a strong life cycle dependency between instances of the container class and instances of the contained class(es): If the container is destroyed, normally every instance that it contains is destroyed as well. Note that a part can (where allowed) be removed from a composite before the composite is deleted, and thus not be deleted as part of the composite.
The UML graphical representation of a composition relationship is a filled diamond shape on the containing class end of the tree of lines that connect contained class(es) to the containing class.

[edit] Differences between Composition and Aggregation
The whole of a composition must have a multiplicity of 0..1 or 1, indicating that a part must be for only one whole. The whole of an aggregation may have any multiplicity.
When attempting to represent real-world whole-part relationships, e.g., an engine is part of a car, the composition relationship is most appropriate. However, when representing a software or database relationship, e.g., car model engine ENG01 is part of a car model CM01, an aggregation relationship is best, as the engine, ENG01 may be also part of a different car model. Thus the aggregation relationship is often called "catalog" containment to distinguish it from composition's "physical" containment.

[edit] Class Level Relationships

[edit] Generalization




Class diagram showing generalization between one superclass and two subclasses


The Generalization relationship indicates that one of the two related classes (the subtype) is considered to be a specialized form of the other (the supertype) and supertype is considered as Generalization of subtype. In practice, this means that any instance of the subtype is also an instance of the supertype. An exemplary tree of generalizations of this form is found in binomial nomenclature: human beings are a subtype of simian, which are a subtype of mammal, and so on. The relationship is most easily understood by the phrase 'A is a B' (a human is a mammal, a mammal is an animal).
The UML graphical representation of a Generalization is a hollow triangle shape on the supertype end of the line (or tree of lines) that connects it to one or more subtypes.
The generalization relationship is also known as the inheritance or "is a" relationship.
The supertype in the generalization relationship is also known as the "parent", superclass, base class, or base type.
The subtype in the generalization relationship is also known as the "child", subclass, derived class, derived type, inheriting class, or inheriting type.
Note that this relationship bears no resemblance to the biological parent/child relationship: the use of these terms is extremely common, but can be misleading.

Generalization-Specialization relationship


A is a type of B
E.Â g. "an oak is a type of tree", "an automobile is a type of vehicle"

Generalization can only be shown on class diagrams and on Use case diagrams.

[edit] Realization
In UML modeling, a realization relationship is a relationship between two model elements, in which one model element (the client) realizes the behavior that the other model element (the supplier) specifies. A realization is indicated by a dashed line with an unfilled arrowhead towards the supplier.
Realizations can only be shown on class diagrams.
A realization is a relationship between classes, interfaces, components, and packages that connects a client element with a supplier element. A realization relationship between classes and interfaces and between components and interfaces shows that the class realizes the operations offered by the interface.

[edit] General Relationship




Class diagram showing dependency between "Car" class and "Wheel" class



[edit] Dependency
Dependency is a weaker form of relationship which indicates that one class depends on another because it uses it at some point in time.

[edit] Multiplicity
The association relationship indicates that (at least) one of the two related classes makes reference to the other. In contrast with the generalization relationship, this is most easily understood through the phrase 'A has a B' (a mother cat has kittens, kittens have a mother cat).
The UML representation of an association is a line with an optional arrowhead indicating the role of the object(s) in the relationship, and an optional notation at each end indicating the multiplicity of instances of that entity (the number of objects that participate in the association). Common multiplicities are:...


0..1
No instances, or one instance (optional, may)


1
Exactly one instance


0..* or *
Zero or more instances


1..*
One or more instances (at least one)



[edit] See also



Wikimedia Commons has media related to: Class diagram



Executable UML
List of UML tools


Related diagrams


Domain model
Entity-relationship model
Object diagram


[edit] References


^ a b OMG Unified Modeling Language (OMG UML) Superstructure, Version 2.2 Beta: May 2008. Retrieved 16 November 2008.







This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (February 2009)



[edit] External links

Introduction to UML 2 Class Diagrams
UML 2 Class Diagram Guidelines
IBM Class diagram Introduction








vÂ â¢Â dÂ â¢Â e

Unified Modeling Language





Actors

Organizations: Object Management GroupÂ â¢ UML PartnersÂ â¢ Persons: Grady BoochÂ â¢ Ivar JacobsonÂ â¢ James Rumbaugh






Concepts

Object oriented: Object-oriented programmingÂ â¢ Object-oriented analysis and design
Structure: ActorÂ â¢ AttributeÂ â¢ ArtifactÂ â¢ ClassÂ â¢ ComponentÂ â¢ InterfaceÂ â¢ ObjectÂ â¢ Package
Behavior: ActivityÂ â¢ EventÂ â¢ MessageÂ â¢ MethodÂ â¢ StateÂ â¢ UseÂ case
Relationships: AggregationÂ â¢ AssociationÂ â¢ CompositionÂ â¢ DependencyÂ â¢ Generalization (or Inheritance)
Extensibility: ProfileÂ â¢ StereotypeÂ â¢ Other concepts: Multiplicity






Structure diagrams

Class diagramÂ â¢ Component diagramÂ â¢ Composite structure diagramÂ â¢ Deployment diagramÂ â¢ Object diagramÂ â¢ Package diagram






Behavior diagrams

Activity diagramÂ â¢ State Machine diagramÂ â¢ Use case diagram






Interaction diagrams

Communication diagramÂ â¢ Sequence diagramÂ â¢ Interaction overview diagramÂ â¢ Timing diagram






Other topics

Glossary of UML termsÂ â¢ IBM Rational Unified ProcessÂ â¢ List of UML toolsÂ â¢ Systems Modeling LanguageÂ â¢ UML colorsÂ â¢ XMI









Retrieved from "http://en.wikipedia.org/wiki/Class_diagram"
Categories: UML diagramsHidden categories: Wikipedia articles needing context | Wikipedia introduction cleanup | Articles needing additional references from February 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




Â 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


ÐÑÐ»Ð³Ð°ÑÑÐºÐ¸
Deutsch
EspaÃ±ol
FranÃ§ais
Italiano
LietuviÅ³
æ¥æ¬èª
Polski
PortuguÃªs
Ð ÑÑÑÐºÐ¸Ð¹
SlovenÄina
Svenska
Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°









 This page was last modified on 30 March 2009, at 11:13.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  WikipediaÂ® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
