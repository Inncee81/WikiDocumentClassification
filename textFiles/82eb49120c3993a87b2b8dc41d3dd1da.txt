













Communicating sequential processes - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Communicating_sequential_processes";
		var wgTitle = "Communicating sequential processes";
		var wgAction = "view";
		var wgArticleId = "247370";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281212413;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Communicating sequential processes

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In computer science, Communicating Sequential Processes (CSP) is a formal language for describing patterns of interaction in concurrent systems.[1] It is a member of the family of mathematical theories of concurrency known as process algebras, or process calculi. CSP was influential in the development of the occam programming language.[2][1]
CSP was first described in a 1978 paper[3] by C. A. R. Hoare, but has since evolved substantially. CSP has been practically applied in industry as a tool for specifying and verifying the concurrent aspects of a variety of different systems — such as the T9000 Transputer,[4] and a secure ecommerce system. [5] The theory of CSP itself is also still the subject of active research, including work to increase its range of practical applicability (e.g. increasing the scale of the systems that can be tractably analyzed[6]).




Contents


1 History

1.1 Applications


2 Informal description

2.1 Primitives
2.2 Algebraic operators
2.3 Examples


3 Formal definition

3.1 Syntax
3.2 Formal semantics

3.2.1 Denotational semantics




4 Tools
5 Related formalisms
6 See also
7 Further reading
8 References
9 External links

9.1 General
9.2 Analysis tools
9.3 Implementation support







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The version of CSP presented in Hoare's original 1978 paper was essentially a concurrent programming language rather than a process calculus. It had a substantially different syntax than later version of CSP, did not possess mathematically defined semantics[7], and was unable to represent unbounded nondeterminism.[8] Programs in the original CSP were written as a parallel composition of a fixed number of sequential processes communicating with each other strictly through synchronous message-passing. In contrast to later versions of CSP, each process was assigned an explicit name, and the source or destination of a message was defined by specifying the name of the intended sending or receiving process. For example the process

COPY = *[c:character; west?c → east!c]

repeatedly receives a character from the process named west, and then sends that character to process named east. The parallel composition

[west::DISASSEMBLE || X::COPY || east::ASSEMBLE]

assigns the names west to the DISASSEMBLE process, X to the COPY process, and east to the ASSEMBLE process, and executes these three processes concurrently.[3]
Following the publication of the original version of CSP, Hoare, Stephen Brookes, and A. W. Roscoe developed and refined the theory of CSP into its modern, process algebraic form. The approach taken in developing CSP into a process algebra was influenced by Robin Milner's work on the Calculus of Communicating Systems (CCS), and vice versa. The theoretical version of CSP was initially presented in a 1984 article by Brookes, Hoare, and Roscoe[9], and later in Hoare's book Communicating Sequential Processes[7], which was published in 1985. In September 2006, that book was still the third-most cited computer science reference of all time according to Citeseer (albeit an unreliable source due to the nature of its sampling). The theory of CSP has undergone a few minor changes since the publication of Hoare's book. Most of these changes were motivated by the advent of automated tools for CSP process analysis and verification. Roscoe's The Theory and Practice of Concurrency[1] describes this newer version of CSP.

[edit] Applications
An early and important application of CSP was its use for specification and verification of elements of the INMOS T9000 Transputer, a complex superscalar pipelined processor designed to support large-scale multiprocessing. CSP was employed in verifying the correctness of both the processor pipeline, and the Virtual Channel Processor which managed off-chip communications for the processor.[4]
Industrial application of CSP to software design has usually focused on dependable and safety-critical systems. For example, the Bremen Institute for Safe Systems and Daimler-Benz Aerospace modeled a fault management system and avionics interface (consisting of some 23,000 lines of code) intended for use on the International Space Station in CSP, and analyzed the model to confirm that their design was free of deadlock and livelock.[10][11] The modeling and analysis process was able to uncover a number of errors that would have been difficult to detect using testing alone. Similarly, Praxis High Integrity Systems applied CSP modeling and analysis during the development of software (approximately 100,000 lines of code) for a secure smart-card Certification Authority to verify that their design was secure and free of deadlock. Praxis claims that the system has a much lower defect rate than comparable systems.[5]
Since CSP is well-suited to modeling and analyzing systems that incorporate complex message exchanges, it has also been applied to the verification of communications and security protocols. A prominent example of this sort of application is Lowe’s use of CSP and the FDR refinement-checker to discover a previously unknown attack on the Needham-Schroeder public-key authentication protocol, and then to develop a corrected protocol able to defeat the attack.[12]

[edit] Informal description
As its name suggests, CSP allows the description of systems in terms of component processes that operate independently, and interact with each other solely through message-passing communication. However, the "Sequential" part of the CSP name is now something of a misnomer, since modern CSP allows component processes to be defined both as sequential processes, and as the parallel composition of more primitive processes. The relationships between different processes, and the way each process communicates with its environment, are described using various process algebraic operators. Using this algebraic approach, quite complex process descriptions can be easily constructed from a few primitive elements.

[edit] Primitives
CSP provides two classes of primitives in its process algebra:

Events
Events represent communications or interactions. They are assumed to be indivisible and instantaneous. They may be atomic names (e.g. on, off), compound names (e.g. valve.open, valve.close), or input/output events (e.g. mouse?xy, screen!bitmap).
Primitive processes
Primitive processes represent fundamental behaviors: examples include STOP (the process that communicates nothing, also called deadlock), and SKIP (which represents successful termination)


[edit] Algebraic operators
CSP has a wide range of algebraic operators. The principal ones are:

Prefix
The prefix operator combines an event and a process to produce a new process. For example,









is the process which is willing to communicate a with its environment, and, after a, behaves like the process P.


Deterministic Choice
The deterministic (or external) choice operator allows the future evolution of a process to be defined as a choice between two component processes, and allows the environment to resolve the choice by communicating an initial event for one of the processes. For example,









is the process which is willing to communicate the initial events a and b, and subsequently behaves as either P or Q depending on which initial event the environment chooses to communicate. If both a and b were communicated simultaneously the choice would be resolved nondeterministically.


Nondeterministic Choice
The nondeterministic (or internal) choice operator allows the future evolution of a process to be defined as a choice between two component processes, but does not allow the environment any control over which of the component processes will be selected. For example,









can behave like either  or . It can refuse to accept a or b, and is only obliged to communicate if the environment offers both a and b. Nondeterminism can be inadvertently introduced into a nominally deterministic choice if the initial events of both sides of the choice are identical. So, for example,









is equivalent to









Interleaving
The interleaving operator represents completely independent concurrent activity. The process









behaves as both P and Q simultaneously. The events from both processes are arbitrarily interleaved in time.


Interface Parallel
The interface parallel operator represents concurrent activity that requires synchronization between the component processes – any event in the interface set can only occur when all component processes are able to engage in that event. For example, the process









requires that P and Q must both be able to perform event a before that event can occur. So, for example, the process









can engage in event a, and become the process









while









will simply deadlock.


Hiding
The hiding operator provides a way to abstract processes, by making some events unobservable. A trivial example of hiding is









which, assuming that the event a doesn't appear in P, simply reduces to




P




[edit] Examples
One of the archetypal CSP examples is an abstract representation of a chocolate vending machine, and its interactions with a person wishing to buy some chocolate. This vending machine might be able to carry out two different events, “coin” and “choc” which represent the insertion of payment and the delivery of a chocolate respectively. A machine which demands payment before offering a chocolate can be written as:



A person who might choose to use a coin or card to make payments could be modelled as:



These two processes can be put in parallel, so that they can interact with each other. The behaviour of the composite process depends on the events that the two component processes must synchronise on. Thus,



whereas if synchronization was only required on “coin”, we would obtain



If we abstract this latter composite process by hiding the “coin” and “card” events, i.e.



we get the nondeterministic process



This is a process which either offers a “choc” event and then stops, or just stops. In other words, if we treat the abstraction as an external view of the system (e.g., someone who does not see the decision reached by the person), nondeterminism has been introduced.

[edit] Formal definition

[edit] Syntax
The syntax of CSP defines the “legal” ways in which processes and events may be combined. Let e be an event, and X be a set of events. Then the basic syntax of CSP can be defined as:



Note that, in the interests of brevity, the syntax presented above omits the  process, which represents divergence, as well as various operators such as alphabetized parallel, piping, and indexed choices.

[edit] Formal semantics



This section requires expansion.


CSP has been imbued with several different formal semantics, which define the meaning of syntactically correct CSP expressions. The theory of CSP includes mutually consistent denotational semantics, algebraic semantics, and operational semantics.

[edit] Denotational semantics
The three major denotational models of CSP are the traces model, the stable failures model, and the failures/divergences model. Semantic mappings from process expressions to each of these three models provide the denotational semantics for CSP.[1]
The traces model defines the meaning of a process expression as the set of sequences of events (traces) that the process can be observed to perform. For example,



 since STOP performs no events
 since the process  can be observed to have performed no events, the event a, or the sequence of events a followed by b



More formally, the meaning of a process P in the traces model is defined as  such that:

 (i.e.  contains the empty sequence)
 (i.e.  is prefix-closed)

where  is the set of all possible finite sequences of events.
The stable failures model extends the traces model with refusal sets, which are sets of events  that a process can refuse to perform. A failure is a pair , consisting of a trace s, and a refusal set X which identifies the events that a process may refuse once it has executed the trace s. The observed behavior of a process in the stable failures model is described by the pair . For example,








The failures/divergence model further extends the failures model to handle divergence. A process in the failures/divergences model is a pair  where  is defined as the set of all traces that can lead to divergent behavior and .

[edit] Tools
Over the years, a number of tools for analyzing and understanding systems described using CSP have been produced. Early tool implementations used a variety of machine-readable syntaxes for CSP, making input files written for different tools incompatible. However, most CSP tools have now standardized on the machine-readable dialect of CSP devised by Bryan Scattergood, sometimes referred to as CSPM[13]. The CSPM dialect of CSP possesses a formally defined operational semantics, which includes an embedded functional programming language.
The most well-known CSP tool is probably Failures/Divergence Refinement 2 (FDR2), which is a commercial product developed by Formal Systems Europe Ltd. FDR2 is often described as a model checker, but is technically a refinement checker, in that it converts two CSP process expressions into Labelled Transition Systems (LTSs), and then determines whether one of the processes is a refinement of the other within some specified semantic model (traces, failures, or failures/divergence)[14]. FDR2 applies various state-space compression algorithms to the process LTSs in order to reduce the size of the state-space that must be explored during a refinement check.
The Adelaide Refinement Checker (ARC) [15] is a CSP refinement checker developed by the Formal Modelling and Verification Group at The University of Adelaide. ARC differs from FDR2 in that it internally represents CSP processes as Ordered Binary Decision Diagrams (OBDDs), which alleviates the state explosion problem of explicit LTS representations without requiring the use of state-space compression algorithms such as those used in FDR2.
The ProB project[16], which is hosted by the Institut für Informatik, Heinrich-Heine-Universität Düsseldorf, was originally created to support analysis of specifications constructed in the B method. However, it also includes support for analysis of CSP processes both through refinement checking, and LTL model-checking. ProB can also be used to verify properties of combined CSP and B specifications.
The Process Analysis Toolkit (PAT)[17] is a CSP analysis tool developed in the School of Computing at the National University of Singapore. PAT is able to perform refinement checking, LTL model-checking, and simulation of CSP processes. The PAT process language extends CSP with support for mutable shared variables, and asynchronous message passing, both of which provide a convenient syntactic sugar for well-known process modelling patterns used in standard CSP. The PAT syntax is similar, but not identical, to CSPM.[18] The principal differences are the use of semicolons to terminate process expressions, the inclusion of syntactic sugar for variables and assignments, and the use of slightly different syntax for internal choice and parallel composition.

[edit] Related formalisms
Several other specification languages and formalisms have been derived from, or inspired by, the classic untimed CSP, including:

Timed CSP, which incorporates timing information for reasoning about real-time systems
Receptive Process Theory, a specialization of CSP that assumes an asynchronous (i.e. nonblocking) send operation
CSPP
HCSP
Wright, an architecture description language
TCOZ, an integration of Timed CSP and Object Z
Circus, an integration of CSP and Z based on the Unifying Theories of Programming
CspCASL, an extension of CASL that integrates CSP


[edit] See also

Ease programming language - same lead designer as Occam, uses CSP as its formal basis.
JCSP is a blending of CSP & occam concepts in a Java thread support API.
Limbo is a language that implements concurrency inside the Inferno operating system, in a style inspired by CSP.
Plan 9 from Bell Labs and Plan 9 from User Space include the libthread library which allows the use of a CSP-inspired concurrency model from C.
VerilogCSP is a set of macros added to Verilog HDL to support Communicating Sequential Processes channel communications.


[edit] Further reading

Hoare, C. A. R. (2004) [1985] (PDF). Communicating Sequential Processes. Prentice Hall International. http://www.usingcsp.com/. 

This book has been updated by Jim Davies at the Oxford University Computing Laboratory and the new edition is available for download as a PDF file at the Using CSP website.




Roscoe, A. W. (1997). The Theory and Practice of Concurrency. Prentice Hall. ISBN 0-13-674409-5. 

Some links relating to this book are available here. The full text is available for download as a PS or PDF file from Bill Roscoe's list of academic publications.




[edit] References


^ a b c d Roscoe, A. W. (1997). The Theory and Practice of Concurrency. Prentice Hall. ISBN 0-13-674409-5. 
^ INMOS (1995-05-12) (PDF). occam 2.1 Reference Manual. SGS-THOMSON Microelectronics Ltd.. http://www.wotug.org/occam/documentation/oc21refman.pdf. , INMOS document 72 occ 45 03
^ a b Hoare, C. A. R. (1978). "Communicating sequential processes". Communications of the ACM 21 (8): 666–677. doi:10.1145/359576.359585. 
^ a b Barrett, G. (1995). "Model checking in practice: The T9000 Virtual Channel Processor". IEEE Transactions on Software Engineering 21 (2): 69–78. doi:10.1109/32.345823. 
^ a b Hall, A; R. Chapman (2002). "Correctness by construction: Developing a commercial secure system" (PDF). IEEE Software 19 (1): 18–25. doi:10.1109/52.976937. http://www.anthonyhall.org/c_by_c_secure_system.pdf. 
^ Creese, S. (2001). Data Independent Induction: CSP Model Checking of Arbitrary Sized Networks. D. Phil.. Oxford University. 
^ a b Hoare, C. A. R. (1985). Communicating Sequential Processes. Prentice Hall. ISBN 0-13-153289-8. 
^ William Clinger (June 1981). Foundations of Actor Semantics. Mathematics Doctoral Dissertation. MIT. https://dspace.mit.edu/handle/1721.1/6935. 
^ Brookes, Stephen; C. A. R. Hoare and A. W. Roscoe (1984). "A Theory of Communicating Sequential Processes". Journal of the ACM 31 (3): 560–599. doi:10.1145/828.833. 
^ Buth, B.; M. Kouvaras, J. Peleska, and H. Shi (December 1997). "Deadlock analysis for a fault-tolerant system". Proceedings of the 6th International Conference on Algebraic Methodology and Software Technology (AMAST’97): pp. 60–75. 
^ Buth, B.; J. Peleska, and H. Shi (January 1999). "Combining methods for the livelock analysis of a fault-tolerant system". Proceedings of the 7th International Conference on Algebraic Methodology and Software Technology (AMAST’98): pp. 124– 139. 
^ Lowe, G. (1996). "Breaking and fixing the Needham-Schroeder public-key protocol using FDR". Tools and Algorithms for the Construction and Analysis of Systems (TACAS): pp. 147–166., Springer-Verlag. 
^ Scattergood, J.B. (1998). The Semantics and Implementation of Machine-Readable CSP. D.Phil.. Oxford University Computing Laboratory. 
^ A.W. Roscoe (1994). Model-checking CSP. In A Classical Mind: essays in Honour of C.A.R. Hoare. Prentice Hall. 
^ Parashkevov, Atanas N.; Jay Yantchev (1996). "ARC - a tool for efficient refinement and equivalence checking for CSP". IEEE Int. Conf. on Algorithms and Architectures for Parallel Processing ICA3PP '96: 68-75. Retrieved on 2008-11-26. 
^ Leuschel, Michael; Marc Fontaine (2008). "Probing the Depths of CSP-M: A new FDR-compliant Validation Tool" (PDF). ICFEM 2008, Springer-Verlag. 
^ Sun, Jun; Yang Liu and Jin Song Dong (2008). "Model Checking CSP Revisited: Introducing a Process Analysis Toolkit". Proceedings of the Third International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (ISoLA 2008) 17: 307-322, Springer. Retrieved on 2009-01-15. 
^ "Grammar Rules". http://www.comp.nus.edu.sg/~pat/OnlineHelp/scr/Misclanious.htm#grammar. Retrieved on 2009-01-15. 



[edit] External links

[edit] General

The CSP Archive
WoTUG, a User Group for CSP and occam style systems, contains some information about CSP and useful links.
CSP Citations from CiteSeer


[edit] Analysis tools

Formal Systems Europe, Ltd. develop CSP tools, some of which are freely downloadable.
ARC, the Adelaide Refinement Checker, is a CSP verification tool.
ProB is an animator and model-checker for the B method, but also support refinement checking and LTL model-checking of CSP.
PAT is a model checker, simulator and refinement checker for CSP and various extensions of CSP (e.g. shared variables, arrays, fairness).


[edit] Implementation support

CTJ is a Java implementation of CSP with network/distributed support.
C++CSP is an implementation of CSP/occam/JCSP ideas in C++, similar in style to JCSP.
Jibu (previously known as CSP.NET) is an implementation of a CSP style library for Microsoft .NET.
CSP++ is a software synthesis tool for making specifications written in CSPm executable via C++.
csp is a Common Lisp library which allows use of a CSP-inspired concurrency model from SBCL and other multi-threaded Common Lisp implementations.
"CHP: Communicating Haskell Processes. Process-Oriented Concurrency for Haskell". http://www.cs.kent.ac.uk/projects/ofa/chp/.  CHP is a Haskell library featuring a concurrency model inspired by CSP.




Retrieved from "http://en.wikipedia.org/wiki/Communicating_sequential_processes"
Categories: Process calculiHidden categories: Articles to be expanded since June 2008 | All articles to be expanded 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Hrvatski
日本語
Português









 This page was last modified on 2 April 2009, at 02:40 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
