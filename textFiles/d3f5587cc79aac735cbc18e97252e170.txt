













Birthday attack - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Birthday_attack";
		var wgTitle = "Birthday attack";
		var wgAction = "view";
		var wgArticleId = "189369";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282272169;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Birthday attack

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
A birthday attack is a type of cryptographic attack, so named because it exploits the mathematics behind the birthday problem in probability theory. Given a function f, the goal of the attack is to find two inputs x1,x2 such that f(x1) = f(x2). Such a pair x1,x2 is called a collision. The method used to find a collision is to simply evaluate the function f for different input values that may be chosen randomly or pseudorandomly until the same result is found more than once. Because of the aforementioned birthday problem this method can be rather efficient. Specifically, if a function f(x) yields any of H different outputs with equal probability and H is sufficiently large, then we expect to obtain a pair of different arguments x1 and x2 with f(x1) = f(x2) after evaluating the function for about  different arguments on average.




Contents


1 The mathematics
2 Digital signature susceptibility
3 See also
4 References
5 Notes and references
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] The mathematics
Main article: birthday problem
We consider the following experiment. From a set of H values we choose n values uniformly at random thereby allowing repetitions. Let p(n;H) be the probability that during this experiment at least one value is chosen more than once. This probability can be approximated as







Let n(p;H) be the smallest number of values we have to choose, such that the expected probability for finding a collision is at least p. By inverting this expression above, we find the following approximation







and assigning a 0.5 probability of collision we arrive at



.



Let Q(H) be the expected number of values we have to choose before finding the first collision. This number can be approximated by







As an example, if a 64 bit hash is used, there are approximately 1.8 × 1019 different outputs. If these are all equally probable (the best case), then it would take 'only' approximately 5.1 × 109 attempts to generate a collision using brute force. This value is called birthday bound[1] and for n-bit codes it could be computed as 2n / 2.[2] Other examples are as follows:




Bits
Possible
outputs
(H)
Desired probability of random collision (p)


10−18
10−15
10−12
10−9
10−6
0.1%
1%
25%
50%
75%


32
4.3 × 109
2
2
2
2.9
93
2.9 × 103
9.3 × 103
5.0 × 104
7.7 × 104
1.1 × 105


64
1.8 × 1019
6.1
1.9 × 102
6.1 × 103
1.9 × 105
6.1 × 106
1.9 × 108
6.1 × 108
3.3 × 109
5.1 × 109
7.2 × 109


128
3.4 × 1038
2.6 × 1010
8.2 × 1011
2.6 × 1013
8.2 × 1014
2.6 × 1016
8.3 × 1017
2.6 × 1018
1.4 × 1019
2.2 × 1019
3.1 × 1019


256
1.2 × 1077
4.8 × 1029
1.5 × 1031
4.8 × 1032
1.5 × 1034
4.8 × 1035
1.5 × 1037
4.8 × 1037
2.6 × 1038
4.0 × 1038
5.7 × 1038


384
3.9 × 10115
8.9 × 1048
2.8 × 1050
8.9 × 1051
2.8 × 1053
8.9 × 1054
2.8 × 1056
8.9 × 1056
4.8 × 1057
7.4 × 1057
1.0 × 1058


512
1.3 × 10154
1.6 × 1068
5.2 × 1069
1.6 × 1071
5.2 × 1072
1.6 × 1074
5.2 × 1075
1.6 × 1076
8.8 × 1076
1.4 × 1077
1.9 × 1077





Table shows number of hashes n(p) needed to achieve the given probability of success, assuming all hashes are equally likely. For comparison, 10−18 to 10−15 is the uncorrectable bit error rate of a typical hard disk [1]. In theory, MD5, 128 bits, should stay within that range until about 820 billion documents, even if its possible outputs are many more.

It is easy to see that if the outputs of the function are distributed unevenly, then a collision can be found even faster. The notion of 'balance' of a hash function quantifies the resistance of the function to birthday attacks and allows the vulnerability of popular hashes such as MD and SHA to be estimated (Bellare and Kohno, 2004).

[edit] Digital signature susceptibility
Digital signatures can be susceptible to a birthday attack. A message m is typically signed by first computing f(m), where f is a cryptographic hash function, and then using some secret key to sign f(m). Suppose Alice wants to trick Bob into signing a fraudulent contract. Alice prepares a fair contract m and a fraudulent one m'. She then finds a number of positions where m can be changed without changing the meaning, such as inserting commas, empty lines, one versus two spaces after a sentence, replacing synonyms, etc. By combining these changes, she can create a huge number of variations on m which are all fair contracts.
In a similar manner, Alice also creates a huge number of variations on the fraudulent contract m'. She then applies the hash function to all these variations until she finds a version of the fair contract and a version of the fraudulent contract which have the same hash value, f(m) = f(m'). She presents the fair version to Bob for signing. After Bob has signed, Alice takes the signature and attaches it to the fraudulent contract. This signature then "proves" that Bob signed the fraudulent contract. This differs slightly from the original birthday problem, as Alice gains nothing by finding two fair or two fraudulent contracts with the same hash. Alice's optimum strategy is to generate pairs of one fair and one fraudulent contract.
Then Alice compares each freshly-generated pair to all other pairs; that is, she compares the new fair hash to all previous fraudulent hashes, and the new fraudulent contract to all previous fair hashes (but doesn't bother comparing fair hashes to fair or fraudulent to fraudulent). The birthday problem equations apply where n is the number of pairs. The number of hashes Alice actually generates is 2n.
To avoid this attack, the output length of the hash function used for a signature scheme can be chosen large enough so that the birthday attack becomes computationally infeasible, i.e. about twice as many bits as are needed to prevent an ordinary brute force attack.
Pollard's rho algorithm for logarithms is an example for an algorithm using a birthday attack for the computation of discrete logarithms.

[edit] See also

Meet-in-the-middle attack


[edit] References

Mihir Bellare, Tadayoshi Kohno: Hash Function Balance and Its Impact on Birthday Attacks. EUROCRYPT 2004: pp401–418
Applied Cryptography, 2nd ed. by Bruce Schneier
CISSP All-In-One-Study Guide, 4nd ed. by Shon Harris


[edit] Notes and references

^ See upper and lower bounds.
^ Jacques Patarin, Audrey Montreuil (2005) (PostScript, PDF). Benes and Butterfly schemes revisited. Université de Versailles. http://eprint.iacr.org/2005/004. Retrieved on 2007-03-15. 


[edit] External links

"What is a digital signature and what is authentication?" from RSA Security's crypto FAQ.
"Parallel collision search with cryptanalytic applications, by Michael Wiener and Paul C. van Oorschot
















v • d • e

 
Cryptographic hash functions and message authentication codes (MACs)







Widely used functions: MD5 | SHA    Other: GOST | HAS-160 | HAVAL | LM hash | MDC-2 | MD2 | MD4 | N-Hash | RadioGatún | RIPEMD | Snefru | Tiger | WHIRLPOOL | crypt(3) DES









SHA-3 candidates: CubeHash | Fugue | Grøstl | JH | Keccak | Lane | SANDstorm | MD6 | Skein









MAC algorithms: DAA | CBC-MAC | HMAC | OMAC/CMAC | PMAC | UMAC | Poly1305-AES









Authenticated encryption modes: CCM | CWC | EAX | GCM | OCB









Attacks: Hash collision | Birthday attack | Preimage attack | Rainbow table | Side channel attack | Brute force attack









Misc: Avalanche effect | Hash collision | Merkle-Damgård construction   Standardization: CRYPTREC | NESSIE | NIST hash function competition



















v • d • e

 
Cryptography






History of cryptography · Cryptanalysis · Cryptography portal · Topics in cryptography







Symmetric-key algorithm · Block cipher · Stream cipher · Public-key cryptography · Cryptographic hash function · Message authentication code · Random numbers · Steganography












Retrieved from "http://en.wikipedia.org/wiki/Birthday_attack"
Categories: Cryptographic attacksHidden categories: Articles with Alice and Bob explanations 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Italiano
Polski
Русский
Svenska
Türkçe









 This page was last modified on 7 April 2009, at 04:30 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
