













Knowledge-based engineering - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Knowledge-based_engineering";
		var wgTitle = "Knowledge-based engineering";
		var wgAction = "view";
		var wgArticleId = "3030181";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 288463455;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Knowledge-based engineering

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Knowledge-based engineering (KBE) is a discipline with roots in computer-aided design (CAD) and knowledge-based systems but has several definitions and roles depending upon the context. An early role was support tool for a design engineer generally within the context of product design. Success of early KBE prototypes was remarkable (see History); eventually this led to KBE being considered as the basis for generative design with many expectations for hands-off performance where there would be limited human involvement in the design process.




Contents


1 Overview
2 History
3 KBE and product lifecycle management
4 KBE and CAX
5 KBE and knowledge management
6 KBE methodology
7 Languages for KBE
8 KBE in Academia
9 Implementations

9.1 For CAD
9.2 For General-purpose development of Web-deployed applications
9.3 For analysis, design and engineering processes


10 KBE futures, KBE theory
11 See also
12 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Overview
KBE can be defined as engineering on the basis of electronic knowledge models. Such knowledge models are the result of knowledge modeling that uses knowledge representation techniques to create the computer interpretable models. The knowledge models can be imported in and/or stored in specific engineering applications that enable engineers to specify requirements or create designs on the basis of the knowledge in such models. There are various methods available for the development of knowledge models, most of them are system dependent. An example of a system-independent language for the development machine-readable ontology databases, including support for basic engineering knowledge, is called Gellish English. An example of a CAD-specific system that can store knowledge and use it for design is the CATIA program through its KnowledgeWare module. An example of a CAD-independent, language-based KBE system with full compiler and support for runtime application deployment is General-purpose Declarative Language (GDL) from Genworks International.
KBE can have a wide scope that covers the full range of activities related to Product Lifecycle Management and Multidisciplinary design optimization. KBE's scope would include design, analysis (computer-aided engineering – CAE), manufacturing, and support. In this inclusive role, KBE has to cover a large multi-disciplinary role related to many computer aided technologies (CAx).
KBE also has more general overtones. One of its roles is to bridge knowledge management and design automation. Knowledge processing is a recent advance in computing. It has played a successful role in engineering and is now undergoing modifications (to be explained). An example of KBE’s role is generative mechanical design. There are others. KBE can be thought of as an advanced form of computer applications (in some forms with an extreme end-user computing flavor) that support PLM and CAx.
There are similar techniques, such as electronic design automation. AAAI provides a long list of engineering applications some of which are within the KBE umbrella. At some point, the concept of KBE might split into several sub-categories as MCAD and ECAD are just two of many possible types of design automation.

[edit] History
KBE essentially was a complementary development to CAx and can be dated from the 1980s (See Also, ICAD). CAx has been developing along with the computer after making large strides in the 1970s.
As with any bit of progress, KBE flashed on the horizon, lit the sky for a while, and then experienced a downslide (see AI Winter). KBE had sufficient success stories that sustained it long enough into the 1990s to get attention. Some prime contributors to the hiatus of KBE were unmanageable expectations, increasing tedium associated with forming completion of results, and some notion that the architecture for KBE was not sufficiently based upon the newer technology.
KBE continued to exist in pockets. With the prevalence of object-oriented methods, systems advanced enough to allow re-implementation. This reconstruction has been on-going for several years and has been frustratingly slow. Now, with the basis for this discipline becoming more robust, it starts to get interesting again.
KBE, as implemented with ICAD can be thought of as an advanced form of computer applications (in some forms with an extreme end-user computing flavor) that support PLM and CAx.

[edit] KBE and product lifecycle management
Main article: Product Lifecycle Management
The scope of PLM involves all the steps that exist within any industry that produces goods. KBE at this level will deal with product issues of a more generic nature than it will with CAx. Some might call this level 'assembly' in orientation. However, it's much more than that as PLM covers both the technical and the business side of a product.
KBE then needs to support the decision processes involved with configuration, trades, control, management, and a number of other areas, such as optimization.
Recently the Object Management Group released a RFP Document titled "KBE services for PLM" and requested feedback.

[edit] KBE and CAX
Main article: CAx
CAx crosses many disciplinary bounds and provides a sound basis for PLM. In a sense, CAx is a form of applied science that uses most of the disciplines of engineering and their associated fields. Materials science comes to mind.
KBE's support of CAx may have some similarities with its support of PLM but, in a sense, the differences are going to be larger.
The KBE flavor at the CAx level may assume a strong behavioral flavor. Given the underlying object oriented focus, there is a natural use of entities possessing complicated attributes and fulfilling non-trivial roles. One vendor's approach provides a means via workbenches to embed attributes and methods within sub-parts (object) or within a joining of sub-parts into a part.
As an aggregate, the individual actions, that are event driven, can be fairly involved. This fact identifies one major problem, namely control of what is essentially a non-deterministic mixture. This characteristic of the decision problem will get more attention as the KBE systems subsume more levels and encompasses a broader scope of PLM.

[edit] KBE and knowledge management
Main article: Knowledge management
KBE is related to knowledge management which has many levels itself. Some approaches to knowledge are reductionistic, as well they ought to be given the pragmatic focus of knowledge modeling. However, due to KBE dealing with aggregates that can be quite complicated both in structure and in behavior, some holistic notions (note link to complexity theory) might be apropos.
Also, given all the layers of KBE and given the fact that one part of an associated space is heavily mathematical (namely, manifold in nature), KBE is extremely interesting from the knowledge viewpoint (or one would hope).
All one has to do is note that the KBE process's goal is to produce results in the 'real world' via artifacts and to do so using techniques that are highly computational. That, in essence, is the epitome of applied science/engineering, and it could never be non-interesting.

[edit] KBE methodology
The development of KBE applications concerns the requirements to identify, capture, structure, formalize and finally implement knowledge. Many different so-called KBE platforms support only the implementation step which is not always the main bottleneck in the KBE development process. In order to limit the risk associated with the development and maintenance of KBE application there is a need to rely on an appropriate methodology for managing the knowledge and maintaining it up to date. As example of such KBE methodology the EU project MOKA "Methodology and tools Oriented to Knowledge based Applications" propose solutions which focus on the structuration and formalization steps as well as links to the implementation see MOKA project
An alternative to MOKA is to use a general methodology for developing knowledge bases for expert systems and for intranet pages. Such a methodology is described in "Knowledge Acquisition in Practice: A Step-by-step Guide" by Nick Milton (click here for more details).

[edit] Languages for KBE
Some questions can be asked in regard to KBE implementation: can we represent knowledge in a vendor-neutral format? can the knowledge in our designs be retained for decades, long after a vendor system (such as, CATIA) has disappeared?
These questions are addressed in a 2005 Aerospace COE presentation A Proposal for CATIA V6 by Walter Wilson of Lockheed Martin.
Mr. Wilson advocates using a type of programming language to define design data—operations, parameters, formulas, etc. -- instead of a proprietary file format (such as Dassault's CATIA). One's data would no longer be tied to a specific CAD system. Unlike STEP, which inevitably lags commercial CAD systems in the features it supports, programmability would allow the definition of new design features.
A logic programming language is proposed as the basis for the engineering design language because of its simplicity and extensibility. The geometric engine for the language features would be open source to give engineers control over approximation algorithms and to better guarantee long-term accessibility of the data.
Meanwhile, the commercially available General-purpose Declarative Language (GDL) from Genworks International addresses the issue of application longevity by providing a high-level declarative language kernel which is a superset of ANSI Common Lisp.
The GDL kernel follows a concise, pragmatic language specification representing something akin to a de-facto neutral format for representing KBE-style knowledge. It consists of the same Smalltalk-inspired declarative object-oriented message-passing format which been a common thread among classical KBE systems for more than two decades.
Because GDL applications are written as a strict superset of ANSI CL, only the high-level declarative surface syntax is GDL-specific. The bulk of application code is pure compliant ANSI CL. And because of ANSI CL's inherent support for code transformation macros, even this surface syntax is subject to straightforward automated conversion among other variations of the de-facto standard. It is reasonable to expect that implementations following this approach will eventually converge on a true vendor-neutral Standard KBE language specification.

[edit] KBE in Academia

See Webliography for AI in Design hosted by Worcester Polytechnic Institute and the NSF Report "Research Opportunities in Engineering Design."
Design of Aircraft and Rotorcraft, Faculty of Aerospace Engineering, Delft University of Technology, The Netherlands, has adopted GDL from Genworks International as a basis for KBE and their Multi-model Generator (MMG).


[edit] Implementations
The following KBE development packages are commercially available:

[edit] For CAD

DriveWorks A SolidWorks Certified Gold Partner [1]]]
GDL from Genworks International
Kadviser from NIMTOTH previously Kade-Tech
KBEWorks by VisionKBE
Knowledge Fusion from Siemens PLM Software.
Knowledgeware from Dassault Systemes
Magix by Navitech
Pro/ENGINEER Expert Framework from Parametric Technology Corporation
SmartAssembly for Pro/ENGINEER from Sigmaxim Inc.
YVE - Your Variant Engineer from tecneos software-engineering
ICAD from Dassault Systemes (no longer available)


[edit] For General-purpose development of Web-deployed applications

GDL from Genworks International


[edit] For analysis, design and engineering processes

Quaestor by Qnowledge Modeling Technologies
PCPACK by Tacit Connexions


[edit] KBE futures, KBE theory





This section may contain original research or unverified claims. Please improve the article by adding references. See the talk page for details. (January 2008)


KBE, as a particular example of KS, is a multi-disciplinary framework that has more than practical considerations. Not only will KBE require successful handling of issues of the computational (Ontology, Artificial Intelligence, Entscheidungsproblem, Interactive computation, Category Theory, ...) and logic (non-monotonic issues related to the qualification, frame, and ramification problems)), it will touch upon all sciences that deal with matter, its manipulations, and the related decisions. In a sense, PLM allows us to have the world as a large laboratory for experimental co-evolution of our knowledge and our artificial co-horts. What better framework is there to explore the "increasingly complicated mappings between the human world and the computational"?
In terms of methodology and their associated means, KBE offers support via several paradigms. These range from the home-grown all the way to strategically defined and integrated tools that cover both breadth and depth. A continuing theme will be resolving the contextual definitions for KBE into a coherent discipline (or at least attempting this) and keeping a handle on managing the necessary quantitative comparisons. One issue of importance considers what limits there may be to the computational; this study requires a multi-disciplinary focus and an understanding of the quasi-empirical. Given the knowledge focus of KBE, another issue involves what limits there might be to a computational basis for knowledge and whether these are overcome with the more advanced types of human-machine interface.

[edit] See also

Knowledge-based systems
Functional programming
Multidisciplinary design optimization
Model
Model (abstract)
Design
Entscheidungsproblem
Decision problem - KBE is mainly a collection of decision points. Several aspects of KBE approach what might be called a 'decidable' bounds though it's hard to get this fact discussed (hence the node here to foster the discussion).
Differential geometry


[edit] External links

COE links

Knowledge-Based Engineering: Update
What Distinguishes KBE from Automation
CATE, Lessons for KBE
KBE Best Practices
COE Feature: CATIA V4 and V5 - What Does the Difference Mean?


Knowledge Fusion from UGS Corp.
KBE Services for PLM RFP
KBE services for PLM" RFP: feedback questionnaire
Alcyon Engineering: Introduction to Knowledge Based Engineering
MOKA Links
ASME celebrates 125th Anniversary
Truth Engineering
KE-works knowledge engineering - a company introducing KBE applications to industry - KBE explanatory video
A KBE System for the Design of Wind Tunnel Models Using Reusable Knowledge Components
Knowledge Based Engineering department at the Faculty of Aerospace Engineering of the Delft University of Technology
Knowledge-based engineering at the Norwegian University of Science and Technology (NTNU)
Knowledge Technologies - a free e-book by Nick Milton that has a chapter describing KBE
Qnowledge Modeling Technologies - a company streamlining analysis, design and engineering processes through KBE solutions.




Retrieved from "http://en.wikipedia.org/wiki/Knowledge-based_engineering"
Categories: Computer-aided design | Knowledge engineering | Product lifecycle managementHidden categories: Articles that may contain original research since January 2008 | All articles that may contain original research 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch









 This page was last modified on 7 May 2009, at 12:52 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
