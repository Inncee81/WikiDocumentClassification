













memcached - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Memcached";
		var wgTitle = "Memcached";
		var wgAction = "view";
		var wgArticleId = "437720";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282657084;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); memcached

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Memcached

Developed by
Danga Interactive


Latest release
1.2.7 / April 3, 2009


Operating system
Cross-platform


Type
distributed memory caching system


License
BSD License


Website
http://www.danga.com/memcached/


memcached (pronunciation: mem-cache-dee.) is a general-purpose distributed memory caching system that was originally developed by Danga Interactive for LiveJournal, but is now used by many other sites. It is often used to speed up dynamic database-driven websites by caching data and objects in memory to reduce the number of times an external data source (such as a database or API) must be read. Memcached is distributed under a permissive free software license.[1]
Memcached lacks authentication and security features, meaning it should only be used on servers with a firewall set up appropriately. By default, memcached uses the port 11211. Among other technologies, it uses libevent.
Memcached's APIs provides a giant hash table distributed across multiple machines. When the table is full, subsequent inserts cause older data to be purged in least recently used (LRU) order. Applications using memcached typically layer memcached requests and additions into core before falling back on a slower backing store, such as a database.
The system is used by several very large, well-known sites including YouTube[2], LiveJournal, Slashdot, Wikipedia/Wikimedia, Wikia, SourceForge, Metacafe, GameFAQs, Facebook[3] [4], Digg, Twitter[5], Fotolog, NYTimes.com, deviantART, Jamendo, The Pirate Bay[6] and Netlog.[7]




Contents


1 Example code
2 References
3 External links

3.1 General
3.2 Client Libraries
3.3 Client Applications







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Example code
Converting a database or object creation queries to use memcached is simple. Typically, when using straight database queries, example code would be as follows:
Note that all functions described on this page are pseudocode only. Memcached calls and programming languages may vary based on the used API.

function get_foo(int userid) {
   result = db_select("SELECT * FROM users WHERE userid = ?", userid);
   return result;
}

After conversion to memcached, the same call might look like the following

function get_foo(int userid) {
    result = memcached_fetch("userrow:" + userid);
    if (!result) {
        result = db_select("SELECT * FROM users WHERE userid = ?", userid);
        memcached_add("userrow:" + userid,  result);
    }
    return result;
}

The server would first check whether a memcached value with the unique key "userrow:userid" exists, where userid is some number. If the result does not exist, it would select from the database as usual, and set the unique key using the memcached API add function call.
However, if only this API call were modified, the server would end up fetching incorrect data following any database update actions: the memcached "view" of the data would become out of date. Therefore, in addition to creating an "add" call, an update call would be also needed, using the memcached set function.

function update_foo(int userid, string dbUpdateString) {
    result = db_execute(dbUpdateString);
    if (result) {
        data = createUserDataFromDBString(dbUpdateString);
        memcached_set("userrow:" + userid, data);
    }
}

This call would update the currently cached data to match the new data in the database, assuming the database query succeeds. An alternative approach would be to invalidate the cache with the memcached delete function, so that subsequent fetches result in a cache miss. Similar action would need to be taken when database records were deleted, to maintain either a correct or incomplete cache.

[edit] References


^ "License of memcached". http://code.sixapart.com/svn/memcached/trunk/server/LICENSE. 
^ Cuong Do Cuong (Engineering manager at YouTube/Google). Seattle Conference on Scalability: YouTube Scalability [Online Video - 26th minute]. Seattle: Google Tech Talks.
^ Facebook Developers Resources
^ Scaling memcached at Facebook
^ It's Not Rocket Science, But It's Our Work
^ Proof TPB is using Memcached
^ Who's using memcached?



[edit] External links




Free software portal








This article's external links may not follow Wikipedia's content policies or guidelines. Please improve this article by removing excessive or inappropriate external links.



[edit] General

Official memcached site
memcached wiki and faq
Win32 memcached port 1.2.1
Win32 memcached port 1.2.4
Java implementation of memcached
Redis is an alternative to memcached


[edit] Client Libraries

PHP
Java
Python
Perl
pure Ruby
compiled Ruby
Enyim.com .NET client
BeIT .NET client
ASP.NET cache and session provider
Scheme
new C/C++ reference implementation
old C implementation


[edit] Client Applications

memcached in MediaWiki
memcached storage engine for MySQL
pgmemcached - API for PostgreSQL
Memcached Functions for MySQL - API for MySQL
memcachefs: a memcache filesystem using FUSE
IPC::Lock::Memcached - fast locking via memcached
hibernate-memcached Second level cache for Hibernate ORM
Memcached UDF for Java DB on OpenSolaris




Retrieved from "http://en.wikipedia.org/wiki/Memcached"
Categories: Free memory management software | Cross-platform softwareHidden categories: Wikipedia external links cleanup 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


日本語
Русский
Tiếng Việt
Українська
中文









 This page was last modified on 8 April 2009, at 23:34 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
