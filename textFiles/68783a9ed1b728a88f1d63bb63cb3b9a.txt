













Linear programming - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Linear_programming";
		var wgTitle = "Linear programming";
		var wgAction = "view";
		var wgArticleId = "43730";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281635632;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Linear programming

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In mathematics, linear programming (LP) is a technique for optimization of a linear objective function, subject to linear equality and linear inequality constraints. Informally, linear programming determines the way to achieve the best outcome (such as maximum profit or lowest cost) in a given mathematical model and given some list of requirements represented as linear equations.
More formally, given a polytope (for example, a polygon or a polyhedron), and a real-valued affine function



defined on this polytope, a linear programming method will find a point in the polytope where this function has the smallest (or largest) value. Such points may not exist, but if they do, searching through the polytope vertices is guaranteed to find at least one of them.
Linear programs are problems that can be expressed in canonical form:

Maximize 
Subject to 

 represents the vector of variables (to be determined), while  and  are vectors of (known) coefficients and  is a (known) matrix of coefficients. The expression to be maximized or minimized is called the objective function ( in this case). The equations  are the constraints which specify a convex polyhedron over which the objective function is to be optimized.
Linear programming can be applied to various fields of study. Most extensively it is used in business and economic situations, but can also be utilized for some engineering problems. Some industries that use linear programming models include transportation, energy, telecommunications, and manufacturing. It has proved useful in modeling diverse types of problems in planning, routing, scheduling, assignment, and design.




Contents


1 History of linear programming
2 Uses
3 Standard form

3.1 Example


4 Augmented form (slack form)

4.1 Example


5 Duality

5.1 Example


6 Special cases

6.1 Examples


7 Complementary slackness
8 Theory
9 Algorithms
10 Open problems and recent work
11 Integer unknowns
12 Solvers and scripting (programming) languages
13 See also
14 References
15 Further reading
16 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History of linear programming
The problem of solving a system of linear inequalities dates back at least as far as Fourier, after whom the method of Fourier-Motzkin elimination is named. Linear programming arose as a mathematical model developed during the second world war to plan expenditures and returns in order to reduce costs to the army and increase losses to the enemy. It was kept secret until 1947. Postwar, many industries found its use in their daily planning.
The founders of the subject are Leonid Kantorovich, a Russian mathematician who developed linear programming problems in 1939, George B. Dantzig, who published the simplex method in 1947, John von Neumann, who developed the theory of the duality in the same year. The linear programming problem was first shown to be solvable in polynomial time by Leonid Khachiyan in 1979, but a larger theoretical and practical breakthrough in the field came in 1984 when Narendra Karmarkar introduced a new interior point method for solving linear programming problems.
Dantzig's original example of finding the best assignment of 70 people to 70 jobs exemplifies the usefulness of linear programming. The computing power required to test all the permutations to select the best assignment is vast; the number of possible configurations exceeds the number of particles in the universe. However, it takes only a moment to find the optimum solution by posing the problem as a linear program and applying the Simplex algorithm. The theory behind linear programming drastically reduces the number of possible optimal solutions that must be checked.

[edit] Uses
Linear programming is a considerable field of optimization for several reasons. Many practical problems in operations research can be expressed as linear programming problems. Certain special cases of linear programming, such as network flow problems and multicommodity flow problems are considered important enough to have generated much research on specialized algorithms for their solution. A number of algorithms for other types of optimization problems work by solving LP problems as sub-problems. Historically, ideas from linear programming have inspired many of the central concepts of optimization theory, such as duality, decomposition, and the importance of convexity and its generalizations. Likewise, linear programming is heavily used in microeconomics and company management, such as planning, production, transportation, technology and other issues. Although the modern management issues are ever-changing, most companies would like to maximize profits or minimize costs with limited resources. Therefore, many issues can boil down to linear programming problems.

[edit] Standard form
Standard form is the usual and most intuitive form of describing a linear programming problem. It consists of the following three parts:

A linear function to be maximized


e.g. maximize 


Problem constraints of the following form


e.g. 







Non-negative variables


e.g. 





The problem is usually expressed in matrix form, and then becomes:

maximize 
subject to 

Other forms, such as minimization problems, problems with constraints on alternative forms, as well as problems involving negative variables can always be rewritten into an equivalent problem in standard form.

[edit] Example
Suppose that a farmer has a piece of farm land, say A square kilometres large, to be planted with either wheat or barley or some combination of the two. The farmer has a limited permissible amount F of fertilizer and P of insecticide which can be used, each of which is required in different amounts per unit area for wheat (F1, P1) and barley (F2, P2). Let S1 be the selling price of wheat, and S2 the price of barley. If we denote the area planted with wheat and barley by x1 and x2 respectively, then the optimal number of square kilometres to plant with wheat vs barley can be expressed as a linear programming problem:


maximize 
(maximize the revenue — revenue is the "objective function")


subject to

(limit on total area)




(limit on fertilizer)




(limit on insecticide)




(cannot plant a negative area)


Which in matrix form becomes:

maximize 
subject to 


[edit] Augmented form (slack form)
Linear programming problems must be converted into augmented form before being solved by the simplex algorithm. This form introduces non-negative slack variables to replace inequalities with equalities in the constraints. The problem can then be written in the following form:

Maximize Z in:



where  are the newly introduced slack variables, and Z is the variable to be maximized.

[edit] Example
The example above becomes as follows when converted into augmented form:


maximize 
(objective function)


subject to

(augmented constraint)




(augmented constraint)




(augmented constraint)






where  are (non-negative) slack variables.
Which in matrix form becomes:

Maximize Z   in:



[edit] Duality
See also: Dual linear program
Every linear programming problem, referred to as a primal problem, can be converted into a dual problem, which provides an upper bound to the optimal value of the primal problem. In matrix form, we can express the primal problem as:

maximize 
subject to 

The corresponding dual problem is:

minimize 
subject to 

where y is used instead of x as variable vector.
There are two ideas fundamental to duality theory. One is the fact that the dual of a dual linear program is the original primal linear program. Additionally, every feasible solution for a linear program gives a bound on the optimal value of the objective function of its dual. The weak duality theorem states that the objective function value of the dual at any feasible solution is always greater than or equal to the objective function value of the primal at any feasible solution. The strong duality theorem states that if the primal has an optimal solution, x*, then the dual also has an optimal solution, y*, such that cTx*=bTy*.
A linear program can also be unbounded or infeasible. Duality theory tells us that if the primal is unbounded then the dual is infeasible by the weak duality theorem. Likewise, if the dual is unbounded, then the primal must be infeasible. However, it is possible for both the dual and the primal to be infeasible (See also Farkas' lemma).

[edit] Example
Revisit the above example of the farmer who may grow wheat and barley with the set provision of some A land, F fertilizer and P insecticide. Assume now that unit prices for each of these means of production (inputs) are set by a planning board. The planning board's job is to minimize the total cost of procuring the set amounts of inputs while providing the farmer with a floor on the unit price of each of his crops (outputs), S1 for wheat and S2 for barley. This corresponds to the following linear programming problem:


minimize 
(minimize the total cost of the means of production as the "objective function")


subject to

(the farmer must receive no less than S1 for his wheat)




(the farmer must receive no less than S2 for his barley)




(prices cannot be negative)


Which in matrix form becomes:

minimize 
subject to 

The primal problem deals with physical quantities. With all inputs available in limited quantities, and assuming the unit prices of all outputs is known, what quantities of outputs to produce so as to maximize total revenue? The dual problem deals with economic values. With floor guarantees on all output unit prices, and assuming the available quantity of all inputs is known, what input unit pricing scheme to set so as to minimize total expenditure?
To each variable in the primal space corresponds an inequality to satisfy in the dual space, both indexed by output type. To each inequality to satisfy in the primal space corresponds a variable in the dual space, both indexed by input type.
The coefficients which bound the inequalities in the primal space are used to compute the objective in the dual space, input quantities in this example. The coefficients used to compute the objective in the primal space bound the inequalities in the dual space, output unit prices in this example.
Both the primal and the dual problems make use of the same matrix. In the primal space, this matrix expresses the consumption of physical quantities of inputs necessary to produce set quantities of outputs. In the dual space, it expresses the creation of the economic values associated with the outputs from set input unit prices.
Since each inequality can be replaced by an equality and a slack variable, this means each primal variable corresponds to a dual slack variable, and each dual variable corresponds to a primal slack variable. This relation allows us to complementary slackness.

[edit] Special cases
A packing LP is a linear program of the form

maximize 
subject to 

such that the matrix  and the vectors  and  are non-negative.
The dual of a packing LP is a covering LP, a linear program of the form

minimize 
subject to 

such that the matrix  and the vectors  and  are non-negative.

[edit] Examples
Covering and packing LPs commonly arise as a linear programming relaxation of a combinatorial problem. For example, the LP relaxation of set packing problem, independent set problem, or matching is a packing LP. The LP relaxation of set cover problem, vertex cover problem, or dominating set problem is a covering LP.
Finding a fractional coloring of a graph is another example of a covering LP. In this case, there is one constraint for each vertex of the graph and one variable for each independent set of the graph.

[edit] Complementary slackness
It is possible to obtain an optimal solution to the dual when only an optimal solution to the primal is known using the complementary slackness theorem. The theorem states:
Suppose that x = (x1, x2, . . ., xn) is primal feasible and that y = (y1, y2, . . . , ym) is dual feasible. Let (w1, w2, . . ., wm) denote the corresponding primal slack variables, and let (z1, z2, . . . , zn) denote the corresponding dual slack variables. Then x and y are optimal for their respective problems if and only if xjzj = 0, for j = 1, 2, . . . , n, wiyi = 0, for i = 1, 2, . . . , m.
So if the ith slack variable of the primal is not zero, then the ith variable of the dual is equal zero. Likewise, if the jth slack variable of the dual is not zero, then the jth variable of the primal is equal to zero.

[edit] Theory
Geometrically, the linear constraints define a convex polyhedron, which is called the feasible region. Since the objective function is also linear, hence a convex function, all local optima are automatically global optima (by the KKT theorem). The linearity of the objective function also implies that the set of optimal solutions is the convex hull of a finite set of points - usually a single point.
There are two situations in which no optimal solution can be found. First, if the constraints contradict each other (for instance, x ≥ 2 and x ≤ 1) then the feasible region is empty and there can be no optimal solution, since there are no solutions at all. In this case, the LP is said to be infeasible.
Alternatively, the polyhedron can be unbounded in the direction of the objective function (for example: maximize x1 + 3 x2 subject to x1 ≥ 0, x2 ≥ 0, x1 + x2 ≥ 10), in which case there is no optimal solution since solutions with arbitrarily high values of the objective function can be constructed.
Barring these two pathological conditions (which are often ruled out by resource constraints integral to the problem being represented, as above), the optimum is always attained at a vertex of the polyhedron. However, the optimum is not necessarily unique: it is possible to have a set of optimal solutions covering an edge or face of the polyhedron, or even the entire polyhedron (This last situation would occur if the objective function were constant).

[edit] Algorithms




A series of linear constraints on two variables produces a region of possible values for those variables. Solvable problems will have a feasible region in the shape of a simple polygon.


The simplex algorithm, developed by George Dantzig, solves LP problems by constructing an admissible solution at a vertex of the polyhedron and then walking along edges of the polyhedron to vertices with successively higher values of the objective function until the optimum is reached. Although this algorithm is quite efficient in practice and can be guaranteed to find the global optimum if certain precautions against cycling are taken, it has poor worst-case behavior: it is possible to construct a linear programming problem for which the simplex method takes a number of steps exponential in the problem size. In fact, for some time it was not known whether the linear programming problem was solvable in polynomial time (complexity class P).
This long standing issue was resolved by Leonid Khachiyan in 1979 with the introduction of the ellipsoid method, the first worst-case polynomial-time algorithm for linear programming. To solve a problem which has n variables and can be encoded in L input bits, this algorithm uses O(n4L) arithmetic operations on numbers with O(L) digits. It consists of a specialization of the nonlinear optimization technique developed by Naum Z. Shor, generalizing the ellipsoid method for convex optimization proposed by Arkadi Nemirovski, a 2003 John von Neumann Theory Prize winner, and D. Yudin.
Khachiyan's algorithm was of landmark importance for establishing the polynomial-time solvability of linear programs. The algorithm had little practical impact, as the simplex method is more efficient for all but specially constructed families of linear programs. However, it inspired new lines of research in linear programming with the development of interior point methods, which can be implemented as a practical tool. In contrast to the simplex algorithm, which finds the optimal solution by progressing along points on the boundary of a polyhedral set, interior point methods move through the interior of the feasible region.
In 1984, N. Karmarkar proposed a new interior point projective method for linear programming. Karmarkar's algorithm not only improved on Khachiyan's theoretical worst-case polynomial bound (giving O(n3.5L)), but also promised dramatic practical performance improvements over the simplex method. Since then, many interior point methods have been proposed and analyzed. Early successful implementations were based on affine scaling variants of the method. For both theoretical and practical properties, barrier function or path-following methods are the most common recently.
The current opinion is that the efficiency of good implementations of simplex-based methods and interior point methods is similar for routine applications of linear programming.
LP solvers are in widespread use for optimization of various problems in industry, such as optimization of flow in transportation networks, many of which can be transformed into linear programming problems only with some difficulty.

[edit] Open problems and recent work
There are several open problems in the theory of linear programming, the solution of which would represent fundamental breakthroughs in mathematics and potentially major advances in our ability to solve large-scale linear programs.

Does LP admit a strongly polynomial-time algorithm?
Does LP admit a strongly polynomial algorithm to find a strictly complementary solution?
Does LP admit a polynomial algorithm in the real number (unit cost) model of computation?

This closely related set of problems has been cited by Stephen Smale as among the 18 greatest unsolved problems of the 21st century. In Smale's words, the third version of the problem "is the main unsolved problem of linear programming theory." While algorithms exist to solve linear programming in weakly polynomial time, such as the ellipsoid methods and interior-point techniques, no algorithms have yet been found that allow strongly polynomial-time performance in the number of constraints and the number of variables. The development of such algorithms would be of great theoretical interest, and perhaps allow practical gains in solving large LPs as well.

Are there pivot rules which lead to polynomial-time Simplex variants?
Do all polyhedral graphs have polynomially-bounded diameter?
Is the Hirsch conjecture true for polyhedral graphs?

These questions relate to the performance analysis and development of Simplex-like methods. The immense efficiency of the Simplex algorithm in practice despite its exponential-time theoretical performance hints that there may be variations of Simplex that run in polynomial or even strongly polynomial time. It would be of great practical and theoretical significance to know whether any such variants exist, particularly as an approach to deciding if LP can be solved in strongly polynomial time.
The Simplex algorithm and its variants fall in the family of edge-following algorithms, so named because they solve linear programming problems by moving from vertex to vertex along edges of a polyhedron. This means that their theoretical performance is limited by the maximum number of edges between any two vertices on the LP polyhedron. As a result, we are interested in knowing the maximum graph-theoretical diameter of polyhedral graphs. It has been proved that all polyhedra have subexponential diameter, and all experimentally observed polyhedra have linear diameter, it is presently unknown whether any polyhedron has superpolynomial or even superlinear diameter. If any such polyhedra exist, then no edge-following variant can run in polynomial or linear time, respectively. Questions about polyhedron diameter are of independent mathematical interest.
Simplex pivot methods preserve primal (or dual) feasibility. On the other hand, criss-cross pivot methods do not preserve (primal or dual) feasibility --- they may visit primal feasible, dual feasible or primal-and-dual infeasible bases in any order. Pivot methods of this type have been studied since the 1970s. Essentially, these methods attempt to find the shortest pivot path on the arrangement polytope under the linear programming problem. In contrast to polyhedral graphs, graphs of arrangement polytopes have small diameter, allowing the possibility of strongly polynomial-time criss-cross pivot method without resolving questions about the diameter of general polyhedra.

[edit] Integer unknowns
If the unknown variables are all required to be integers, then the problem is called an integer programming (IP) or integer linear programming (ILP) problem. In contrast to linear programming, which can be solved efficiently in the worst case, integer programming problems are in many practical situations (those with bounded variables) NP-hard. 0-1 integer programming or binary integer programming (BIP) is the special case of integer programming where variables are required to be 0 or 1 (rather than arbitrary integers). This problem is also classified as NP-hard, and in fact the decision version was one of Karp's 21 NP-complete problems.
If only some of the unknown variables are required to be integers, then the problem is called a mixed integer programming (MIP) problem. These are generally also NP-hard.
There are however some important subclasses of IP and MIP problems that are efficiently solvable, most notably problems where the constraint matrix is totally unimodular and the right-hand sides of the constraints are integers.
Advanced algorithms for solving integer linear programs include:

cutting-plane method
branch and bound
branch and cut
branch and price
if the problem has some extra structure, it may be possible to apply delayed column generation.


[edit] Solvers and scripting (programming) languages
Free and opensource:


Name
License
Brief info


Cassowary constraint solver
LGPL
an incremental constraint solving toolkit that efficiently solves systems of linear equalities and inequalities.


glpk
GPL
GNU Linear Programming Kit, a free LP/MILP solver


MINTO
here
Mixed Integer Optimizer, an integer programming solver which uses branch and bound algorithm.


OpenOpt
BSD
Universal cross-platform numerical optimization framework; see its LP page and other problems involved


Qoca
GPL
a library for incrementally solving systems of linear equations with various goal functions


SYMPHONY
CPL
an LP solver from COIN-OR project


R-Project
GPL
a programming language and software environment for statistical computing and graphics


CVX
GPL
Matlab solver for convex optimization including linear programs


Commercial:

AIMMS
AMPL
CPLEX
EXCEL Solver Function
GAMS
Gurobi
IMSL Numerical Libraries
Lingo
Maple
MATLAB
Mathematica
MOPS
MOSEK
OptimJ
SAS
Xpress-MP


[edit] See also



Wikibooks has a book on the topic of
A-level Mathematics/D1/Linear Programming




Dynamic programming
Simplex algorithm, used to solve LP problems
Quadratic programming, a superset of linear programming
Leonid Kantorovich, one of the founders of linear programming
Shadow price
MPS file format
MIP example, job shop problem
INFORMS Institute for Operations Research and the Management Sciences


see also the "External links" section below


[edit] References





This article does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (June 2008)



[edit] Further reading

Mark de Berg, Marc van Kreveld, Mark Overmars, and Otfried Schwarzkopf (2000). Computational Geometry (2nd revised edition ed.). Springer-Verlag. ISBN 3-540-65620-0.  Chapter 4: Linear Programming: pp.63–94. Describes a randomized half-plane intersection algorithm for linear programming.
V. Chandru and M.R.Rao, Linear Programming, Chapter 31 in Algorithms and Theory of Computation Handbook, edited by M.J.Atallah, CRC Press 1999, 31-1 to 31-37. [1]
V. Chandru and M.R.Rao, Integer Programming, Chapter 32 in Algorithms and Theory of Computation Handbook, edited by M.J.Atallah, CRC Press 1999, 32-1 to 32-45. [2]
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Chapter 29: Linear Programming, pp.770–821.
Michael R. Garey and David S. Johnson (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. Freeman. ISBN 0-7167-1045-5.  A6: MP1: INTEGER PROGRAMMING, pg.245.
Bernd Gärtner, Jiří Matoušek (2006). Understanding and Using Linear Programming, Berlin: Springer. ISBN 3-540-30697-8
Jalaluddin Abdullah, Optimization by the Fixed-Point Method, Version 1.97. [3].
Alexander Schrijver, Theory of Linear and Integer Programming. John Wiley & sons, 1998, ISBN 0-471-98232-6
Michael J. Todd (February 2002). "The many facets of linear programming". Mathematical Programming 91 (3). 


[edit] External links

Guidance on Formulating LP problems
0-1 Integer Programming Benchmarks with Hidden Optimum Solutions
Mathematical Programming Glossary
A Tutorial on Integer Programming
The linear programming FAQ
Linear Programming Survey OR/MS Today
Linear Programming: Guide to Formulation, Simplex Algorithm, Goal Programming and Excel Solver examples
George Dantzig


Software


AIMMS Optimization Modeling AIMMS — include linear programming in industry solutions (free student license available);
Calc Optimization Solver — Kohei Yoshida’s spreadsheet add-in for OpenOffice.org Calc
CGAL — The Computational Geometry Algorithms Library includes a linear solver, which is exact and optimized for problems with few constraints or few variables
The Parma Polyhedra Library includes a MIP solver in exact precision
COIN-OR — COmputational INfrastructure for Operations Research, open-source library
GAMS — General Algebraic Modeling System
Cplex — Commercial library for linear programming
GLPK — GNU Linear Programming Kit; open source LP software
Gurobi — Parallel linear and mixed integer programming library
IMSL Numerical Libraries — Commercial libraries of math and statistical algorithms
HOPDM — Higher Order Primal Dual Method
LINDO — LP, IP, Global solver/modeling language
lp_solve — open-source solver with C library
MOSEK — Optimization software for LP,IP,QP,SOCP and MIP. Free trial is available. Free for students.
Mathematica — General technical computing system includes large scale linear programming support
OptimJ — Java-based algebraic modeling language; free evaluation version.
Premium Solver — Spreadsheet add-in
WhatsOP — LP modeling in 6 languages, made practical with easy "what-ifs" for students. Free Trial.
SAS — Includes optimization modeling language and solvers for LP, MILP, QP, and NLP
What's Best! — Spreadsheet add-in
Xpress-MP — Optimization software free to students
Vanguard Linear Programming Optimization Software
QSopt Optimization software for LP (free for research purposes).
Microarray Data Classification Server (MDCS) based on linear programming
Linear programming and linear goal programming A freeware program for MS-DOS
Simplex Method Tool A quick-loading web page
IBM's article on GLPK A technical article on GLPK with an introduction to Linear Programming by IBM
Orstat2000 — Includes easy-to-use modules for linear and integer programming (free for educational purposes).
Trilinos is a set of scientific tools with a few linear and non-linear program solvers.
TOMLAB provides optimization solvers in MATLAB, LabVIEW and .NET.
SCIP It can be used as a standalone program to solve mixed integer programs given in MPS Format.
GIPALS32.DLL — Linear programming callable library for Windows (free trial and academic license available).
CVXOPT — Python library that can be used for linear, second-order cone and semidefinite programming (open source, GPLv3)




Retrieved from "http://en.wikipedia.org/wiki/Linear_programming"
Categories: Mathematical optimization | Operations researchHidden categories: Articles lacking sources from June 2008 | All articles lacking sources 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
Bosanski
Català
Česky
Deutsch
Español
فارسی
Français
한국어
Bahasa Indonesia
Italiano
עברית
Magyar
Nederlands
日本語
Polski
Português
Русский
Sicilianu
Slovenščina
Српски / Srpski
ไทย
Tiếng Việt
Türkçe
Українська
اردو
中文









 This page was last modified on 4 April 2009, at 04:21.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
