













Plan 9 from Bell Labs - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Plan_9_from_Bell_Labs";
		var wgTitle = "Plan 9 from Bell Labs";
		var wgAction = "view";
		var wgArticleId = "24226";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281859660;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Plan 9 from Bell Labs

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other uses, see Plan 9.

Plan 9 from Bell Labs


Glenda, the Plan 9 Bunny


CompanyÂ / developer
Bell Labs


Programmed in
Dialect of ISO/ANSI C


OS family
Unix successor


Working state
Current


Source model
Free software/Open source


Initial release
1992 (universities)
1995 (general public)


Latest stable release
Fourth Edition / daily snapshots


Supported platforms
x86, MIPS, DEC Alpha, SPARC, PowerPC, ARM


Kernel type
Hybrid


Default user interface
rio / rc


License
Lucent Public License


Website
Plan 9 from Bell Labs


Plan 9 from Bell Labs is a distributed operating system, primarily used for research. It was developed as the research successor to Unix by the Computing Sciences Research Center at Bell Labs between the mid-1980s and 2002. Plan 9 is most notable for representing all system interfaces, including those required for networking and the user-interface, through the filesystem rather than specialized interfaces. Plan 9 aims to provide users with a workstation-independent working environment through the use of the 9P protocols. Plan 9 continues to be used and developed in some circles as a research operating system and by hobbyists.
The name "Plan 9 from Bell Labs" is a reference to the 1959 cult science fiction B-movie Plan 9 from Outer Space.[1]




Contents


1 History
2 Overview

2.1 All resources as files
2.2 Distributed architecture


3 Design concepts

3.1 Filesystems, files, and names
3.2 Union directories
3.3 /proc
3.4 /net
3.5 Networking and distributed computing
3.6 Unicode


4 Implementations
5 Impact
6 License
7 See also

7.1 Standard Plan 9 utilities
7.2 Implementation artifacts
7.3 Influenced


8 References
9 External links

9.1 Bell Labs
9.2 Lectures
9.3 Other native and virtual machines

9.3.1 native
9.3.2 virtual


9.4 Other sources of information







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
Plan 9 replaced Unix at Bell Labs as the organization's primary platform for research and explores several changes to the original Unix model that facilitate the use and programming of the system, notably in distributed multi-user environments. Plan 9 was a Bell Labs internal project from its start during the mid 1980s. In 1992, the first public release was made available to universities. In 1995, a commercial second release version was made available to the general public. In the late 1990s, Lucent Technologies, who had inherited Bell Labs, dropped commercial interest in the project. In 2000, a non-commercial third release was made under an open source license. In 2002, a non-commercial fourth release was made under a new free software license.
A user and development community, including current and former Bell Labs and MIT members, continues to produce daily minor releases as ISO images. Bell Labs still hosts development.[2] The development source tree is accessible over the 9P and HTTP protocols and is used to keep an installation up to date.[3] In addition to the official components of the OS included in the ISOs, Bell Labs also hosts a repository of externally developed applications and tools.

[edit] Overview
Plan 9 from Bell Labs was developed by members of the Computing Science Research Center at Bell Labs, the same group that developed UNIX and C.[4] The Plan 9 team was originally led by Rob Pike, Ken Thompson, Dave Presotto and Phil Winterbottom with support from Dennis Ritchie as head of the Computing Techniques Research Department. Over the years many notable developers have contributed to the project including Brian Kernighan, Tom Duff, Doug McIlroy, Bjarne Stroustrup, Bruce Ellis and others.[5]

[edit] All resources as files
Before Unix, most operating systems had different mechanisms for accessing different types of devices. For example, the application programming interface (API) to access a disk drive was vastly different from the API used to send and receive data from a serial port, which in turn was different from the API used to send data to a printer.
Unix attempted to remove these distinctions, and model all input/output as file operations. All device drivers were required to support meaningful read and write operations as a means of control. This lets programmers use utilities like mv and cp to send data from one device to another without being aware of the underlying implementation details. However, at the time, many key concepts (such as the control of process state) did not seem to map neatly onto files. As new features like Berkeley sockets and the X Window System were added, they were incorporated to exist outside the file system. New hardware features (such as the ability to eject a CD in software) also encouraged the use of hardware-specific control mechanisms like the ioctl system call.
The Plan 9 research project rejected these different approaches and returns to the file-centric view of the system. Each Plan 9 program views all available resources, including networking and the user-interface resources (like the window it is running in), as part of a hierarchical file system, rather than specialized interfaces.[2]

[edit] Distributed architecture
Plan 9 can be installed and used on a single self-contained system, but also has the capability to separate the functional components of the OS between separate hardware platforms. In a prototypical Plan 9 installation, users work at lightweight terminals running the Rio GUI and connect via the network to CPU servers that handle computation-intensive processes, with permanent data storage provided by additional machines acting as file servers and archival storage. Currently available desktop computers can also re-create this architecture internally using multiple virtual machines.

[edit] Design concepts
Plan 9's designers were interested in goals similar to those of microkernels, but made different architecture and design choices to achieve them. Plan 9's design goals included:

Resources as files: all resources are represented as files within a hierarchical file system
Namespaces: the application view of the network is a single, coherent namespace that appears as a hierarchical file system but may represent local or remote physically separated resources. The namespace of each process can be constructed independently, and the user may work simultaneously with applications with heterogenous namespaces
Standard communication protocol: a standard protocol, called 9P, is used to access all resources, both local and remote


[edit] Filesystems, files, and names
Plan 9 extended the system beyond files to "names", that is, a unique path to any object whether it be a file, screen, user, or computer. All are handled using the existing Unix standards, but extended such that any object can be named and addressed (similar in concept to the more widely known URI system of the world wide web). In Unix, devices such as printers are represented by names using software converters in /dev, but these addressed only devices attached by hardware, and did not address networked devices. Under Plan 9 printers are virtualized as files, and both can be accessed over the network from any workstation.
Another Plan 9 innovation was the ability for users to have different names for the same "real world" objects. Each user could create a personalized environment by collecting various objects into their namespace. Unix has a similar concept in which users gain privileges by being copied from another user, but Plan 9 extends this to all objects. Users can easily spawn "clones" of themselves, modify them, and then remove them without affecting the resources from which they were created.

[edit] Union directories
Unix allows filesystems to be built up from disparate resources using concepts such as links and filesystem mounts. These commands make the original directory disappear; if one mounts a new filesystem on the directory named "net", one can no longer access its previous contents.
Plan 9 introduced the idea of union directories, directories that combine resources across different media or across a network, binding transparently to other directories. For example, another computer's /bin (applications) directory can be bound to one's own, and then this directory will hold both local and remote applications and the user can access both transparently. Using the same system, under Plan 9 external devices and resources can be bound to /dev, allowing any device to be shared over the network without any additional code.
Today, many live CDs for Linux distributions implement a limited form of this feature as union mounting.

[edit] /proc
The /proc directory, in which all running processes are listed, illustrates how these features work together to produce a greater whole. This special Plan 9 "file system" has also been adopted by Linux and other later operating systems. Processes appear as named objects (sub-directories with info and control files) under /proc, along with other kernel resources, giving the user a dynamic I/O channel to send commands to them and read data from them. The user does not have to use a limited set and form of system calls to interact with the kernel from compiled programs; rather, he or she can use tools such as ls and cat to search, query and manipulate processes.
Users can also mount /proc directories (and any other special file systems) from any other machines into their namespace as well, interacting with them as if they are local. The result is a distributed computing environment assembled from separate machines â terminals that sit on users' desks, file servers that store permanent data, and other servers that provide faster CPUs, user authentication, and network gateways, all using the existing hierarchical directory/name system familiar to most computer users. A user can "build" a system by collecting up directories on fileservers, applications running on servers, printers on the network and then bind them all together into their personal namespace running on a terminal.

[edit] /net
Plan 9 does not have system calls for the multitude of communication protocols or device driver interfaces. For example /net is the API for all TCP/IP, and it can be used even with scripts or shell tools, writing data to control files to write and read connections. Relevant sub-directories like /net/tcp and /net/udp are used to interface to respective protocols. You can implement a NAT by mounting a /net from a perimeter machine with a public IP, while connecting to it from an internal network of private IP addresses, using the Plan 9 protocol 9P in the internal network. Or you can implement a VPN by mounting a /net directory from a remote gateway, using secured 9P over the public Internet.
Here would be an example of using union (a stack) directories in /net: just like inheritance in OOP, you can take one (possibly remote) /special directory and bind another local special directory on top of that, adding some new control files and hiding others. The union directory now is like a child object instance of the original parent. The functionality of the original can be partially modified. Consider the /net file system. If you modify or hide its /net/udp sub-directory you may control or extend the UDP interface with local filter processes, still leaving the original /net/tcp running intact, perhaps in a remote machine. Note that name space is per process: if you give an untrusted application a limited, modified /net union directory, you restrict its access to the net.
All this makes it easy to combine "objects" or file systems written in different languages on different systems, while using standard naming, access control and security of the file system, largely transparently to the programmer.
This is similar to the facility offered by the mount_portal[1] command in BSD which by convention is mounted on /p instead of /net with only /tcp available.

[edit] Networking and distributed computing
Plan 9 is based on UNIX but was developed to demonstrate the concept of making communication the central function of the computing system. All system resources are named and accessed as if they were files and multiple views of the distributed system can be defined dynamically for each program running on a particular machine. This approach improves generality and modularity of application design by encouraging servers that hold any information to appear to users and to applications just like collections of ordinary files.
Key to supporting the network transparency of Plan 9 was a new low-level networking protocol known as 9P. The 9P protocol and its implementation connected named network objects and presented a file-like system interface. 9P is a fast byte-oriented (rather than block-oriented) distributed file system that can virtualize any object, not only those presented by an NFS server on a remote machine. The protocol is used to refer to and communicate with processes, programs, and data, including both the user interface and the network. With the release of the 4th edition, it was modified and renamed 9P2000.

[edit] Unicode
Plan 9 uses Unicode throughout the system. UTF-8 was invented by Ken Thompson to be used as the native encoding in Plan 9 and the whole system was converted to general use in 1992.[6] Note that Plan 9 only supports the codes defined in the Basic Multilingual Plane of Unicode.

[edit] Implementations




GUI installation with rio


An installable runtime environment exists for x86, and Plan 9 has been ported to MIPS, DEC Alpha, SPARC, PowerPC, ARM and other architectures. The system is written in a dialect of ISO/ANSI C. Several applications were originally written in a language called Alef, but have since been rewritten in the same C dialect. Plan 9 can import POSIX applications and can emulate the Berkeley socket interface through ANSI/POSIX Environment APE. Recently, a new application called linuxemu was developed that can be used to run Linux binaries; it is, however, still a work in progress.

[edit] Impact
Plan 9 demonstrated that a central concept of Unix â that every system interface could be represented as sets of files â could be implemented and made functional in a modern distributed system. Some features from Plan 9, like the UTF-8 character encoding of unicode, have been implemented in other operating systems. Unix-like operating systems such as Linux have implemented 9P, Plan 9's file system and limited forms of rfork-like system calls. Additionally, in Plan 9 from User Space, several of Plan 9's applications and tools, including the rc shell, have been ported to Unix and Linux systems and have achieved some level of popularity. Glendix is a project seeking to replace the GNU operating system programs surrounding the Linux kernel with the Plan 9 operating system programs, or to replace the Plan 9 kernel with the Linux kernel if you prefer.
However, Plan 9 itself has never approached Unix in popularity, and was primarily a research tool. Plan 9 has been criticized as "seem[ing] to function mainly as a device for generating interesting papers on operating-systems research."[7] Eric S. Raymond in his book The Art of Unix Programming speculates on Plan 9's lack of acceptance:

"Plan 9 failed simply because it fell short of being a compelling enough improvement on Unix to displace its ancestor. Compared to Plan 9, Unix creaks and clanks and has obvious rust spots, but it gets the job done well enough to hold its position. There is a lesson here for ambitious system architects: the most dangerous enemy of a better solution is an existing codebase that is just good enough."[7]

Other critics of Plan 9 include those critical of Unix in general, where Plan 9 is considered the epitome of the "Worse is better" school of operating system design. Common criticisms include the relative lack of "polish" and development in Plan 9's windowing system[8] and Plan 9's relative lack of maturity as a commercial-grade body of software.[9]
Plan 9 proponents and developers claim that the problems hindering its adoption have been solved, and its original goals as a distributed system, development environment, and research platform have been met, and that it enjoys moderate but growing popularity. Inferno, through its hosted capabilities, has been a vehicle to bring Plan 9 technologies to other systems as part of heterogeneous computing grids.[10][11][12][13]

[edit] License
The full source code is freely available under Lucent Public License 1.02, and considered to be open source by the OSI and free software by the FSF (although incompatible with the GNU General Public License). It passes the Debian Free Software Guidelines.

[edit] See also




Free software portal




[edit] Standard Plan 9 utilities
Further information: List of Plan 9 applications

rc - the Plan 9 shell
sam - a text editor
acme - a user interface for programmers
plumber - interprocess messaging
mk - a tool for building software, analogous to the traditional Unix make utility
acid - debugger
rio - the new Plan 9 windowing system
8Â½ - the old Plan 9 windowing system
Fossil and Venti - the new archival file system and permanent data store


[edit] Implementation artifacts

9P (or Styx) - a filesystem protocol
rendezvous - a basic synchronization mechanism
Brazil - what became the Fourth Edition of Plan 9


[edit] Influenced

Plan 9 from User Space - a port of many Plan 9 libraries and applications to Unix-like operating systems
Inferno - distributed operating system following up Plan 9
Plan B - research operating system based on Plan 9
Octopus - a new approach to Plan B
9wm - an X window manager that clones the Plan 9 interface
wmii - an X window manager that uses a file system-like interface based on 9P
Glendix - a port of Plan 9 user space tools to Linux


[edit] References


^ Raymond, Eric. "The Art of UNIX Programming". http://www.faqs.org/docs/artu/plan9.html#ftn.id3015199. Retrieved on 2007-05-07.Â 
^ a b "Plan 9 from Bell Labs". Lucent Technologies. 2006. http://plan9.bell-labs.com/. Retrieved on April 27 2006.Â 
^ "Staying up to date". Plan 9 community. 2006. http://cm.bell-labs.com/wiki/plan9/Staying_up_to_date/index.html. Retrieved on April 27 2006.Â 
^ "From the inventors of UNIX system comes Plan 9 from Bell Labs". Lucent Technologies. 1995. http://www.lucent.com/press/0795/950718.bla.html. Retrieved on April 2 2006.Â 
^ McIlroy, Doug (1995). "Preface to the Second (1995) Edition". Lucent Technologies. http://cm.bell-labs.com/sys/man/preface.html. Retrieved on April 2 2006.Â 
^ Pike, Rob (2003). "UTF-8 History". http://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt. Retrieved on April 27 2006.Â 
^ a b Raymond, Eric S.. "Plan 9: The Way the Future Was". http://www.faqs.org/docs/artu/plan9.html. Retrieved on March 28 2006.Â 
^ "Interview with Dennis Ritchie, response #25". http://www.osnews.com/comment.php?news_id=2760&limit=no#71883. Retrieved on 2006-09-09.Â 
^ "Interview with Dennis Ritchie, response #23". http://www.osnews.com/comment.php?news_id=2760&limit=no#71847. Retrieved on 2006-09-10.Â 
^ "9grid (Plan 9 wiki)". Plan 9 wiki. 2006. http://cm.bell-labs.com/wiki/plan9/9grid/. Retrieved on March 28 2006.Â 
^ ""Press Release: Vita Nuova Supplies Inferno Grid to Evotec OAI" (PDF). Vita Nuova Holdings Limted. 2004. http://www.vitanuova.com/solutions/grid/news/evotecoai.pdf. Retrieved on March 28 2006.Â 
^ ""Press Release: Rutgers University Libraries Install Inferno Data Grid"" (PDF). Vita Nuova Holdings Limited. 2004. http://www.vitanuova.com/solutions/grid/news/rutgers.pdf. Retrieved on March 28 2006.Â 
^ ""Press Release: The University of York Department of Biology install Vita Nuova's Inferno Data Grid"" (PDF). Vita Nuova Holdings Limited. 2004. http://www.vitanuova.com/solutions/grid/news/Yorkbiology.pdf. Retrieved on March 28 2006.Â 



[edit] External links

[edit] Bell Labs

Plan 9 homepage
Plan 9 Overview
The papers from 4th edition
Other papers and documents
README for 2nd Edition by Brian W. Kernighan
Browsable full source code
Plan 9 Wiki - powered by wikifs
Plan 9 documentation index
Plan 9 manual pages
Plan 9 download
Installation notes
Plan 9 FAQ
Plan 9 projects in the GSoC
Plan 9, an incomplete list of organizations using plan 9 and inferno


[edit] Lectures

Slides - Video from FOSDEM 2006
Plan 9 is not dead at FAST-OS 2005


[edit] Other native and virtual machines

[edit] native

Plan 9 in a boxed version by Vita Nuova Holdings


[edit] virtual

Plan 9 as a Qemu image
Plan 9 as a VMware VMPlayer virtual machine
Plan 9 as a Vx32 Extension Environment binary image


[edit] Other sources of information

9fans, the Plan 9 mailing list hosted by http://9fans.net
Ninetimes Plan 9, Inferno, Unix, and Bell Labs operating systems news
#plan9, the Plan 9 IRC channel hosted by freenode
"Plan 9: The Way the Future Was" from The Art of Unix Programming by Eric S. Raymond
Reinventing UNIX: An introduction to the Plan 9 operating system, by Hancock, B., Giarlo, M.J., & Triggs, J. A., published in Library Hi Tech, 21(4), 471-476.
Introduction to OS abstractions using Plan 9 from Bell Labs, by Francisco J Ballesteros
Das Netzbetriebssystem Plan 9., 1999, ISBN 3-446-18881-9 by Hans-Peter Bischof, Gunter Imeyer, Bernhard WellhÃ¶fer (born as KÃ¼hl), Axel-Tobias Schreiner. The book is out of print, but available for free at the print-on-demand service provider Lulu.com.








vÂ â¢Â dÂ â¢Â e

Unix and Unix-like operating systems






AIXÂ Â· BSDÂ Â· DragonFly BSDÂ Â· FreeBSDÂ Â· GNUÂ Â· HP-UXÂ Â· IRIXÂ Â· LinuxÂ Â· LynxOSÂ Â· Mac OS XÂ Â· MINIXÂ Â· NetBSDÂ Â· OpenBSDÂ Â· Plan 9Â Â· QNXÂ Â· Research UnixÂ Â· SCO OpenServerÂ Â· SolarisÂ Â· System VÂ Â· Tru64Â Â· VxWorksÂ Â· more









Retrieved from "http://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs"
Categories: Real-time operating systems | Embedded operating systems | Plan 9 from Bell Labs | Computing platforms | Software projects 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




Â 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Äesky
Deutsch
EspaÃ±ol
Esperanto
FranÃ§ais
Galego
×¢××¨××ª
LietuviÅ³
Magyar
Nederlands
æ¥æ¬èª
âªNorsk (bokmÃ¥l)â¬
Polski
PortuguÃªs
Ð ÑÑÑÐºÐ¸Ð¹
Simple English
Svenska
à¹à¸à¸¢
Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°









 This page was last modified on 5 April 2009, at 08:06 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  WikipediaÂ® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
