













Service-oriented architecture - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Service-oriented_architecture";
		var wgTitle = "Service-oriented architecture";
		var wgAction = "view";
		var wgArticleId = "666924";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281912654;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Service-oriented architecture

From Wikipedia, the free encyclopedia

Jump to: navigation, search 







This article or section has multiple issues. Please help improve the article or discuss these issues on the talk page.

It needs additional references or sources for verification. Tagged since July 2008.
It may require general cleanup to meet Wikipedia's quality standards. Tagged since July 2008.









Layer interaction in the Service-oriented Architecture.


In computing, service-oriented architecture (SOA) provides methods for systems development and integration where systems package functionality as interoperable services. A SOA infrastructure allows different applications to exchange data with one another. Service-orientation aims at a loose coupling of services with operating systems, programming languages and other technologies that underlie applications[1]. SOA separates functions into distinct units, or services[2], which developers make accessible over a network in order that users can combine and reuse them in the production of applications[3]. These services communicate with each other by passing data from one service to another, or by coordinating an activity between two or more services. Many commentators[who?] see SOA concepts as built upon and evolving from older concepts of distributed computing[2][3] and modular programming.




Contents


1 Description

1.1 Introduction
1.2 SOA for Business Applications
1.3 Requirements
1.4 Principles
1.5 Web services approach
1.6 SOA and Web service protocols
1.7 Other SOA concepts
1.8 SOA definitions
1.9 Service contract
1.10 SOA and network management architecture


2 Discussion

2.1 Benefits
2.2 Challenges in adopting SOA
2.3 Criticisms of SOA


3 Extensions

3.1 SOA, Web 2.0, and mashups
3.2 Web 2.0


4 See also
5 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Description

[edit] Introduction
A service-oriented architecture (SOA) is a group of services that communicate with each other. The process of communication involves either simple data-passing between a service provider and service consumers, or a more complicated system of two or more service providers. Intercommunication implies the need for some means of connecting two or more services to each other.
SOAs build applications out of software services. Services comprise intrinsically unassociated, loosely coupled units of functionality that have no calls to each other embedded in them. Each service implements one action, such as filling out an online application for an account, viewing an online bank-statement, or placing an online booking or airline ticket order. Instead of services embedding calls to each other in their source code, they use defined protocols that describe how one or more services can "talk" to each other.
A software developer, software engineer, or business process expert associates individual SOA objects by using orchestration. In the process of orchestration, a software engineer or process engineer associates relatively large chunks of software functionality (services) in a non-hierarchical arrangement (in contrast to a class hierarchy) by using a special software tool that contains an exhaustive list of all of the services, their characteristics, and a means to record the designer's choices that the designer can manage and the software system can consume and use at run-time.
SOA may be used for business applications, or in government and the military.[4]
Underlying and enabling all of this requires metadata in sufficient detail to describe not only the characteristics of these services, but also the data that drives them. Programmers have made extensive use of XML in SOA to structure data that they wrap in a nearly exhaustive description-container. Analogously, WSDL typically describe the services themselves, while SOAP describes the communications protocols. Whether these description languages are the best possible for the job, and whether they will remain the favorites in the future, remains an open question. In the meantime[update] SOA depends on data and services that are described using some implementation of metadata that should meet the following two criteria:

the metadata should come in a form that software systems can use to configure dynamically by discovery and incorporation of defined services, and also to maintain coherence and integrity
the metadata should come in a form that system designers can understand and manage with a reasonable expenditure of cost and effort

SOA's goal is to allow users to string together fairly large chunks of functionality to form ad hoc applications that are built almost entirely from existing software services. The larger the chunks, the fewer the interface points required to implement any given set of functionality; however, very large chunks of functionality may not prove sufficiently granular for easy reuse. Each interface brings with it some amount of processing overhead, so there is a performance consideration in choosing the granularity of services. The great promise of SOA suggests that the marginal cost of creating the n-th application is low, as all of the software required already exists to satisfy the requirements of other applications. Ideally, one requires only orchestration to produce a new application.
For this to operate, no interactions must exist between the chunks specified or within the chunks themselves. Instead, the interaction of services (all of them unassociated peers) is specified by humans in a relatively ad hoc way with the intent driven by newly emergent requirements. Thus the need for services as much larger units of functionality than traditional functions or classes, lest the sheer complexity of thousands of such granular objects overwhelm the application designer. Programmers develop the services themselves using traditional languages like Java, C#, C, C++ or COBOL.
SOA services feature loose coupling, in contrast to the functions that a linker binds together to form an executable, to a dynamically linked library or to an assembly. SOA services also run in "safe" wrappers such as Java or .NET, and other programming languages that manage memory allocation and reclamation, allow ad hoc and late binding, and provide some degree of indeterminate data typing.
As of 2008, increasing numbers of third-party software companies offer software services for a fee. In the future, SOA systems may consist of such third-party services combined with others created in-house. This has the potential to spread costs over many customers and customer uses, and promotes standardization both in and across industries. In particular, the travel industry now has a well-defined and documented set of both services and data, sufficient to allow any reasonably competent software engineer to create travel-agency software using entirely off-the-shelf software services.[citation needed] Other industries, such as the finance industry, have also started making significant progress in this direction.
SOA as an architecture relies on service-orientation as its fundamental design principle[5]. If a service presents a simple interface that abstracts away its underlying complexity, users can access independent services without knowledge of the service's platform implementation[6].
SOA relies on services exposing their functionality via interfaces that other applications and services can read to understand how to utilize those services.
Relative to typical practices of earlier attempts to promote software reuse via modularity of functions or by use of predefined groups of functions known as classes, SOA's atomic-level objects often end up 100 to 1,000 times larger.[citation needed]

[edit] SOA for Business Applications




A SOA.


Companies have long sought to integrate existing systems in order to implement information technology (IT) support for business processes that cover all present and prospective systems requirements needed to run the business end-to-end. A variety of designs serve this end, ranging from rigid point-to-point electronic data interchange (EDI) interactions to web auctions. By updating older technologies, for example by Internet-enabling EDI-based systems, companies can make their IT systems available to internal or external customers; but the resulting systems have not proven flexible enough to meet business demands that require a flexible, standardized architecture to better support the connection of various applications and the sharing of data.
SOA offers one such prospective architecture. It unifies business processes by structuring large applications as an ad hoc collection of smaller modules called "services". Different groups of people both inside and outside an organization can use these applications, and new applications built from a mix of services from the global pool exhibit greater flexibility and uniformity. One should not, for example, have to provide redundantly the same personal information to open an online checking, savings or IRA account, and further, the interfaces one interacts with should have the same look and feel and use the same level and type of input-data validation. Building all applications from the same pool of services makes achieving this goal much easier and more deployable to affiliated companies. For example: interacting with a rental-car company's reservation system from an airline's reservation system.
Service Oriented Architecture (SOA) provides a design framework with a view to realizing rapid and low-cost system development and to improving total system-quality. SOA may use web services standards and web technologies and is rapidly becoming a standard approach for enterprise information systems.
Web services face significant challenges because of particular requirements. Applying the SOA paradigm to a real-time system presents many problems, including response time, support of event-driven, asynchronous parallel applications, complicated human interface support, reliability, etc. This article defines SOA and includes detailed discussion on several issues that arise when applying SOA to industrial systems.
SOA has gained ground as a mechanism for defining business services[7] and operating models (e. g., Business-Agile Enterprise) and thus provide a structure for IT to deliver against the actual business requirements and adapt in a similar way to the business. The purpose of using SOA as a business mapping tool is to ensure that the services created properly represent the business view and are not just what technologists think the business services should be. At the heart of SOA planning is the process of defining architectures for the use of information in support of the business, and the plan for implementing those architectures[8]. Enterprise Business Architecture should always represent the highest and most dominant architecture. Every service should be created with the intent to bring value to the business in some way and must be traceable back to the business architecture.
Multiple business groups have published structured approaches to SOA, focusing on the architecture and leaving implementation details to technical standards. IBM announced SOMA (service-oriented modeling and architecture[9]) as a SOA-related methodology in 2004. The OASIS standards group published SOA Adoption Blueprints as a move towards greater standardization and the involvement of business objectives. The SAP Enterprise Services Architecture is focused on a strict governance process and the use of semantics to improve the usefulness of services in business process innovation. Service Oriented Architecture (SOA) provides a design framework with a view to realizing rapid and low-cost system development and to improving total system-quality. SOA may use web services standards and web technologies and is rapidly becoming a standard approach for enterprise information systems.

[edit] Requirements
In order to efficiently use a SOA, one must[citation needed] meet the following requirements:

Interoperability between different systems and programming languages provides the basis for integration between applications on different platforms through a communication protocol. One example of such communication is based on the concept of messages. Using messages across defined message channels decreases the complexity of the end application, thereby allowing the developer of the application to focus on true application functionality instead of the intricate needs of a communication protocol.
Desire to create a federation of resources. Establish and maintain data flow to a federated data warehouse. This allows new functionality developed to reference a common business format for each data element.


[edit] Principles
The following guiding principles define the ground rules for development, maintenance, and usage of the SOA[10]:

Reuse, granularity, modularity, composability, componentization and interoperability
Standards compliance (both common and industry-specific)
Services identification and categorization, provisioning and delivery, and monitoring and tracking

The following specific architectural principles for design and service definition focus on specific themes that influence the intrinsic behaviour of a system and the style of its design:

Service encapsulation – Many web services are consolidated to be used under the SOA. Often such services were not planned to be under SOA.
Service loose coupling – Services maintain a relationship that minimizes dependencies and only requires that they maintain an awareness of each other
Service contract – Services adhere to a communications agreement, as defined collectively by one or more service description documents
Service abstraction – Beyond what is described in the service contract, services hide logic from the outside world
Service reusability – Logic is divided into services with the intention of promoting reuse
Service composability – Collections of services can be coordinated and assembled to form composite services
Service autonomy – Services have control over the logic they encapsulate
Service optimization – All else equal, high-quality services are generally considered preferable to low-quality ones
Service discoverability – Services are designed to be outwardly descriptive so that they can be found and assessed via available discovery mechanisms[11]
Service Relevance – Functionality is presented at a granularity recognized by the user as a meaningful service

The following references provide additional considerations for defining a SOA implementation:

SOA Reference Architecture provides a working design of an enterprise-wide SOA implementation with detailed architecture diagrams, component descriptions, detailed requirements, design patterns, opinions about standards, patterns on regulation compliance, standards templates etc.[12]
Life cycle management SOA Practitioners Guide Part 3: Introduction to Services Lifecycle introduces the Services Lifecycle and provides a detailed process for services management though the service lifecycle, from inception to retirement or repurposing of the services. It also contains an appendix that includes organization and governance best practices, templates, comments on key SOA standards, and recommended links for more information.

In addition, one might take the following factors into account when defining a SOA implementation:

efficient use of system resources
service maturity and performance
EAI Enterprise Application Integration


[edit] Web services approach
Web services can implement a service-oriented architecture. Web services make functional building-blocks accessible over standard Internet protocols independent of platforms and programming languages. These services can be new applications or just wrapped around existing legacy systems to make them network-enabled.
Each SOA building block can play one or both of two roles:

Service provider
The service provider creates a Web service and possibly publishes its interface and access information to the service registry. Each provider must decide which services to expose, how to make trade-offs between security and easy availability, how to price the services, or (if no charges apply) how to exploit them for other value. The provider also has to decide what category the service should be listed in for a given broker service and what sort of trading partner agreements are required to use the service. It registers what services are available within it, and lists all the potential service recipients. The implementer of the broker then decides the scope of the broker. Public brokers are available through the Internet, while private brokers are only accessible to a limited audience, for example, users of a company intranet. Furthermore, the amount of the offered information has to be decided. Some brokers specialize in many listings. Others offer high levels of trust in the listed services. Some cover a broad landscape of services and others focus within an industry. There are also brokers that catalog other brokers. Depending on the business model, brokers can attempt to maximize look-up requests, number of listings or accuracy of the listings. The Universal Description Discovery and Integration (UDDI) specification defines a way to publish and discover information about Web services. Other service broker technologies include for example ebXML (Electronic Business using eXtensible Markup Language) and those based on the ISO/IEC 11179 Metadata Registry (MDR) standard.
Service requester
The service requester or Web service client locates entries in the broker registry using various find operations and then binds to the service provider in order to invoke one of its Web services. Which service the service-requesters need, they have to take it into the Brokers, then bind it with respective service and then use it. They can access multiple services, if the service provide multiple services.


[edit] SOA and Web service protocols





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (June 2006)


Implementors commonly build SOAs using Web services standards (for example, using SOAP) that have gained[when?] broad industry acceptance. These standards (also referred to as Web Service specifications) also provide greater interoperability and some protection from lock-in to proprietary vendor software. One can, however, implement SOA using any service-based technology, such as Jini, CORBA or REST.

[edit] Other SOA concepts
Architectures can operate independently of specific technologies[3]. Designers can implement SOA using a wide range of technologies, including SOAP, REST, RPC, DCOM, CORBA, Web Services or WCF (Microsoft's implementation of Webservice forms a part of WCF). SOA can be implemented using one or more of these protocols and, for example, might use a file-system mechanism to communicate data conforming to a defined interface-specification between processes conforming to the SOA concept. The key is independent services with defined interfaces that can be called to perform their tasks in a standard way, without a service having foreknowledge of the calling application, and without the application having or needing knowledge of how the service actually performs its tasks.




Elements of SOA, by Dirk Krafzig, Karl Banke, and Dirk Slama. Enterprise SOA. Prentice Hall, 2005






SOA Meta Model, The Linthicum Group, 2007






Service-Oriented Modeling Framework (SOMF) Version 2.0


SOA enables the creation of applications that are built by combining loosely coupled and interoperable services[13]. These services inter-operate based on a formal definition (or contract, e. g., WSDL) that is independent of the underlying platform and programming language. The interface definition hides the implementation of the language-specific service. SOA-based systems can therefore function independently of development technologies and platforms (such as Java, .NET etc). Services written in C# running on .NET platforms and services written in Java running on Java EE platforms, for example, can both be consumed by a common composite application (or client). Applications running on either platform can also consume services running on the other as Web services that facilitates reuse. Managed environments can also wrap COBOL legacy systems and present them as software services. This has extended the useful life of many core legacy systems indefinitely, no matter what language they originally used.
SOA can support integration and consolidation activities within complex enterprise systems, but SOA does not specify or provide a methodology or framework for documenting capabilities or services.
High-level languages such as BPEL and specifications such as WS-CDL and WS-Coordination extend the service concept by providing a method of defining and supporting orchestration of fine-grained services into more coarse-grained business services, which architects can in turn incorporate into workflows and business processes implemented in composite applications or portals[citation needed].
The use of Service Component Architecture (SCA) to implement SOA is a current area of research.
Service-oriented modeling [2] is a SOA framework that identifies the various disciplines that guide SOA practitioners to conceptualize, analyze, design, and architect their service-oriented assets. The Service-Oriented Modeling Framework (SOMF) is a work structure or "map" depicting the various components that contribute to a successful service-oriented modeling approach. It illustrates the major elements that identify the “what to do” aspects of a service development scheme. The model enables practitioners to craft a project plan and to identify the milestones of a service-oriented initiative. SOMF also provides a common modeling notation to address alignment between business and IT organizations.
SOMF is designed to address the following principles:

Business Traceability
Architectural Best-Practices Traceability
Technological Traceability
SOA Value Proposition
Software Assets Reuse
SOA Integration Strategies
Technological Abstraction and Generalization
Architectural Components Abstraction



"Service-Oriented Modeling Framework (SOMF) Example". http://www.modelingconcepts.com/pdf/SOMF_ANALYSIS_MODELING.pdf. 
"Download SOMF Examples & Language Notation". http://www.modelingconcepts.com/pages/download.htm. 


[edit] SOA definitions
There are multiple definitions of SOA. The OASIS group[14] and the Open Group[15] have both created formal definitions.
OASIS [[defines SOA as the following:
A paradigm for organizing and utilizing distributed capabilities that may be under the control of different ownership domains. It provides a uniform means to offer, discover, interact with and use capabilities to produce desired effects consistent with measurable preconditions and expectations.

[edit] Service contract
A service contract needs[citation needed] to have the following components:

Header

Name – Name of the service. Should indicate in general terms what it does, but not be the only definition
Version – The version of this service contract
Owner – The person/team in charge of the service
RACI

Responsible – The role/person/team responsible for the deliverables of this contract/service. All versions of the contract
Accountable – Ultimate Decision Maker in terms of this contract/service
Consulted – Who must be consulted before action is taken on this contract/service. This is two-way communication. These people have an impact on the decision or the execution of that decision.
Informed – Who must be informed that a decision or action is being taken. This is a one-way communication. These people are impacted by the decision or execution of that decision, but have no control over the action.


Type – This is the type of the service to help distinguish the layer in which it resides. Different implementations will have different service types. Examples of service types include:

Presentation
Process
Business
Data
Integration




Functional

Functional Requirement (from Requirements Document) – Indicates the functionality in specific bulleted items what exactly this service accomplishes. The language should be such that it allows test cases to prove the functionality is accomplished.
Service Operations – Methods, actions etc. Must be defined in terms of what part of the functionality it provides.
Invocation – Indicates the invocation means of the service. This includes the URL, interface, etc. There may be multiple invocation paths for the same service. We may have the same functionality for an internal and some external clients, each with different invocation means and interfaces. Examples:

SOAP
REST
Events Triggers




Non-Functional

Security Constraints – Defines who can execute this service in terms of roles or individual partners etc. and which invocation mechanism they can invoke.
Quality of Service – Determines the allowable failure rate
Transactional – Is this capable of acting as part of a larger transaction and if so, how do we control that?
Service Level Agreement – Determines the amount of latency the service is allowed to have to perform its actions
Semantics – Dictates or defines the meaning of terms used in the description and interfaces of the service
Process – Describes the process, if any, of the contracted service




[edit] SOA and network management architecture
The principles of SOA are currently[update] being applied to the field of network management. Examples of service-oriented network management architectures are TS 188 001 NGN Management OSS Architecture from ETSI, and M.3060 Principles for the Management Of Next Generation Networks recommendation from the ITU-T.
Tools for managing SOA infrastructure include:

HP Management Software / Mercury SOA Manager
HyPerformix IPS Performance Optimizer
IBM Tivoli Framework


[edit] Discussion

[edit] Benefits
Enterprise architects believe that SOA can help businesses respond more quickly and cost-effectively to changing market conditions[16]. This style of architecture promotes reuse at the macro (service) level rather than micro (classes) level. It can also simplify interconnection to – and usage of – existing IT (legacy) assets.
In some respects, one can regard SOA as an architectural evolution rather than as a revolution. It captures many of the best practices of previous software architectures. In communications systems, for example, little development has taken place of solutions that use truly static bindings to talk to other equipment in the network. By formally embracing a SOA approach, such systems are better positioned to stress the importance of well-defined, highly inter-operable interfaces[17].
Some[who?] have questioned whether SOA is just a revival of modular programming (1970s), event-oriented design (1980s) or interface/component-based design (1990s)[citation needed]. SOA promotes the goal of separating users (consumers) from the service implementations. Services can therefore be run on various distributed platforms and be accessed across networks. This can also maximize reuse of services[citation needed].
SOA is an architectural and design discipline conceived to achieve the goals of increased interoperability (information exchange, reusability, and composability), increased federation (uniting resources and applications while maintaining their individual autonomy and self-governance), and increased business and technology domain alignment.
Service-Oriented Architecture (SOA) is an architectural approach (or style) for constructing complex software-intensive systems from a set of universally interconnected and interdependent building blocks, called services.
SOA realizes its business and IT benefits through utilizing an analysis and design methodology when creating services that ensures they are consistent with the architectural vision and roadmap, and adhere to principles of service-orientation. Arguments supporting the business and management aspects from SOA are outlined in various publications[18].
A service comprises a stand-alone unit of functionality available only via a formally defined interface. Services can be some kind of "nano-enterprises" that are easy to produce and improve. Also services can be "mega-corporations" that are constructed as coordinated work of sub-ordinate services.
Services generally adhere to the following principles of service-orientation:

abstraction
autonomy
composability
discoverability
formal contract
loose coupling
reusability
statelessness

A mature rollout of SOA effectively defines the API of the organization.
Implementation of services should be treated as separate projects from the larger project for three reasons:

It promotes the concept to the business that services can be delivered quickly and independently from the larger and slower-moving projects common in the organization. The business starts understanding systems and simplified user interfaces calling on services. This advocates agility.
It promotes the decoupling of services from its consuming project. This encourages good design where the service is designed without knowing who its consumers are.
Documentation and test artifacts of the service are not embedded within the detail of the larger project. This is important when the service needs to be reused later.

An indirect benefit of SOA is dramatically simplified testing. Services are autonomous, stateless, with fully documented interfaces, and separate from the cross-cutting concerns of the implementation. The industry has never been exposed to this circumstance before.
If appropriate test data is defined in the organization, then when a service is being built, a corresponding stub is built that reacts to the test data. A full set of regression tests, scripts, data, and responses is also captured for the service. The service can be tested as a 'black box' using existing stubs corresponding to the services it calls. Test environments can be constructed where the primitive and out-of-scope services are stubs, while the remainder of the mesh are test deployments of full services. As each interface is fully documented, with its own full set of regression test documentation, it becomes simple to identify problems in test services. Testing evolves to merely validating that the test service operates according to its documentation, and in finding gaps in documentation and test cases of all services within the environment. Managing data state of idempotent services is the only complexity.
Examples may prove useful to aid in documenting a service to the level where it becomes useful. The documentation of some API's within the Java Community Process are good examples. As these are exhaustive, staff would typically use only important subsets. The 'ossjsa.pdf' file within JSR-89 is an example for such a file. JSR-89 Spec Download

[edit] Challenges in adopting SOA
One obvious and common challenge faced involves managing services metadata[citation needed]. SOA-based environments can include many services that exchange messages to perform tasks. Depending on the design, a single application may generate millions of messages. Managing and providing information on how services interact is a complicated task. This becomes even more complicated when these services are delivered by different organizations within the company or even different companies (partners, suppliers, etc). This creates huge trust issues across teams, and hence SOA Governance comes into picture.
Another challenge involves the lack of testing in SOA space. There are no sophisticated tools that provide testability of all headless services (including message and database services along with web services) in a typical architecture. Lack of horizontal trust requires that both producers and consumers test services on a continuous basis. SOA's main goal is to deliver Agility to Businesses. Therefore it is important to invest in a testing framework (build or buy) that would provide you with the visibility required to find the culprit in your architecture in no time. The Business Agility requires from SOA services to be controlled by the business goals and directives as defined in the Business Motivation Model (BMM)[19].
Another challenge relates to providing appropriate levels of security. Security models built into an application may no longer suffice when the capabilities of the application are exposed as services that can be used by other applications. That is, application-managed security is not the right model for securing services. A number of new technologies and standards are emerging to provide more appropriate models for security in SOA. See SOA Security entry for more information.
As SOA and the WS-* specifications practitioners constantly expand, update and refine their output, there is a shortage of skilled people to work on SOA-based systems, including the integration of services and construction of services infrastructure.
Interoperability becomes an important aspect of SOA implementations. The WS-I organization has developed Basic Profile (BP) and Basic Security Profile (BSP) to enforce compatibility[20]. Testing tools have been designed by WS-I to help assess whether web services are conformant with WS-I profile guidelines. Additionally, another charter has been established to work on the Reliable Secure Profile.
Significant vendor hype exists concerning SOA; this can create expectations that may not be fulfilled. Product stacks continue to evolve as early adopters test the development and runtime products with real-world problems. SOA does not guarantee reduced IT costs, improved systems agility or faster time-to-market. Successful SOA implementations may realize some or all of these benefits depending on the quality and relevance of the system architecture and design[21] [22].
SOA efforts are routinely initiated by internal IT delivery organizations, and some of these improperly introduce concepts to the business so it remains misunderstood. The adoption starts meeting IT delivery needs instead of those of the business, so the result is an organization with superlative laptop provisioning services, instead of one that can quickly respond to market opportunities. Business Leadership also becomes convinced that the organization is executing on SOA well.
As one of the most important benefits of SOA is its ease of reuse. Therefore accountability and funding models must ultimately evolve within the organization. A business unit needs to be encouraged to create services that other units will use. Conversely, units must be encouraged to reuse services. This requires a few new governance components:

Each business unit creating services must have an appropriate support structure in place to deliver on its service level obligations, and to support enhancing existing services strictly for the benefit of others. This is typically quite foreign to business leaders.
Each business unit consuming services accepts the apparent risk of reusing services outside their own control, with the attendant external project dependancies, etc.
An innovative funding model is needed as incentive to drive these behaviors above. Business units normally pay the IT Organization to assist during projects, and then to operate the environment. Corporate incentives should discount these costs to service providers, and create internal revenue streams from consuming business units to the service provider. These streams should be less than the costs of a consumer simply building it the old-fashioned way. ----


[edit] Criticisms of SOA
Some criticisms[23] of SOA depend on the assumption that SOA is just another term for Web Services. For example, some critics[who?] claim SOA results in the addition of XML layers, introducing XML parsing and composition. In the absence of native or binary forms of Remote Procedure Call (RPC), applications could run slower and require more processing power, increasing costs. Most implementations do incur these overheads, but SOA can be implemented using technologies (for example, Java Business Integration (JBI)) that do not depend on remote procedure calls or translation through XML. At the same time, there are emerging, open-source XML parsing technologies, such as VTD-XML, and various XML-compatible binary formats that promise to significantly improve the SOA performance[24][25][26].
Stateful services require both the consumer and the provider to share the same consumer-specific context, which is either included in or referenced by messages exchanged between the provider and the consumer. This constraint has the drawback that it could reduce the overall scalability of the service provider because it might need to remember the shared context for each consumer. It also increases the coupling between a service provider and a consumer and makes switching service providers more difficult.
Another concern is that WS-* standards and products are still evolving (e. g., transaction, security), and SOA can thus introduce new risks unless properly managed and estimated with additional budget and contingency for additional Proof of Concept work.
Some critics[who?] feel SOA is merely an obvious evolution of currently well-deployed architectures (open interfaces, etc).
The ability to easily modify systems is sometimes omitted from IT system design. Many systems, including SOAs, hard-code the operations, goods and services of the organization, thus restricting their online service and business agility in the global marketplace.[citation needed]
The next step in the design process covers the definition of a Service Delivery Platform (SDP) and its implementation. It is in the SDP design phase where one defines the business information models, identity management, products, content, devices, and the end user service characteristics, as well as how agile the system is so that it can deal with the evolution of the business and its customers.

[edit] Extensions

[edit] SOA, Web 2.0, and mashups
Web 2.0 refers to a "second generation" of Web sites, primarily distinguished by the ability of visitors to contribute information for collaboration and sharing. Web 2.0 applications use Web services and may include AJAX, Flash, or JavaFX user interfaces, Web syndication, blogs, and wikis. While there are no set standards for Web 2.0, it is characterized by building on the existing Web server architecture and using services. Web 2.0 can therefore be regarded as displaying some SOA characteristics[27][28][29].
Some commentators[who?] also regard mashups as Web 2.0 applications. The term Enterprise mashups has been coined to describe Web applications that combine content from more than one source into an integrated experience that share many of the characteristics of service-oriented business applications (SOBAs). SOBAs are applications composed of services in a declarative manner. There is ongoing debate about "the collision of Web 2.0, mashups, and SOA," with some stating that Web 2.0 applications are a realization of SOA composite and business applications[30].

[edit] Web 2.0
Tim O'Reilly coined the term Web 2.0 to describe a perceived, quickly growing set of Web-based applications[31]. A topic that has experienced extensive coverage involves the relationship between Web 2.0 and Service-Oriented Architectures (SOAs). SOA is considered as the philosophy of encapsulating application logic in services with a uniformly defined interface and making these publicly available via discovery mechanisms. The notion of complexity-hiding and reuse, but also the concept of loosely coupling services has inspired researchers to elaborate on similarities between the two philosophies, SOA and Web 2.0, and their respective applications. Some argue Web 2.0 and SOA have significantly different elements and thus can not be regarded “parallel philosophies”, whereas others consider the two concepts as complementary and regard Web 2.0 as the global SOA[32].
The philosophies of Web 2.0 and SOA serve different user needs and thus expose differences with respect to the design and also the technologies used in real-world applications. However, very recently[update], numerous novel use-cases demonstrate the great potential of combining technologies and principles of both Web 2.0 and SOA[33].
In an "Internet of Services", all people, machines, and goods will have access via the network infrastructure of tomorrow. The Internet will thus offer services for all areas of life and business, such as virtual insurance, online banking and music, and so on. Those services will require a complex services infrastructure including Service delivery platforms bringing together demand and supply. Building blocks for the Internet of Services are SOA, Web 2.0 and semantics on the technology side as well as novel business models, and approaches to systematic and community based innovation[34].
Even though Oracle indicates that Gartner is coining a new term, Gartner analysts indicate that they call this advanced SOA and "whimsically" refer to it as SOA 2.0[35]. Most of the major middleware vendors (e. g., webMethods, TIBCO Software, IBM, Sun Microsystems, and Oracle) have had some form of SOA 2.0 attributes for years.
However, some other industry commentators[who?] have criticized attaching a version number ("2.0") to an application-architecture design-approach, while others[who?] have stated that the "next generation" should apply to the evolution of SOA techniques from IT optimization to business development[36].

[edit] See also




Big ball of mud anti-pattern
Business-Agile Enterprise
Business-driven development
Business Intelligence 2.0 (BI 2.0)
Comparison of business integration software
Component business model
Digital signature
Enterprise application integration
Enterprise Integration Patterns
Enterprise Messaging System
Enterprise service bus
Event-driven programming
Integration Objects
Java Business Integration
Microsoft Connected Services Framework
Open ESB
Oracle SOA Suite






Wikimedia Commons has media related to: Service-oriented architecture 



Public key infrastructure
Representational State Transfer
SAP Enterprise Services Architecture
Search oriented architecture complementary pattern
Semantic service oriented architecture – contain ISO standards
Service bureau
Service component architecture
Service layer
Service-oriented analysis and design
Service-oriented architecture implementation framework
Service-oriented modeling
SOA Governance
Software as a service
Software as a service Integration
Sun Java CAPS
Web Oriented Architecture





[edit] References


^ Newcomer, Eric; Lomow, Greg (2005). Understanding SOA with Web Services. Addison Wesley. ISBN 0-321-18086-0. 
^ a b c Bell, Michael (2008). "Introduction to Service-Oriented Modeling". Service-Oriented Modeling: Service Analysis, Design, and Architecture. Wiley & Sons. pp. 3. ISBN 978-0-470-14111-3. 
^ a b c Erl, Thomas (2005). Service-oriented Architecture: Concepts, Technology, and Design. Upper Saddle River: Prentice Hall PTR. ISBN 0-13-185858-0. 
^ [1]US Military Turning to SOA, Becky Nagel, Application Development Trends, 4/21/2008.
^ An alternative view, particularly after initial deployments, denies that SOAs properly ought to dictate physical implementation, so the formal definition should not include "network". High-performance SOAs may not be viable, especially if deployed to distributed nodes on a network. Separate nodes for every (or most) services could become prohibitively expensive.
^ Channabasavaiah, Holley and Tuggle, Migrating to a service-oriented architecture, IBM DeveloperWorks, 16 Dec 2003.
^ Steve Jones Enterprise SOA Adoption Strategies, InfoQ, May 17, 2006, ISBN 978-1-84728-398-6
^ Steven Spewak (1993). Enterprise Architecture Planning: Developing a Blueprint for Data, Applications, and Technology. ISBN 978-0894354366.
^ Bieberstein et al, Executing SOA: A Practical Guide for the Service-Oriented Architect (Paperback), IBM Press books, 978-0132353748
^ Yvonne Balzer Improve your SOA project plans, IBM, 16 July 2004
^ Thomas Erl Serviceorientation.org – About the Principles, 2005-2006
^ SOA Practitioners Guide Part 2: SOA Reference Architecture
^ Cardoso, Jorge; Sheth, Amit P. (2006). "Foreword". Semantic Web Services, Processes and Applications. SEMANTIC WEB AND BEYOND: Computing for Human Experience. Foreword by Frank Leymann. Springer. xxi. ISBN 978-0-387-30239-3.  "The corresponding architectural style is called "service-oriented architecture": fundamentally, it describes how service consumers and service providers can be decoupled via discovery mechanisms resulting in loosely coupled systems. … Implementing a service-oriented architecture means to deal with heterogeneity and interoperability concerns." 
^ SOA Reference Model definition
^ SOA – Documents – Document details
^ Christopher Koch A New Blueprint For The Enterprise, CIO Magazine, Mar 1 2005
^ Bieberstein et al., Service-Oriented Architecture (SOA) Compass: Business Value, Planning, and Enterprise Roadmap (The developerWorks Series) (Hardcover), IBM Press books, 2005, 978-0131870024
^ Martin van den berg et al. SOA for Profit, A Manager's Guide to Success with Service-Oriented Architecture (Hardcover), 978-9075414141
^ From the Business Motivation Model(BMM) to SOA, Journal Of Object Technology – November/December 2008
^ WS-I Basic Profile
^ Is There Real Business Value Behind the Hype of SOA?, Computerworld, June 19, 2006.
^ See also: WS-MetadataExchange OWL-S
^ Tim Bray, XML co-founder – http://blogs.zdnet.com/service-oriented/?p=597
^ Index XML documents with VTD-XML
^ The Performance Woe of Binary XML
^ Manipulate XML Content the Ximple Way
^ Dion Hinchcliffe Is Web 2.0 The Global SOA?, SOA Web Services Journal, 28 October 2005
^ Schroth, Christoph ; Janner, Till; (2007). Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services. IT Professional 9 (2007), Nr. 3, p. 36-41, IEEE Computer Society. http://www.alexandria.unisg.ch/Publikationen/37270. Retrieved on 2008-02-23. 
^ Hoyer, Volker ; Stanoesvka-Slabeva, Katarina; Janner, Till; Schroth, Christoph; (2008). Enterprise Mashups: Design Principles towards the Long Tail of User Need. Proceedings of the 2008 IEEE International Conference on Services Computing (SCC 2008). http://www.alexandria.unisg.ch/publications/44891. Retrieved on 2008-07-08. 
^ Jason Bloomberg Mashups and SOBAs: Which is the Tail and Which is the Dog?, Zapthink
^ "What Is Web 2.0". Tim O'Reilly. 2005-09-30. http://www.oreillynet.com/pub/a/oreilly/tim/news/2005/09/30/what-is-web-20.html. Retrieved on 2008-06-10. 
^ Schroth, Christoph ; Janner, Till; (2007). Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services. IT Professional 9 (2007), Nr. 3, p. 36-41, IEEE Computer Society. http://www.alexandria.unisg.ch/Publikationen/37270. Retrieved on 2008-02-23. 
^ Schroth, Christoph ; Janner, Till; (2007). Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services. IT Professional 9 (2007), Nr. 3, p. 36-41, IEEE Computer Society. http://www.alexandria.unisg.ch/Publikationen/37270. Retrieved on 2008-02-23. 
^ Ruggaber, Rainer; (2007). Internet of Services—A SAP Research Vision. IEEE Computer Society. http://csdl2.computer.org/comp/proceedings/wetice/2007/2879/00/28790003.pdf. Retrieved on 2008-02-23. 
^ Yefim Natis & Roy Schulte Advanced SOA for Advanced Enterprise Projects, Gartner, July 13, 2006
^ Joe McKendrick Anti-SOA 2.0 petition nears 400, ZDNet.com, June 29, 2006









v • d • e

Software engineering





Fields

Requirements analysis • Software design • Computer programming • Formal methods • Software testing • Software deployment • Software maintenance






Concepts

Data modeling • Enterprise architecture • Functional specification • Modeling language • Programming paradigm • Software • Software architecture • Software development methodology • Software development process • Software quality • Software quality assurance • Structured analysis






Orientations

Agile • Aspect-oriented • Object orientation • Ontology • Service orientation • SDLC






Models

Development models: Agile • Iterative model • RUP • Scrum • Spiral model • Waterfall model • XP • V-Model
Other models: CMMI • Data model • Function model • IDEF • Information model • Metamodeling • Object model • View model • UML






Software
engineers

Kent Beck • Grady Booch • Fred Brooks • Barry Boehm • Ward Cunningham • Ole-Johan Dahl • Tom DeMarco • Edsger W. Dijkstra • Martin Fowler • C. A. R. Hoare • Watts Humphrey • Michael A. Jackson • Ivar Jacobson • Craig Larman • James Martin • Bertrand Meyer • David Parnas • Winston W. Royce • James Rumbaugh • Niklaus Wirth • Edward Yourdon






Related fields

Computer science • Computer engineering • Enterprise engineering • History • Management • Mathematics • Project management • Quality management • Software ergonomics • Systems engineering









Retrieved from "http://en.wikipedia.org/wiki/Service-oriented_architecture"
Categories: Web services | Enterprise application integration | Service-oriented (business computing)Hidden categories: Articles lacking reliable references from July 2008 | Cleanup from July 2008 | All pages needing cleanup | Articles with specifically-marked weasel-worded phrases since October 2008 | Articles containing potentially dated statements from 2008 | All articles containing potentially dated statements | All articles with unsourced statements | Articles with unsourced statements since March 2009 | Articles with unsourced statements since November 2008 | Articles with unsourced statements since January 2009 | Articles needing additional references from June 2006 | Vague or ambiguous time | Articles with unsourced statements since February 2007 | Articles with unsourced statements since October 2008 | Articles with specifically-marked weasel-worded phrases since January 2009 | Articles with specifically-marked weasel-worded phrases since June 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
Dansk
Deutsch
Español
Français
한국어
Bahasa Indonesia
Italiano
עברית
Magyar
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Suomi
Svenska
தமிழ்
ไทย
Türkçe
Українська
中文









 This page was last modified on 5 April 2009, at 15:57.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
