













Python (programming language) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Python_(programming_language)";
		var wgTitle = "Python (programming language)";
		var wgAction = "view";
		var wgArticleId = "23862";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 283068467;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Python (programming language)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Python




Paradigm
multi-paradigm: object-oriented, imperative, functional


Appeared in
1991


Designed by
Guido van Rossum


Developer
Python Software Foundation


Latest release
3.0.1/2009-2-13; 57 days ago
2.6.1/2008-12-4; 128 days ago


Typing discipline
duck, dynamic, strong


Major implementations
CPython, Jython, IronPython, PyPy, Python for S60


Dialects
Stackless Python, RPython


Influenced by
ABC, ALGOL 68,[1] C, Haskell, Icon, Lisp, Modula-3, Perl, Java


Influenced
Boo, Groovy, Ruby, Cobra, D


OS
Cross-platform


License
Python Software Foundation License


Website
http://www.python.org/


Python is a general-purpose high-level programming language.[2] Its design philosophy emphasizes code readability.[3] Python's core syntax and semantics are minimalistic, while the standard library is large and comprehensive. Its use of whitespace as block delimiters is unusual among popular programming languages.
Python supports multiple programming paradigms (primarily object oriented, imperative, and functional) and features a fully dynamic type system and automatic memory management, similar to Perl, Ruby, Scheme, and Tcl. Like other dynamic languages, Python is often used as a scripting language.
The language has an open, community-based development model managed by the non-profit Python Software Foundation, which maintains the de facto standard definition of the language in CPython, the reference implementation.




Contents


1 History
2 Programming philosophy

2.1 Neologisms


3 Usage
4 Syntax and semantics

4.1 Indentation
4.2 Statements and control flow
4.3 Methods
4.4 Typing


5 Implementations

5.1 CPython
5.2 Alternative implementations
5.3 Interpretational semantics


6 Development
7 Standard library
8 Influences on other languages
9 See also
10 References
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
Main article: History of the Python programming language
Python was conceived in the late 1980s[4] by Guido van Rossum at CWI in the Netherlands as a successor to the ABC programming language (itself inspired by SETL)[5] capable of exception handling and interfacing with the Amoeba operating system.[6] Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL).
Python 2.0 was released on 16 October 2000, with many major new features including a full garbage collector and support for unicode. However, the most important change was to the development process itself, with a shift to a more transparent and community-backed process.[7] Python 3.0, a major, backwards-incompatible release, was released on 3 December 2008[8] after a long period of testing. Many of its major features have been backported to the backwards-compatible Python 2.6.[9]

[edit] Programming philosophy
Python is a multi-paradigm programming language. This means that, rather than forcing programmers to adopt a particular style of programming, it permits several styles: object oriented and structured programming are fully supported, and there are a number of language features which support functional programming and aspect-oriented programming[clarification needed]. Many other paradigms are supported using extensions, such as pyDBC and Contracts for Python which allow Design by Contract. Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. An important feature of Python is dynamic name resolution (late binding), which binds method and variable names during program execution.
Another aspect of the language's design is ease of extensibility, rather than having everything built into the language core. New built-in modules are easily written in C or C++. Python can also be used as an extension language for existing modules and applications that need a programmable interface. This design of a small core language with a large standard library and an easily-extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC (which espoused the opposite mindset).[4]
The design of Python offers limited support for functional programming in the Lisp tradition. However, there are significant parallels between the philosophy of Python and those of minimalist Lisp-family languages such as Scheme. The library has two modules (itertools and functools) that implement proven functional tools borrowed from Haskell and Standard ML.[10]
While offering choice in coding methodology, the Python philosophy rejects exuberant syntax, such as in Perl, in favor of a sparser, less-cluttered grammar. As with Perl, Python's developers expressly promote a particular "culture" or ideology based on what they want the language to be, favoring language forms they see as "beautiful", "explicit" and "simple". As Alex Martelli put it in his Python Cookbook (2nd ed., p.230): "To describe something as clever is NOT considered a compliment in the Python culture." Python's philosophy rejects the Perl "there is more than one way to do it" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".[11]
Python eschews premature optimization, and moreover, rejects patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity.[12] It is sometimes described as "slow".[13] However, most problems[who?] are not speed critical, and as computer hardware continues to become exponentially faster (Moore's Law), languages do have more hardware resources available. When speed is a problem, Python programmers tend to try to optimize bottlenecks by algorithm improvements or data structure changes, using a JIT compiler such as Psyco, rewriting the time-critical functions in "closer to the metal" languages such as C, or by translating Python code to C code using tools like Cython.[14]
The core philosophy of the language is summarized by PEP 20 (The Zen of Python).

[edit] Neologisms
A common neologism in the Python community is pythonic, which can have a wide range of meanings related to program style. To say that a piece of code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language. Likewise, to say of an interface or language feature that it is pythonic is to say that it works well with Python idioms, that its use meshes well with the rest of the language.
In contrast, a mark of unpythonic code is that it attempts to "write C++ (or Lisp, or Perl, or Java) code in Python"—that is, provides a rough transcription rather than an idiomatic translation of forms from another language. The concept of pythonicity is tightly bound to Python's minimalist philosophy of readability and avoiding the "there's more than one way to do it" approach. Unreadable code or incomprehensible idioms are unpythonic.
Users and admirers of Python—most especially those considered knowledgeable or experienced—are often referred to as Pythonists, Pythonistas, and Pythoneers.[15]
The prefix Py can be used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of SDL to Python (commonly used to create games); PyS60, an implementation for the Symbian Series 60 Operating System; PyQt and PyGTK, which bind Qt and GTK, respectively, to Python; and PyPy, a Python implementation written in Python. The prefix is also used outside of naming software packages: the major Python conference is named PyCon.
An important goal of the Python developers is making Python fun to use. This is reflected in the origin of the name (based on the television series Monty Python's Flying Circus), in the common practice of using Monty Python references in example code, and in an occasionally playful approach to tutorials and reference materials.[16] For example, the metasyntactic variables often used in Python literature are spam and eggs, instead of the traditional foo and bar.

[edit] Usage
Main article: Python software
Python is often used as a scripting language for web applications, e.g. via mod_python for the Apache web server. With Web Server Gateway Interface a standard API has been developed to facilitate these applications. Web application frameworks or application servers like web2py, Zope, and Django support developers in the design and maintenance of complex applications.
Python has seen extensive use in the information security industry, including in exploit development.[17] Python has been successfully embedded in a number of software products as a scripting language, including in finite element method software such as Abaqus, 3D animation packages such as Maya, Softimage XSI, and Blender, and 2D imaging programs like GIMP, Inkscape, Scribus, and Paint Shop Pro.[18] ESRI is now promoting Python as the best choice for writing scripts in ArcGIS.[19] It has even been used in several videogames.[20]
For many operating systems, Python is a standard component; it ships with most Linux distributions, with NetBSD, and OpenBSD, and with Mac OS X. Red Hat Linux and Fedora both use the pythonic Anaconda installer. Gentoo Linux uses Python in its package management system, Portage, and the standard tool to access it, emerge. Pardus uses it for administration and during system boot.[21]
Among the users of Python are YouTube[22] and the original BitTorrent client.[23] Large organizations that make use of Python include Google,[24] Yahoo!,[25] CERN,[26], NASA,[27]and ITA.[28] Most of the Sugar software for the One Laptop Per Child XO, now developed at Sugar Labs, is written in Python.[29]

[edit] Syntax and semantics




Syntax-highlighted Python 2.x code.


Main article: Python syntax and semantics
Python was intended to be a highly readable language. It is designed to have an uncluttered visual layout, frequently using English keywords where other languages use punctuation. Python requires less boilerplate than traditional manifestly-typed structured languages such as C or Pascal, and has a smaller number of syntactic exceptions and special cases than either of these.[30]

[edit] Indentation
Python uses whitespace indentation, rather than curly braces or keywords, to delimit statement blocks (a feature also known as the off-side rule). An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[31]

[edit] Statements and control flow
Python's statements include:

The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if).
The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.
The try statement, which allows errors thrown in its attached code block to be caught and handled by except clauses; it also ensures that clean-up code in a finally block will be always be run regardless of how the block exits.
The class statement, which executes a block of code and attaches its local namespace to a class, for use in object oriented programming.
The def statement, which defines a function.
The with statement which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run, and releasing the lock afterwards).
The pass statement, which serves as a NOP and can be used in place of a code block.

Each statement has its own semantics: for example, the def statement does not execute its block immediately, unlike most other statements.
CPython does not support continuations, and according to Guido van Rossum it never will.[32] However, better support for coroutine-like functionality is provided in 2.5, by extending Python's generators.[33] Prior to 2.5, generators were lazy iterators; information was passed unidirectionally out of the generator. As of Python 2.5, it is possible to pass information back into a generator function.

[edit] Methods
Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self in some other object-oriented programming languages (for example, Java, C++ or Ruby).[34]

[edit] Typing



This section requires expansion with:
information on old-style vs. new-style classes and type-class unification.


Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding nonsense operations (for example, adding a number to a string) rather than silently attempting to make sense of them.
Python allows programmers to define their own types using classes, which are most often used for an object-oriented style of programming. New instances of classes are constructed by calling the class (for example, FooClass()), and the classes themselves are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.
Prior to version 3.0, Python had two kinds of classes: "old-style" and "new-style". Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 3.0 and 2.2, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class object is inherited from, directly or indirectly (all new-style classes inherit from object and are instances of type.
Here is a summary of Python's built-in types:


Type
Description
Syntax example


str
An immutable sequence of Unicode characters
'Wikipedia'
"Wikipedia"


bytes
An immutable sequence of bytes
b'Some ASCII'
b"Some ASCII"


list
Mutable, can contain mixed types
[4.0, 'string', True]


tuple
Immutable, can contain mixed types
(4.0, 'string', True)


set, frozenset
Unordered, contains no duplicates
{4.0, 'string', True}
frozenset([4.0, 'string', True])


dict
A mutable group of key and value pairs
{'key1': 1.0, 'key2': False}


int
An immutable fixed precision number of unlimited magnitude
42


float
An immutable floating point number (system-defined precision)
3.1415927


complex
An immutable complex number with real number and imaginary parts
3+2j


bool
An immutable truth value
True
False



[edit] Implementations

[edit] CPython
Main article: CPython
The mainstream Python implementation, known as CPython, is written in C meeting the C89 standard,[35]. CPython compiles the Python program into intermediate bytecode,[36] which is then executed by the virtual machine.[37] It is distributed with a large standard library written in a mixture of C and Python. CPython ships in versions for many platforms, including Microsoft Windows and most modern Unix-like systems. CPython was intended from almost its very conception to be cross-platform; its use and development on esoteric platforms such as Amoeba, alongside more conventional ones like Unix and Mac OS, has greatly helped in this regard.[38]
Stackless Python is a significant fork of CPython that implements microthreads; it does not use the C memory stack. CPython uses a GIL to allow only one thread to execute at a time while the Stackless Python threads are independent of the OS and can run concurrently. Stackless Python is better suited to scalable tasks and for use on microcontrollers or other limited resource platforms due to the thread's light weight. It can be expected to run on approximately the same platforms that CPython runs on.

[edit] Alternative implementations
Jython compiles the Python program into Java byte code, which can then be executed by every Java Virtual Machine implementation. This also enables the utilization of Java class library functions from the Python program. IronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime. PyPy is an experimental self-hosting implementation of Python, written in Python, that can output several types of bytecode, object code and intermediate languages. There also exist compilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language. PyPy is of this type, compiling RPython to several languages; other examples include Pyjamas compiling to Javascript; Shed Skin compiling to C++; and Cython & Pyrex compiling to C.
In 2005 Nokia released a Python interpreter for the Series 60 mobile phones called PyS60. It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. There is also a Python interpreter for Windows CE devices (including Pocket PC). It is called PythonCE. There are additional tools available for easy application and GUI development.
ChinesePython (中蟒) is a Python programming language using Chinese language lexicon. Besides reserved words and variable names, most data type operations can be coded in Chinese as well.

[edit] Interpretational semantics
Most Python implementations (including CPython, the primary implementation) can function as a command line interpreter, for which the user enters statements sequentially and receives the results immediately. In short, Python acts as a shell. While the semantics of the other modes of execution (bytecode compilation, or compilation to native code) preserve the sequential semantics, they offer a speed boost at the cost of interactivity, so they are usually only used outside of a command-line interaction (eg, when importing a module).
Other shells add capabilities beyond those in the basic interpreter, including IDLE and IPython. While generally following the visual style of the Python shell, they implement features like auto-completion, retention of session state, and syntax highlighting.
Some implementations can compile not only to bytecode, but can turn Python code into machine code. So far, this has only been done for restricted subsets of Python. PyPy takes this approach, naming its restricted compilable version of Python RPython.
Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime. The produced code is specialised for certain data types and is faster than standard Python code. Psyco is compatible with all Python code, not only a subset.[39]

[edit] Development
Python development is conducted largely through the Python Enhancement Proposal (or "PEP") process. PEPs are standardized design documents providing general information related to Python, including proposals, descriptions, design rationales, and explanations for language features.[40] Outstanding PEPs are reviewed and commented upon by Van Rossum, the Python project's Benevolent Dictator for Life (leader / language architect).[41] CPython's developers also communicate over a mailing list, python-dev, which is the primary forum for discussion about the language's development; specific issues are discussed in the roundup bug tracker maintained at python.org.[42] Development takes place at the self-hosted svn.python.org.
CPython's public releases come in three types, distinguished by which part of the version number is incremented:

backwards-incompatible versions, where code is expected to break and must be manually ported. The first part of the version number is incremented. These releases happen infrequently—for example, version 3.0 was released 8 years after 2.0.
major or 'feature' releases, which are largely compatible but introduce new features. The second part of the version number is incremented. These releases are scheduled to occur roughly every 18 months, and each major version is supported by bugfixes for several years after its release.[43]
bugfix releases, which introduce no new features but fix bugs. The third and final part of the version number is incremented. These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release, or roughly every 3 months. Security vulnerabilities are also patched in bugfix releases.[44]

A number of alpha, beta, and release-candidates are also released as previews and for testing before the final release is made. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitor the state of the code by running the large unit test suite during development, and using the buildbot continuous integration system.[45]

[edit] Standard library
Python has a large standard library, commonly cited as one of Python's greatest strengths,[46] providing pre-written tools suited to many tasks. This is deliberate and has been described as a "batteries included" Python philosophy. The modules of the standard library can be augmented with custom modules written in either C or Python. Recently, Boost C++ Libraries includes a library, Boost.Python, to enable interoperability between C++ and Python. Because of the wide variety of tools provided by the standard library, combined with the ability to use a lower-level language such as C and C++, which is already capable of interfacing between other libraries, Python can be a powerful glue language between languages and tools.
The standard library is particularly well tailored to writing Internet-facing applications, with a large number of standard formats and protocols (such as MIME and HTTP) already supported. Modules for creating graphical user interfaces, connecting to relational databases, arithmetic with arbitrary precision decimals, manipulating regular expressions, and doing unit testing are also included.[47]
Some parts of the standard library are covered by specifications (for example, the WSGI implementation wsgiref follows PEP 333), but the majority of the modules are not. They are specified by their code, internal documentation, and test suite (if supplied). However, because most of the standard library is cross-platform Python code, there are only a few modules that must be altered or completely rewritten by alternative implementations.

[edit] Influences on other languages
Python's design and philosophy have influenced several programming languages:

Pyrex and its derivative Cython are code translators that are targeted at writing fast C extensions for the CPython interpreter. The language is mostly Python with syntax extensions for C and C++ features. Both languages produce compilable C code as output.
Boo uses indentation, a similar syntax, and a similar object model. However, Boo uses static typing and is closely integrated with the .NET framework.[48]
Cobra is similar to Python, using indentation for blocks. It offers optional static typing and generates code designed for .NET/Mono. Cobra directly supports design-by-contract.[49]
ECMAScript borrowed iterators, generators and list comprehensions from Python.[50]
Groovy was motivated by the desire to bring the Python design philosophy to Java.[51]
Converge is syntactically similar to Python, but has a novel approach to generators and backtracking as well as macros and compile-time metaprogramming.[52]
OCaml has an optional syntax, called twt (That Whitespace Thing), and a new Batteries Included approach, both inspired by Python.[53]

Python's development practices have also been emulated by other languages. The practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (ie, a PEP) is also used in Tcl[54] and Erlang[55] because of Python's influence.

[edit] See also




Free software portal




List of programming languages
Comparison of computer shells
Comparison of programming languages
List of applications written in Python
List of integrated development environments for Python
Scripting language


[edit] References


^ "Interview with Guido van Rossum". July 1998. http://www.amk.ca/python/writing/gvr-interview. Retrieved on 29 2007. 
^ "What is Python Good For?". General Python FAQ. Python Foundation. http://www.python.org/doc/faq/general/#what-is-python-good-for. Retrieved on 2008-09-05. 
^ "What is Python? Executive Summary". Python documentation. Python Foundation. http://www.python.org/doc/essays/blurb/. Retrieved on 2007-03-21. 
^ a b "The Making of Python". Artima Developer. http://www.artima.com/intv/pythonP.html. Retrieved on 2007-03-22. 
^ http://mail.python.org/pipermail/python-dev/2000-August/008881.html
^ "Why was Python created in the first place?". Python FAQ. http://www.python.org/doc/faq/general/#why-was-python-created-in-the-first-place. Retrieved on 2007-03-22. 
^ A.M. Kuchling and Moshe Zadka. "What's New in Python 2.0". http://www.amk.ca/python/2.0/. Retrieved on 2007-03-22. 
^ Python 3.0 release
^ PEP 3000
^ "6.5 itertools - Functions creating iterators for efficient looping". Docs.python.org. http://docs.python.org/lib/module-itertools.html. Retrieved on 2008-11-24. 
^ "PEP 20 - The Zen of Python". Python.org. http://www.python.org/dev/peps/pep-0020/. Retrieved on 2008-11-24. 
^ Python Culture
^ Python is... slow? — Peter Bowyer’s weblog
^ Python Patterns - An Optimization Anecdote
^ David Goodger. "Code Like a Pythonista: Idiomatic Python". http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html. ; "How to think like a Pythonista". http://python.net/crew/mwh/hacks/objectthink.html. 
^ Python Tutorial
^ Products and discussion of this use of Python include "IMMUNITY : Knowing You're Secure". Immunitysec.com. http://www.immunitysec.com/products-immdbg.shtml. Retrieved on 2008-11-24. ; CORE Security Technologies' open source software repository; "Wapiti - Web application security auditor". Wapiti.sourceforge.net. http://wapiti.sourceforge.net/. Retrieved on 2008-11-24. ; "TAOF - theartoffuzzing.com - Home". Theartoffuzzing.com. http://www.theartoffuzzing.com/joomla/. Retrieved on 2008-11-24. ; "[Dailydave] RE: Network Exploitation Tools aka Exploitation Engines". Fist.immunitysec.com. http://fist.immunitysec.com/pipermail/dailydave/2004-September/000851.html. Retrieved on 2008-11-24. 
^ Documentation of the PSP Scripting API can be found at JASC Paint Shop Pro 9: Additional Download Resources
^ "About getting started with writing geoprocessing scripts". November 2006. http://webhelp.esri.com/arcgisdesktop/9.2/index.cfm?TopicName=About_getting_started_with_writing_geoprocessing_scripts. Retrieved on Apr 2007. 
^ Two video games using Python are "Civilization IV". 2kgames.com. http://www.2kgames.com/civ4/blog_03.htm. Retrieved on 2008-11-24.  and CCP. "EVE Online | EVE Insider | Dev Blog". Myeve.eve-online.com. http://myeve.eve-online.com/devblog.asp?a=blog&bid=488. Retrieved on 2008-11-24. 
^ ":: Pardus :: TÜBİTAK/UEKAE ::". Pardus.org.tr. http://www.pardus.org.tr/eng/projects/comar/PythonInPardus.html. Retrieved on 2008-11-24. 
^ "Coder Who Says Py: YouTube runs on Python!". Sayspy.blogspot.com. December 12, 2006. http://sayspy.blogspot.com/2006/12/youtube-runs-on-python.html. Retrieved on 2008-11-24. 
^ Review of original BitTorrent software at O'Reilly Python Dev Center
^ "Quotes about Python". Python.org. http://python.org/about/quotes/. Retrieved on 2008-11-24. 
^ "Organizations Using Python". Python.org. http://wiki.python.org/moin/OrganizationsUsingPython. Retrieved on 2009-01-15. 
^ CERN Document Server: Record#974627: Python : the holy grail of programming
^ "Python Success Stories". Python.org. http://www.python.org/about/success/usa/. Retrieved on 2008-11-24. 
^ Python Slithers into Systems by Darryl K. Taft
^ "What is Sugar? - Sugar Labs". sugarlabs.org. 2008-5-10. http://sugarlabs.org/go/Sugar. Retrieved on 0r-2-11. 
^ "Is Python a good language for beginning programmers?". General Python FAQ. Python Foundation. March 7, 2005. http://www.python.org/doc/faq/general/#is-python-a-good-language-for-beginning-programmers. Retrieved on 2007-03-21. 
^ Myths about indentation in Python
^ van Rossum, Guido (February 9, 2006). "Language Design Is Not Just Solving Puzzles". Artima forums. Artima. http://www.artima.com/weblogs/viewpost.jsp?thread=147358. Retrieved on 2007-03-21. 
^ van Rossum, Guido; Phillip J. Eby (April 21, 2006). "Coroutines via Enhanced Generators". Python Enhancement Proposals. Python Foundation. http://www.python.org/peps/pep-0342.html. Retrieved on 2007-03-21. 
^ "Why must 'self' be used explicitly in method definitions and calls?". Python FAQ. Python Foundation. http://www.python.org/doc/faq/general/#why-must-self-be-used-explicitly-in-method-definitions-and-calls. 
^ "PEP 7 - Style Guide for C Code". Python.org. http://www.python.org/dev/peps/pep-0007/. Retrieved on 2008-11-24. 
^ CPython byte code
^ Python 2.5 internals
^ "O'Reilly - An Interview with Guido van Rossum". Oreilly.com. http://www.oreilly.com/pub/a/oreilly/frank/rossum_1099.html. Retrieved on 2008-11-24. 
^ Introduction to Psyco
^ PEP 1 -- PEP Purpose and Guidelines
^ "Parade of the PEPs". Python.org. http://www.python.org/doc/essays/pepparade.html. Retrieved on 2008-11-24. 
^ http://python.org/dev/intro/
^ http://mail.python.org/pipermail/python-dev/2002-April/022739.html
^ http://python.org/dev/peps/pep-0006/
^ http://python.org/dev/buildbot/
^ Przemyslaw Piotrowski, Build a Rapid Web Development Environment for Python Server Pages and Oracle, Oracle Technology Network, July 2006. Accessed October 21, 2008.
^ "PEP 327 - Decimal Data Type". Python.org. http://www.python.org/peps/pep-0327.html. Retrieved on 2008-11-24. 
^ "BOO - Gotchas for Python Users". Boo.codehaus.org. http://boo.codehaus.org/Gotchas+for+Python+Users. Retrieved on 2008-11-24. 
^ Comparison to Python, cobra-language.com
^ "proposals:iterators_and_generators [ES4 Wiki]". Wiki.ecmascript.org. http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators. Retrieved on 2008-11-24. 
^ James Strachan (2003-08-29). "Groovy - the birth of a new dynamic language for the Java platform". http://radio.weblogs.com/0112098/2003/08/29.html. 
^ Laurence Tratt. "Converge - About". http://convergepl.org/about.html. 
^ David Teller. "OCaml Batteries Included". http://forge.ocamlcore.org/projects/batteries/. 
^ "TIP #3: TIP Format". Tcl.tk. http://www.tcl.tk/cgi-bin/tct/tip/3.html. Retrieved on 2008-11-24. 
^ EEP - Erlang Enhancement Proposal



[edit] External links



Wikibooks has a book on the topic of
Python Programming






Wikimedia Commons has media related to: Python (programming language) 





Wikiversity has learning materials about Python Programming





Wikiquote has a collection of quotations related to: Python



Official Python website
Computerworld Interview with Guido Van Rossum on Python
PythonCE website
Python at the Open Directory Project









v • d • e

Python





Implementations

CPython · Jython · IronPython · PyPy · Python for S60  · Shed Skin






Frameworks

CherryPy · Django · Porcupine · Pylons · TurboGears · Quixote






IDE

Boa · IDLE · SPE · more...






software (list)












v • d • e

Python web application frameworks






Karrigell · Nevow · Spyce · TurboGears · TwistedWeb · Webware · web.py · web2py · Zope · more...













v • d • e

Free and open source software





General

Copyleft · Events and Awards · Free software · Free Software Definition · Gratis versus Libre · Open source software






Free software
portal









Notable packages

Apache · CUPS · Firefox · GNOME · KDE · OpenOffice.org · Thunderbird · X Window System






Operating systems

AROS · BSD · Darwin · FreeDOS · GNU · Haiku · Inferno · Linux · Mach · MINIX · OpenSolaris · Plan 9 · ReactOS · Syllable






Development

GCC · LLVM · Java · Open64 · Perl · PHP · Python · Lua · Ruby · Tcl · libJIT






History

GNU · Linux · Mozilla (Application Suite · Firefox · Thunderbird)






Organizations

Apache Software Foundation · Blender Foundation · Eclipse Foundation · FLOSS Manuals · freedesktop.org · Free Software Foundation · GNOME Foundation · GNU Project · Google Code · Linux Foundation · Mozilla Foundation · Open Source Geospatial Foundation · Open Source Initiative · SourceForge · Xiph.Org Foundation · X.Org Foundation






Licences

Apache · BSD · GNU GPL · LGPL · MIT · MPL · Permissive · Microsoft Public License · Microsoft Reciprocal License · FSF approved licenses






Challenges

Binary blob · Digital rights management · License proliferation · Mozilla software rebranding · Proprietary software · SCO-Linux controversies · Security · Software patents · Tivoization · Trusted Computing






Other topics

Alternative terms · Community · Linux distribution · Forking · Movement · Microsoft Open Specification Promise · Revolution OS · Comparison with closed source






List of open source software packages









Retrieved from "http://en.wikipedia.org/wiki/Python_(programming_language)"
Categories: Python programming language | Class-based programming languages | Object-oriented programming languages | Dynamically-typed programming languages | Scripting languages | Free cross-platform software | Free compilers and interpretersHidden categories: All pages needing cleanup | Wikipedia articles needing clarification from December 2008 | Articles with specifically-marked weasel-worded phrases since December 2008 | Articles to be expanded since March 2009 | All articles to be expanded | Wikipedia expand-section box with explanation text 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
العربية
Aragonés
Azərbaycan
Bosanski
Български
Català
Česky
Dansk
Deutsch
Eesti
Ελληνικά
Español
Esperanto
Euskara
فارسی
Français
Galego
한국어
Interlingua
Íslenska
Italiano
עברית
ქართული
Latina
Latviešu
Lietuvių
Magyar
മലയാളം
Bahasa Melayu
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Shqip
Simple English
Slovenčina
Slovenščina
Српски / Srpski
Suomi
Svenska
தமிழ்
తెలుగు
ไทย
Tiếng Việt
Türkçe
ᨅᨔ ᨕᨘᨁᨗ
Українська
中文









 This page was last modified on 10 April 2009, at 22:45 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
