













LU decomposition - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "LU_decomposition";
		var wgTitle = "LU decomposition";
		var wgAction = "view";
		var wgArticleId = "6243993";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280420844;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); LU decomposition

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In linear algebra, the LU decomposition is a matrix decomposition which writes a matrix as the product of a lower triangular matrix and an upper triangular matrix. The product sometimes includes a permutation matrix as well. This decomposition is used in numerical analysis to solve systems of linear equations or calculate the determinant.




Contents


1 Definitions
2 Existence and uniqueness
3 Positive definite matrices
4 Explicit Formulation
5 Algorithms

5.1 Doolittle algorithm
5.2 Crout and LUP algorithms


6 Small Example
7 Sparse matrix decomposition
8 Applications

8.1 Solving linear equations
8.2 Inverse matrix
8.3 Determinant


9 See also
10 References
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Definitions
Let A be a square matrix. An LU decomposition is a decomposition of the form



where L and U are lower and upper triangular matrices (of the same size), respectively. This means that L has only zeros above the diagonal and U has only zeros below the diagonal. For a  matrix, this becomes:



An LDU decomposition is a decomposition of the form



where D is a diagonal matrix and L and U are unit triangular matrices, meaning that all the entries on the diagonals of L and U are one.
An LUP decomposition (also called a LU decomposition with partial pivoting) is a decomposition of the form



where L and U are again lower and upper triangular matrices and P is a permutation matrix, i.e., a matrix of zeros and ones that has exactly one entry 1 in each row and column.
An LU decomposition with full pivoting (Trefethen and Bau) takes the form




[edit] Existence and uniqueness
An invertible matrix admits an LU factorization if and only if all its leading principal minors are non-zero. The factorization is unique if we require that the diagonal of L (or U) consist of ones. The matrix has a unique LDU factorization under the same conditions.
If the matrix is singular, then an LU factorization may still exist. In fact, a square matrix of rank k has an LU factorization if the first k leading principal minors are non-zero, although the converse is not true.
The exact necessary and sufficient conditions under which a not necessarily invertible matrix over any field has an LU factorization are known. The conditions are expressed in terms of the ranks of certain submatrices. The Gaussian elimination algorithm for obtaining LU decomposition has also been extended to this most general case (Okunev & Johnson 1997).
Every matrix A --square or not-- admits a LUP factorization. The matrices L and P are square matrices, but U has the same shape as A. Upper triangular should be interpreted as having only zero entries below the main diagonal, which starts at the upper left corner. The LUP factorization can be done in such a way that U has only ones on its main diagonal.

[edit] Positive definite matrices
If the matrix A is Hermitian and positive definite, then we can arrange matters so that U is the conjugate transpose of L. In this case, we have written A as



This decomposition is called the Cholesky decomposition. The Cholesky decomposition always exists and is unique. Furthermore, computing the Cholesky decomposition is more efficient and numerically more stable than computing the LU decomposition.

[edit] Explicit Formulation
When an LDU factorization exists and is unique there is a closed (explicit) formula for the elements of L, D, and U in terms of ratios of determinants of certain submatrices of the original matrix A (Householder 1975). In particular, D1 = A1,1 and for , Di is the ratio of the ith principal submatrix to the (i − 1)th principal submatrix.

[edit] Algorithms
The LU decomposition is basically a modified form of Gaussian elimination. We transform the matrix A into an upper triangular matrix U by eliminating the entries below the main diagonal. The Doolittle algorithm does the elimination column by column starting from the left, by multiplying A to the left with atomic lower triangular matrices. It results in a unit lower triangular matrix and an upper triangular matrix. The Crout algorithm is slightly different and constructs a lower triangular matrix and a unit upper triangular matrix.
Computing the LU decomposition using either of these algorithms requires 2n3 / 3 floating point operations, ignoring lower order terms. Partial pivoting adds only a quadratic term; this is not the case for full pivoting (Golub & Van Loan 1996).

[edit] Doolittle algorithm
Given an N × N matrix

A = (an,n)

we define

A(0): = A

and then we iterate n = 1,...,N-1 as follows.
We eliminate the matrix elements below the main diagonal in the n-th column of A(n-1) by adding to the i-th row of this matrix the n-th row multiplied by



for . This can be done by multiplying A(n-1) to the left with the lower triangular matrix



We set

A(n): = LnA(n − 1).

After N-1 steps, we eliminated all the matrix elements below the main diagonal, so we obtain an upper triangular matrix A(N-1). We find the decomposition



Denote the upper triangular matrix A(N-1) by U, and . Because the inverse of a lower triangular matrix Ln is again a lower triangular matrix, and the multiplication of two lower triangular matrices is again a lower triangular matrix, it follows that L is a lower triangular matrix. We obtain A = LU.
It is clear that in order for this algorithm to work, one needs to have  at each step (see the definition of li,n). If this assumption fails at some point, one needs to interchange n-th row with another row below it before continuing. This is why the LU decomposition in general looks like P − 1A = LU.

[edit] Crout and LUP algorithms
The LUP decomposition algorithm by Cormen et al. generalizes Crout matrix decomposition. It can be described as follows.

If A has a nonzero entry in its first row, then take a permutation matrix P1 such that AP1 has a nonzero entry in its upper left corner. Otherwise, take for P1 the identity matrix. Let A1 = AP1.
Let A2 be the matrix that one gets from A1 by deleting both the first row and the first column. Decompose A2 = L2U2P2 recursively. Make L from L2 by first adding a zero row above and then adding the first column of A1 at the left.
Make U3 from U2 by first adding a zero row above and a zero column at the left and then replacing the upper left entry (which is 0 at this point) by 1. Make P3 from P2 in a similar manner and define A3 = A1 / P3 = AP1 / P3. Let P be the inverse of P1 / P3.
At this point, A3 is the same as LU3, except (possibly) at the first row. If the first row of A is zero, then A3 = LU3, since both have first row zero, and A = LU3P follows, as desired. Otherwise, A3 and LU3 have the same nonzero entry in the upper left corner, and A3 = LU3U1 for some upper triangular square matrix U1 with ones on the diagonal (U1 clears entries of LU3 and adds entries of A3 by way of the upper left corner). Now A = LU3U1P is a decomposition of the desired form.


[edit] Small Example



One way of finding the LU decomposition of this simple matrix would be to simply solve the linear equations by inspection. You know that:






Such a system of equations is underdetermined. In this case any two non-zero elements of L and U matrices are parameters of the solution and can be set arbitrarily to any non-zero value. Therefore to find the unique LU decomposition, it is necessary to put some restriction on L and U matrices. For example, we can require the lower triangular matrix L to be a unit one (i.e. set all the entries of its main diagonal to ones). Then the system of equations has the following solution:

l21 = 1.5
u11 = 4
u12 = 3
u22 = − 1.5.

Substituting these values into the LU decomposition above:




[edit] Sparse matrix decomposition
Special algorithms have been developed for factorizing large sparse matrices. These algorithms attempt to find sparse factors L and U. Ideally, the cost of computation is determined by the number of nonzero entries, rather than by the size of the matrix.
These algorithms use the freedom to exchange rows and columns to minimize fill-in (entries which change from an initial zero to a non-zero value during the execution of an algorithm).
General treatment of orderings that minimize sparsity can be addressed using graph theory.

[edit] Applications

[edit] Solving linear equations
Given a matrix equation



we want to solve the equation for a given A and b. In this case the solution is done in two logical steps:

First, we solve the equation Ly = b for y
Second, we solve the equation Ux = y for x.

Note that in both cases we have triangular matrices (lower and upper) which can be solved directly using forward and backward substitution without using the Gaussian elimination process (however we need this process or equivalent to compute the LU decomposition itself). Thus the LU decomposition is computationally efficient only when we have to solve a matrix equation multiple times for different b; it is faster in this case to do an LU decomposition of the matrix A once and then solve the triangular matrices for the different b, than to use Gaussian elimination each time.

[edit] Inverse matrix
The matrices L and U can be used to calculate the matrix inverse by:



Computer implementations that invert matrices sometimes use this approach.[citation needed]

[edit] Determinant
The matrices L and U can be used to compute the determinant of the matrix A very quickly, because det(A) = det(L) det(U) and the determinant of a triangular matrix is simply the product of its diagonal entries. In particular, if L is a unit triangular matrix, then



The same approach can be used for LUP decompositions. The determinant of the permutation matrix P is (−1)S, where S is the number of row exchanges in the decomposition.

[edit] See also

Block LU decomposition
Cholesky decomposition
Matrix decomposition
LU Reduction


[edit] References

Bau III, David; Trefethen, Lloyd N. (1997), Numerical linear algebra, Philadelphia: Society for Industrial and Applied Mathematics, ISBN 978-0-89871-361-9 
Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001), Introduction to Algorithms, MIT Press and McGraw-Hill, ISBN 978-0-262-03293-3 
Golub, Gene H.; Van Loan, Charles F. (1996), Matrix Computations (3rd ed.), Baltimore: Johns Hopkins, ISBN 978-0-8018-5414-9 .
Horn, Roger A.; Johnson, Charles R. (1985), Matrix Analysis, Cambridge University Press, ISBN 0-521-38632-2 . See Section 3.5.
Householder, Alston (1975), The Theory of Matrices in Numerical Analysis .
Okunev, Pavel; Johnson, Charles (1997), Necessary And Sufficient Conditions For Existence of the LU Factorization of an Arbitrary Matrix, arΧiv:math.NA/0506382 .
Press, William H.; Flannery, Brian P.; Teukolsky, Saul A.; Vetterling, William T. (1992), "LU Decomposition and Its Applications", Numerical Recipes in FORTRAN: The Art of Scientific Computing (2nd ed.), Cambridge University Press, pp. 34–42, http://www.mpi-hd.mpg.de/astrophysik/HEA/internal/Numerical_Recipes/f2-3.pdf 


[edit] External links

LU decomposition on MathWorld.
LU decomposition on Math-Linux.
Eigen is a C++ template library for linear algebra: vectors, matrices, and related algorithms.
LAPACK is a collection of FORTRAN subroutines for solving dense linear algebra problems
ALGLIB includes a partial port of the LAPACK to C++, C#, Delphi, etc.
Online Matrix Calculator performs LU decomposition
LU decomposition at Holistic Numerical Methods Institute
Module for LU Factorization with Pivoting
LU Decomposition by Ed Pegg, Jr., The Wolfram Demonstrations Project, 2007.




Retrieved from "http://en.wikipedia.org/wiki/LU_decomposition"
Categories: Numerical linear algebraHidden categories: All articles with unsourced statements | Articles with unsourced statements since January 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Esperanto
Français
Íslenska
Italiano
Nederlands
日本語
Polski
Português
Русский
Suomi
Svenska
Українська
中文









 This page was last modified on 29 March 2009, at 14:21.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
