













Binary numeral system - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Binary_numeral_system";
		var wgTitle = "Binary numeral system";
		var wgAction = "view";
		var wgArticleId = "238686";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281898699;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Binary numeral system

From Wikipedia, the free encyclopedia

Jump to: navigation, search 


Numeral systems by culture


Hindu-Arabic numerals


Western Arabic
Indian family
Khmer
Eastern Arabic
Brahmi
Thai


East Asian numerals


Chinese
Suzhou
Counting rods
Mongolian 


Alphabetic numerals


Abjad
Armenian
Cyrillic
Ge'ez
Hebrew
Greek (Ionian)
Āryabhaṭa
 


Other systems


Attic
Babylonian
Egyptian
Inuit
Etruscan
Mayan
Roman
Urnfield


List of numeral system topics


Positional systems by base


Decimal (10)


2, 4, 8, 16, 32, 64


1, 3, 6, 9, 12, 20, 24, 30, 36, 60, more…



v • d • e



The binary numeral system, or base-2 number system represents numeric values using two symbols, usually 0 and 1. More specifically, the usual base-2 system is a positional notation with a radix of 2. Owing to its straightforward implementation in digital electronic circuitry using logic gates, the binary system is used internally by all modern computers.




Contents


1 History
2 Representation
3 Counting in binary
4 Easy counting
5 Binary arithmetic

5.1 Addition
5.2 Subtraction
5.3 Multiplication
5.4 Division


6 Bitwise operations
7 Conversion to and from other numeral systems

7.1 Decimal
7.2 Hexadecimal
7.3 Octal


8 Representing real numbers
9 See also
10 Notes
11 References
12 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The ancient Indian writer Pingala developed advanced mathematical concepts for describing prosody, and in doing so presented the first known description of a binary numeral system.[1][2]
A full set of 8 trigrams and 64 hexagrams, analogous to the 3-bit and 6-bit binary numerals, were known to the ancient Chinese in the classic text I Ching. An arrangement of the hexagrams of the I Ching, ordered according to the values of the corresponding binary numbers (from 0 to 63), and a method for generating the same, was developed by the Chinese scholar and philosopher Shao Yong in the 11th century. However, there is no evidence that Shao understood binary computation; the ordering is also the lexicographical order on sextuples of elements chosen from a two-element set.
Similar sets of binary combinations have also been used in traditional African divination systems such as Ifá as well as in medieval Western geomancy. The base 2 system utilized in geomancy had long been widely applied in sub-Saharan Africa.
In 1605 Francis Bacon discussed a system by which letters of the alphabet could be reduced to sequences of binary digits, which could then be encoded as scarcely visible variations in the font in any random text. Importantly for the general theory of binary encoding, he added that this method could be used with any objects at all: "provided those objects be capable of a twofold difference only; as by Bells, by Trumpets, by Lights and Torches, by the report of Muskets, and any instruments of like nature".[3] (See Bacon's cipher.)
The modern binary number system was fully documented by Gottfried Leibniz in the 17th century in his article Explication de l'Arithmétique Binaire. Leibniz's system uses 0 and 1, like the modern binary numeral system. As a Sinophile, Leibniz was aware of the I Ching and noted with fascination how its hexagrams correspond to the binary numbers from 0 to 111111, and concluded that this mapping was evidence of major Chinese accomplishments in the sort of philosophical mathematics he admired.[4]
In 1854, British mathematician George Boole published a landmark paper detailing an algebraic system of logic that would become known as Boolean algebra. His logical calculus was to become instrumental in the design of digital electronic circuitry.
In 1937, Claude Shannon produced his master's thesis at MIT that implemented Boolean algebra and binary arithmetic using electronic relays and switches for the first time in history. Entitled A Symbolic Analysis of Relay and Switching Circuits, Shannon's thesis essentially founded practical digital circuit design.
In November 1937, George Stibitz, then working at Bell Labs, completed a relay-based computer he dubbed the "Model K" (for "Kitchen", where he had assembled it), which calculated using binary addition. Bell Labs thus authorized a full research program in late 1938 with Stibitz at the helm. Their Complex Number Computer, completed January 8, 1940, was able to calculate complex numbers. In a demonstration to the American Mathematical Society conference at Dartmouth College on September 11, 1940, Stibitz was able to send the Complex Number Calculator remote commands over telephone lines by a teletype. It was the first computing machine ever used remotely over a phone line. Some participants of the conference who witnessed the demonstration were John Von Neumann, John Mauchly, and Norbert Wiener, who wrote about it in his memoirs.

[edit] Representation
A binary number can be represented by any sequence of bits (binary digits), which in turn may be represented by any mechanism capable of being in two mutually exclusive states. The following sequences of symbols could all be interpreted as the binary numeric value of 667:

1 0 1 0 0 1 1 0 1 1
| - | - - | | - | |
x o x o o x x o x x
y n y n n y y n y y





A binary clock might use LEDs to express binary values. In this clock, each column of LEDs shows a binary-coded decimal numeral of the traditional sexagesimal time.


The numeric value represented in each case is dependent upon the value assigned to each symbol. In a computer, the numeric values may be represented by two different voltages; on a magnetic disk, magnetic polarities may be used. A "positive", "yes", or "on" state is not necessarily equivalent to the numerical value of one; it depends on the architecture in use.
In keeping with customary representation of numerals using Arabic numerals, binary numbers are commonly written using the symbols 0 and 1. When written, binary numerals are often subscripted, prefixed or suffixed in order to indicate their base, or radix. The following notations are equivalent:

100101 binary (explicit statement of format)
100101b (a suffix indicating binary format)
100101B (a suffix indicating binary format)
bin 100101 (a prefix indicating binary format)
1001012 (a subscript indicating base-2 (binary) notation)
%100101 (a prefix indicating binary format)
0b100101 (a prefix indicating binary format, common in programming languages)

The final notation is used if converting using Google. For example searching 5 in base 2 in google results in 5 = 0b101.
When spoken, binary numerals are usually read right to left and digit-by-digit, in order to distinguish them from decimal numbers. For example, the binary numeral 100 is pronounced zero zero one, rather than one hundred, to make its binary nature explicit, and for purposes of correctness. Since the binary numeral 100 is equal to the decimal value four, it would be confusing, and numerically incorrect, to refer to the numeral as one hundred.

[edit] Counting in binary
0 = 0
1 = 1
2 = 10
3 = 11
4 = 100
5 = 101
6 = 110
7 = 111
8 = 1000
9 = 1001
10 = 1010
11 = 1011
12 = 1100
13 = 1101
14 = 1110
15 = 1111
16 = 10000
17 = 10001
18 = 10010
19 = 10011
20 = 10100
21 = 10101
22 = 10110
23 = 10111
24 = 11000
25 = 11001
26 = 11010
27 = 11011
28 = 11100
29 = 11101
30 = 11110
31 = 11111
32 = 100000
Adding numbers like this is actually very simple. For example, you have 1 which is 1, since you can't make more combinations of one digit (using only 1 and 0 without counting the 0 in this case) you have to add another number.
So you make the minimum number with 2 digits (the number can't start with 0) With two digits you can make 10, the next number is 11 and then you can't make more. Add another Digit.
With three digits the minimum is 100, then 101, then 110, then 111, then you add another, 1000, 1001, 1010, etc.



Binary
Decimal


0
0


1
1


10
2


11
3


100
4


101
5


110
6


111
7


1000
8


1001
9


1010
10


Since binary is a base-2 system, each digit represents an increasing power of 2, with the rightmost digit representing 20, the next representing 21, then 22, and so on. To determine the decimal representation of a binary number simply take the sum of each of the product binary digits with the power of 2 which they represent. For example, the binary number:
100101
is converted to decimal form by:
[(1) × 25] + [(0) × 24] + [(0) × 23] + [(1) × 22] + [(0) × 21] + [(1) × 20] =
[1 × 32] + [0 × 16] + [0 × 8] + [1 × 4] + [0 × 2] + [1 × 1] = 37
To create higher numbers, additional digits are simply added to the left side of the binary representation.
Counting in binary is similar to counting in any other number system. Beginning with a single digit, counting proceeds through each symbol, in increasing order. Decimal counting uses the symbols 0 through 9, while binary only uses the symbols 0 and 1.
When the symbols for the first digit are exhausted, the next-higher digit (to the left) is incremented, and counting starts over at 0. In decimal, counting proceeds like so:

000, 001, 002, ... 007, 008, 009, (rightmost digit starts over, and next digit is incremented)
010, 011, 012, ...
   ...
090, 091, 092, ... 097, 098, 099, (rightmost two digits start over, and next digit is incremented)
100, 101, 102, ...

After a digit reaches 9, an increment resets it to 0 but also causes an increment of the next digit to the left. In binary, counting is the same except that only the two symbols 0 and 1 are used. Thus after a digit reaches 1 in binary, an increment resets it to 0 but also causes an increment of the next digit to the left:

0000,
0001, (rightmost digit starts over, and next digit is incremented)
0010, 0011, (rightmost two digits start over, and next digit is incremented)
0100, 0101, 0110, 0111, (rightmost three digits start over, and the next digit is incremented)
1000, 1001, ...


[edit] Easy counting

8 4 2 1
          =  (1*4) + (1*1) = 4 + 1 = 5 = 0101
0 1 0 1


8 4 2 1
          =  (1*8) + (1*4) + (1*1) = 8 + 4 + 1 = 13 = 1101
1 1 0 1


16  8  4  2  1
                =  (1*16) + (1*8) + (1*1) = 16 + 8 + 1 = 25 = 11001 
 1  1  0  0  1


512  256  128   64   32  16  8   4   2   1 
                                           =  1023 = 1111111111 
 1    1    1    1    1   1   1   1   1   1


                                              1024 = 10000000000


1    byte  = 8 bits 


128  bytes = 1024 bits


1024 bytes = 1 KB 
1024 KB    = 1 MB
1024 MB    = 1 GB
1024 GB    = 1 TB


[edit] Binary arithmetic
Arithmetic in binary is much like arithmetic in other numeral systems. Addition, subtraction, multiplication, and division can be performed on binary numerals.

[edit] Addition




The circuit diagram for a binary half adder, which adds two bits together, producing sum and carry bits.


The simplest arithmetic operation in binary is addition. Adding two single-digit binary numbers is relatively simple, using a form of carrying:

0 + 0 → 0
0 + 1 → 1
1 + 0 → 1
1 + 1 → 0, carry 1 (since 1 + 1 = 0 + 1 × 10 in binary)

Adding two "1" digits produces a digit "0", while 1 will have to be added to the next column. This is similar to what happens in decimal when certain single-digit numbers are added together; if the result equals or exceeds the value of the radix (10), the digit to the left is incremented:

5 + 5 → 0, carry 1 (since 5 + 5 = 0 + 1 × 10)
7 + 9 → 6, carry 1 (since 7 + 9 = 6 + 1 × 10)

This is known as carrying. When the result of an addition exceeds the value of a digit, the procedure is to "carry" the excess amount divided by the radix (that is, 10/10) to the left, adding it to the next positional value. This is correct since the next position has a weight that is higher by a factor equal to the radix. Carrying works the same way in binary:

  1 1 1 1 1  (carried digits)
    0 1 1 0 1
+   1 0 1 1 1
-------------
= 1 0 0 1 0 0

In this example, two numerals are being added together: 011012 (13 decimal) and 101112 (23 decimal). The top row shows the carry bits used. Starting in the rightmost column, 1 + 1 = 102. The 1 is carried to the left, and the 0 is written at the bottom of the rightmost column. The second column from the right is added: 1 + 0 + 1 = 102 again; the 1 is carried, and 0 is written at the bottom. The third column: 1 + 1 + 1 = 112. This time, a 1 is carried, and a 1 is written in the bottom row. Proceeding like this gives the final answer 1001002 (36 decimal).
When computers must add two numbers, the rule that: x xor y = (x + y) mod 2 for any two bits x and y allows for very fast calculation, as well.

[edit] Subtraction
Subtraction works in much the same way:

0 − 0 → 0
0 − 1 → 1, borrow 1
1 − 0 → 1
1 − 1 → 0

Subtracting a "1" digit from a "0" digit produces the digit "1", while 1 will have to be subtracted from the next column. This is known as borrowing. The principle is the same as for carrying. When the result of a subtraction is less than 0, the least possible value of a digit, the procedure is to "borrow" the deficit divided by the radix (that is, 10/10) from the left, subtracting it from the next positional value.

    *   * * *   (starred columns are borrowed from)
  1 1 0 1 1 1 0
−     1 0 1 1 1
----------------
= 1 0 1 0 1 1 1

Subtracting a positive number is equivalent to adding a negative number of equal absolute value; computers typically use two's complement notation to represent negative values. This notation eliminates the need for a separate "subtract" operation. Using two's complement notation subtraction can be summarized by the following formula:
A - B = A + not B + 1
For further details, see two's complement.

[edit] Multiplication
Multiplication in binary is similar to its decimal counterpart. Two numbers A and B can be multiplied by partial products: for each digit in B, the product of that digit in A is calculated and written on a new line, shifted leftward so that its rightmost digit lines up with the digit in B that was used. The sum of all these partial products gives the final result.
Since there are only two digits in binary, there are only two possible outcomes of each partial multiplication:

If the digit in B is 0, the partial product is also 0
If the digit in B is 1, the partial product is equal to A

For example, the binary numbers 1011 and 1010 are multiplied as follows:

           1 0 1 1   (A)
         × 1 0 1 0   (B)
         ---------
           0 0 0 0   ← Corresponds to a zero in B
   +     1 0 1 1     ← Corresponds to a one in B
   +   0 0 0 0  
   + 1 0 1 1  
   ---------------
   = 1 1 0 1 1 1 0

Binary numbers can also be multiplied with bits after a binary point:

               1 0 1.1 0 1   (A) (5.625 in decimal)
             ×   1 1 0.0 1   (B) (6.25  in decimal)
             -------------
               1 0 1 1 0 1   ← Corresponds to a one in B
   +         0 0 0 0 0 0     ← Corresponds to a zero in B
   +       0 0 0 0 0 0
   +     1 0 1 1 0 1
   +   1 0 1 1 0 1
   -----------------------
   = 1 0 0 0 1 1.0 0 1 0 1   (35.15625 in decimal)

See also Booth's multiplication algorithm.

[edit] Division
Binary division is again similar to its decimal counterpart:

       ___________
1 0 1  ) 1 1 0 1 1

Here, the divisor is 1012, or 5 decimal, while the dividend is 110112, or 27 decimal. The procedure is the same as that of decimal long division; here, the divisor 1012 goes into the first three digits 1102 of the dividend one time, so a "1" is written on the top line. This result is multiplied by the divisor, and subtracted from the first three digits of the dividend; the next digit (a "1") is included to obtain a new three-digit sequence:

              1
        ___________
1 0 1   ) 1 1 0 1 1
        − 1 0 1
          -----
            0 1 1

The procedure is then repeated with the new sequence, continuing until the digits in the dividend have been exhausted:

             1 0 1
       ___________
1 0 1  ) 1 1 0 1 1
       − 1 0 1
         -----
           0 1 1
         − 0 0 0
           -----
             1 1 1
           − 1 0 1
             -----
               1 0

Thus, the quotient of 110112 divided by 1012 is 1012, as shown on the top line, while the remainder, shown on the bottom line, is 102. In decimal, 27 divided by 5 is 5, with a remainder of 2.

[edit] Bitwise operations
Main article: bitwise operation
Though not directly related to the numerical interpretation of binary symbols, sequences of bits may be manipulated using Boolean logical operators. When a string of binary symbols is manipulated in this way, it is called a bitwise operation; the logical operators AND, OR, and XOR may be performed on corresponding bits in two binary numerals provided as input. The logical NOT operation may be performed on individual bits in a single binary numeral provided as input. Sometimes, such operations may be used as arithmetic short-cuts, and may have other computational benefits as well. For example, an arithmetic shift left of a binary number is the equivalent of multiplication by a (positive, integral) power of 2.

[edit] Conversion to and from other numeral systems

[edit] Decimal
To convert from a base-10 integer numeral to its base-2 (binary) equivalent, the number is divided by two, and the remainder is the least-significant bit. The (integer) result is again divided by two, its remainder is the next most significant bit. This process repeats until the result of further division becomes zero.
Conversion from base-2 to base-10 proceeds by applying the preceding algorithm, so to speak, in reverse. The bits of the binary number are used one by one, starting with the most significant bit. Beginning with the value 0, repeatedly double the prior value and add the next bit to produce the next value. This can be organized in a multi-column table. For example to convert 100101011012 to decimal:

10010101101


Prior value
× 2 +
Next Bit
Next value





= 0


0
× 2 +
1
= 1


1
× 2 +
0
= 2


2
× 2 +
0
= 4


4
× 2 +
1
= 9


9
× 2 +
0
= 18


18
× 2 +
1
= 37


37
× 2 +
0
= 74


74
× 2 +
1
= 149


149
× 2 +
1
= 299


299
× 2 +
0
= 598


598
× 2 +
1
= 1197




The result is 119710. This method is an application of the Horner scheme.

Bin:  1        0       0       1       0       1       0       1       1       0       1
 
Dec:  1×2^10 + 0×2^9 + 0×2^8 + 1×2^7 + 0×2^6 + 1×2^5 + 0×2^4 + 1×2^3 + 1×2^2 + 0×2^1 + 1×2^0 = 1197

The fractional parts of a number are converted with similar methods. They are again based on the equivalence of shifting with doubling or halving.
In a fractional binary number such as .110101101012, the first digit is , the second , etc. So if there is a 1 in the first place after the decimal, then the number is at least , and vice versa. Double that number is at least 1. This suggests the algorithm: Repeatedly double the number to be converted, record if the result is at least 1, and then throw away the integer part.
For example, 10, in binary, is:




Converting
Result



0.



0.0



0.01



0.010



0.0101




Thus the repeating decimal fraction 0.3... is equivalent to the repeating binary fraction 0.01... .
Or for example, 0.110, in binary, is:




Converting
Result


0.1
0.


0.1 × 2 = 0.2 < 1
0.0


0.2 × 2 = 0.4 < 1
0.00


0.4 × 2 = 0.8 < 1
0.000


0.8 × 2 = 1.6 ≥ 1
0.0001


0.6 × 2 = 1.2 ≥ 1
0.00011


0.2 × 2 = 0.4 < 1
0.000110


0.4 × 2 = 0.8 < 1
0.0001100


0.8 × 2 = 1.6 ≥ 1
0.00011001


0.6 × 2 = 1.2 ≥ 1
0.000110011


0.2 × 2 = 0.4 < 1
0.0001100110




This is also a repeating binary fraction 0.000110011... . It may come as a surprise that terminating decimal fractions can have repeating expansions in binary. It is for this reason that many are surprised to discover that 0.1 + ... + 0.1, (10 additions) differs from 1 in floating point arithmetic. In fact, the only binary fractions with terminating expansions are of the form of an integer divided by a power of 2, which 1/10 is not.
The final conversion is from binary to decimal fractions. The only difficulty arises with repeating fractions, but otherwise the method is to shift the fraction to an integer, convert it as above, and then divide by the appropriate power of two in the decimal base. For example:




x
=
1100
.101110011100...



=
1100101110
.0111001110...



=
11001
.0111001110...



=
1100010101


x
=
(789/62)10




Another way of converting from binary to decimal, often quicker for a person familiar with hexadecimal, is to do so indirectly—first converting (x in binary) into (x in hexadecimal) and then converting (x in hexadecimal) into (x in decimal).
For very large numbers, these simple methods are inefficient because they perform a large number of multiplications or divisions where one operand is very large. A simple divide-and-conquer algorithm is more effective asymptotically: given a binary number, it is divided by 10k, where k is chosen so that the quotient roughly equals the remainder; then each of these pieces is converted to decimal and the two are concatenated. Given a decimal number, it can be split into two pieces of about the same size, each of which is converted to binary, whereupon the first converted piece is multiplied by 10k and added to the second converted piece, where k is the number of decimal digits in the second, least-significant piece before conversion.

[edit] Hexadecimal
Binary may be converted to and from hexadecimal somewhat more easily. This is because the radix of the hexadecimal system (16) is a power of the radix of the binary system (2). More specifically, 16 = 24, so it takes four digits of binary to represent one digit of hexadecimal.
The following table shows each hexadecimal digit along with the equivalent decimal value and four-digit binary sequence:





Hex
Dec
Binary


0
0
0000


1
1
0001


2
2
0010


3
3
0011


4
4
0100


5
5
0101


6
6
0110


7
7
0111


8
8
1000


9
9
1001


A
10
1010


B
11
1011


C
12
1100


D
13
1101


E
14
1110


F
15
1111


To convert a hexadecimal number into its binary equivalent, simply substitute the corresponding binary digits:

3A16 = 0011 10102
E716 = 1110 01112

To convert a binary number into its hexadecimal equivalent, divide it into groups of four bits. If the number of bits isn't a multiple of four, simply insert extra 0 bits at the left (called padding). For example:

10100102 = 0101 0010 grouped with padding = 5216
110111012 = 1101 1101 grouped = DD16

To convert a hexadecimal number into its decimal equivalent, multiply the decimal equivalent of each hexadecimal digit by the corresponding power of 16 and add the resulting values:

C0E716 = (12 × 163) + (0 × 162) + (14 × 161) + (7 × 160) = (12 × 4096) + (0 × 256) + (14 × 16) + (7 × 1) = 49,38310


[edit] Octal
Binary is also easily converted to the octal numeral system, since octal uses a radix of 8, which is a power of two (namely, 23, so it takes exactly three binary digits to represent an octal digit). The correspondence between octal and binary numerals is the same as for the first eight digits of hexadecimal in the table above. Binary 000 is equivalent to the octal digit 0, binary 111 is equivalent to octal 7, and so forth.




Octal
Binary


0
000


1
001


2
010


3
011


4
100


5
101


6
110


7
111




Converting from octal to binary proceeds in the same fashion as it does for hexadecimal:

658 = 110 1012
178 = 001 1112

And from binary to octal:

1011002 = 101 1002 grouped = 548
100112 = 010 0112 grouped with padding = 238

And from octal to decimal:

658 = (6 × 81) + (5 × 80) = (6 × 8) + (5 × 1) = 5310
1278 = (1 × 82) + (2 × 81) + (7 × 80) = (1 × 64) + (2 × 8) + (7 × 1) = 8710


[edit] Representing real numbers
Non-integers can be represented by using negative powers, which are set off from the other digits by means of a radix point (called a decimal point in the decimal system). For example, the binary number 11.012 thus means:




1 × 21
(1 × 2 = 2)
plus


1 × 20
(1 × 1 = 1)
plus


0 × 2-1
(0 × ½ = 0)
plus


1 × 2-2
(1 × ¼ = 0.25)




For a total of 3.25 decimal.
All dyadic rational numbers  have a terminating binary numeral—the binary representation has a finite number of terms after the radix point. Other rational numbers have binary representation, but instead of terminating, they recur, with a finite sequence of digits repeating indefinitely. For instance

 =  = 0.0101010101...2


 =  = 0.10110100 10110100 10110100...2

The phenomenon that the binary representation of any rational is either terminating or recurring also occurs in other radix-based numeral systems. See, for instance, the explanation in decimal. Another similarity is the existence of alternative representations for any terminating representation, relying on the fact that 0.111111... is the sum of the geometric series 2-1 + 2-2 + 2-3 + ... which is 1.
Binary numerals which neither terminate nor recur represent irrational numbers. For instance,

0.10100100010000100000100.... does have a pattern, but it is not a fixed-length recurring pattern, so the number is irrational
1.0110101000001001111001100110011111110... is the binary representation of , the square root of 2, another irrational. It has no discernible pattern. See irrational number.


[edit] See also

Two's complement
Redundant binary representation
Finger binary
Binary-coded decimal
Gray code
Offset binary
linear feedback shift register
SZTAKI Desktop Grid searches for generalized binary number systems up to dimension 11.


[edit] Notes


^ Sanchez, Julio; Canton, Maria P. (2007), Microcontroller programming : the microchip PIC, Boca Raton, FL: CRC Press, p. 37, ISBN 0849371899 
^ W. S. Anglin and J. Lambek, The Heritage of Thales, Springer, 1995, ISBN 038794544X
^ Bacon, Francis, The Advancement of Learning, 6, London, pp. Chapter 1, http://home.hiwaay.net/~paul/bacon/advancement/book6ch1.html 
^ Aiton, Eric J. (1985), Leibniz: A Biography, Taylor & Francis, pp. 245–8, ISBN 978-0852744703 



[edit] References

Sanchez, Julio; Canton, Maria P. (2007), Microcontroller programming : the microchip PIC, Boca Raton, FL: CRC Press, p. 37, ISBN 0849371899


[edit] External links

Full binary conversion: converts binary to any numerical system
Make any calculation with binary
A brief overview of Leibniz and the connection to binary numbers
Binary System at cut-the-knot
Conversion of Fractions at cut-the-knot
Binary Digits at Math Is Fun
Binary converter with direct access to bits
How to Convert from Decimal to Binary at wikiHow
Learning exercise for children at CircuitDesign.info








Retrieved from "http://en.wikipedia.org/wiki/Binary_numeral_system"
Categories: Computer arithmetic | Elementary arithmetic | Positional numeral systems | Indian inventions 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
العربية
Беларуская
Bosanski
Български
Català
Чăвашла
Česky
Dansk
Deutsch
Eesti
Ελληνικά
Español
Esperanto
Euskara
فارسی
Français
Furlan
Galego
한국어
Hrvatski
Bahasa Indonesia
Interlingua
Íslenska
Italiano
עברית
ქართული
Kreyòl ayisyen
Latina
Latviešu
Lietuvių
Lumbaart
Magyar
മലയാളം
मराठी
Bahasa Melayu
Nederlands
日本語
‪Norsk (bokmål)‬
‪Norsk (nynorsk)‬
Polski
Português
Română
Русский
Shqip
Simple English
سنڌي
Slovenčina
Slovenščina
Српски / Srpski
Basa Sunda
Suomi
Svenska
ไทย
Tiếng Việt
Türkçe
Українська
اردو
West-Vlams
ייִדיש
中文









 This page was last modified on 5 April 2009, at 14:25.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
