













Join (SQL) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Join_(SQL)";
		var wgTitle = "Join (SQL)";
		var wgAction = "view";
		var wgArticleId = "665204";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282716895;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-sql {line-height: normal;}
.source-sql li, .source-sql pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for sql
 * CSS class: source-sql, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-sql .de1, .source-sql .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-sql  {}
.source-sql .head {}
.source-sql .foot {}
.source-sql .imp {font-weight: bold; color: red;}
.source-sql .ln-xtra {color: #cc0; background-color: #ffc;}
.source-sql li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-sql li.li2 {font-weight: bold;}
.source-sql .kw1 {color: #993333; font-weight: bold;}
.source-sql .co1 {color: #808080; font-style: italic;}
.source-sql .co2 {color: #808080; font-style: italic;}
.source-sql .coMULTI {color: #808080; font-style: italic;}
.source-sql .es0 {color: #000099; font-weight: bold;}
.source-sql .br0 {color: #66cc66;}
.source-sql .st0 {color: #ff0000;}
.source-sql .nu0 {color: #cc66cc;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Join (SQL)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article includes a list of references or external links, but its sources remain unclear because it has insufficient inline citations. Please help to improve this article by introducing more precise citations where appropriate. (April 2009)


An SQL JOIN clause combines records from two tables in a database. It creates a set that can be saved as a table or used as is. A JOIN is a means for combining fields from two tables by using values common to each. ANSI standard SQL specifies four types of JOINs: INNER, OUTER, LEFT, and RIGHT. In special cases, a table (base table, view, or joined table) can JOIN to itself in a self-join.
A programmer writes a JOIN predicate to identify the records for joining. If the evaluated predicate is true the combined record is then produced in the expected format, for example a record set or a temporary table.




Contents


1 Sample tables
2 Inner join
3 Types of inner joins

3.1 Equi-join
3.2 Natural join
3.3 Cross join


4 Outer joins

4.1 Left outer join
4.2 Right outer joins
4.3 Full outer join


5 Self-join

5.1 Example


6 Alternatives
7 Implementation

7.1 Join algorithms

7.1.1 Nested loops
7.1.2 Merge join
7.1.3 Hash join




8 See also
9 Notes
10 References
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Sample tables
All subsequent explanations on join types in this article make use of the following two tables. The rows in these tables serve to illustrate the effect of different types of joins and join-predicates. In the following tables, Department.DepartmentID is the primary key, while Employee.DepartmentID is a foreign key.

Employee Table

LastName
DepartmentID


Rafferty
31


Jones
33


Steinberg
33


Robinson
34


Smith
34


Jasper
NULL



Department Table

DepartmentID
DepartmentName


31
Sales


33
Engineering


34
Clerical


35
Marketing



Note: The "Marketing" Department currently has no listed employees. Employee "Jasper" has not been assigned to any Department yet.

[edit] Inner join
An inner join requires each record in the two joined tables to have a matching record. An inner join essentially combines the records from two tables (A and B) based on a given join-predicate. The result of the join can be defined as the outcome of first taking the Cartesian product (or cross-join) of all records in the tables (combining every record in table A with every record in table B) - then return all records which satisfy the join predicate. Actual SQL implementations will normally use other approaches where possible, since computing the Cartesian product is not very efficient. This type of join occurs most commonly in applications, and represents the default join-type.
SQL specifies two different syntactical ways to express joins. The first, called "explicit join notation", uses the keyword JOIN, whereas the second uses the "implicit join notation". The implicit join notation lists the tables for joining in the FROM clause of a SELECT statement, using commas to separate them. Thus, it specifies a cross-join, and the WHERE clause may apply additional filter-predicates. Those filter-predicates function comparably to join-predicates in the explicit notation.
One can further classify inner joins as equi-joins, as natural joins, or as cross-joins (see below).
Programmers should take special care when joining tables on columns that can contain NULL values, since NULL will never match any other value (or even NULL itself), unless the join condition explicitly uses the IS NULL or IS NOT NULL predicates.
As an example, the following query takes all the records from the Employee table and finds the matching record(s) in the Department table, based on the join predicate. The join predicate compares the values in the DepartmentID column in both tables. If it finds no match (i.e., the department-id of an employee does not match the current department-id from the Department table), then the joined record remains outside the joined table, i.e., outside the (intermediate) result of the join.
Example of an explicit inner join:


SELECT *
FROM   employee 
       INNER JOIN department 
          ON employee.DepartmentID = department.DepartmentID

is equivalent to:


SELECT *  
FROM   employee, department 
WHERE  employee.DepartmentID = department.DepartmentID

Explicit Inner join result:


Employee.LastName
Employee.DepartmentID
Department.DepartmentName
Department.DepartmentID


Smith
34
Clerical
34


Jones
33
Engineering
33


Robinson
34
Clerical
34


Steinberg
33
Engineering
33


Rafferty
31
Sales
31


Notice that the employee "Jasper" and the department "Marketing" does not appear. Neither of these has any matching records in the respective other table: "Jasper" has no associated department and no employee has the department ID 35. Thus, no information on Jasper or on Marketing appears in the joined table. Depending on the desired results, this behavior may be a subtle bug. Outer joins may be used to avoid it.

[edit] Types of inner joins

[edit] Equi-join
An equi-join, also known as an equijoin, is a specific type of comparator-based join, or theta join, that uses only equality comparisons in the join-predicate. Using other comparison operators (such as <) disqualifies a join as an equi-join. The query shown above has already provided an example of an equi-join:


SELECT *
FROM   employee 
       INNER JOIN department 
          ON employee.DepartmentID = department.DepartmentID

SQL provides optional syntactic sugar for expressing equi-joins, by way of the USING construct (Feature ID F402):


SELECT *
FROM   employee 
       INNER JOIN department 
          USING (DepartmentID)

The USING clause is supported by MySQL, Oracle and PostgreSQL.

[edit] Natural join
A natural join offers a further specialization of equi-joins. The join predicate arises implicitly by comparing all columns in both tables that have the same column-name in the joined tables. The resulting joined table contains only one column for each pair of equally-named columns.
The above sample query for inner joins can be expressed as a natural join in the following way:


SELECT *
FROM   employee NATURAL JOIN department

The result appears slightly different, however, because only one DepartmentID column occurs in the joined table.


DepartmentID
Employee.LastName
Department.DepartmentName


34
Smith
Clerical


33
Jones
Engineering


34
Robinson
Clerical


33
Steinberg
Engineering


31
Rafferty
Sales


The Oracle database implementation of SQL selects the appropriate column in the naturally-joined table from which to gather data. An error-message such as "ORA-25155: column used in NATURAL join cannot have qualifier" is an error to help prevent or reduce the problems that could occur may encourage checking and precise specification of the columns named in the query, and can also help in providing compile time checking (instead of errors in query).

[edit] Cross join
A cross join, cartesian join or product provides the foundation upon which all types of inner joins operate. A cross join returns the cartesian product of the sets of records from the two joined tables. Thus, it equates to an inner join where the join-condition always evaluates to True or join-condition is absent in statement.
If A and B are two sets, then the cross join is written as A × B.
The SQL code for a cross join lists the tables for joining (FROM), but does not include any filtering join-predicate.
Example of an explicit cross join:


SELECT *
FROM   employee CROSS JOIN department

Example of an implicit cross join:


SELECT *
FROM   employee, department;



Employee.LastName
Employee.DepartmentID
Department.DepartmentName
Department.DepartmentID


Rafferty
31
Sales
31


Jones
33
Sales
31


Steinberg
33
Sales
31


Smith
34
Sales
31


Robinson
34
Sales
31


Jasper
NULL
Sales
31


Rafferty
31
Engineering
33


Jones
33
Engineering
33


Steinberg
33
Engineering
33


Smith
34
Engineering
33


Robinson
34
Engineering
33


Jasper
NULL
Engineering
33


Rafferty
31
Clerical
34


Jones
33
Clerical
34


Steinberg
33
Clerical
34


Smith
34
Clerical
34


Robinson
34
Clerical
34


Jasper
NULL
Clerical
34


Rafferty
31
Marketing
35


Jones
33
Marketing
35


Steinberg
33
Marketing
35


Smith
34
Marketing
35


Robinson
34
Marketing
35


Jasper
NULL
Marketing
35


The cross join does not apply any predicate to filter records from the joined table. Programmers can further filter the results of a cross join by using a WHERE clause.

[edit] Outer joins
An outer join does not require each record in the two joined tables to have a matching record. The joined table retains each record—even if no other matching record exists. Outer joins subdivide further into left outer joins, right outer joins, and full outer joins, depending on which table(s) one retains the rows from (left, right, or both).
(For a table to qualify as left or right its name has to appear after the FROM or JOIN keyword, respectively.)
No implicit join-notation for outer joins exists in standard SQL.

[edit] Left outer join
The result of a left outer join (or simply left join) for table A and B always contains all records of the "left" table (A), even if the join-condition does not find any matching record in the "right" table (B). This means that if the ON clause matches 0 (zero) records in B, the join will still return a row in the result—but with NULL in each column from B. This means that a left outer join returns all the values from the left table, plus matched values from the right table (or NULL in case of no matching join predicate).
For example, this allows us to find an employee's department, but still shows the employee(s) even when their department does not exist (contrary to the inner-join example above, where employees in non-existent departments are excluded from the result).
Example of a left outer join, with the additional result row italicized:


SELECT *  
FROM   employee  LEFT OUTER JOIN department  
          ON employee.DepartmentID = department.DepartmentID



Employee.LastName
Employee.DepartmentID
Department.DepartmentName
Department.DepartmentID


Jones
33
Engineering
33


Rafferty
31
Sales
31


Robinson
34
Clerical
34


Smith
34
Clerical
34


Jasper
NULL
NULL
NULL


Steinberg
33
Engineering
33



[edit] Right outer joins
A right outer join (or right join) closely resembles a left outer join, except with the treatment of the tables reversed. Every row from the "right" table (B) will appear in the joined table at least once. If no matching row from the "left" table (A) exists, NULL will appear in columns from A for those records that have no match in A.
A right outer join returns all the values from the right table and matched values from the left table (NULL in case of no matching join predicate).
For example, this allows us to find each employee and his or her department, but still show departments that have no employees.
Example right outer join, with the additional result row italicized:


SELECT * 
FROM   employee RIGHT OUTER JOIN department 
          ON employee.DepartmentID = department.DepartmentID



Employee.LastName
Employee.DepartmentID
Department.DepartmentName
Department.DepartmentID


Smith
34
Clerical
34


Jones
33
Engineering
33


Robinson
34
Clerical
34


Steinberg
33
Engineering
33


Rafferty
31
Sales
31


NULL
NULL
Marketing
35


In practice, explicit right outer joins are rarely used, since they can always be replaced with left outer joins (with the table order switched) and provide no additional functionality. The result above is produced also with a left outer join:


SELECT * 
FROM   department LEFT OUTER JOIN employee
          ON employee.DepartmentID = department.DepartmentID


[edit] Full outer join
A full outer join combines the results of both left and right outer joins. The joined table will contain all records from both tables, and fill in NULLs for missing matches on either side.
For example, this allows us to see each employee who is in a department and each department that has an employee, but also see each employee who is not part of a department and each department which doesn't have an employee.
Example full outer join:


SELECT *  
FROM   employee 
       FULL OUTER JOIN department 
          ON employee.DepartmentID = department.DepartmentID



Employee.LastName
Employee.DepartmentID
Department.DepartmentName
Department.DepartmentID


Smith
34
Clerical
34


Jones
33
Engineering
33


Robinson
34
Clerical
34


Jasper
NULL
NULL
NULL


Steinberg
33
Engineering
33


Rafferty
31
Sales
31


NULL
NULL
Marketing
35


Some database systems (like MySQL) do not support this functionality directly, but they can emulate it through the use of left and right outer joins and unions. The same example can appear as follows:


SELECT *
FROM   employee 
       LEFT JOIN department 
          ON employee.DepartmentID = department.DepartmentID
UNION
SELECT *
FROM   employee
       RIGHT JOIN department
          ON employee.DepartmentID = department.DepartmentID
WHERE  employee.DepartmentID IS NULL


[edit] Self-join
A self-join is joining a table to itself.[1] This is best illustrated by the following example.

[edit] Example
A query to find all pairings of two employees in the same country is desired. If you had two separate tables for employees and a query which requested employees in the first table having the same country as employees in the second table, you could use a normal join operation to find the answer table. However, all the employee information is contained within a single large table. [2]
Considering a modified Employee table such as the following:

Employee Table

EmployeeID
LastName
Country
DepartmentID


123
Rafferty
Australia
31


124
Jones
Australia
33


145
Steinberg
Australia
33


201
Robinson
United States
34


305
Smith
United Kingdom
34


306
Jasper
United Kingdom
NULL



An example solution query could be as follows:


SELECT F.EmployeeID, F.LastName, S.EmployeeID, S.LastName, F.Country
FROM Employee F, Employee S
WHERE F.Country = S.Country
AND F.EmployeeID < S.EmployeeID
ORDER BY F.EmployeeID, S.EmployeeID;

Which results in the following table being generated.

Employee Table after Self-join by Country

EmployeeID
LastName
EmployeeID
LastName
Country


123
Rafferty
124
Jones
Australia


123
Rafferty
145
Steinberg
Australia


124
Jones
145
Steinberg
Australia


305
Smith
306
Jasper
United Kingdom



For this example, note that:

F and S are aliases for the first and second copies of the employee table.
The condition F.Country = S.Country excludes pairings between employees in different countries. The example question only wanted pairs of employees in the same country.
The condition F.EmployeeID < S.EmployeeID excludes pairings where the EmployeeIDs are the same.
F.EmployeeID < S.EmployeeID also excludes duplicate pairings. Without it only the following less useful part of the table would be generated (for the United Kingdom only shown):



EmployeeID
LastName
EmployeeID
LastName
Country


305
Smith
305
Smith
United Kingdom


305
Smith
306
Jasper
United Kingdom


306
Jasper
305
Smith
United Kingdom


306
Jasper
306
Jasper
United Kingdom



Only one of the two middle pairings is needed to satisfy the original question, and the topmost and bottommost are of no interest at all in this example.

[edit] Alternatives
The effect of outer joins can also be obtained using correlated subqueries. For example


SELECT employee.LastName, employee.DepartmentID, department.DepartmentName 
FROM   employee LEFT OUTER JOIN department 
          ON employee.DepartmentID = department.DepartmentID

can also be written as


SELECT employee.LastName, employee.DepartmentID,
  (SELECT department.DepartmentName 
    FROM department
   WHERE employee.DepartmentID = department.DepartmentID )
FROM   employee


[edit] Implementation
Much work in database-systems has aimed at efficient implementation of joins, because relational systems commonly call for joins, yet face difficulties in optimising their efficient execution. The problem arises because (inner) joins operate both commutatively and associatively. In practice, this means that the user merely supplies the list of tables for joining and the join conditions to use, and the database system has the task of determining the most efficient way to perform the operation. A query optimizer determines how to execute a query containing joins. A query optimizer has two basic freedoms:

Join order: Because joins function commutatively and associatively, the order in which the system joins tables does not change the final result-set of the query. However, join-order does have an enormous impact on the cost of the join operation, so choosing the best join order becomes very important.
Join method: Given two tables and a join condition, multiple algorithms can produce the result-set of the join. Which algorithm runs most efficiently depends on the sizes of the input tables, the number of rows from each table that match the join condition, and the operations required by the rest of the query.

Many join-algorithms treat their inputs differently. One can refer to the inputs to a join as the "outer" and "inner" join operands, or "left" and "right", respectively. In the case of nested loops, for example, the database system will scan the entire inner relation for each row of the outer relation.
One can classify query-plans involving joins as follows:[3]

left-deep 
using a base table (rather than another join) as the inner operand of each join in the plan
right-deep 
using a base table as the outer operand of each join in the plan
bushy 
neither left-deep nor right-deep; both inputs to a join may themselves result from joins

These names derive from the appearance of the query plan if drawn as a tree, with the outer join relation on the left and the inner relation on the right (as convention dictates).

[edit] Join algorithms
Three fundamental algorithms exist for performing a join operation.

[edit] Nested loops


Please refer to main articles: Nested loop join and block nested loop


Use of nested loops produces the simplest join-algorithm. For each tuple in the outer join relation, the system scans the entire inner-join relation and appends any tuples that match the join-condition to the result set. Naturally, this algorithm performs poorly with large join-relations: inner or outer or both. An index on columns in the inner relation in the join-predicate can enhance performance.
The block nested loops (BNL) approach offers a refinement to this technique: for every block in the outer relation, the system scans the entire inner relation. For each match between the current inner tuple and one of the tuples in the current block of the outer relation, the system adds a tuple to the join result-set. This variant means doing more computation for each tuple of the inner relation, but far fewer scans of the inner relation.

[edit] Merge join
If both join relations come in order, sorted by the join attribute(s), the system can perform the join trivially, thus:



Consider the current "group" of tuples from the inner relation; a group consists of a set of contiguous tuples in the inner relation with the same value in the join attribute.
For each matching tuple in the current inner group, add a tuple to the join result. Once the inner group has been exhausted, advance both the inner and outer scans to the next group.



Merge joins offer one reason why many optimizers keep track of the sort order produced by query plan operators—if one or both input relations to a merge join arrives already sorted on the join attribute, the system need not perform an additional sort. Otherwise, the DBMS will need to perform the sort, usually using an external sort to avoid consuming too much memory.
See also: Sort-Merge Join

[edit] Hash join
Main article: Hash join
A hash join algorithm can only produce equi-joins. The database system pre-forms access to the tables concerned by building hash tables on the join-attributes. The lookup in hash tables operates much faster than through index trees. However, one can compare hashed values only for equality, not for other relationships.

[edit] See also

SQL
Query optimizer
Composition of relations


[edit] Notes


^ Shah 2005, p. 165
^ Adapted from Pratt 2005, pp. 115–6
^ Yu & Meng 1998, p. 213



[edit] References

Pratt, Phillip J (2005), A Guide To SQL, Seventh Edition, Thomson Course Technology, ISBN 9780619216740 
Shah, Nilesh (2005) [2002], Database Systems Using Oracle - A Simplified Guide to SQL and PL/SQL Second Edition (International Edition ed.), Pearson Education International, ISBN 0131911805 
Yu, Clement T.; Meng, Weiyi (1998), Principles of Database Query Processing for Advanced Applications, Morgan Kaufmann, ISBN 9781558604346, http://books.google.com/books?id=aBHRDhrrehYC, retrieved on 2009-03-03 


[edit] External links

SQL Inner Join with visual explanation
Sybase ASE 15 Joins
MySQL 5.0 Joins
Oracle Joins - Quick Reference
PostgreSQL Join with Query Explain
PostgreSQL 8.3 Joins
Joins in Microsoft SQL Server
Joins in MaxDB 7.6
Joins in Oracle 11g
Various join-algorithm implementations
A Visual Explanation of SQL Joins
Another visual explanation of SQL joins, along with some set theory
SQL join types classified with examples








v • d • e

Database management systems





Database models · Database normalization · Database storage · Distributed DBMS · Referential integrity · Relational algebra · Relational calculus · Relational database · Relational DBMS · Relational model · Object-relational database · Transaction processing





Concepts

Database · ACID · CRUD · Null · Candidate key · Foreign key · Primary key · Superkey · Surrogate key






Objects

Trigger · View · Table · Cursor · Log · Transaction · Index · Stored procedure · Partition






SQL

Select · Insert · Update · Merge · Delete · Join · Union · Create · Drop · Begin work · Commit · Rollback · Truncate · Alter






Components

Concurrency control · Data dictionary · JDBC · ODBC · Query language · Query optimizer · Query plan






Database products: Object-oriented (comparison) · Relational (comparison) · Document-oriented








Retrieved from "http://en.wikipedia.org/wiki/Join_(SQL)"
Categories: Database management systems | SQL keywords | Articles with example SQL codeHidden categories: Articles lacking in-text citations from April 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Español
Français
‪Norsk (bokmål)‬
Русский
Tiếng Việt









 This page was last modified on 9 April 2009, at 06:35 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
