













Aho-Corasick algorithm - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Aho-Corasick_algorithm";
		var wgTitle = "Aho-Corasick algorithm";
		var wgAction = "view";
		var wgArticleId = "184607";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 273653377;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Aho-Corasick algorithm

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
The Aho-Corasick algorithm is a string searching algorithm created by Alfred V. Aho and Margaret J. Corasick. It is a kind of dictionary-matching algorithm that locates elements of a finite set of strings (the "dictionary") within an input text. It matches all patterns "at once", so the complexity of the algorithm is linear in the length of the patterns plus the length of the searched text plus the number of output matches. Note that because all matches are found, there can be a quadratic number of matches if every substring matches (e.g. dictionary = a, aa, aaa, aaaa and input string is aaaa).
Informally, the algorithm constructs a trie with suffix tree-like set of links from each node representing a string (e.g. abc) to the node corresponding to the longest proper suffix (e.g. bc if it exists, else c if that exists, else the root). It also contains links from each node to the longest suffix node that corresponds to a dictionary entry; thus all of the matches may be enumerated by following the resulting linked list. It then uses the trie at runtime, moving along the input and keeping the longest match, using the suffix links to make sure that computation is linear. For every node that is in the dictionary and every link along the dictionary suffix linked list, an output is generated.
When the pattern dictionary is known in advance (e.g. a computer virus database), the construction of the automaton can be performed once off-line and the compiled automaton stored for later use. In this case, its run time is linear in the length of the input plus the number of matched entries.
The Aho-Corasick algorithm formed the basis of the original Unix command fgrep.
The following is the Aho-Corasick data structure constructed from the specified dictionary, with each row in the table representing a node in the trie, with the column path indicating the (unique) sequence of characters from the root to the node.



Dictionary { a, ab, bc, bca, c, caa }


Path
In Dictionary
Suffix Link
Dict Suffix Link


()
-
 
 


(a)
+
()
 


(ab)
+
(b)
 


(b)
-
()
 


(bc)
+
(c)
(c)


(bca)
+
(ca)
(a)


(c)
+
()
 


(ca)
-
(a)
(a)


(caa)
+
(a)
(a)



At each step, the current node is extended by finding its daughter, and if that doesn't exist, finding its suffix's daughter, and if that doesn't work, finding its suffix's suffix's daughter, finally ending in the root node if nothing's seen before.
Execution on input string abccab yields the following steps:



Analysis of input string abccab


Node
Remaining String
Output:End Position
Transition
Output


()
abccab
 
start at root
 


(a)
bccab
a:1
() to daughter (a)
Current node


(ab)
ccab
ab:2
(a) to daughter (ab)
Current node


(bc)
cab
bc:3, c:3
(ab) to suffix (b) to daughter (bc)
Current Node, Dict suffix node


(c)
ab
c:4
(bc) to suffix (c) to suffix () to daughter (c)
Current node


(ca)
b
a:5
(c) to daughter (ca)
Dict suffix node


(ab)
 
ab:6
(ca) to suffix (a) to daughter (ab)
Current node



In general, more than one dictionary suffix link may need to be followed, as more than one dictionary entry may end at a given character in the input.

[edit] Sources

Aho, Alfred V.; Margaret J. Corasick (June 1975). "Efficient string matching: An aid to bibliographic search". Communications of the ACM 18 (6): 333–340. doi:10.1145/360825.360855.  (Access to the full text may be restricted.)


[edit] External links

Animation of the Aho/Corasick Pattern Matching Automaton
Set Matching and Aho-Corasick Algorithm by Pekka Kilpeläinen
Aho-Corasick string matching in C# by Tomáš Petříček (mirror)
Aho-Corasick entry in NIST's Dictionary of Algorithms and Data Structures
Perl Implementation of the Aho-Corasick Algorithm by Vaclav Barta
A Python implementation licensed under GPLv2 or any later version
Free open-source C++ implementation - By Komodia WARNING This implementation totaly Buggy !




Retrieved from "http://en.wikipedia.org/wiki/Aho-Corasick_algorithm"
Categories: Algorithms on strings | Search algorithms 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Deutsch
Français
日本語
Polski
Русский









 This page was last modified on 27 February 2009, at 13:55.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
