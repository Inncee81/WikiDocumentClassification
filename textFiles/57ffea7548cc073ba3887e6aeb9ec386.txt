













Linear feedback shift register - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Linear_feedback_shift_register";
		var wgTitle = "Linear feedback shift register";
		var wgAction = "view";
		var wgArticleId = "58992";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282719958;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-c .de1, .source-c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-c  {}
.source-c .head {}
.source-c .foot {}
.source-c .imp {font-weight: bold; color: red;}
.source-c .ln-xtra {color: #cc0; background-color: #ffc;}
.source-c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-c li.li2 {font-weight: bold;}
.source-c .kw1 {color: #b1b100;}
.source-c .kw2 {color: #000000; font-weight: bold;}
.source-c .kw3 {color: #000066;}
.source-c .kw4 {color: #993333;}
.source-c .co1 {color: #808080; font-style: italic;}
.source-c .co2 {color: #339933;}
.source-c .coMULTI {color: #808080; font-style: italic;}
.source-c .es0 {color: #000099; font-weight: bold;}
.source-c .br0 {color: #66cc66;}
.source-c .st0 {color: #ff0000;}
.source-c .nu0 {color: #cc66cc;}
.source-c .me1 {color: #202020;}
.source-c .me2 {color: #202020;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Linear feedback shift register

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (March 2009)







This article includes a list of references or external links, but its sources remain unclear because it lacks inline citations. Please improve this article by introducing more precise citations where appropriate. (April 2009)






A 4-bit Fibonacci LFSR with its state diagram. The XOR gate provides feedback to the register that shifts bits from left to right. The maximal sequence consists of every possible state except the "0000" state.


A linear feedback shift register (LFSR) is a shift register whose input bit is a linear function of its previous state.
The only linear functions of single bits are xor and inverse-xor; thus it is a shift register whose input bit is driven by the exclusive-or (xor) of some bits of the overall shift register value.
The initial value of the LFSR is called the seed, and because the operation of the register is deterministic, the stream of values produced by the register is completely determined by its current (or previous) state. Likewise, because the register has a finite number of possible states, it must eventually enter a repeating cycle. However, an LFSR with a well-chosen feedback function can produce a sequence of bits which appears random and which has a very long cycle.
Applications of LFSRs include generating pseudo-random numbers, pseudo-noise sequences, fast digital counters, and whitening sequences. Both hardware and software implementations of LFSRs are common.




Contents


1 Fibonacci LFSRs
2 Galois LFSRs

2.1 Non-binary Galois LFSR


3 Some polynomials for maximal LFSRs
4 Output-stream properties
5 Applications

5.1 Uses as counters
5.2 Uses in cryptography
5.3 Uses in digital broadcasting and communications


6 See also
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Fibonacci LFSRs




A 16-bit Fibonacci LFSR. The feedback tap numbers in white correspond to a primitive polynomial in the table so the register cycles through the maximum number of 65535 states excluding the all-zeroes state. The state ACE1 hex shown will be followed by 5670 hex.


The bit positions that affect the next state are called the taps. In the diagram the taps are [16,14,13,11,1]. The rightmost bit of the LFSR is called the output bit. The taps are XOR'd sequentially with the output bit and then fed back into the leftmost bit. The sequence of bits in the rightmost position is called the output stream.

The bits in the LFSR state which influence the input are called taps (white in the diagram).
A maximum-length LFSR produces an m-sequence (i.e. cycles through all possible 2n − 1 states within the shift register except the state where all bits are zero), unless it contains all zeros, in which case it will never change.
As an alternative to the XOR based feedback in a standard LFSR, one can also use XNOR[1]. A state with all ones is illegal when using an XNOR feedback, in the same way as a state with all zeroes is illegal when using XOR. This state is considered illegal because the counter would remain "locked-up" in this state.

The sequence of numbers generated by an LFSR can be considered a binary numeral system just as valid as Gray code or the natural binary code.
The taps of an LFSR can be represented as a polynomial mod 2. This means that the coefficients of the polynomial must be 1's or 0's. This is called the feedback polynomial or characteristic polynomial. For example, if the taps are at the 16th, 14th, 13th and 11th bits (as shown), the feedback polynomial is



The 'one' in the polynomial does not correspond to a tap — it corresponds to the input to the first bit (i.e. x0, which is equivalent to 1). The powers of the terms represent the tapped bits, counting from the left. The first and last bits are always connected as an input and tap respectively.
Tables of primitive polynomials from which maximum-length LFSRs can be constructed are given below and in the references.

The LFSR will only be maximum-length if the number of taps is even; just 2 or 4 taps can suffice even for extremely long sequences.
The set of taps must be relatively prime, and share no common divisor to all taps.
There can be more than one maximum-length tap sequence for a given LFSR length
Once one maximum-length tap sequence has been found, another automatically follows. If the tap sequence, in an n-bit LFSR, is [n, A, B, C, 0], where the 0 corresponds to the x0 = 1 term, then the corresponding 'mirror' sequence is [n, n − C, n − B, n − A, 0]. So the tap sequence [32, 3, 2, 0] has as its counterpart [32, 30, 29, 0]. Both give a maximum-length sequence.

Some example C/C++ code is below:

       uint16_t reg = 0xACE1;
       uint16_t bit;
       while(1)
       {
               bit =((reg >> 0) ^
                     (reg >> 2) ^
                     (reg >> 3) ^
                     (reg >> 5) ) & 0x0001;
               reg = (reg >> 1) | (bit << 15);
               printf("%04X\n",reg);
       }

The above code assumes the right most bit is actually bit 1, not bit 16.

[edit] Galois LFSRs
Named after the French mathematician Évariste Galois, a Galois LFSR, or an LFSR in Galois configuration, is an alternate structure that can generate the same[citation needed] output stream as a conventional LFSR. In the Galois configuration, when the system is clocked, bits that are not taps are shifted one position to the right unchanged. The taps, on the other hand, are XOR'd with the output bit before they are stored in the next position. The new output bit is the next input bit. The effect of this is that when the output bit is zero all the bits in the register shift to the right unchanged, and the input bit becomes zero. When the output bit is one, the bits in the tap positions all flip (if they are 0, they become 1, and if they are 1, they become 0), and then the entire register is shifted to the right and the input bit becomes 1.




A 16-bit Galois LFSR. The register numbers in white correspond to the same primitive polynomial as the Fibonacci example but are counted in reverse to the shifting direction. This register also cycles through the maximal number of 65535 states excluding the all-zeroes state. The state ACE1 hex shown will be followed by E270 hex.


To generate the same output stream, the order of the taps is the counterpart (see above) of the order for the conventional LFSR, otherwise the stream will be in reverse. Note that the internal state of the LFSR is not necessarily the same. The Galois register shown has the same output stream as the Fibonnacci register in the first section.

Galois LFSRs do not concatenate every tap to produce the new input (the XOR'ing is done within the LFSR and no XOR gates are run in serial, therefore the propagation times are reduced to that of one XOR rather than a whole chain), thus it is possible for each tap to be computed in parallel, increasing the speed of execution.
In a software implementation of an LFSR, the Galois form is more efficient as the XOR operations can be implemented a word at a time: only the output bit must be examined individually.

Below is a code example of a 32-bit maximal period Galois LFSR that is valid in C and C++, (assuming that unsigned int has 32 bit precision):


  unsigned lfsr = 1;
  unsigned period = 0; 
  do 
  {
    /* taps: 32 31 29 1; characteristic polynomial: x^32 + x^31 + x^29 + x + 1 */
    lfsr = (lfsr >> 1) ^ (-(lfsr & 1u) & 0xd0000001u); 
    ++period;
  } while(lfsr != 1u);

And here is the code for the 16 bit example in the figure (Assuming 16-bit shorts)


  unsigned short lfsr = 0xACE1u;
  unsigned period = 0; 
  do 
  {
     /* taps: 16 14 13 11; characteristic polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
    lfsr = (lfsr >> 1) ^ (-(lfsr & 1u) & 0xB400u);    
    ++period; 
  } while(lfsr != 0xACE1u);

These code examples create a toggle mask to apply to the shifted value using the XOR operator. The mask is created by first removing all but the least significant bit (the output bit) of the current value. This value is then negated (two's complement negation), which creates a value of either all 0s or all 1s, if the output bit is 0 or 1, respectively. By ANDing the result with the tap-value (e.g., 0xB400 in the second example) before applying it as the toggle mask, it acts functionally as a conditional to either apply or not apply the toggle mask based on the output bit. A more explicit but significantly less efficient code example is shown below.


 unsigned short lfsr = 0xACE1u;
 unsigned period = 0;
 
 do {
   unsigned lsb = lfsr & 1;   //Get lsb (i.e., the output bit).
   lfsr >>= 1;       //Shift register
   if(lsb == 1)      //Only apply toggle mask if output bit is 1.
      lfsr ^= 0xB400u;  //apply toggle mask, value has 1 at bits corresponding
                              // to taps, 0 else where.  
   ++period;
 } while(lfsr != 0xACE1u);


[edit] Non-binary Galois LFSR
Binary Galois LFSRs like the ones shown above can be generalized to any q-ary alphabet {0, 1, ... , q − 1} (e.g., for binary, q is equal to two, and the alphabet is simply {0, 1}). In this case, the exclusive-or component is generalized to addition modulo-q (note that XOR is addition modulo 2), and the feedback bit (output bit) is multiplied (modulo-q) by a q-ary value which is constant for each specific tap point. Note that this is also a generalization of the binary case, where the feedback is multiplied by either 0 (no feedback, i.e., no tap) or 1 (feedback is present). Given an appropriate tap configuration, such LFSRs can be used to generate Galois fields for arbitrary values of q.

[edit] Some polynomials for maximal LFSRs


Bits
Feedback polynomial
Period


n

2n − 1


4
x4 + x3 + 1
15


5
x5 + x3 + 1
31


6
x6 + x5 + 1
63


7
x7 + x6 + 1
127


8
x8 + x6 + x5 + x4 + 1
255


9
x9 + x5 + 1
511


10
x10 + x7 + 1
1023


11
x11 + x9 + 1
2047


12
x12 + x11 + x10 + x4 + 1
4095


13
x13 + x12 + x11 + x8 + 1
8191


14
x14 + x13 + x12 + x2 + 1
16383


15
x15 + x14 + 1
32767


16
x16 + x14 + x13 + x11 + 1
65535


17
x17 + x14 + 1
131071


18
x18 + x11 + 1
262143


19
x19 + x18 + x17 + x14 + 1
524287


25 to 168
[1]




[edit] Output-stream properties

Ones and zeroes occur in 'runs'. The output stream 0110100, for example consists of five runs of lengths 1,2,1,1,2, in order. In one period of a maximal LFSR, 2n − 1 runs occur (for example, a six bit LFSR will have 32 runs). Exactly 1/2 of these runs will be one bit long, 1/4 will be two bits long, up to a single run of zeroes n − 1 bits long, and a single run of ones n bits long. This same property is statistically expected in a truly random sequence.
LFSR output streams are deterministic. If you know the present state, you can predict the next state. This is not possible with truly random events.
The output stream is reversible; an LFSR with mirrored taps will cycle through the states in reverse order.


[edit] Applications
LFSRs can be implemented in hardware, and this makes them useful in applications that require very fast generation of a pseudo-random sequence, such as direct-sequence spread spectrum radio. LFSRs have also been used for generating an approximation of white noise in various programmable sound generators.
The Global Positioning System uses an LFSR to rapidly transmit a sequence that indicates high-precision relative time offsets.

[edit] Uses as counters
The repeating sequence of states of an LFSR allows it to be used as a divider, or as a counter when a non-binary sequence is acceptable as is often the case where computer index or framing locations need to be machine-readable. LFSR counters have simpler feedback logic than natural binary counters or Gray code counters, and therefore can operate at higher clock rates. However it is necessary to ensure that the LFSR never enters an all-zeros state, for example by presetting it at start-up to any other state in the sequence. The table of primitive polynomials shows how LFSR's can be arranged in Fibonacci or Galois form to give maximal periods. One can obtain any other period by adding to an LFSR that has a longer period some logic that shortens the sequence by skipping some state(s), e.g. as tabulated in [2].

[edit] Uses in cryptography
LFSRs have long been used as pseudo-random number generators for use in stream ciphers (especially in military cryptography), due to the ease of construction from simple electromechanical or electronic circuits, long periods, and very uniformly distributed output streams. However, an LFSR is a linear system, leading to fairly easy cryptanalysis. For example, given a stretch of known plaintext and corresponding ciphertext, a stretch of LFSR output stream used in the system described above can be recovered, and from a stretch of the output stream one can construct an LFSR of minimal size by using the Berlekamp-Massey algorithm, which with the known stretch of output stream can be used to simulate the intended receiver to recover the remaining plaintext.
Three general methods are employed to reduce this problem in LFSR-based stream ciphers:

Non-linear combination of several bits from the LFSR state;
Non-linear combination of the output bits of two or more LFSRs (see also: shrinking generator); or
Irregular clocking of the LFSR, as in the alternating step generator.

Important LFSR-based stream ciphers include A5/1 and A5/2, used in GSM cell phones, E0, used in Bluetooth, and the shrinking generator. The A5/2 cipher has been broken and both A5/1 and E0 have serious weaknesses.

[edit] Uses in digital broadcasting and communications
To prevent short repeating sequences (e.g., runs of 0's or 1's) from forming spectral lines that may complicate symbol tracking at the receiver or interfere with other transmissions, linear feedback registers are often used to "randomize" the transmitted bitstream. This randomization is removed at the receiver after demodulation. When the LFSR runs at the same rate as the transmitted symbol stream, this technique is referred to as scrambling. When the LFSR runs considerably faster than the symbol stream, expanding the bandwidth of the transmitted signal, this is direct-sequence spread spectrum.
Neither scheme should be confused with encryption or encipherment; scrambling and spreading with LFSRs do not protect the information from eavesdropping.
Digital broadcasting systems that use linear feedback registers:

ATSC Standards (HDTV transmission system – North America)
DAB (Digital audio broadcasting system -- for radio)
DVB-T (HDTV transmission system – Europe, Australasia)
NICAM (digital audio system for television)

Other digital communications systems using LFSRs:

IBS (INTELSAT business service)
IDR (Intermediate Data Rate service)
SDI (Serial Digital Interface transmission)
Data transfer over PSTN (according to the ITU-T V-series recommendations)
CDMA (Code Division Multiple Access) cellular telephony
100BASE-T2 "fast" Ethernet scrambles bits using a LFSR
1000BASE-T Ethernet, the most common form of Gigabit Ethernet, scrambles bits using a LFSR


[edit] See also

Pinwheel
Mersenne twister
Pseudorandom number sequence
Maximum length sequence


[edit] References

^ [http://www.xilinx.com/bvdocs/appnotes/xapp210.pdf Linear Feedback Shift Registers in Virtex Devices]


[edit] External links

LFSR Reference LFSR theory and implementation, maximal length sequences, and comprehensive feedback tables for lengths from 7 to 16,777,215 (3 to 24 stages), and partial tables for lengths up to 4,294,967,295 (25 to 32 stages).
International Telecommunications Union Recommendation O.151 (August 1992)
Maximal Length LFSR table with length from 3 to 168
Maximal Length LFSR table with length from 1 to 786, also 1024 and 2048.
Pseudo-Random Number Generation Routine
http://www.ee.ualberta.ca/~elliott/ee552/studentAppNotes/1999f/Drivers_Ed/lfsr.html
http://www.quadibloc.com/crypto/co040801.htm
Simple explanation of LFSRs for Engineers
Feedback terms
General LFSR Theory
Shift register code generator
An implementation of a cryptographically secure shrinking pseudorandom number generator.




Retrieved from "http://en.wikipedia.org/wiki/Linear_feedback_shift_register"
Categories: Digital registers | Cryptographic algorithms | Pseudorandom number generators | Articles with example C++ codeHidden categories: Articles needing additional references from March 2009 | Articles lacking in-text citations from April 2009 | All articles with unsourced statements | Articles with unsourced statements since August 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
한국어
Italiano
Nederlands
日本語
Polski
Русский









 This page was last modified on 9 April 2009, at 07:03 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
