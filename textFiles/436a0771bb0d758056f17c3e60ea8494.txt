













ActionScript - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "ActionScript";
		var wgTitle = "ActionScript";
		var wgAction = "view";
		var wgArticleId = "519691";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 280354950;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-actionscript {line-height: normal;}
.source-actionscript li, .source-actionscript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for actionscript
 * CSS class: source-actionscript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-actionscript .de1, .source-actionscript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-actionscript  {}
.source-actionscript .head {}
.source-actionscript .foot {}
.source-actionscript .imp {font-weight: bold; color: red;}
.source-actionscript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-actionscript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-actionscript li.li2 {font-weight: bold;}
.source-actionscript .kw1 {color: #b1b100;}
.source-actionscript .kw2 {color: #000000; font-weight: bold;}
.source-actionscript .kw3 {color: #0066CC;}
.source-actionscript .co1 {color: #808080; font-style: italic;}
.source-actionscript .co2 {color: #808080; font-style: italic;}
.source-actionscript .coMULTI {color: #808080; font-style: italic;}
.source-actionscript .es0 {color: #000099; font-weight: bold;}
.source-actionscript .br0 {color: #66cc66;}
.source-actionscript .st0 {color: #ff0000;}
.source-actionscript .nu0 {color: #cc66cc;}
.source-actionscript .me1 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-xml {line-height: normal;}
.source-xml li, .source-xml pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for xml
 * CSS class: source-xml, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-xml .de1, .source-xml .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-xml  {}
.source-xml .head {}
.source-xml .foot {}
.source-xml .imp {font-weight: bold; color: red;}
.source-xml .ln-xtra {color: #cc0; background-color: #ffc;}
.source-xml li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-xml li.li2 {font-weight: bold;}
.source-xml .coMULTI {color: #808080; font-style: italic;}
.source-xml .es0 {color: #000099; font-weight: bold;}
.source-xml .br0 {color: #66cc66;}
.source-xml .st0 {color: #ff0000;}
.source-xml .nu0 {color: #cc66cc;}
.source-xml .sc0 {color: #00bbdd;}
.source-xml .sc1 {color: #ddbb00;}
.source-xml .sc2 {color: #339933;}
.source-xml .sc3 {color: #009900;}
.source-xml .re0 {color: #000066;}
.source-xml .re1 {font-weight: bold; color: black;}
.source-xml .re2 {font-weight: bold; color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); ActionScript

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article or section recently underwent a major revision or rewrite, and may need further review. You can help Wikipedia by assisting in the revision.



ActionScript




Paradigm
Multi-paradigm


Appeared in
1998


Designed by
Gary Grossman


Developer
Macromedia (now Adobe Systems)


Latest release
3.0/ 2006-06-27; 1011 days ago


Typing discipline
strong, static, safe[citation needed]


Major implementations
Adobe Flash, Adobe Flex


Influenced by
JavaScript, Java


OS
Cross-platform



ActionScript

Filename extension
.as


Internet media type
application/ecmascript[1]


ActionScript is a scripting language based on ECMAScript. ActionScript is used primarily for the development of websites and software using the Adobe Flash Player platform (in the form of SWF files embedded into Web pages), but is also used in some database applications (such as Alpha Five), and in basic robotics, as with the Make Controller Kit. Originally developed by Macromedia, the language is now owned by Adobe (which acquired Macromedia in 2005). ActionScript was initially designed for controlling simple 2D vector animations made in Adobe Flash (formerly Macromedia Flash). Later versions added functionality allowing for the creation of Web-based games and rich Internet applications with streaming media (such as video and audio).




Contents


1 History

1.1 Timeline by player
1.2 Timeline by ActionScript version
1.3 Flash Lite


2 Syntax

2.1 ActionScript 2.0
2.2 ActionScript 3.0


3 Data structures

3.1 Data types
3.2 Using data types


4 References
5 See also
6 External links

6.1 Adobe documentation and references
6.2 Tutorials / Resource Sites
6.3 Tools and scripts







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
ActionScript started as a scripting language for Macromedia's Flash authoring tool, now developed by Adobe Systems as Adobe Flash. The first three versions of the Flash authoring tool provided limited interactivity features. Early Flash developers could attach a simple command, called an "action", to a button or a frame. The set of actions was basic navigation controls, with commands such as "play", "stop", "getURL", and "gotoAndPlay".
With the release of Flash 4 in 1999, this simple set of actions became a small scripting language. New capabilities introduced for Flash 4 included variables, expressions, operators, if statements, and loops. Although referred to internally as "ActionScript", the Flash 4 user manual and marketing documents continued to use the term "actions" to describe this set of commands .

[edit] Timeline by player

Flash Player 2: The first version with scripting support. Actions included gotoAndPlay, gotoAndStop, nextFrame and nextScene for timeline control.


Flash Player 3: Expanded basic scripting support with the ability to load external SWFs (loadMovie).


Flash Player 4: First player with a full scripting implementation (called Actions). The scripting was a flash based syntax and contained support for loops, conditionals, variables and other basic language constructs.


Flash Player 5: Included the first version of ActionScript. Used prototype-based programming based on ECMAScript, and allowed full procedural programming and object-oriented programming.


Flash Player 6: Added an event handling model, accessibility controls and support for switch. The first version with support for the AMF and RTMP protocols which allowed for ondemand audio/video streaming.


Flash Player 7: Additions include CSS styling for text and support for ActionScript 2.0, a programming language based on the ECMAScript 4 Netscape Proposal with class-based inheritance. However, ActionScript 2.0 can cross compile to ActionScript 1.0 byte-code, so that it can run in Flash Player 6.


Flash Player 8: Further extended ActionScript 1/ActionScript 2 by adding new class libraries with APIs for controlling bitmap data at run-time, file uploads and live filters for blur and dropshadow.





Example of ActionScript 2.0 running on Macromedia Flash 8.



Flash Player 9 (initially called 8.5): Added ActionScript 3.0 with the advent of a new virtual machine, called AVM2 (ActionScript Virtual Machine 2), which coexists with the previous AVM1 needed to support legacy content. Performance increases were a major objective for this release of the player including a new JIT compiler. Support for binary sockets, E4X XML parsing, full-screen mode and Regular Expressions were added. This is the first release of the player to be titled Adobe Flash Player.


Flash Player 10 (initially called Astro): Added basic 3D manipulation, such as rotating on the X, Y, and Z axis, and a 3D drawing API. Ability to create custom filters using Adobe Pixel Bender. Several visual processing tasks are now offloaded to the GPU which gives a noticeable decrease to rendering time for each frame, resulting in higher frame rates, especially with H.264 video. There is a new sound API which allows for custom creation of audio in flash, something that has never been possible before. [2]


[edit] Timeline by ActionScript version
2000–2003: ActionScript "1.0" With the release of Flash 5 in September 2000, the "actions" from Flash 4 were enhanced once more and named "ActionScript" for the first time.[3] This was the first version of ActionScript with influences from JavaScript and the ECMA-262 (Third Edition) standard, supporting the said standard's object model and many of its core data types. Local variables may be declared with the var statement, and user-defined functions with parameter passing and return values can also be created. Notably, ActionScript could now also be typed with a text editor rather than being assembled by choosing actions from drop-down lists and dialog box controls. With the next release of its authoring tool, Flash MX, and its corresponding player, Flash Player 6, the language remained essentially unchanged; there were only minor changes, such as the addition of the switch statement and the "strict equality" (===) operator, which brought it closer to being ECMA-262-compliant. Two important features of ActionScript that distinguish it from later versions are its loose type system and its reliance on prototype-based inheritance. Loose typing refers to the ability of a variable to hold any type of data. This allows for rapid script development and is particularly well-suited for small-scale scripting projects. Prototype-based inheritance is the ActionScript 1.0 mechanism for code reuse and object-oriented programming. Instead of a class keyword that defines common characteristics of a class, ActionScript 1.0 uses a special object that serves as a "prototype" for a class of objects. All common characteristics of a class are defined in the class's prototype object and every instance of that class contains a link to that prototype object.
2003–2006: ActionScript 2.0 The next major revision of the language, ActionScript 2.0, was introduced in September 2003 with the release of Flash MX 2004 and its corresponding player, Flash Player 7. In response to user demand for a language better equipped for larger and more complex applications, ActionScript 2.0 featured compile-time type checking and class-based syntax, such as the keywords class and extends. (While this allowed for a more structured object-oriented programming approach, the code would still be compiled to ActionScript 1.0 bytecode, allowing it to be used on the preceding Flash Player 6 as well. In other words, the class-based inheritance syntax was a layer on top of the existing prototype-based system.) With ActionScript 2.0, developers could constrain variables to a specific type by adding a type annotation so that type mismatch errors could be found at compile-time. ActionScript 2.0 also introduced class-based inheritance syntax so that developers could create classes and interfaces, much as they would in class-based languages such as Java and C++. This version conformed partially to the ECMAScript Fourth Edition draft specification.
2006–today: ActionScript 3.0 In June 2006, ActionScript 3.0 debuted with Adobe Flex 2.0 and its corresponding player, Flash Player 9. ActionScript 3.0 was a fundamental restructuring of the language, so much so that it uses an entirely different virtual machine. Flash Player 9 contains two virtual machines, AVM1 for code written in ActionScript 1.0 and 2.0, and AVM2 for content written in ActionScript 3.0. Actionscript 3.0 has limited support for hardware acceleration ( DirectX, OpenGL ).
The update to the language introduced several new features:

Compile-time and runtime type checking—type information exists at both compile-time and runtime.
Improved performance from a class-based inheritance system separate from the prototype-based inheritance system.
Support for packages, namespaces, and regular expressions.
Compiles to an entirely new type of bytecode, incompatible with ActionScript 1.0 and 2.0 bytecode.
Revised Flash Player API, organized into packages.
Unified event handling system based on the DOM event handling standard.
Integration of ECMAScript for XML (E4X) for purposes of XML processing.
Direct access to the Flash runtime display list for complete control of what gets displayed at runtime.
Completely conforming implementation of the ECMAScript fourth edition draft specification.


[edit] Flash Lite

Flash Lite 1.0: Flash Lite is the Flash technology specifically developed for mobile phones and consumer electronics devices. Supports Flash 4 ActionScript.


Flash Lite 1.1: Flash 4 ActionScript support and additional device APIs added.


Flash Lite 2.0 and 2.1: Added support for Flash 7 ActionScript 2.0 and some additional fscommand2 API.


Flash Lite 3: Added support for Flash 8 ActionScript 2.0 and also FLV video playback.


[edit] Syntax
ActionScript code is free form and thus may be created with whichever amount or style of whitespace that the author desires. The basic syntax is derived from ECMAScript.

[edit] ActionScript 2.0
The following code, which works in any compliant player, creates a text field at depth 0, at position (0, 0) on the screen (measured in pixels), that is 100 pixels wide and high. Then the text parameter is set to the "Hello, world!" string, and it is automatically displayed in the player:


createTextField("greet", 0, 0, 0, 100, 100);
greet.text = "Hello, world";

When writing external ActionScript 2.0 class files the above example could be written in a file named Greeter.as as following.


class com.example.Greeter extends MovieClip
{
    public function Greeter() {}
    public function onLoad() :Void
    {
        var txtHello:TextField = this.createTextField("txtHello", 0, 0, 0, 100, 100.);
        txtHello.text = "Hello, world";
    }
}


[edit] ActionScript 3.0
ActionScript 3.0 has a similar syntax to ActionScript 2.0 but a different set of APIs for creating objects. Compare the script below to the previous ActionScript 2.0 version:


var greet:TextField = new TextField();
greet.text = "Hello World";
this.addChild(greet);

Minimal ActionScript 3.0 programs may be somewhat larger and more complicated due to the increased separation of the programming language and the Flash IDE.
Presume the following file to be Greeter.as:


package com.example
{
	import flash.text.TextField;
	import flash.display.Sprite;
 
	public class Greeter extends Sprite
	{
		public function Greeter()
		{
			var txtHello:TextField = new TextField();
			txtHello.text = "Hello World";
			addChild(txtHello);
		}
	}
}

(See also: Sprite)
Finally, an example of using ActionScript when developing Flex applications, again presuming the following content to be in a file named Greeter.as:


package
{
	public class Greeter
	{
		public static function sayHello():String
		{
			var greet:String = "Hello, world!";
			return greet;
		}
	}
}

This code will work with the following MXML application file:


<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" layout="vertical" creationComplete="initApp()">
 
	<mx:Script>
		<![CDATA[
			public function initApp():void
			{
				// Prints our "Hello, world!" message into "mainTxt".
				mainTxt.text = Greeter.sayHello();
			}
		]]>
	</mx:Script>
 
	<mx:Label id="title" fontSize="24" fontStyle="bold" text='"Hello, world!" Example'/>
	<mx:TextArea id="mainTxt" width="250"/>
 
</mx:Application>


[edit] Data structures

[edit] Data types
ActionScript primarily consists of "fundamental" or "simple" data types which are used to create other data types. These data types are very similar to Java data types. Since ActionScript 3 was a complete rewrite of ActionScript 2, the data types and their inheritances have changed.
ActionScript 2 top level data types

String - A list of characters such as "Hello World"
Number - Any Numeric value
Boolean - A simple binary storage that can only be "true" or "false".
Object - Object is the data type all complex data types inherit from. It allows for the grouping of methods, functions, parameters, and other objects.

ActionScript 2 complex data types
There are additional "complex" data types. These are more processor and memory intensive and consist of many "simple" data types. For AS2, some of these data types are:

MovieClip - An ActionScript creation that allows easy usage of visible objects.
TextField - A simple dynamic or input text field. Inherits the Movieclip type.
Button - A simple button with 4 frames (states): Up, Over, Down and Hit. Inherits the MovieClip type.
Date - Allows access to information about a specific point in time.
Array - Allows linear storage of data.
XML - An XML object
XMLNode - An XML node
LoadVars - A Load Variables object allows for the storing and send of HTTP POST and HTTP GET variables
Sound
NetStream
NetConnection
MovieClipLoader
EventListener

ActionScript 3 top level data types (see Data type descriptions)

Boolean - The Boolean data type has only two possible values: true and false or 1 and 0. No other values are valid.
int - The int data type is a 32-bit integer between -2,147,483,648 and 2,147,483,647.
Null - The Null data type contains only one value, null. This is the default value for the String data type and all classes that define complex data types, including the Object class.
Number - The Number data type can represent integers, unsigned integers, and floating-point numbers. The Number data type uses the 64-bit double-precision format as specified by the IEEE Standard for Binary Floating-Point Arithmetic (IEEE-754).
String - The String data type represents a sequence of 16-bit characters. Strings are stored internally as Unicode characters, using the UTF-16 format. Previous versions of flash used the UTF-8 format.
uint - The uint (Unsigned Integer) data type is a 32-bit unsigned integer between 0 and 4,294,967,295.
void - The void data type contains only one value, undefined. In previous versions of ActionScript, undefined was the default value for instances of the Object class. In ActionScript 3.0, the default value for Object instances is null.

ActionScript 3 complex data types (see Data type descriptions)

Object - The Object data type is defined by the Object class. The Object class serves as the base class for all class definitions in ActionScript. Objects in their basic form can be used as associative arrays that contain key-value pairs, where keys are Strings and values may be any type.
Array - Contains a list of data. Though ActionScript 3 is a strongly-typed language, the contents of an Array may be of any type and values must be cast back to their original type after retrieval. (Support for typed Arrays has recently been added with the Vector class.)
Vector - A variant on Array supported only when publishing for Flash Player 10 or above. Vectors are typed, dense Arrays (values must be defined or null) which may be fixed-length, and are bounds-checked during retrieval. Vectors are not just more typesafe than Arrays but also perform faster.
Dictionary - Dictionaries are a variant of Object that may contain keys of any data type (whereas Object always uses strings for its keys).
MovieClip - Animated movie clip display object; a descendant (with minor modifications) of the main Flash timeline.
Bitmap - A non-animated bitmap display object.
Shape - A non-animated vector shape object.
ByteArray - Contains an array of binary byte data.
TextField - A dynamic, optionally interactive text field object.
SimpleButton - A simple interactive button type supporting "up","over", and "down" states with an arbitrary hit area.
Date - A date object containing the current system date/time.
Error - A generic error object that allows runtime error reporting when thrown as an exception.
Function - The core class for all Flash method definitions.
RegExp - A regular expression object for strings.
Video - A video playback object supporting direct (progressive download) or streaming (RTMP) transports. As of Flash Player version 9.0.115.0, the open h.264/MP4 high-definition video format is also supported along side standard Flash video (FLV) content.
XML - A revised XML object based on the E4C standard; nodes and attributes are accessed differently than ActionScript 2.0 object (a legacy class named XMLDocument is provided for backwards compatibility).
XMLList - An Array-based object for various content lookups in the XML class.


[edit] Using data types
The basic syntax is:


var yourVariableName:YourVariableType = new YourVariableType(Param1, Param2, ..., ParamN);

So in order to make an empty Object:


var myObject:Object = new Object();

Some types are automatically put in place:


var myString:String = "Hello Wikipedia!"; // This would automatically set the variable as a string.
var myNumber:Number = 5; // This would do the same for a number.
var myObject:Object = {Param1:"Hi!", Param2:76}; //This creates an object with two variables.
// Param1 is a string with the data of "Hi!",
// and Param2 is a number with the data of 76.
var myArray:Array = [5,"Hello!",{a:5, b:7}] //This is the syntax for automatically creating an Array.
//It creates an Array with 3 variables.
//The first (0) is a number with the value of 5,
//the second (1) is a string with the value of "Hello!",
//and the third (2) is an object with {a:5, b:7}.

Unlike most object-oriented languages, ActionScript makes no distinction between primitive types and reference types. In ActionScript, all variables are reference types.[4]
Some data types can be assigned values with literals:


var item1:String="ABC";
var item2:Boolean=true;
var item3:Number=12
var item4:Array=["a","b","c"];
var item5:XML = <node><child/></node>; //Note that the primitive XML is not quoted

A reference in ActionScript is a pointer to an instance of a class. This does not create a copy but accesses the same memory space. All objects in ActionScript are accessed as references instead of being copied.


var item1:XML=new XML("<node><child/></node>");
var item2:XML=item1;
item2.firstChild.attributes.value=13;
//item1 now equals item2 since item2 simply points to what item1 points to.
//Both are now:
//<node><child value="13"/></node>

Only references to an object may be removed by using the "delete" keyword. Removal of actual objects and data is done by the Flash Player garbage collector which checks for any existing references in the Flash memory space. If none are found (no other reference is made to the orphaned object), it is removed from memory. For this reason, memory management in ActionScript requires careful application development planning.


var item1:XML=new XML("<node><child/></node>");
delete item1;
//If no other reference to item1 is present anywhere else in the application,
//it will be removed on the garbage collector's next pass


[edit] References


^ RFC 4329 (limit compatible with EcmaScript)
^ http://labs.adobe.com/technologies/flashplayer10/
^ Note that the name "ActionScript 1.0" is a retronym, coined after the release of ActionScript 2.0.
^ http://livedocs.adobe.com/flex/3/html/03_Language_and_Syntax_19.html



[edit] See also

ECMAScript — The standardized scripting language upon which ActionScript is based.
Adobe Flash — The program in which ActionScript debuted.
Adobe Flash Player — The official and most widely used SWF player.
Adobe Flash Lite — A miniature version of the Flash Player for mobile devices.
Adobe AIR - Runtime for ActionScript/Flex
Adobe Flex - SDK and IDE which uses ActionScript
SWF File Format
Tamarin (JIT)
Macromedia
Adobe Systems
Gnash, a free Flash viewer
Swfdec
Adobe Flex Builder - IDE by Adobe to author ActionScript


[edit] External links



Wikibooks has a book on the topic of
ActionScript Programming






Wikiversity has learning materials about ActionScript:Introduction



[edit] Adobe documentation and references

ActionScript Technology Center
ActionScript 2.0 Language Reference
ActionScript 3.0 Language & Component Reference
Flex 3 LiveDocs: Programming ActionScript 3.0


[edit] Tutorials / Resource Sites

Video Tutorials from Lee Brimelow
Adobe - Flash Developer Center
Flashkit.com - Community Resource / Tutorials
Kirupa.com - Community Resource / Tutorials
Actionscript.org - Community Resource / Tutorials
The Tech Labs - Adobe AIR, Flash and Flex Tutorials


[edit] Tools and scripts

FlashDevelop - Popular open-source ActionScript IDE
Ejscript - Open-source ActionScript compatible language
Adobe

Adobe Flash Professional (ie. the Flash IDE)
Adobe Flex SDK (ie. the free SDK)


haxe.org - The HaXe compiler, the AS 3 successor to MTASC
Motion Twin ActionScript Compiler - MTASC is an Open-source ActionScript 2 compiler
ActionScript Cheatsheet - Free, printable quick reference cards for ActionScript 1.0, ActionScript 2.0, ActionScript 3.0, Papervision 3D and Adobe AIR.








v • d • e

Adobe Flash





Flash-specific file formats

.swf (Shockwave Flash) · .as (ActionScript) · .flv (Flash Video) · .amf (Action Message Format)






Other versions

Adobe Flash Lite · FutureSplash Animator (Flash 1.0)






Related topics

ActionScript · Adobe Flash Player · Local Shared Object · Flash animation  · .spl (historical Flash 1.0 file format) · 3D Flash













v • d • e

ECMAScript (comparison)





Dialects

ActionScript · Caja · JavaScript / LiveScript · JScript · JavaScript OSA · JScript .NET · QtScript






ECMAScript engines

InScript · JavaScriptCore (SquirrelFish)  · JScript · KJS · Futhark · Linear B · Narcissus · QtScript · Rhino · SpiderMonkey (TraceMonkey) · Tamarin · V8






Other

Brendan Eich · Ecma International · SunSpider · Dynamic HTML









Retrieved from "http://en.wikipedia.org/wiki/ActionScript"
Categories: Adobe Flash | Scripting languages | JavaScript programming language family | Prototype-based programming languages | Curly bracket programming languagesHidden categories: Recently revised from March 2009 | All articles with unsourced statements | Articles with unsourced statements since April 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Български
Català
Česky
Deutsch
Eesti
Español
فارسی
Français
Galego
한국어
Bahasa Indonesia
Italiano
עברית
Magyar
Bahasa Melayu
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Simple English
Svenska
ไทย
Tiếng Việt
Тоҷикӣ
Türkçe
Українська
中文









 This page was last modified on 29 March 2009, at 04:45.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
