













Windows PowerShell - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Windows_PowerShell";
		var wgTitle = "Windows PowerShell";
		var wgAction = "view";
		var wgArticleId = "14465871";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282053678;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-text .de1, .source-text .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-text  {}
.source-text .head {}
.source-text .foot {}
.source-text .imp {font-weight: bold; color: red;}
.source-text .ln-xtra {color: #cc0; background-color: #ffc;}
.source-text li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-text li.li2 {font-weight: bold;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Windows PowerShell

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Windows PowerShell





Screenshot of a sample PowerShell session


Developed by
Microsoft Corporation


Initial release
November 14, 2006


Latest release
1.0 / 2006-11-14; 874 days ago


Preview release
2.0 CTP3 / 2008-12-23; 104 days ago


Operating system
Windows XP
Windows Server 2003
Windows Vista
Windows Server 2008
Windows 7


Platform
x86, x86-64 and Itanium


Available in
Multilingual


Development status
Active


Type
Operating system shell


License
MS-EULA


Website
Windows PowerShell



PowerShell Scripting Language

Paradigm
Multi-paradigm: imperative, pipeline, object-oriented, functional, reflective


Appeared in
2006


Designed by
Jeffrey Snover, Bruce Payette (et al.)


Developer
Microsoft Corporation


Typing discipline
strong, safe, implicit, dynamic


Major implementations
Windows PowerShell, Pash[1]


Influenced by
C#, DCL, ksh, Perl, Ruby/LISP, CL, SQL, COMMAND.COM/ cmd.exe,[2] Tcl[3]


OS
Cross-platform[1]


Windows PowerShell is an extensible command-line shell and associated scripting language from Microsoft. It was released in 2006 and is currently available for Windows XP SP2/SP3, Windows Server 2003, Windows Vista and is included in Windows Server 2008 as an optional feature. Windows PowerShell is included in Windows 7 (beta) by default and it can't be uninstalled.
Windows PowerShell integrates with the Microsoft .NET Framework and provides an environment to perform administrative tasks by execution of cmdlets (pronounced commandlets) which are specialized .NET classes implementing a particular operation, scripts which are composition of cmdlets along with imperative logic, executables which are standalone applications, or by instantiating regular .NET classes.[4][5] These work by accessing data in different data stores, like the filesystem or registry, which are made available to the PowerShell runtime via Windows PowerShell providers.
Windows PowerShell also provides a hosting mechanism with which the Windows PowerShell runtime can be embedded inside other applications, which can then leverage Windows PowerShell functionality to implement certain operations, including those exposed via the graphical interface. This capability has been utilized by Microsoft Exchange Server 2007[4][6] to expose its management functionality as PowerShell cmdlets and providers and implement the graphical management tools as PowerShell hosts which invoke the necessary cmdlets. Other Microsoft applications including Microsoft SQL Server 2008[7] also expose their management interface via PowerShell cmdlets. In the future, graphical interface-based management applications on Windows will be layered on top of Windows PowerShell.
Windows PowerShell includes its own extensive, console-based help, reminiscent of man pages in Unix shells. The help topics include help for cmdlets, providers, and concepts in PowerShell. To see the help, use the Get-Help cmdlet. Online help for Windows PowerShell is updated weekly in the TechNet Library.




Contents


1 Background
2 Overview

2.1 PowerShell 1.0

2.1.1 Cmdlets
2.1.2 Scripting
2.1.3 Hosting


2.2 PowerShell 2.0


3 Cmdlets
4 Reception
5 Examples
6 File extensions
7 Application support

7.1 SnapIns and Hosts
7.2 Other


8 See also
9 References
10 Books
11 External links

11.1 3rd-party tools
11.2 PowerShell providers







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Background
Every released version of Microsoft DOS and Microsoft Windows for personal computers has featured a command-line interface tool. These are COMMAND.COM (in installations relying on MS-DOS, including Windows 9x) and cmd.exe (in Windows NT-based installations). These are regular command line interpreters which include only a handful of basic commands. For other purposes, a separate console application needs to be provided, to be invoked from these shells. They also include a scripting language (batch files) which can be used to automate various tasks. However, they cannot be used to automate all facets of GUI functionality, in part because command-line equivalents of operations exposed via the graphical interface are limited, and the scripting language is elementary, preventing the creation of complex scripts by composing available functionality. In Windows Server 2003, the situation was improved,[8] but scripting support was still considered unsatisfactory.
Microsoft attempted to address some of these shortcomings by introducing the Windows Script Host in 1998 with Windows 98, and its command-line based host: cscript.exe . It integrates with the Active Script engine and allows scripts to be written in compatible languages, such as JScript and VBScript, leveraging the APIs exposed by applications via COM. However, it has its own deficiencies, as well. It is not integrated with the shell, its documentation is not very accessible, and it quickly gained a reputation as a system vulnerability vector after several high-profile computer viruses exploited weaknesses in its security provisions. Different versions of Windows provided various special-purpose command line interpreters (such as netsh and WMIC) with their own command sets. None of them were integrated with the command shell, nor were they interoperable.
By 2003 Microsoft had started to develop a new shell called Monad (aka Microsoft Shell or MSH). Monad was to be a new extensible command shell with a fresh design which would be capable of automating a full range of core administrative tasks. Microsoft published the first Monad public beta release on June 17, 2005, Beta 2 on September 11, 2005 and Beta 3 on January 10, 2006. They announced on April 25, 2006 that Monad was renamed to Windows PowerShell, positioning it as a significant part of their management technology offerings.[9] Release Candidate 1 of PowerShell was released at the same time. Release Candidate 2 of PowerShell was released September 26, 2006 and released to web (RTW) on November 14, 2006. PowerShell for Vista was released on January 30, 2007.[10] A CTP release of Windows PowerShell v2.0 has been made available since November 6, 2007.[11]

[edit] Overview

[edit] PowerShell 1.0
The commands Windows PowerShell executes may be in the form of 'cmdlets', which are specialized .NET classes designed expressly to expose a functionality via PowerShell, PowerShell scripts (*.ps1) or regular executables. If a command is an executable file, PowerShell launches it in a separate process; if it is a cmdlet, it is executed in the PowerShell process. PowerShell also provides an interactive command line interface wherein the commands can be entered and their output displayed. The user interface, based on the Win32 console, offers customizable tab completion but lacks syntax highlighting. PowerShell also enables the creation of aliases for cmdlets, which are textually translated by PowerShell into invocations of the original commands. Powershell also supports both named and positional parameters for commands. In executing a cmdlet, the job of binding the parameter value to the parameter is done by PowerShell itself, but for external executables, parameters are passed via the argv (or equivalent) variable array to be parsed by the executable.
Another concept used by PowerShell is that of a pipeline. Like Unix pipelines, PowerShell pipelines are used to compose complex commands, allowing the output of one command to be passed as input to another. A pipeline is set up by piping the output of one command (or pipeline) to another command, using the | operator. But unlike its Unix counterpart, the PowerShell pipeline is an object pipeline; that is, the data passed between cmdlets are fully typed objects, rather than byte streams. When data is piped as objects, the elements they encapsulate retain their structure and types across cmdlets, without the need for any serialization or explicit parsing of the stream, as would be the need if only byte streams were shared. An object can also encapsulate certain functions that work on the contained data. These also become available to the recipient command for use.[12][13] For the last cmdlet in a pipeline, PowerShell automatically pipes its output object to the Write-Host cmdlet, which creates a formatted text representation of its data, writing it to the screen.[14][15]
Because all PowerShell objects are .NET objects, they share a .ToString() method, which retrieves the text representation of the data in an object. Windows PowerShell uses this method to convert an object to text. In addition, it also allows formatting definitions to be specified, so the text representation of objects may be customized by choosing which data elements to display, and how. However, in order to maintain backwards compatibility, if an external executable is used in a pipeline, it receives a text stream representing the object, and does not integrate with the PowerShell type system.
The PowerShell Extended Type System (ETS) is based on the .NET type system, but with certain extensions. For example, it enables the creation of different views of objects by exposing only a subset of the data fields, properties, and methods, as well as specifying custom formatting and sorting behavior. These views are mapped to the original object using an XML-based language.[16]

[edit] Cmdlets
Cmdlets are specialized commands in the PowerShell environment that implement specific functions. These are the native commands in the PowerShell stack. Cmdlets follow a <verb>-<noun> naming pattern, such as Get-ChildItem, helping to make them (according to Microsoft) self-descriptive.[17] Cmdlets output their results as objects, or collections thereof (including arrays), and can optionally receive input in that form, making them suitable for use as recipients in a pipeline. But while PowerShell allows arrays and other collections of objects to be written to the pipeline, cmdlets always process objects individually. For collections of objects, PowerShell invokes the cmdlet on each object in the collection, in sequence.[17]
Cmdlets are specialized .NET classes, which the PowerShell runtime instantiates and invokes when they are run. Cmdlets derive either from Cmdlet or from PSCmdlet, the latter being used when the cmdlet needs to interact with the PowerShell runtime.[17] These base classes specify certain methods - BeginProcessing(), ProcessRecord() and EndProcessing() - one of which the cmdlet's implementation overrides to provide the functionality. Whenever a cmdlet is run, these methods are invoked by PowerShell in sequence, with ProcessRecord() being called if it receives pipeline input.[18] If a collection of objects are piped, the method is invoked for each object in the collection. The class implementing the Cmdlet must have one .NET attribute - CmdletAttribute - which specifies the verb and the noun that make up the name of the cmdlet. Common verbs are provided as an enum.
If a cmdlet receives either pipeline input or command-line parameter input, there must be a corresponding property in the class, with a mutator implementation. PowerShell invokes the mutator with the parameter value or pipeline input, which is saved by the mutator implementation in class variables. These values are then referred to by the methods which implement the functionality. Properties that map to command-line parameters are marked by ParameterAttribute[19] and are set before the call to BeginProcessing(). Those which map to pipeline input are also flanked by ParameterAttribute, but with the ValueFromPipeline attribute parameter set.[20]
The implementation of these cmdlet classes can refer to any .NET API and may be in any .NET language. In addition, PowerShell makes certain APIs available, such as WriteObject(), which is used to access PowerShell-specific functionality, such as writing resultant objects to the pipeline. Cmdlets can use .NET data access APIs directly or use the PowerShell infrastructure of PowerShell Providers, which make data stores addressable using unique paths. Data stores are exposed using drive letters, and hierarchies within them, addressed as directories. Windows PowerShell ships with providers for the file system, registry, the certificate store, as well as the namespaces for command aliases, variables, and functions.[21] Windows PowerShell also includes various cmdlets for managing various Windows systems, including the file system, or using Windows Management Instrumentation to control Windows components. Other applications can register cmdlets with PowerShell, thus allowing it to manage them, and if they enclose any datastore (such as databases), they can add specific providers as well.

[edit] Scripting
Windows PowerShell includes a dynamically typed scripting language which can implement complex operations using cmdlets imperatively. The scripting language supports variables, functions, branching (if-then-else), loops (while, do, for, and foreach), structured error/exception handling and closures/lambda expressions, as well as integration with .NET. Variables in PowerShell scripts have names that start with $; they can be assigned any value, including the output of cmdlets. While the language is untyped, internally the variables are stored with their types, which can be either primitive types or objects. Strings can be enclosed either in single quotes or in double quotes; in the former case, variables will be expanded even if they are inside the quotation marks. According to the variable syntax, if the path to a file is enclosed in braces preceded by a dollar sign (as in ${C:\foo.txt}), it refers to the contents of the file. If it is used as an L-value, anything assigned to it will be written to the file. When used as an R-value, it will be read from the file. If an object is assigned, it is serialized before storing it.
Object members can be accessed using . notation, as in C# syntax. PowerShell provides special variables, such as $args, which is an array of all the command line arguments passed to a function from the command line, and $_, which refers to the current object in the pipeline.[22] PowerShell also provides arrays and associative arrays. The PowerShell scripting language also evaluates arithmetic expressions entered on the command line immediately, and it parses common abbreviations, such as GB, MB, and KB.
Using the function keyword, PowerShell provides for the creation of functions, which can take parameters. It provides two syntaxes for invoking a function:

<function> <param1> <param2> …': In this case, the function need not define the parameters it accepts; the parameters will be passed as an array accessible from inside the function via the $args array.[23]
<function>(<param1>, <param2>): In this case, the function declaration must specify the parameters it accepts, and their types. The parameters passed will be bound to the parameter variables when the function is called.[24]

PowerShell allows any .NET methods to be called by providing their namespaces enclosed in brackets ([]), and then using a pair of colons (::) to indicate the static method.[25] For example, [System.Console]::WriteLine("PowerShell") Objects are created using the New-Object cmdlet. Calling methods of .NET objects is accomplished by using the regular . notation.[25]
For error handling, PowerShell provides a .NET-based exception handling mechanism. In case of errors, objects containing information about the error (Exception object) are thrown, which are caught using the trap keyword. However, the action-or-error is configurable; in case of an error PowerShell can be configured to silently resume execution, without trapping the exception.[26]
Scripts written using PowerShell can be made to persist across sessions in a .ps1 file. Later, either the entire script or individual functions in the script can be used. Scripts and functions are used analogously with cmdlets, in that they can be used as commands in pipelines, and parameters can be bound to them. Pipeline objects can be passed between functions, scripts, and cmdlets seamlessly. However, script execution is disabled by default and must be enabled explicitly.[27] PowerShell scripts can be signed to verify their integrity, and are subject to .NET Code Access Security.
The PowerShell scripting language supports binary prefix notation similar to the scientific notation supported by many programming languages in the C-family.

[edit] Hosting
Another use of PowerShell is being embedded in a management application, which then uses the PowerShell runtime to implement the management functionality. For this, PowerShell provides a managed hosting API. Via the APIs, the application can instantiate a runspace (one instantiation of the PowerShell runtime), which runs in the application's process and is exposed as a Runspace object.[4] The state of the runspace is encased in a SessionState object. When the runspace is created, the Windows PowerShell runtime initializes the instantiation, including initializing the providers and enumerating the cmdlets, and updates the SessionState object accordingly. The Runspace then must be opened for either synchronous processing or asynchronous processing. After that it can be used to execute commands.
To execute a command, a pipeline (represented by a Pipeline object) must be created and associated with the runspace. The pipeline object is then populated with the cmdlets that make up the pipeline. For sequential operations (as in a PowerShell script), a Pipeline object is created for each statement and nested inside another Pipeline object.[4] When a pipeline is created, Windows PowerShell invokes the pipeline processor, which resolves the cmdlets into their respective assemblies (the command processor) and adds a reference to them to the pipeline, and associates them with an InputPipe, Outputpipe and ErrorOutputPipe objects, to represent the connection with the pipeline. The types are verified and parameters bound using reflection.[4] Once the pipeline is set up, the host calls the Invoke() method to run the commands, or its asynchronous equivalent - InvokeAsync(). If the pipeline has the Write-Host cmdlet at the end of the pipeline, it writes the result onto the console screen. If not, the results are handed over to the host, which might either apply further processing or display it itself.
The hosting APIs are used by Microsoft Exchange Server 2007 to provide its management GUI. Each operation exposed in the GUI is mapped to a sequence of PowerShell commands (or pipelines). The host creates the pipeline and executes them. In fact, the interactive PowerShell console itself is a PowerShell host, which interprets the scripts entered at command line and creates the necessary Pipeline objects and invokes them.

[edit] PowerShell 2.0





This article or section contains information about scheduled or expected future software.
The content may change as the software release approaches and more information becomes available.









Graphical Windows PowerShell, with multiple open RunSpaces in the Windows PowerShell 2.0 CTP2


Microsoft is working on the next version of PowerShell and has made several CTP releases of the same publicly available. The most recent CTP, CTP3, was issued in late 2008[28]. Windows PowerShell 2.0 is installed by default on Windows Server 2008 R2 and Windows 7[29]. PowerShell V2 includes changes to the scripting language and hosting API, in addition to including more than 240 new cmdlets.[30][31]
A non-exhaustive list of the new features included in PowerShell V2 is:[32][33]

PowerShell Remoting: Using WS-Management, PowerShell 2.0 allows scripts and cmdlets to be invoked on a remote machine or a large set of remote machines.
Background Jobs: Also called a PSJob, it allows a command sequence (script) or pipeline to be invoked asynchronously. Jobs can be run on the local machine or on multiple remote machines. A PSJob cannot include interactive cmdlets.
Transactions: Enable cmdlet and provider developers to perform transacted operations. PowerShell 2.0 includes transaction cmdlets for starting, committing, and rolling back a PSTransaction as well as features to manage and direct the transaction to the participating cmdlet and provider operations. The PowerShell Registry provider supports transactions.
ScriptCmdlets: These are cmdlets written using the PowerShell scripting language.
SteppablePipelines: This allows the user to control when the BeginProcessing(), ProcessRecord() and EndProcessing() functions of a cmdlet are called.
Modules: This allows script developers and administrators to organize and partition PowerShell scripts in self-contained, reusable units. Code from a module executes in its own self-contained context and does not affect the state outside of the module. Modules can define a restricted runspace environment by using a script. They have a persistent state as well as public and private members.
Data Language: A domain-specific subset of the PowerShell scripting language, that allows data definitions to be decoupled from the scripts and allow localized string resources to be imported into the script at runtime (Script Internationalization).
Script Debugging: It allows breakpoints to be set in a PowerShell script or function. Breakpoints can be set on lines, line & columns, commands and read or write access of variables. It includes a set of cmdlets to control the breakpoints via script.
Eventing: This feature allows listening, forwarding, and acting on management and system events. Eventing allows PowerShell Hosts to be notified about state changes to their managed entities. It also enables PowerShell scripts to subscribe to ObjectEvents, PSEvents, and WmiEvents and process them synchronously and asynchronously.
Windows PowerShell Integrated Scripting Environment: PowerShell 2.0 includes a GUI-based PowerShell host (formerly known as Graphical Windows PowerShell) that provides integrated debugger, syntax highlighting, tab completion and up to 8 PowerShell unicode-enabled consoles (Runspaces) in a tabbed UI, as well as to run only the selected parts in a script.
Network File Transfer: Native support for prioritized, throttled, and asynchronous transfer of files between machines using the Background Intelligent Transfer Service (BITS).[34]
New Cmdlets: Including Out-GridView, which displays tabular data in the WPF GridView object.
New Operators: -Split, -Join, and Splatting (@) operators.
Exception Handling with Try-Catch-Finally: Unlike other .NET languages, this allows multiple exception types for a single catch block.
Nestable Here-Strings: PowerShell Here-Strings have been improved and can now nest.[35]
New APIs: The new APIs range from handing more control over the PowerShell parser and runtime to the host, to creating and managing collection of Runspaces (RunspacePools) as well as the ability to create Restricted Runspaces which only allow a configured subset of PowerShell to be invoked. The new APIs also support participation in a Windows PowerShell managed transaction.


[edit] Cmdlets
The following table contains a selection of the more than 129 Cmdlets that ship with PowerShell as well as the equivalent commands in other command line interpreters.


Windows PowerShell
(Cmdlet)
Windows PowerShell
(Alias)
cmd.exe / COMMAND.COM
(MS-DOS, Windows, OS/2, etc.)
Bash
(Unix, BSD, Linux, Mac OS X etc.)
Description


Get-Location
gl, pwd
cd
pwd
Display the current directory


Set-Location
sl, cd, chdir
cd, chdir
cd
Change the current directory


Clear-Host
cls, clear
cls
clear
Clear the screen[36]


Copy-Item
cpi, copy, cp
copy
cp
Copy one or several files / a whole directory tree


Get-Help
help, man
help
man
Help on commands


Remove-Item
ri, del, erase, rmdir, rd, rm
del, erase, rmdir, rd
rm, rmdir
Delete a file / a directory


Rename-Item
rni, ren
ren, rename
mv
Rename a file / a directory


Move-Item
mi, move, mv
move
mv
Move a file / a directory to a new location


Get-ChildItem
gci, dir, ls
dir
ls
List all files / directories in the (current) directory


Write-Output
echo, write
echo
echo
Print strings, variables etc. to standard output


Pop-Location
popd
popd
popd
Change the current directory to the directory most recently pushed onto the stack


Push-Location
pushd
pushd
pushd
Push the current directory onto the stack


Set-Variable
sv, set
set
set
Set the value of a variable / create a variable


Get-Content
gc, type, cat
type
cat
Get the content of a file


Select-String

findstr
grep
Print lines matching a pattern


Get-Process
gps, ps
tlist,[37] tasklist[38]
ps
List all currently running processes


Stop-Process
spps, kill
kill,[37] taskkill[38]
kill
Stop a running process


Tee-Object
tee
n/a
tee
Pipe input to a file or variable, then pass the input along the pipeline



[edit] Reception
Public reception of Windows PowerShell 1.0 has been positive.
eWeek judged Windows PowerShell to be #7 of the top 10 best products Microsoft has ever shipped.[39]
Dr. Dobb's Journal concludes:


“
For administrators, PowerShell provides efficient, powerful access to key indicators of the operating system. […] For developers, PowerShell is helpful in SQL scripting or developing DLLs. The concepts and cmdlets of PowerShell offer new ways to work with old information. […] PowerShell is flexible, extensible, and easily integrated.[40]
”


The popular IT magazine Computerworld states:


“
Windows has never enjoyed the powerful shell scripting environments that its Unix rivals have long included. That's changed now with the inclusion of PowerShell […] in Windows Server 2008 and a passel of other Microsoft server products as well. Finally, Windows has a classy, robust and powerful solution that can access just about every part of the operating system.[41]
”


The SANS Technology Institute affirms:


“
Unlike the CMD shell's meager batch language, PowerShell's scripting language supports a large variety of flow-control elements, type casting, functions, full-featured arrays, object reference variables, default variables in flow-control blocks, regular expressions, and other constructs often associated only with UNIX shells like bash and ksh. At first glance, the PowerShell language looks somewhat similar to Perl or C#, but it's not even half as difficult to learn.[42]
”


In his Windows Server 2008 review technology reporter and editor of the popular SuperSite for Windows Paul Thurrott states:


“
PowerShell is a complex but technically impressive environment, with support for discoverable .NET-based objects, properties, and methods. It provides all of the power of UNIX command line environments with none of the inconsistencies.[43]
”


According to Microsoft, PowerShell has had almost a million downloads in its first six months.[44] There is also a growing list of products that are shipping with PowerShell support.

[edit] Examples
Examples are provided first using the long-form canonical syntax and then using more terse UNIX-like and DOS-like aliases that are set up in the default configuration. Examples that could harm a system include the -whatif parameter to prevent them from actually executing

Stop all processes that begin with the letter "p":


 PS> get-process p* | stop-process -whatif


 PS> ps p* | kill -whatif


Find the processes that use more than 1000 MB of memory and kill them:


 PS> get-process | where-object { $_.WS -gt 1000MB } | stop-process -whatif


 PS> ps | ? { $_.WS -gt 1000MB } | kill -whatif


Calculate the number of bytes in the files in a directory:


 PS> get-childitem | measure-object -property length -sum


 PS> ls  | measure-object -p length -s


 PS> dir | measure-object -p length -s


Determine whether a specific process is no longer running:


 PS> $processToWatch = get-process notepad
 PS> $processToWatch.WaitForExit()


 PS> $p = ps notepad
 PS> $p.WaitForExit()


Change the case of a string from lower to upper:


 PS> "hello, world!".ToUpper()


Insert the string "ABC" after the first character in the word "string" to have the result "sABCtring":


 PS> "string".Insert(1, "ABC")


Download a specific RSS feed and show the titles of the 8 most recent entries:



PS> $rssUrl = "http://blogs.msdn.com/powershell/rss.aspx"
PS> $blog = [xml](new-object System.Net.WebClient).DownloadString($rssUrl)
PS> $blog.rss.channel.item | select title -first 8


Sets $UserProfile to the value of the UserProfile environment variable


 PS> $UserProfile = $env:UserProfile


[edit] File extensions

PS1 – Windows PowerShell shell script
PS1XML – Windows PowerShell format and type definitions
PSC1 – Windows PowerShell console file
PSD1 – Windows PowerShell data file
PSM1 – Windows PowerShell module file (for Version 2)


[edit] Application support

[edit] SnapIns and Hosts


Application
Version
Cmdlets
Provider
Management GUI


Exchange Server
2007
402
Yes
Yes


Windows Server
2008
Yes
Yes
No


Microsoft SQL Server
2008
Yes
Yes
No


System Center Operations Manager
2007
74
Yes
No


System Center Virtual Machine Manager
2007
Yes
Yes
Yes


System Center Data Protection Manager
2007
Yes
No
No


Windows Compute Cluster Server
2007
Yes
Yes
No


Microsoft Transporter Suite for Lotus Domino[45]
08.02.0012
47
No
No


Microsoft PowerTools for Open XML[46]
1.0
33
No
No


IBM WebSphere MQ[47]
6.0.2.2
44
No
No


Quest Management Shell for Active Directory[48]
1.1
40
No
No


Special Operations Software Specops Command[49]
1.0
Yes
No
Yes


VMware Infrastructure Toolkit[50]
1.5
157
No
No


Internet Information Services[51]
7.0
54
Yes
No


Ensim Unify Enterprise Edition[52]
1.6
Yes
No
Yes



[edit] Other

SAPIEN Technologies ActiveX PowerShell (ActiveXPosh) — An ActiveX COM component that allows creating a PowerShell host and use cmdlets and scripts from within COM-compatible scripting languages such as VBScript, JScript and KiXtart.[53]


Sense/Net 6.0 A currently beta open source implementation of a .NET based Enterprise Content Management System accessible from PowerShell, information availbale from the Sense/Net development blog


[edit] See also

Comparison of command shells
Comparison of programming languages
Web-Based Enterprise Management
Common Information Model
Windows Script Host


[edit] References


^ a b igor.moochnick - Pash
^ Jsnover @ Wikipedia: Generational list of programming languages
^ Windows PowerShell : PowerShell and WPF: WTF
^ a b c d e "How Windows PowerShell works". MSDN. http://msdn2.microsoft.com/en-us/library/ms714658.aspx. Retrieved on 2007-11-27. 
^ "Extend Windows PowerShell With Custom Commands". MSDN. http://msdn.microsoft.com/msdnmag/issues/07/12/PowerShell/default.aspx. Retrieved on 2007-11-27. 
^ "Exchange 2007: Get used to the command line". Tech Republic. http://articles.techrepublic.com.com/5100-10878_11-6147304.html. Retrieved on 2007-11-28. 
^ "SQL Server Support for PowerShell!". http://blogs.msdn.com/powershell/archive/2007/11/13/sql-server-support-for-powershell.aspx. Retrieved on 2007-11-28. 
^ Dragan, Richard V. (April 23, 2003). "Windows Server 2003 Delivers Improvements All Around". PC Magazine. http://www.pcmag.com/article2/0,2704,1040410,00.asp. Retrieved on 2007-11-02.  "A standout feature here is that virtually all admin utilities now work from the command line (and most are available through telnet)." 
^ Snover, Jeffrey (April 25, 2006). "Windows PowerShell (Monad) Has Arrived". Windows PowerShell team blog. MSDN. http://blogs.msdn.com/powershell/archive/2006/04/25/583344.aspx. Retrieved on 2006-04-26. 
^ Snover, Jeffrey (November 15, 2006). "Windows PowerShell : Windows PowerShell & Windows Vista". Windows PowerShell team blog. MSDN. http://blogs.msdn.com/powershell/archive/2006/11/15/windows-powershell-windows-vista.aspx. Retrieved on 2007-01-26. 
^ Hansen, Kenneth (November 6, 2007). "The Community Technology Preview (CTP) of Windows PowerShell 2.0". Windows PowerShell team blog. MSDN. http://blogs.msdn.com/powershell/archive/2007/11/06/the-community-technology-preview-ctp-of-windows-powershell-2-0.aspx. Retrieved on 2007-11-06. 
^ "Rethinking the Pipeline". http://www.microsoft.com/technet/technetmag/issues/2007/07/PowerShell/default.aspx. Retrieved on 2007-11-28. 
^ "Windows PowerShell Object Concepts". http://msdn2.microsoft.com/en-us/library/aa347685.aspx. Retrieved on 2007-11-28. 
^ "How PowerShell Formatting and Outputting REALLY works". http://blogs.msdn.com/powershell/archive/2006/04/30/586973.aspx. Retrieved on 2007-11-28. 
^ "More - How does PowerShell formatting really work?". http://blogs.msdn.com/powershell/archive/2006/06/21/641738.aspx. Retrieved on 2007-11-28. 
^ "Windows PowerShell Extended Type System". http://msdn2.microsoft.com/en-us/library/ms714419.aspx. Retrieved on 2007-11-28. 
^ a b c "Windows PowerShell Cmdlets". http://msdn2.microsoft.com/en-us/library/ms714395.aspx. Retrieved on 2007-11-28. 
^ "Creating Your First Cmdlet". http://msdn2.microsoft.com/en-us/library/ms714622.aspx. Retrieved on 2007-11-28. 
^ "Adding parameters That Process Command Line Input". http://msdn2.microsoft.com/en-us/library/ms714663.aspx. Retrieved on 2007-11-28. 
^ "Adding parameters That Process Pipeline Input". http://msdn2.microsoft.com/en-us/library/ms714597.aspx. Retrieved on 2007-11-28. 
^ "Windows PowerShell Providers". http://msdn2.microsoft.com/en-us/library/ms714460.aspx. Retrieved on 2007-11-28. 
^ "Introduction to Windows PowerShell's Variables". http://www.computerperformance.co.uk/powershell/powershell_variables.htm. Retrieved on 2007-11-28. 
^ "Functions in PowerShell". http://mspowershell.blogspot.com/2006/11/functions-in-powershell.html. Retrieved on 2007-11-28. 
^ "Calling a Function with Parameters". http://weblogs.asp.net/soever/archive/2006/11/29/powershell-calling-a-function-with-parameters.aspx. Retrieved on 2007-11-28. 
^ a b "Lightweight Testing with Windows PowerShell". http://msdn.microsoft.com/msdnmag/issues/07/05/TestRun/default.aspx. Retrieved on 2007-11-28. 
^ "Trap [Exception] { “In PowerShell” }". http://huddledmasses.org/trap-exception-in-powershell. Retrieved on 2007-11-28. 
^ "Running Windows PowerShell Scripts". http://www.microsoft.com/technet/scriptcenter/topics/winpsh/manual/run.mspx. Retrieved on 2007-11-28. 
^ "Windows PowerShell V2 Community Technology Preview 3 (CTP3)". http://www.microsoft.com/downloads/details.aspx?familyid=C913AEAB-D7B4-4BB1-A958-EE6D7FE307BC&displaylang=en. 
^ http://blogs.msdn.com/powershell/archive/2008/10/28/powershell-will-be-installed-by-default-on-windows-server-08-r2-ws08r2-and-windows-7-w7.aspx
^ http://blogs.msdn.com/powershell/archive/2008/10/29/574-reasons-why-we-are-so-proud-and-optimistic-about-w7-and-ws08r2.aspx
^ http://channel9.msdn.com/pdc2008/ES24/
^ "What's New in CTP of PowerShell 2.0". http://blogs.msdn.com/powershell/archive/2007/11/06/what-s-new-in-ctp-of-powershell-2-0.aspx. Retrieved on 2007-11-28. 
^ "Windows PowerShell V2 Community Technology Preview 2 (CTP2) - releaseNotes". http://www.microsoft.com/downloads/details.aspx?FamilyId=7C8051C2-9BFC-4C81-859D-0864979FA403&displaylang=en. Retrieved on 2008-05-05. 
^ http://blogs.msdn.com/powershell/archive/2008/10/14/gogrid-snap-in-managing-cloud-services-with-powershell.aspx
^ http://blogs.msdn.com/powershell/archive/2008/10/18/emit-xml.aspx
^ Clear-Host is implemented as a predefined PowerShell function.
^ a b Available in Windows NT4, Windows 98 Resource Kit, Windows 2000 Support Tools
^ a b Available in Windows XP Professional Edition and later
^ Page 9 - The Best and Worst Microsoft Products - Security
^ Windows PowerShell
^ PowerShell Tips and Tricks
^ What is Windows PowerShell?
^ Windows Server 2008 Review
^ PowerShell Hits a Million Downloads in the First Six Months
^ "Microsoft Transporter Suite for Lotus Domino". http://www.microsoft.com/downloads/details.aspx?familyid=35fc4205-792b-4306-8e4b-0de9cce72172&displaylang=en. Retrieved on 2008-03-07. 
^ "PowerTools for Open XML". http://www.codeplex.com/PowerTools. Retrieved on 2008-06-20. 
^ "MO74: WebSphere MQ - Windows Powershell Library". http://www-1.ibm.com/support/docview.wss?rs=171&uid=swg24017698. Retrieved on 2007-12-05. 
^ "PowerShell Commands for Active Directory by Quest Software". http://www.quest.com/powershell/activeroles-server.aspx. Retrieved on 2008-07-02. 
^ "PowerShell Remoting through Group Policy". http://www.specopssoft.com/powershell/. Retrieved on 2007-12-07. 
^ "VMware Infrastructure Toolkit for Windows". http://www.vmware.com/sdk/vitk_win/. Retrieved on 2008-10-10. 
^ "Windows PowerShell : IIS7 PowerShell Provider Tech Preview 2". http://blogs.msdn.com/powershell/archive/2008/07/03/iis7-powershell-provider-tech-preview-2.aspx. Retrieved on 2008-07-03. 
^ "Exchange Manager for 2003 and 2007". http://www.ensim.com/products/ensim_unify/unify_enterprise_edition/Microsoft_Exchange_Management.html. Retrieved on 2008-04-23. 
^ http://support.sapien.com/bulletins/activexposh.pdf



[edit] Books

Ford, Jerry Lee Jr. Microsoft Windows Powershell Programming for the Absolute Beginner. ISBN 1-59863-354-6. http://www.course.com/catalog/product.cfm?isbn=978-1-59863-354-2. 
Holmes, Lee. Windows PowerShell Quick Reference. ISBN 0-596-52813-2. http://www.oreilly.com/catalog/windowspowershell/. 
Holmes, Lee. Windows PowerShell Cookbook. ISBN 0-596-52849-3. http://www.oreilly.com/catalog/9780596528492/index.html. 
Johnson, Willis. Scripting SQL Management Objects in Windows PowerShell. ISBN 978-0-470-27935-9. http://www.wrox.com/WileyCDA/WroxTitle/Scripting-SQL-Management-Objects-in-Windows-PowerShell.productCd-0470279354.html. 
Jones, Don. Windows PowerShell: TFM. ISBN 0-9776597-2-0. http://www.scriptingoutpost.com/ProductInfo.aspx?productid=BK-TFM-PSH. 
Kopczynski, Tyson. Windows PowerShell Unleashed. ISBN 0672329530. http://www.informit.com/title/0672329530. 
Kumaravel, Arul; Jon White, Michael Naixin Li, Scott Happell, Guohui Xie, Krishna C. Vutukuri. Professional Windows PowerShell Programming: Snapins, Cmdlets, Hosts and Providers. ISBN 0-470-17393-9. http://www.wrox.com/WileyCDA/WroxTitle/productCd-0470173939.html. 
Oakley, Andy. Monad (AKA PowerShell). ISBN 0-596-10009-4. http://www.oreilly.com/catalog/powershell/. 
Payette, Bruce. Windows PowerShell in Action. ISBN 1-932394-90-7. http://www.manning.com/payette/. 
Watt, Andrew. Professional Windows PowerShell. ISBN 0-471-94693-1. http://www.wrox.com/WileyCDA/WroxTitle/productCd-0471946931.html. 
Wilson, Ed. Microsoft Windows PowerShell Step By Step. ISBN 0-7356-2395-3. http://www.microsoft.com/MSPress/books/10329.aspx. 
Tyson Kopczynski, Pete Handley, Marco Shaw. Windows PowerShell Unleashed. ISBN 978-0672329883. http://www.informit.com/title/0672329883. 


[edit] External links

PowerShell homepage
Windows PowerShell Team Blog
Scripting with Windows PowerShell
Monad Manifesto - The Origin of Windows PowerShell
Channel9 Interviews/Demos with Jeffrey Snover - the Architect of Windows PowerShell
Windows PowerShell and the “PowerShell Worm” - an analysis, by Leonard Chung of the Windows PowerShell Team, of the "PowerShell Worm" and a walkthrough of Windows PowerShell's security features and how they strongly reduce the risk of scripting malware.


[edit] 3rd-party tools

sudo for Powershell - run specific commands as an administrator on Windows Vista
PowerShell Community Extensions
PrimalScript 2007 General scripting IDE with PowerShell support and debugger
PowerGUI Extensible graphical administrative console for managing systems based on Windows PowerShell.
Powershell.com - Powershell Analyzer and Powershell Plus - Powershell Hosting, Editor and Debugging Products.
Specops Command Software which combines PowerShell with Group Policy for computer group administration.


[edit] PowerShell providers

S3Nas PowerShell Provider - S3Nas Amazon S3 PowerShell Provider
PowerShell SharePoint Provider - PowerShell SharePoint Provider
OneNote PowerShell Provider - OneNote PowerShell Provider
Windows Mobile PowerShell Provider - Windows Mobile PowerShell Provider








v • d • e

Windows components





Core

Aero · AutoRun · ClearType · Desktop Window Manager · DirectX · Explorer · Taskbar · Start menu · Shell (namespace · Special Folders · File associations) · Search (Saved search · iFilters) · Graphics Device Interface · Imaging Format · .NET Framework · Server Message Block  · XML Paper Specification · Active Scripting (WSH · VBScript · JScript) · COM (OLE · OLE Automation · DCOM · ActiveX · ActiveX Document · Structured storage · Transaction Server) · Previous Versions · Win32 console






Management
tools

Backup and Restore Center · command.com · cmd.exe · Control Panel (Applets) · Device Manager · Disk Cleanup · Disk Defragmenter · Driver Verifier · Event Viewer · Management Console · Netsh · Problem Reports and Solutions · Sysprep · System Policy Editor · System Configuration · Task Manager · System File Checker · System Restore · Windows Installer · PowerShell · Windows Update · WAIK · WinSAT · Windows Easy Transfer






Applications

Calculator · Calendar · Character Map · Contacts · DVD Maker · Fax and Scan · Internet Explorer · Journal · Mail · Magnifier · Media Center · Media Player · Meeting Space · Mobile Device Center · Mobility Center · Movie Maker · Narrator · Notepad · Paint · Photo Gallery · Private Character Editor · Remote Assistance · Sidebar · Snipping Tool · Sound Recorder · Speech Recognition · WordPad






Games

Chess Titans · FreeCell · Hearts · Hold 'Em · InkBall · Mahjong Titans · Minesweeper · Purble Place · Solitaire · Spider Solitaire  · Tinker






Kernel

Ntoskrnl.exe · hal.dll · System Idle Process · Svchost.exe · Registry · Windows service · Service Control Manager · DLL · EXE · NTLDR / Boot Manager · Winlogon · Recovery Console · I/O · WinRE · WinPE · Kernel Patch Protection






Services

BITS · Task Scheduler · Wireless Zero Configuration · Shadow Copy · Error Reporting · Multimedia Class Scheduler · CLFS






File systems

NTFS (Hard link · Junction point · Mount Point · Reparse point · Symbolic link · TxF · EFS) · FAT32·FAT16·FAT12 · exFAT · CDFS · UDF · DFS · IFS






Server

Domains · Active Directory · DNS · Group Policy · Roaming user profiles · Folder redirection · Distributed Transaction Coordinator · MSMQ · Windows Media Services · Rights Management Services · IIS · Terminal Services · WSUS · Windows SharePoint Services · Network Access Protection · DFS Replication · Remote Differential Compression · Print Services for UNIX · Remote Installation Services · Windows Deployment Services · System Resource Manager · Hyper-V






Architecture

NT series architecture · Object Manager · Startup process (Vista) · I/O request packets · Kernel Transaction Manager · Logical Disk Manager · Security Accounts Manager · Windows Resource Protection · LSASS · CSRSS · SMSS · MinWin






Security

UAC · BitLocker · Defender · DEP · Protected Media Path · Mandatory Integrity Control · UIPI · Windows Firewall · Security Center






Compatibility

Unix subsystem (Microsoft POSIX  · Interix) · Virtual DOS machine · Windows on Windows · WOW64













v • d • e

Windows command line programs and builtins (more)





File system
(basic)

attrib · cd · chdir · copy · del · deltree · dir · erase · expand · fdisk · format · makecab · md · mkdir · mklink · mountvol · move · ntbackup · rd · rename · ren · rmdir · robocopy · sfc · sys · type · xcopy






File system
(advanced)

assoc · cacls · chkdsk · chkntfs · comp · compact · convert · defrag · diskcomp · diskcopy · diskpart · fc · fixboot · fixmbr · fsutil · ftype · icacls · label · recover · reg · regsvr32 · replace · rsm · subst · tree · verify · vol · vssadmin






Processes

at · exit · kill · schtasks · start · sc · shutdown · taskkill · tasklist · tlist






User environment

append · chcp · color · date · finger · graftabl · mode · path · popd · pushd · runas · set · setver · setx · systeminfo · time · title · ver · whoami






Text processing

edit · edlin · more · sort






Shell programming

break · call · cmd · command · cscript · doskey · echo · endlocal · for · goto · if · pause · powershell · prompt · rem · setlocal · shift · forfiles · choice






Networking

arp · atmadm · cmstp · ftp · getmac · hostname · ipconfig · nbtstat · net · netsh · netstat · nslookup · pathping · ping · rcp · rexec · route · rsh · tcmsetup · telnet · tftp · tracert






Searching

find · findstr






Miscellaneous

bcdedit · bootcfg · cls · help · print · debug · exe2bin · lpq · lpr · msiexec · pentnt · w32tm · wmic













v • d • e

.NET Framework





Architecture

Base Class Library · Common Language Runtime · Code Access Security · Assembly · Metadata · COM Interop






Common Language
Infrastructure (CLI)

Common Language Infrastructure · Common Type System · Common Intermediate Language · Virtual Execution System






CLI Languages





Common1


C# · Visual Basic .NET · C++/CLI (Managed) · F#  · J#  · JScript .NET · Windows PowerShell







Other2


A# · Boo · M · Oxygene  · IronLisp · IronPython · IronRuby · IronScheme · Nemerle · Phalanger · P#









Components

ADO.NET (Entity Framework · Data Services) · ASP.NET (AJAX · MVC · Dynamic Data) · Language Integrated Query · CardSpace · ClickOnce · Communication Foundation · Dynamic Language Runtime · Forms · Presentation Foundation · Remoting · Workflow Foundation  · XAML






Other implementations

Mono · Compact Framework · XNA Framework · Micro Framework · Portable.NET · Silverlight · SSCLI






Comparisons

Java and C# · C# and Visual Basic .NET · Java and .NET platforms






Upcoming

"Acropolis" · "Jasper" · Parallel Extensions






1 Languages that are, will be, or have been included with Visual Studio or Microsoft Windows.
2 Non-academic or research languages with relatively large user-bases.












v • d • e

Microsoft APIs and frameworks





Graphics

Desktop Window Manager · Direct2D · Direct3D (extensions)  · GDI / GDI+ · WPF · Windows Color System · Windows Image Acquisition · Windows Imaging Component






Audio

DirectMusic · DirectSound · DirectX plugin · XACT · Speech API






Multimedia

DirectX · (Media Objects · Video Acceleration) · DirectInput · DirectPlay · DirectShow · Image Mastering API · Managed DirectX · Media Foundation · XNA · Windows Media






Web

MSHTML · RSS Platform · JScript · VBScript · BHO · XDR · SideBar Gadgets






Data access

Data Access Components · Extensible Storage Engine · ADO.NET · ADO.NET Entity Framework · Sync Framework · Jet Engine · MSXML · OLE DB






Networking

Winsock (LSP) · Winsock Kernel · Filtering Platform · Network Driver Interface Specification · Windows Rally · BITS · P2P API · MSMQ · MS MPI






Communication

Messaging API · Telephony API







Administration and
management


Win32 console · Windows Script Host · WMI (extensions) · PowerShell · Task Scheduler · Offline Files · Shadow Copy · Windows Installer · Error Reporting · Event Log · Common Log File System






Component model

COM · COM+ · ActiveX · Distributed Component Object Model · .NET Framework






Libraries

Microsoft Foundation Classes (MFC) · Active Template Library (ATL) · Windows Template Library (WTL)






Device drivers

Windows Driver Model  · Windows Driver Foundation (KMDF · UMDF) · WDDM · NDIS · UAA · Broadcast Driver Architecture  · VxD






Security

Crypto API (CAPICOM) · Windows CardSpace · Data protection API · Security Support Provider Interface (SSPI)






.NET

ASP.NET · ADO.NET · Remoting · Silverlight · TPL · WCF · WCS · WPF · WF






Software factories

EFx Factory · Enterprise Library · Composite UI · CCF · CSF






IPC

MSRPC · Dynamic Data Exchange (DDE)






Accessibility

Active Accessibility · UI Automation







Text and multilingual
support


Text Services Framework · Text Object Model · Input method editor · Language Interface Pack · Multilingual User Interface · Uniscribe









Retrieved from "http://en.wikipedia.org/wiki/Windows_PowerShell"
Categories: Upcoming software | .NET programming languages | Curly bracket programming languages | Dynamically-typed programming languages | Interpreters (computing) | Windows administration | Object-oriented programming languages | Procedural programming languages | Scripting languages | Text-oriented programming languages | Command shells 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Deutsch
Español
Français
한국어
Bahasa Indonesia
Italiano
Nederlands
日本語
Polski
Português
Русский
Suomi
Українська
中文









 This page was last modified on 6 April 2009, at 06:35.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
