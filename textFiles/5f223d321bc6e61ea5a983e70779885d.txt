













JavaScript - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "JavaScript";
		var wgTitle = "JavaScript";
		var wgAction = "view";
		var wgArticleId = "9845";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281443698;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-html4strict {line-height: normal;}
.source-html4strict li, .source-html4strict pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for html4strict
 * CSS class: source-html4strict, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-html4strict .de1, .source-html4strict .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-html4strict  {}
.source-html4strict .head {}
.source-html4strict .foot {}
.source-html4strict .imp {font-weight: bold; color: red;}
.source-html4strict .ln-xtra {color: #cc0; background-color: #ffc;}
.source-html4strict li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-html4strict li.li2 {font-weight: bold;}
.source-html4strict .kw1 {color: #b1b100;}
.source-html4strict .kw2 {color: #000000; font-weight: bold;}
.source-html4strict .kw3 {color: #000066;}
.source-html4strict .coMULTI {color: #808080; font-style: italic;}
.source-html4strict .es0 {color: #000099; font-weight: bold;}
.source-html4strict .br0 {color: #66cc66;}
.source-html4strict .st0 {color: #ff0000;}
.source-html4strict .nu0 {color: #cc66cc;}
.source-html4strict .sc0 {color: #00bbdd;}
.source-html4strict .sc1 {color: #ddbb00;}
.source-html4strict .sc2 {color: #009900;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); JavaScript

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
Not to be confused with Java (programming language).

JavaScript

Paradigm
Multi-paradigm: prototype-based, functional, imperative, scripting


Appeared in
1995


Designed by
Brendan Eich


Developer
Netscape Communications Corporation, Mozilla Foundation[verification needed]


Latest release
1.8/ 2008


Typing discipline
dynamic, weak, duck


Major implementations
SpiderMonkey, Rhino, KJS, JavaScriptCore, V8


Dialects
JScript, JScript .NET


Influenced by
Self, C, Scheme, Perl, Python, Java


Influenced
Objective-J




This article is part of
the JavaScript series.



JavaScript


JavaScript syntax


ECMAScript


JavaScript topics



This box: view • talk • edit



JavaScript is a scripting language used to enable programmatic access to objects within other applications. It is primarily used in the form of client-side JavaScript for the development of dynamic websites. JavaScript is a dialect of the ECMAScript standard and is characterized as a dynamic, weakly typed, prototype-based language with first-class functions. JavaScript was influenced by many languages and was designed to look like Java, but be easier for non-programmers to work with.[1][2]
JavaScript, despite the name, is essentially unrelated to the Java programming language even though the two do have superficial similarities. Both languages use syntaxes influenced by that of C syntax, and JavaScript copies many Java names and naming conventions. The language's name is the result of a co-marketing deal between Netscape and Sun, in exchange for Netscape bundling Sun's Java runtime with their then-dominant browser. The key design principles within JavaScript are inherited from the Self and Scheme programming languages.[3]
"JavaScript" is a trademark of Sun Microsystems. It was used under license for technology invented and implemented by Netscape Communications and current entities such as the Mozilla Foundation.[4]




Contents


1 History and naming
2 Features

2.1 Imperative and structured
2.2 Dynamic
2.3 Functional
2.4 Prototype-based
2.5 Miscellaneous


3 Syntax and semantics
4 Use in web pages

4.1 Compatibility considerations
4.2 Security

4.2.1 Cross-site vulnerabilities
4.2.2 Misplaced trust in the client
4.2.3 Browser and plugin coding errors
4.2.4 Sandbox implementation errors




5 Uses outside web pages
6 Debugging
7 Versions
8 Related languages

8.1 JavaScript and Java


9 See also
10 References
11 Bibliography
12 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History and naming
JavaScript was originally developed by Brendan Eich of Netscape under the name Mocha, which was later renamed to LiveScript, and finally to JavaScript.[5] The change of name from LiveScript to JavaScript roughly coincided with Netscape adding support for Java technology in its Netscape Navigator web browser. JavaScript was first introduced and deployed in the Netscape browser version 2.0B3 in December 1995. The naming has caused confusion, giving the impression that the language is a spin-off of Java, and it has been characterized by many as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new web-programming language.[6][7]
Due to the widespread success of JavaScript as a client-side scripting language for web pages, Microsoft developed a compatible dialect of the language, naming it JScript to avoid trademark issues. JScript added new date methods to fix the non-Y2K-friendly methods in JavaScript, which were based on java.util.Date.[2] JScript was included in Internet Explorer 3.0, released in August 1996. The dialects are perceived to be so similar that the terms "JavaScript" and "JScript" are often used interchangeably. Microsoft, however, notes dozens of ways in which JScript is not ECMA compliant.
Netscape submitted JavaScript to Ecma International for standardization resulting in the standardized version named ECMAScript.[8]
The flexibility of JavaScript has made it one of the most popular programming languages on the web and also one of the easier languages to learn. Initially, however, many professional programmers denigrated the language because its target audience was web authors and other such "amateurs", among other reasons.[9] The advent of AJAX returned JavaScript to the spotlight and brought more professional programming attention. The result was a proliferation of comprehensive frameworks and libraries, improved JavaScript programming practices, and increased usage of JavaScript outside of the web.[citation needed]

[edit] Features

[edit] Imperative and structured
JavaScript supports all the structured programming syntax in C (e.g., if statements, while loops, switch statements, etc.). One partial exception is scoping: C-style block-level scoping is not supported. JavaScript 1.7, however, supports block-level scoping with the let keyword. Like C, JavaScript makes a distinction between expressions and statements.

[edit] Dynamic

dynamic typing
As in most scripting languages, types are associated with values, not variables. For example, a variable x could be bound to a number, then later rebound to a string. JavaScript supports various ways to test the type of an object, including duck typing.[10]
objects as associative arrays
JavaScript is almost entirely object-based. Objects are associative arrays, augmented with prototypes (see below). Object property names are associative array keys: obj.x = 10 and obj["x"] = 10 are equivalent, the dot notation being merely syntactic sugar. Properties and their values can be added, changed, or deleted at run-time. The properties of an object can also be enumerated via a for...in loop.
run-time evaluation
JavaScript includes an eval function that can execute statements provided as strings at run-time.


[edit] Functional

first-class functions
Functions are first-class; they are objects themselves. As such, they have properties and can be passed around and interacted with like any other object.
inner functions and closures
Inner functions (functions defined within other functions) are created each time the outer function is invoked, and variables of the outer functions for that invocation continue to exist as long as the inner functions still exist, even after that invocation is finished (e.g. if the inner function was returned, it still has access to the outer function's variables) — this is the mechanism behind closures within JavaScript.


[edit] Prototype-based

prototypes
JavaScript uses prototypes instead of classes for defining object properties, including methods, and inheritance. It is possible to simulate many class-based features with prototypes in JavaScript.
functions as object constructors
Functions double as object constructors along with their typical role. Prefixing a function call with new creates a new object and calls that function with its local this keyword bound to that object for that invocation. The function's prototype property determines the new object's prototype.
functions as methods
Unlike many object-oriented languages, there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling; a function can be called as a method. When a function is invoked as a method of an object, the function's local this keyword is bound to that object for that invocation.


[edit] Miscellaneous

run-time environment
JavaScript typically relies on a run-time environment (e.g. in a web browser) to provide objects and methods by which scripts can interact with "the outside world". In fact, it relies on the environment to provide the ability to include/import scripts (e.g. HTML <script> elements). (This is not a language feature per se, but it is common in most JavaScript implementations.)
variadic functions
An indefinite number of parameters can be passed to a function. The function can both access them through formal parameters and the local arguments object.
array and object literals
Like many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format.
regular expressions
JavaScript also supports regular expressions in a manner similar to Perl, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.


[edit] Syntax and semantics
Main article: JavaScript syntax
As of 2008, the latest version of the language is JavaScript 1.8. It is a superset of ECMAScript (ECMA-262) Edition 3. Extensions to the language, including partial E4X (ECMA-357) support and experimental features considered for inclusion into ECMAScript Edition 4, are documented here.
Sample code:


function LCMCalculator(x, y) { // constructor function
    function checkInt(x) { // inner function
        if (x % 1 != 0)
            throw new TypeError(x + " is not an integer"); // exception throwing
        return x;
    }
    this.a = checkInt(x);
    this.b = checkInt(y);
    this.ab = this.a * this.b;
}
LCMCalculator.prototype = { // object literal for constructor's prototype
    gcd : function() {
        // Euclidean algorithm:
        var a = Math.abs(this.a), b = Math.abs(this.b);
        if (a < b) {
            var t = b; b = a; a = t; // swap variables
        }
        while (b != 0) {
            t = b; // |t| already declared above (though we could redeclare if we wish)
            b = a % b;
            a = t;
        }
        // Only need to calculate gcd once, so redefine this method.
        // 'gcd' == "gcd", this['gcd'] == this.gcd
        this['gcd'] = function() { return a; };
        return a;
    },
    lcm : function() {
        // Variable names don't collide with object properties, e.g. |lcm| is not |this.lcm|.
        var lcm = this.ab / this.gcd();
        // Only need to calculate lcm once, so redefine this method.
        this.lcm = function() { return lcm; };
        return lcm;
    },
    toString : function() {
        return "LCMCalculator: a = " + this.a + ", b = " + this.b;
    }
};
[[25,55],[21,56],[22,58],[28,56]].map(function(pair) { // array literal + mapping function
    return new LCMCalculator(pair[0], pair[1]);
}).sort(function(a, b) { // comparative function
    return a.lcm() - b.lcm();
}).forEach(function(obj) {
    /* Note: println() is not an actual JS function, but let's assume
     * it's functionally equivalent to Java's System.out.println().
     */
    println(obj + ", gcd = " + obj.gcd() + ", lcm = " + obj.lcm());
});
// Note: Array's map() and forEach() is predefined in JavaScript 1.6.

The output is:

LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56
LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168
LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275
LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638


[edit] Use in web pages
Main article: Client-side JavaScript
See also: Ajax (programming)
The primary use of JavaScript is to write functions that are embedded in or included from HTML pages and interact with the Document Object Model (DOM) of the page. Some simple examples of this usage are:

Opening or popping up a new window with programmatic control over the size, position, and attributes of the new window (i.e. whether the menus, toolbars, etc. are visible).
Validation of web form input values to make sure that they will be accepted before they are submitted to the server.
Changing images as the mouse cursor moves over them: This effect is often used to draw the user's attention to important links displayed as graphical elements.

Because JavaScript code can run locally in a user's browser (rather than on a remote server) it can respond to user actions quickly, making an application feel more responsive. Furthermore, JavaScript code can detect user actions which HTML alone cannot, such as individual keystrokes. Applications such as Gmail take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of Ajax programming similarly exploits this strength.
A JavaScript engine (also known as JavaScript interpreter or JavaScript implementation) is an interpreter that interprets JavaScript source code and executes the script accordingly. The first ever JavaScript engine was created by Brendan Eich at Netscape Communications Corporation, for the Netscape Navigator web browser. The engine, code-named SpiderMonkey, is implemented in C. It has since been updated (in JavaScript 1.5) to conform to ECMA-262 Edition 3. The Rhino engine, created primarily by Norris Boyd (formerly of Netscape; now at Google) is a JavaScript implementation in Java. Rhino, like SpiderMonkey, is ECMA-262 Edition 3 compliant.
The most common host environment for JavaScript is by far a web browser. Web browsers typically use the public API to create "host objects" responsible for reflecting the DOM into JavaScript. The web server is another common application of the engine. A JavaScript webserver would expose host objects representing an HTTP request and response objects, which a JavaScript program could then manipulate to dynamically generate web pages.
A minimal example of a web page containing JavaScript (using HTML 4.01 syntax) would be:


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<html>
  <head><title>simple page</title></head>
  <body>
    <script type="text/javascript">
      document.write('Hello World!');
    </script>
    <noscript>
      <p>Your browser either does not support JavaScript, or you have JavaScript turned off.</p>
    </noscript>
  </body>
</html>


[edit] Compatibility considerations
Main articles: Web Interoperability and Web accessibility
The DOM interfaces for manipulating web pages are not part of the ECMAScript standard, or of JavaScript itself. Officially, they are defined by a separate standardization effort by the W3C; in practice, browser implementations differ from the standards and from each other, and not all browsers execute JavaScript.
To deal with these differences, JavaScript authors can attempt to write standards-compliant code which will also be executed correctly by most browsers; failing that, they can write code that checks for the presence of certain browser features and behaves differently if they are not available.[11] In some cases, two browsers may both implement a feature but with different behavior, and authors may find it practical to detect what browser is running and change their script's behavior to match.[12][13] Programmers may also use libraries or toolkits which take browser differences into account.
Furthermore, scripts will not work for all users. For example, a user may:

use an old or rare browser with incomplete or unusual DOM support,
use a PDA or mobile phone browser which cannot execute JavaScript,
have JavaScript execution disabled as a security precaution,
or be visually or otherwise disabled and use a speech browser

To support these users, web authors can try to create pages which degrade gracefully on user agents (browsers) which do not support the page's JavaScript.

[edit] Security
JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the web. Browser authors contain this risk using two restrictions. First, scripts run in a sandbox in which they can only perform web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same origin policy: scripts from one web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.

[edit] Cross-site vulnerabilities
Main articles: Cross-site scripting and Cross-site request forgery
A common JavaScript-related security problem is cross-site scripting, or XSS, a violation of the same-origin policy. XSS vulnerabilities occur when an attacker is able to cause a target web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use HTML escaping whenever displaying untrusted data.
XSS vulnerabilities can also occur because of implementation mistakes by browser authors.[14]
Another cross-site vulnerability is cross-site request forgery or CSRF. In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user didn't intend at a target site (like transferring money at a bank). It works because, if the target site relies only on cookies to authenticate requests, then requests initiated by code on the attacker's site will carry the same legitimate login credentials as requests initiated by the user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.
"JavaScript hijacking" is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the attacker's site that returns private information as JSON or JavaScript. Possible solutions include requiring an authentication token in the POST and GET parameters for any response that returns private JSON (even if it has no side effects); using POST and never GET for requests that return private JSON; and modifying the response so that it can't be used via a <script> tag (by, for example, wrapping the JSON in a JavaScript comment).

[edit] Misplaced trust in the client
Client-server applications, whether they involve JavaScript or not, must recognize that untrusted clients may be under the control of attackers. Thus any secret embedded in JavaScript could be extracted by a determined adversary, and the application author can't assume that his JavaScript runs as intended, or at all. Some implications:

Web site authors cannot perfectly conceal how their JavaScript operates, because the code is sent to the client, and obfuscated code can be reverse engineered.
JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.
Scripts can be selectively disabled, so JavaScript can't be relied on to prevent operations such as "save image".[15]
It would be extremely bad practice to embed a password in JavaScript (where it can be extracted by an attacker), then have JavaScript verify a user's password and pass "password_ok=1" back to the server (since the "password_ok=1" response is easy to forge).[16]


[edit] Browser and plugin coding errors
JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts which would run any code they wish on the user's system.
These flaws have affected major browsers including Firefox[17], Internet Explorer[18], and Safari.[19]
Plugins, such as video players, Macromedia Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript, and such flaws have been exploited in the past.[20][21]
In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[22] Google Chrome similarly limits page renderers to an operating-system-enforced "sandbox."

[edit] Sandbox implementation errors
Web browsers are capable of running JavaScript outside of the sandbox, with the privileges necessary to, for example, create or delete files. Of course, such privileges aren't meant to be granted to code from the web.
Incorrectly granting privileges to JavaScript from the web has played a role in vulnerabilities in both Internet Explorer[23] and Firefox[24]. In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.[25]
Some versions of Microsoft Windows allow JavaScript stored on a computer's hard drive to run as a general-purpose, non-sandboxed program. This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[26] (See Windows Script Host.)

[edit] Uses outside web pages
Outside the web, JavaScript interpreters are embedded in a number of tools. Each of these applications provides its own object model which provides access to the host environment, with the core JavaScript language remaining mostly the same in each application.

ActionScript, the programming language used in Adobe Flash, is another implementation of the ECMAScript standard.
Apple's Dashboard Widgets, Microsoft's Gadgets, Yahoo! Widgets, Google Desktop Gadgets, Serence Klipfolio are implemented using JavaScript.
The Mozilla platform, which underlies Firefox and some other web browsers, uses JavaScript to implement the graphical user interface (GUI) of its various products.
Adobe's Acrobat and Adobe Reader (formerly Acrobat Reader) support JavaScript in PDF files.
Tools in the Adobe Creative Suite, including Photoshop, Illustrator, Dreamweaver and InDesign, allow scripting through JavaScript.
Microsoft's Active Scripting technology supports the JavaScript-compatible JScript as an operating system scripting language.
The Java programming language, in version SE 6 (JDK 1.6), introduced the javax.script package, including a JavaScript implementation based on Mozilla Rhino. Thus, Java applications can host scripts that access the application's variables and objects, much like web browsers host scripts that access the browser's Document Object Model (DOM) for a webpage.[27][28]
Newer versions of the Qt C++ toolkit include a QtScript module to interpret JavaScript, analogous to javax.script.[29]
The interactive music signal processing software Max/MSP released by Cycling '74, offers a JavaScript model of its environment for use by developers. It allows much more precise control than the default GUI-centric programming model.
Late Night Software's JavaScript OSA (aka JavaScript for OSA, or JSOSA), is a freeware alternative to AppleScript for Mac OS X. It is based on the Mozilla 1.5 JavaScript implementation, with the addition of a MacOS object for interaction with the operating system and third-party applications.[30]
ECMAScript was included in the VRML97 standard for scripting nodes of VRML scene description files.
Some high-end Philips universal remote panels, including TSU9600 and TSU9400, can be scripted using JavaScript.[31]
Sphere is an open source and cross platform computer program designed primarily to make role-playing games that use JavaScript as a scripting language.
Re-Animator Open source framework for developing 2D sprite based games using JavaScript and XML.
Adobe Integrated Runtime is a JavaScript runtime that allows developers to create desktop applications.
OpenOffice.org office application suite allows for JavaScript as one of its scripting languages.
Applications on the social network platform OpenSocial are implemented in JavaScript.
The client-side web development framework OpenLaszlo uses JavaScript.
Methabot is a web crawler that uses JavaScript as scripting language for custom filetype parsers and data extraction using E4X.


[edit] Debugging
Within JavaScript, access to a debugger becomes invaluable when developing large, non-trivial programs. Because there can be implementation differences between the various browsers (particularly within the Document Object Model) it is useful to have access to a debugger for each of the browsers a web application is being targeted at.
Currently, Internet Explorer, Firefox, Safari, and Opera all have script debuggers available for them.
Internet Explorer has three debuggers available for it: Microsoft Visual Studio is the richest of the three, closely followed by Microsoft Script Editor (a component of Microsoft Office[32]), and finally the free Microsoft Script Debugger which is far more basic than the other two. The free Microsoft Visual Web Developer Express provides a limited version of the JavaScript debugging functionality in Microsoft Visual Studio.
Web applications within Firefox can be debugged using the Firebug plug-in, or the older Venkman debugger, which also works with the Mozilla browser. Firefox also has a simpler built-in Error Console, which logs and evaluates JavaScript. It also logs CSS errors and warnings.
WebKit's Web Inspector includes a JavaScript debugger[33] on Macintosh and Windows[34] powering Apple's Safari.
Some debugging aids are themselves bits of JavaScript code built to run on the Web. JSlint scans code for violations of a standard coding style. Web development bookmarklets and Firebug Lite provide variations on the idea of the cross-browser JavaScript console.
There is a non-free tool called SplineTech JavaScript HTML Debugger.[35]
Since JavaScript is interpreted, loosely-typed, and may be hosted in varying environments, each incompatible with the others, a programmer has to take extra care to make sure the code executes as expected in as wide a range of circumstances as possible, and that functionality degrades gracefully when it does not.

[edit] Versions


Version
Release date
Equivalent to
Netscape
Navigator
Mozilla
Firefox
Internet
Explorer
Opera
Safari
Google
Chrome


1.0
March 1996

2.0

3.0





1.1
August 1996

3.0







1.2
June 1997

4.0-4.05







1.3
October 1998
ECMA-262 1st edition / ECMA-262 2nd edition
4.06-4.7x

4.0





1.4


Netscape
Server







1.5
November 2000
ECMA-262 3rd edition
6.0
1.0
5.5 (JScript 5.5),
6 (JScript 5.6),
7 (JScript 5.7),
8 (JScript 6)
6.0,
7.0,
8.0,
9.0




1.6
November 2005
1.5 + Array extras + Array and String generics + E4X

1.5


3.0, 3.1



1.7
October 2006
1.6 + Pythonic generators + Iterators + let

2.0


3.2, 4.0
1.0


1.8
June 2008
1.7 + Generator expressions + Expression closures

3.0






1.9

1.8 + New Features

3.1






The next major version of JavaScript, 2.0, will conform to ECMA-262 4th edition.[36]

[edit] Related languages
The standardization effort for JavaScript needed to avoid trademark issues, so the ECMA 262 standard calls the language ECMAScript, three editions of which have been published since the work started in November 1996.
Objective-J is a strict superset of JavaScript that adds traditional inheritance and Smalltalk/Objective-C style dynamic dispatch and optional pseudo-static typing to pure JavaScript.
Microsoft's VBScript, like JavaScript, can be run client-side in web pages. VBScript has syntax derived from Visual Basic and is only supported by Microsoft's Internet Explorer.
JSON, or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript.
JavaScript is also considered a functional programming language like Scheme and OCaml because it has closures and supports higher-order functions.[37]
Although JavaScript and Lua are not genealogically related, the two are semantically very similar despite apparent syntactical and implementational differences[citation needed].
Mozilla browsers currently support LiveConnect, a feature that allows JavaScript and Java to intercommunicate on the web. However, support for LiveConnect is scheduled to be phased out in the future.

[edit] JavaScript and Java
A common misconception is that JavaScript is similar or closely related to Java; this is not so. Both have a C-like syntax, are object-oriented, are typically sandboxed and are widely used in client-side Web applications, but the similarities end there. Java has static typing; JavaScript's typing is dynamic (meaning a variable can hold an object of any type and cannot be restricted). Java is loaded from compiled bytecode; JavaScript is loaded as human-readable code. C is their last common ancestor language.
Nonetheless, JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords are reserved in JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date classes are based on those from Java 1.0.[1][2]

[edit] See also



Wikibooks has a book on the topic of
Programming:JavaScript





ECMAScript
JavaScript syntax
Client-side JavaScript

AJAX
Dynamic HTML
Comparison of JavaScript frameworks


Server-side JavaScript
JSDoc
JSON
JSAN
Comparison of layout engines (ECMAScript)
Comparison of JavaScript-based source code editors



[edit] References


^ a b TechVision: Innovators of the Net: Brendan Eich and JavaScript
^ a b c Brendan's Roadmap Updates: Popularity
^ "ECMAScript Language Overview" (PDF). 2007-10-23. p.4. http://www.ecmascript.org/es4/spec/overview.pdf. 
^ "Sun Trademarks". Sun Microsystems. http://www.sun.com/suntrademarks/. Retrieved on 2007-11-08. 
^ InfoWorld: JavaScript creator ponders past, future
^ Programming languages used on the Internet and the World Wide Web (WWW)
^ O'Reilly - Safari Books Online - 0596101996 - JavaScript: The Definitive Guide, 5th Edition
^ Netscape Press Release
^ JavaScript: The World's Most Misunderstood Programming Language
^ Flanagan, David (2006). JavaScript: The Definitive Guide. O'Reilly Media. pp. 176–178. ISBN 0596101996. 
^ Peter-Paul Koch, Object detection
^ Peter-Paul Koch, Mission Impossible - mouse position
^ Peter-Paul Koch, Browser detect
^ MozillaZine, Mozilla Cross-Site Scripting Vulnerability Reported and Fixed
^ Right-click “protection”? Forget about it. 2008-06-17. ISSN 1797-1993. http://blog.anta.net/2008/06/17/right-click-%e2%80%9cprotection%e2%80%9d-forget-about-it/. Retrieved on 2008-06-17. 
^ For an example of this bad practice, see http://javascript.internet.com/passwords/
^ Mozilla Corporation, Buffer overflow in crypto.signText()
^ Paul Festa, CNet, Buffer-overflow bug in IE
^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files
^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability
^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow
^ Mike Friedman, Protected Mode in Vista IE7
^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame
^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005-41: Privilege escalation via DOM property overrides
^ Microsoft Corporation, Changes to Functionality in Microsoft Windows XP Service Pack 2: Part 5: Enhanced Browsing Security
^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K
^ http://java.sun.com/javase/6/webnotes/index.html#scripting javax.script release notes
^ Flanagan 5th Edition, Pp 214 et seq
^ Trolltech ASA, QtScript Module
^ AppleScript#Open_Scripting_Architecture
^ Koninklijke Philips Electronics NV, [1]
^ JScript development in Microsoft Office 11 (MS InfoPath 2003)
^ Introducing Drosera - Surfin' Safari
^ Bug tracker discussion on Drosera Windows support
^ SplineTech JavaScript HTML Debugger
^ Versions of JavaScript
^ The Little JavaScripter shows the relationship with Scheme in more detail.



[edit] Bibliography


McDuffie, Tina Spain (2003). JavaScript Concepts & Techniques: Programming Interactive Web Sites. Franklin, Beedle & Associates. ISBN 1-887-90269-4. 
McFarlane, Nigel (2003). Rapid Application Development with Mozilla. Prentice Hall Professional Technical References. ISBN 0-13-142343-6. 
Flanagan, David; Ferguson, Paula (2002). JavaScript: The Definitive Guide (4th Edition ed.). O'Reilly & Associates. ISBN 0-596-00048-0. 
Flanagan, David (2006). JavaScript: The Definitive Guide (5th Edition ed.). O'Reilly & Associates. ISBN 0-596-10199-6. 
Goodman, Danny; Markel, Scott (2003). JavaScript and DHTML Cookbook. O'Reilly & Associates. ISBN 0-596-00467-2. 
Goodman, Danny; Eich, Brendan (2001). JavaScript Bible. John Wiley & Sons. ISBN ISBN 0-7645-3342-8. 
Watt, Andrew H.; Watt, Jonathan A.; Simon, Jinjer L. (2002). Teach Yourself JavaScript in 21 Days. Pearson Education. ISBN 0-672-32297-8. 
Duffy, Scott (2003). How to do Everything with JavaScript. Osborne. ISBN 0-07-222887-3. 
Harris, Andy (2001). JavaScript Programming for the Absolute Beginner. Premier Press. ISBN 0-7615-3410-5. 
Burns, Joe; Growney, Andree S. (2001). JavaScript Goodies. Pearson Education. ISBN 0-7897-2612-2. 
Shelly, Gary B.; Cashman, Thomas J.; Dorin, William J.; Quasney, Jeffrey J. (2000). JavaScript: Complete Concepts and Techniques. Cambridge: Course Technology. ISBN 0-7895-6233-2. 
Heinle, Nick; Koman, Richard (1997). Designing with JavaScript. O'Reilly & Associates. ISBN 1-56592-300-6. 
Bhangal, Sham; Jankowski, Tomasz (2003). Foundation Web Design: Essential HTML, JavaScript, CSS, PhotoShop, Fireworks, and Flash. APress L. P.. ISBN 1-59059-152-6. 
Vander Veer, Emily A. (2004). JavaScript For Dummies (4th Edition ed.). Wiley Pub.. ISBN 0-7645-7659-3. 
Powell, Thomas A.; Schneider, Fritz (2001). JavaScript: The Complete Reference. McGraw-Hill Companies. ISBN 0-07-219127-9. 



[edit] External links

Mozilla Developer Center

Mozilla's Official Documentation on JavaScript
References for Core JavaScript versions: 1.5
New in JavaScript: 1.6, 1.7, 1.8
List of JavaScript releases: versions 1.5 - 1.8
Re-Introduction to JavaScript


JavaScript at the Open Directory Project
Computerworld Interview with Brendan Eich on JavaScript
JavaScript Form Validation Framework








v • d • e

ECMAScript (comparison)





Dialects

ActionScript · Caja · JavaScript / LiveScript · JScript · JavaScript OSA · JScript .NET · QtScript






ECMAScript engines

InScript · JavaScriptCore (SquirrelFish)  · JScript · KJS · Futhark · Linear B · Narcissus · QtScript · Rhino · SpiderMonkey (TraceMonkey) · Tamarin · V8






Other

Brendan Eich · Ecma International · SunSpider · Dynamic HTML









Retrieved from "http://en.wikipedia.org/wiki/JavaScript"
Categories: Curly bracket programming languages | JavaScript programming language | Prototype-based programming languages | Object-based programming languages | Scripting languagesHidden categories: All pages needing cleanup | Wikipedia articles needing factual verification since March 2009 | All pages needing factual verification | All articles with unsourced statements | Articles with unsourced statements since February 2009 | Articles with unsourced statements since January 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Afrikaans
العربية
Беларуская (тарашкевіца)
Български
Català
Česky
Dansk
Deutsch
Eesti
Ελληνικά
Español
Esperanto
Euskara
فارسی
Français
Galego
한국어
हिन्दी
Hrvatski
Bahasa Indonesia
Interlingua
Íslenska
Italiano
עברית
ქართული
Latviešu
Lietuvių
Magyar
Македонски
മലയാളം
Bahasa Melayu
Монгол
Nederlands
日本語
‪Norsk (bokmål)‬
ភាសាខ្មែរ
Polski
Português
Română
Русский
Shqip
Simple English
Slovenčina
Slovenščina
Српски / Srpski
Suomi
Svenska
தமிழ்
ไทย
Тоҷикӣ
Türkçe
ᨅᨔ ᨕᨘᨁᨗ
Українська
Tiếng Việt
粵語
Žemaitėška
中文









 This page was last modified on 3 April 2009, at 05:09.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
