













Perl 6 - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Perl_6";
		var wgTitle = "Perl 6";
		var wgAction = "view";
		var wgArticleId = "1146638";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279970964;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Perl 6

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article or section contains information about computer software currently in development.
The content may change as the software development progresses.






Perl

Paradigm
Multi-paradigm


Appeared in
2000


Designed by
Larry Wall


Latest release
pre-release


Typing discipline
dynamic, static


Influenced by
Perl 5, Haskell, Smalltalk


OS
Cross-platform


License
GNU General Public License, Artistic License


Website
dev.perl.org


Perl 6 is a planned major revision to the Perl programming language. It is a language specification which introduces elements of many modern and historical languages. Perl 6 is not intended to be backwards-compatible with earlier versions of Perl, though a compatibility mode is part of the specification.
Perl 6 has been in development since 2000. The Perl 6 project has never had a clear timeline, although various contributors have given estimates over the years. In early 2007 Jesse Vincent, the Perl 6 Project Manager said, "The Perl 6 project has no schedule ... one doesn't want to rush a largely volunteer effort to design and implement a worthy successor to Perl 5."[1]
There are currently two implementation projects of Perl 6 underway, Rakudo Perl and Pugs. Rakudo Perl is based on Parrot and PGE, and Pugs is written in Haskell.




Contents


1 History

1.1 Goals


2 Implementations
3 Major changes from Perl 5

3.1 A specification
3.2 A type system
3.3 Formal subroutine parameter lists

3.3.1 Parameter passing modes
3.3.2 Blocks and closures


3.4 Sigil invariance
3.5 Object-oriented programming

3.5.1 Roles


3.6 Regular expressions
3.7 Syntactic simplification
3.8 Chained comparisons
3.9 Lazy evaluation
3.10 Junctions

3.10.1 Autothreading


3.11 Macros


4 Hello world
5 References
6 External links

6.1 Specification
6.2 Implementations
6.3 Other







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
The Perl 6 design process was first announced on July 19, 2000, on day 4 of that year's Perl Conference,[2] by Larry Wall in his State of the Onion 2000 talk.[3] At that time, the primary goals were to remove "historical warts" from the language; "easy things should stay easy, hard things should get easier, and impossible things should get hard;" a general cleanup of the internal design and APIs. The process began with a series of requests for comments or "RFCs". This process was open to all contributors, and left no aspect of the language closed to change.[4]
Once the RFC process was complete, Wall reviewed and classified each request. He then began the process of writing several "Apocalypses", a term which means "revealing." [5] While the original goal was to write one Apocalypse for each chapter of Programming Perl, it became obvious that, as each Apocalypse was written, previous Apocalypses were being invalidated by later changes. For this reason, a set of Synopses were published, each one relating the contents of an Apocalypse, but with any subsequent changes reflected in updates. Today, Perl 6 specification continues almost entirely within the Synopses.[6]
There are also a series of Exegeses written by Damian Conway that explain the content of each Apocalypse in terms of practical usage. Each Exegesis consists of code examples along with discussion of the usage and implications of the examples.[7]
There are three primary methods of communication used in the development of Perl 6 today. The first is the #perl6 IRC channel on freenode. The second is a set of mailing lists on The Perl Foundation's servers at perl.org.[8] The third is the Subversion source code repository used by the pugs team. Pugs is an early implementation of Perl 6; see the Implementations section for more detail.

[edit] Goals
The break in compatibility was mandated from the start of the project, and immediately allowed some of the changes that Larry Wall had suggested in his initial speech. "Historical warts" such as the confusion surrounding sigil usage for containers; the ambiguity between the select functions; the syntactic impact of bareword filehandles; and many other problems that Perl programmers had discussed fixing for years were some of the first issues addressed.
Over the years, Perl 6 has undergone several alterations in its direction. The introduction of concepts from Python and Ruby were early influences, but as the pugs interpreter was written in the Haskell programming language, many functional programming influences were absorbed by the Perl 6 design team.

[edit] Implementations
As of 2009[update], multiple Perl 6 implementations are under development, but none are considered "complete". As noted in the history section the language design itself is still subject to change.
Rakudo Perl [9] [10] is a Perl 6 implementation targeting the Parrot virtual machine. Parrot is a virtual machine designed for dynamic languages, primarily for Perl 6. It provides several powerful compiler tools, many of which take inspiration from Perl 6. In particular, the Parrot Grammar Engine, or PGE, provides an implementation of Perl 6 grammars. As well, the language used for building compilers is itself Not Quite Perl 6, or NQP. The Rakudo implementation of Perl 6 on Parrot takes advantage of PGE and NQP. Some portions of Rakudo are written in Perl 6 itself, though this is not a self-hosting implementation, nor are there concrete plans at this point to make Rakudo a bootstrapping compiler.
Pugs is an implementation of Perl 6 written in Haskell. It will be used for bootstrapping, providing a platform on which to write the Perl 6 compiler in Perl 6, and the test suite to validate it. This could, for example, involve translating the Pugs Haskell source code to Perl 6.[11] After that, Perl 6 will be self-hosted—it will be used to compile itself. Much of the implementation of Perl will then be exposed to programmers using the language. For example, this would make it possible to extend the parser from within a program or library. Pugs can execute Perl 6 code directly, and has also compiled Perl 6 to JavaScript, Perl 5 and Parrot bytecode. Lacking funding, even the key developer Audrey Tang is only working part time, so progress has not been as rapid as many wish.
v6.pm is a pure Perl 5 implementation of Perl 6, making liberal use of existing CPAN modules, such as Moose and Pugs::Compiler::Rule. It aims to make the existing perl runtime a first-class virtual machine for both Perl 5 and Perl 6.[12]
In 2007, v6-MiniPerl6 ("mp6") and its reimplementation, v6-KindaPerl6 ("kp6") were written as a means to bootstrap the Perl-6.0.0 STD, using Perl 5. The STD is a full grammar for Perl 6, and is written in Perl 6. In theory, anything capable of parsing the STD and generating executable code is a suitable bootstrapping system for Perl 6. kp6 is currently compiled by mp6 and can work with multiple backends.[13][14] mp6 and kp6 are not full Perl 6 implementations, and are designed only to implement the minimum featureset required to bootstrap a full Perl 6 compiler.

[edit] Major changes from Perl 5
Perl 5 and Perl 6 differ fundamentally, though in general the intent has been to "keep Perl 6 Perl". Most of the changes are intended to normalize the language, to make it easier for learning and expert programmers alike to understand, and to make "easy things easier and hard things more possible".

[edit] A specification
A major, but non-technical difference between Perl 5 and Perl 6 is that Perl 6 began as a specification.[15] This means that Perl 6 can be re-implemented if needed, and it also means that programmers don't have to read the source code for the ultimate authority on any given feature. Perl 5's documentation is regarded as excellent[who?], even outside of the Perl community where even mixed reviews typically note its maturity and breadth. However, since the documentation is not considered authoritative and only describes the behaviour of the actual Perl 5 interpreter informally, any discrepancies found between the documentation and the implementation may lead to either being changed to reflect the other.

[edit] A type system
In Perl 6, the dynamic type system of Perl 5 has been augmented by the addition of static types.[16] For example:

my Int $i = 0;
my Num $n = 3.142;
my Str $s = "Hello, world";

However, as with Perl 5, programmers can do most things without any explicit typing at all:

my $i = "25" + 10; # $i is 35

Perl 6 offers a hybrid typing system whereby the programmer may choose to use Static Typing, Dynamic Typing or mix the two.

[edit] Formal subroutine parameter lists
Perl 5 defined subroutines without formal parameter lists at all (though simple parameter counting and some very loose type checking can be done using Perl 5's "prototypes"). Subroutine arguments passed in were aliased into the elements of the array @_. If the elements of @_ were modified, the changes would be reflected in the original data.
Perl 6 introduces true formal parameters to the language.[17] In Perl 6, a subroutine declaration looks like this:

sub do_something(Str $thing, Int $other) { ... }

As in Perl 5, the formal parameters (i.e., the variables in the parameter list) are aliases to the actual parameters (the values passed in), but by default, the aliases are constant so they cannot be modified. They may be declared explicitly as read-write aliases for the original value or as copies using the is rw or is copy directives should the programmer require them to be modified locally.

[edit] Parameter passing modes
Perl 6 provides three basic modes of parameter passing:

Positional
Named
Slurpy

Positional parameters are the typical ordered list of parameters that most programming languages use. All parameters may also be passed by using their name in an unordered way. A named-only parameter can only be passed by specifying its name (that is, it never captures a positional argument), and are indicated with a leading : character. Slurpy parameters (indicated by an * before the parameter name) are Perl 6's tool for creating variadic functions. A slurpy hash will capture remaining passed-by-name parameters, whereas a slurpy array will capture remaining passed-by-position parameters.
Here is an example of the use of all three parameter-passing modes:

sub somefunction($a, $b, :$c, :$d, *@e) {...}

somefunction(1, 2, :d<3>, 4, 5, 6); # $a=1, $b=2, $d=3, @e=(4,5,6)
somefunction(:b<2>, :a<1>);         # $a=1, $b=2

Positional parameters, such as those used above are always required, unless followed by ? to indicate that they are optional. Named parameters are optional by default, but may be marked as required by adding ! after the variable name. Slurpy parameters are always optional.

[edit] Blocks and closures
Parameters can also be passed to arbitrary blocks, which act as closures. This is how, for example, for and while loop iterators are named. In the following example, a list is traversed, 3 elements at a time, and passed to the loop's block as the variables, $a, $b, $c.

for @list -> ($a, $b, $c) { ... }

This is generally referred to as a "pointy sub" or "pointy block", and the arrow behaves almost exactly like the sub keyword, introducing an anonymous closure (or anonymous subroutine in Perl 5 terminology).[17]

[edit] Sigil invariance
In Perl 5, sigils — the punctuation characters that precede a variable name — changed depending on how the variable was used:

# Perl 5 code
my @array = (1, 2, 3);
my $element = $array[1]; # $element equals 2

In Perl 6, sigils are invariant, which mean they do not change based on whether it is the array or the array element that is needed:[16]

# Perl 6 code
my @array = (1, 2, 3);
my $element = @array[1]; # $element equals 2

The variance in Perl 5 was inspired by number agreement in English and many other natural languages:

   "This apple."                    # CORRECT
   "These apples."                  # CORRECT
   "This third apple."              # CORRECT
   "These third apple."             # WRONG

The change in Perl 6 is meant to reduce the cognitive load of recognizing when to use the @ or the $.

[edit] Object-oriented programming
Perl 5 supported object-oriented programming via a mechanism known as blessing. Any reference could be blessed into being an object of a particular class, a blessed object could have methods invoked on it using the "arrow syntax" which would cause Perl to locate or "dispatch" an appropriate subroutine by name, and call it with the blessed variable as its first argument.
While extremely powerful—virtually any other computer language's object model could be simulated using this simple facility—it made the most common case of object orientation, a struct-like object with some associated code, unnecessarily difficult. In addition, because Perl could make no assumptions about the object model in use, method invocation could not be optimized very well.
In the spirit of making the "easy things easy but hard things possible", Perl 6 retains the blessing model but supplies a more robust object model for the common cases.[18] For example, a class to encapsulate a Cartesian point could be defined and used this way:

class Point is rw {
  has $.x;
  has $.y;
}

my Point $point .= new( :x<1.2>, :y<-3.7> );

# Now change x (note method "x" used as lvalue):
$point.x = 2;
say "Point is at X location: ", $point.x;

The dot replaces the arrow in a nod to the many other languages (e.g. Java, Python, etc.) that have coalesced around dot as the syntax for method invocation.
In the terminology of Perl 6, $.x is called an "attribute". Some languages call these fields or members. The method used to access an attribute is called an "accessor". Auto-accessors are methods that are created automatically, as the method x is in the example above. These accessor functions return the value of the attribute. When a class or individual attribute is declared with the is rw modifier (short for "read/write"), the auto-accessor can be passed a new value to set the attribute to, or it can be directly assigned to as an lvalue (as in the example). Auto-accessors can be replaced by user-defined methods, should the programmer desire a richer interface to an attribute. Attributes can only be accessed directly from within a class definition. All other access must go through the accessor methods.

[edit] Roles
Roles in Perl 6 take on the function of interfaces in Java, mixins in Ruby, and traits[19] in the Smalltalk variant Squeak. These are much like classes, but are entirely abstract. These are used to perform composition when used with classes rather than adding to their inheritance chain. Roles define nominal types; they provide semantic names for collections of behavior and state. The fundamental difference between a role and a class is that classes are instantiable; roles are not.[20]
Essentially, a role is a bundle of (possibly abstract) methods and attributes that can be added to a class without using inheritance. A role can even be added to an individual object; in this case, Perl 6 will create an anonymous subclass, add the role to the subclass, and change the object's class to the anonymous subclass.
For example, a Dog is a Mammal. Dogs inherit certain characteristics from Mammals, such as mammary glands and (through Mammal's parent, Vertebrate) a backbone. Dogs may have one of several distinct types of behavior; for example, a Dog may be a Pet, a Stray, or a Guide for the blind. However, these are simply sets of additional behaviors that can be added to a Dog; a Cat can equally be a Pet or Stray, for example. Hence, Dog and Mammal are classes, while Pet, Stray, and Guide are roles.

class Mammal is Vertebrate {...}
class Dog is Mammal {...}
role Pet {...}
role Stray {...}
role Guide {...}

Roles are added to a class or object with the does keyword, as opposed to inheritance's is. The keywords reflect the differing meanings of the two features: role composition gives a class the behavior of the role, but doesn't indicate that it is truly the same thing as the role.

class GuideDog is Dog does Guide {...}   # Subclass composes role

my $dog = new Dog;
$dog does Guide;                         # Individual object composes role

Although roles are distinct from classes, both are types, so a role can appear in a variable declaration where one would normally put a class. For example, a Blind role for a Human could include an attribute of type Guide; this attribute could contain a Guide Dog, a Guide Horse, a Guide Human, or even a Guide Machine.

class Human {
    has Dog $dog;                        # Can contain any kind of Dog, whether it does the 
    ...                                  # Guide role or not
}
role Blind {
    has Guide $guide;                    # Can contain any object that does the Guide role,
    ...                                  # whether it is a Dog or something else
}


[edit] Regular expressions
Main article: Perl 6 rules
Perl's regular expression and string-processing support has always been one of its defining features.[21] Since Perl's pattern-matching constructs have exceeded the capabilities of regular language expressions for some time,[citation needed] Perl 6 documentation will exclusively refer to them as regexes, distancing the term from the formal definition.
Perl 6 provides a superset of Perl 5 features with respect to regexes, folding them into a larger framework called "rules" which provide the capabilities of context-sensitive parsing formalisms (such as the syntactic predicates of parsing expression grammars and ANTLR), as well as acting as a closure with respect to their lexical scope.[22] Rules are introduced with the rule keyword which has a usage quite similar to subroutine definition. Anonymous rules can also be introduced with the regex (or rx) keyword, or they can simply be used inline as regexps were in Perl 5 via the m (matching) or s (substitute) operators.
In Apocalypse 5, Larry Wall enumerated 20 problems with "current regex culture". Among these were that Perl's regexes were "too compact and 'cute'", had "too much reliance on too few metacharacters", "little support for named captures", "little support for grammars", and "poor integration with [the] 'real' language".[23]

[edit] Syntactic simplification
Some Perl 5 constructs have been changed in Perl 6, optimized for different syntactic cues for the most common cases. For example, the parentheses (round brackets) required in control flow constructs in Perl 5 are now optional:[24]

if is_true() {
   for @array {
       ...
   }
}

Also, the , (comma) operator is now a list constructor, so enclosing parentheses are no longer required around lists. The code

@array = 1, 2, 3, 4;

now makes @array an array with exactly the elements '1', '2', '3', and '4'.

[edit] Chained comparisons
Perl 6 allows comparisons to "chain". That is, a sequence of comparisons such as the following are allowed:

if C(20) <= $temperature <= C(25) { say "Room temperature!" }

This is treated as if each left-to-right comparison were performed on its own, and the result is logically combined via the and operation.

[edit] Lazy evaluation
Perl 6 uses the technique of lazy evaluation of lists that has been a feature of some functional programming languages such as Haskell:[25]

@integers = 0..Inf; # integers from 0 to infinity

The code above will not crash by attempting to assign a list of infinite size to the array @integers, nor will it hang indefinitely in attempting to expand the list if a limited number of slots are searched.
This simplifies many common tasks in Perl 6 including input/output operations, list transformations and parameter passing.

[edit] Junctions
Perl 6 introduces the concept of junctions: values that are composites of other values.[25] In the earliest days of Perl 6's design, these were called "superpositions", by analogy to the concept in quantum physics of quantum superpositions — waveforms that can simultaneously occupy several states until observation "collapses" them. A Perl 5 module released in 2000 by Damian Conway called Quantum::Superpositions[26] provided an initial proof of concept. While at first, such superpositional values seemed like merely a programmatic curiosity, over time their utility and intuitiveness became widely recognized, and junctions now occupy a central place in Perl 6's design.
In their simplest form, junctions are created by combining a set of values with junctive operators:

my $any_even_digit = 0|2|4|6|8; # any(0, 2, 4, 6, 8)
my $all_odd_digits = 1&3&5&7&9; # all(1, 3, 5, 7, 9)

| indicates a value which is equal to either its left or right-hand arguments. & indicates a value which is equal to both its left and right-hand arguments. These values can be used in any code that would use a normal value. Operations performed on a junction act on all members of the junction equally, and combine according to the junctive operator. So, ("apple"|"banana") ~ "s" would yield "apples"|"bananas". In comparisons, junctions return a single true or false result for the comparison. "any" junctions return true if the comparison is true for any one of the elements of the junction. "all" junctions return true if the comparison is true for all of the elements of the junction.
Junctions can also be used to more richly augment the type system by introducing a style of generic programming that is constrained to junctions of types:

sub get_tint ( RGB_Color|CMYK_Color $color, num $opacity) { ... }
sub store_record (Record&Storable $rec) { ... }


[edit] Autothreading
Junctions are unordered; 1|2|3 and 3|2|1 represent the same value. This lack of ordering means that the Perl 6 compiler can choose to evaluate junctive expressions in parallel. For instance, the code:

for all(@array) { ... }

would indicate to the compiler that the for loop should be run in parallel, possibly in separate threads. This feature is dubbed "autothreading"; its usage and implementation is not finalized and is a matter of debate in the development community.[27]

[edit] Macros
In low-level languages, the concept of macros has become synonymous with textual substitution of source-code due to the widespread use of the C preprocessor. However, high-level languages such as Lisp pre-dated C in their use of macros that were far more powerful.[28] It is this Lisp-like macro concept that Perl 6 will take advantage of.[17] The power of this sort of macro stems from the fact that it operates on the program as a high-level data structure, rather than as simple text, and has the full capabilities of the programming language at its disposal.
A Perl 6 macro definition will look like a subroutine or method definition, and can operate on unparsed strings, an AST representing pre-parsed code, or a combination of the two. A macro definition would look like this[citation needed]:

macro hello($what) {
  q:code { say "Hello { {{{$what}}} }" };
}

In this particular example, the macro is no more complex than a C-style textual substitution, but because parsing of the macro parameter occurs before the macro operates on the calling code, diagnostic messages would be far more informative. However, because the body of a macro is executed at compile time each time it is used, many techniques of optimization can be employed. It is even possible to entirely eliminate complex computations from resulting programs by performing the work at compile-time.

[edit] Hello world
The hello world program is a common program used to introduce a language. In Perl 6, hello world is:

say 'Hello, world'

— though there is more than one way to do it. The say function prints its arguments (like the print function) with a trailing newline. (This feature was backported into Perl 5.10.)

[edit] References


^ Perl 6 Project Manager (2007). "List discussion about future Perl 5 development". http://www.nntp.perl.org/group/perl.perl5.porters/120613. 
^ Kline, Joe (2000-08-21). "Report from the Perl Conference". http://www.perl.com/pub/a/2000/08/tpc4.html. 
^ Wall, Larry (2000). "State of the Onion 2000". O'Reilly Network. http://www.perl.com/pub/a/2000/10/23/soto2000.html. 
^ The Perl Foundation (2000). "About Perl6 RFCs". http://dev.perl.org/perl6/rfc/meta/. 
^ Wall, Larry (2001-04-02). "Apocalypse 1: The Ugly, the Bad, and the Good". http://dev.perl.org/perl6/doc/design/apo/A01.html. 
^ The Perl Foundation (2002). "Perl Development: Synopses". http://dev.perl.org/perl6/doc/synopsis.html. 
^ The Perl Foundation (2001). "Exegeses". http://dev.perl.org/perl6/doc/exegesis.html. 
^ The Perl Foundation (2002). "Perl Development: Mailing Lists". http://dev.perl.org/perl6/lists/. 
^ [1]
^ The compiler formerly known as "perl6" - Rakudo.org
^ Tang, Audrey (2005). "pugscode: Pugs". http://www.pugscode.org/. 
^ audreyt. "Pugs 6.2.12 and v6.pm released!". use Perl. http://use.perl.org/article.pl?sid=06/07/07/1532235&from=rss. 
^ "mp6/kp6 FAQ". Perl 6 development team. 2006. http://darcs.pugscode.org/v6/v6-KindaPerl6/docs/FAQ.pod. 
^ Wall, Larry, et al. (2007). "Perl 6 STD". http://dev.pugscode.org/browser/src/perl6/Perl-6.0.0-STD.pm. 
^ Wall, Larry (2004-08-10). "Synopsis 1: Overview". http://dev.perl.org/perl6/doc/design/syn/S01.html. 
^ a b Wall, Larry (2004-08-10). "Synopsis 2: Bits and Pieces". http://dev.perl.org/perl6/doc/design/syn/S02.html. 
^ a b c Wall, Larry (2003-03-21). "Synopsis 6: Subroutines". http://dev.perl.org/perl6/doc/design/syn/S06.html. 
^ Wall, Larry (2006-08-18). "Synopsis 12: Objects". http://dev.perl.org/perl6/doc/design/syn/S12.html. 
^ The Software Composition Group (2003). "Traits". http://www.iam.unibe.ch/~scg/Research/Traits/. 
^ chromatic (2006). "Roles: Composable Units of Object Behavior". http://www.oreillynet.com/onlamp/blog/2006/08/roles_composable_units_of_obje.html. 
^ Parlante, Nick (2000). "Essential Perl: String Processing with Regular Expressions". http://cslibrary.stanford.edu/108/EssentialPerl.html#re. 
^ Wall, Larry (2002-06-24). "Synopsis 5: Regexes and Rules". http://dev.perl.org/perl6/doc/design/syn/S05.html. 
^ Wall, Larry (2002-06-04). "Apocalypse 5: Pattern Matching". http://dev.perl.org/perl6/doc/design/apo/A05.html. 
^ Wall, Larry (2004-08-19). "Synopsis 4: Blocks and Statements". http://dev.perl.org/perl6/doc/design/syn/S04.html. 
^ a b Wall, Larry (2004-09-13). "Synopsis 9: Data Structures". http://dev.perl.org/perl6/doc/design/syn/S09.html. 
^ Conway, Damian (2002). "Quantum::Superpositions - QM-like superpositions in Perl". http://search.cpan.org/dist/Quantum-Superpositions/lib/Quantum/Superpositions.pm. 
^ Adams, Rod (2005-02-15). "Junction Values". http://groups.google.com/group/perl.perl6.language/browse_frm/thread/868ab2f20deb00d8/9e7da05315e91e13?tvc=1#9e7da05315e91e13. 
^ Lamkins, David B. (2004-12-08). Successful Lisp: How to Understand and Use Common Lisp. bookfix.com. http://psg.com/~dlamkins/sl/chapter20.html. 



[edit] External links

[edit] Specification

Official Perl 6 Documentation. The Synopses (The official language specification). While the Apocalypses and Exegeses are linked here for reference, note that the Synopses are kept very much more up-to-date and are the primary recommended reference.
The original community RFCs - For historical interest only.


[edit] Implementations

The main site for Perl 6 development
Pugs - A current implementation of Perl 6, written in Haskell.
v6.pm - A pure-perl implementation, based on a Perl 6's CPAN stack.
Parrot - The main site for Parrot development.


[edit] Other

Planet Perl 6 - Perl 6's blogs aggregrator.
Perl 6 and Parrot links - resources catalog
Present Continuous, Future Perfect - Larry Wall's talk about Perl 5 and Perl 6 at Open Source Developer Conference 2006 in Netanya, Israel (archived HTML, with links to slides and audio recording)
Perl 6 FAQ - Answers a wide range of questions about Perl 6.
Perl 6 Quick-Start - A step-by-step guide to writing and running your first Perl 6 program.
Perl6::Perl5::Differences
Perl6 at Wikia An independent perl6 wiki.




Retrieved from "http://en.wikipedia.org/wiki/Perl_6"
Categories: Beta software | Perl | Upcoming software | Articles with example Perl codeHidden categories: Articles containing potentially dated statements from 2009 | All articles containing potentially dated statements | All pages needing cleanup | Articles with specifically-marked weasel-worded phrases since March 2009 | All articles with unsourced statements | Articles with unsourced statements since November 2007 | Articles with unsourced statements since September 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Español
Français
Nederlands
Русский
Suomi
中文









 This page was last modified on 27 March 2009, at 08:29 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
