













Lambda calculus - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Lambda_calculus";
		var wgTitle = "Lambda calculus";
		var wgAction = "view";
		var wgArticleId = "18203";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281420097;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-lisp {line-height: normal;}
.source-lisp li, .source-lisp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for lisp
 * CSS class: source-lisp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-lisp .de1, .source-lisp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-lisp  {}
.source-lisp .head {}
.source-lisp .foot {}
.source-lisp .imp {font-weight: bold; color: red;}
.source-lisp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-lisp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-lisp li.li2 {font-weight: bold;}
.source-lisp .kw1 {color: #b1b100;}
.source-lisp .co1 {color: #808080; font-style: italic;}
.source-lisp .coMULTI {color: #808080; font-style: italic;}
.source-lisp .es0 {color: #000099; font-weight: bold;}
.source-lisp .br0 {color: #66cc66;}
.source-lisp .st0 {color: #ff0000;}
.source-lisp .nu0 {color: #cc66cc;}
.source-lisp .me0 {color: #555;}
.source-lisp .me1 {color: #555;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-eiffel {line-height: normal;}
.source-eiffel li, .source-eiffel pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for eiffel
 * CSS class: source-eiffel, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-eiffel .de1, .source-eiffel .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-eiffel  {}
.source-eiffel .head {}
.source-eiffel .foot {}
.source-eiffel .imp {font-weight: bold; color: red;}
.source-eiffel .ln-xtra {color: #cc0; background-color: #ffc;}
.source-eiffel li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-eiffel li.li2 {font-weight: bold;}
.source-eiffel .kw1 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw2 {color: #0600FF; font-weight: bold;}
.source-eiffel .kw3 {color: #800080;}
.source-eiffel .kw4 {color: #800000}
.source-eiffel .kw5 {color: #603000;}
.source-eiffel .co1 {color: #008000; font-style: italic;}
.source-eiffel .coMULTI {}
.source-eiffel .es0 {color: #005070; font-weight: bold;}
.source-eiffel .br0 {color: #600000;}
.source-eiffel .st0 {color: #0080A0;}
.source-eiffel .nu0 {color: #FF0000;}
.source-eiffel .me1 {color: #000060;}
.source-eiffel .me2 {color: #000050;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-python .de1, .source-python .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-python  {}
.source-python .head {}
.source-python .foot {}
.source-python .imp {font-weight: bold; color: red;}
.source-python .ln-xtra {color: #cc0; background-color: #ffc;}
.source-python li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-python li.li2 {font-weight: bold;}
.source-python .kw1 {color: #ff7700;font-weight:bold;}
.source-python .kw2 {color: #008000;}
.source-python .kw3 {color: #dc143c;}
.source-python .kw4 {color: #0000cd;}
.source-python .co1 {color: #808080; font-style: italic;}
.source-python .coMULTI {color: #808080; font-style: italic;}
.source-python .es0 {color: #000099; font-weight: bold;}
.source-python .br0 {color: #66cc66;}
.source-python .st0 {color: #483d8b;}
.source-python .nu0 {color: #ff4500;}
.source-python .me1 {color: black;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-smalltalk {line-height: normal;}
.source-smalltalk li, .source-smalltalk pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for smalltalk
 * CSS class: source-smalltalk, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-smalltalk .de1, .source-smalltalk .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-smalltalk  {}
.source-smalltalk .head {}
.source-smalltalk .foot {}
.source-smalltalk .imp {font-weight: bold; color: red;}
.source-smalltalk .ln-xtra {color: #cc0; background-color: #ffc;}
.source-smalltalk li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-smalltalk li.li2 {font-weight: bold;}
.source-smalltalk .kw1 {color: #7f007f;}
.source-smalltalk .coMULTI {color: #007f00; font-style: italic;}
.source-smalltalk .es0 {}
.source-smalltalk .br0 {color: #000066; font-weight:bold;}
.source-smalltalk .st0 {color: #7f0000;}
.source-smalltalk .nu0 {color: #7f0000;}
.source-smalltalk .me0 {}
.source-smalltalk .sc0 {}
.source-smalltalk .re0 {color: #0000ff;}
.source-smalltalk .re1 {color: #7f0000;}
.source-smalltalk .re2 {color: #7f0000;}
.source-smalltalk .re3 {color: #00007f;}
.source-smalltalk .re4 {color: #7f007f;}
.source-smalltalk .re5 {color: #00007f;}
.source-smalltalk .re6 {color: #00007f;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-cpp .de1, .source-cpp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-cpp  {}
.source-cpp .head {}
.source-cpp .foot {}
.source-cpp .imp {font-weight: bold; color: red;}
.source-cpp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-cpp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-cpp li.li2 {font-weight: bold;}
.source-cpp .kw1 {color: #0000ff;}
.source-cpp .kw2 {color: #0000ff;}
.source-cpp .kw3 {color: #0000dd;}
.source-cpp .kw4 {color: #0000ff;}
.source-cpp .co1 {color: #ff0000;}
.source-cpp .co2 {color: #339900;}
.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.source-cpp .es0 {color: #666666; font-weight: bold;}
.source-cpp .br0 {color: #000000;}
.source-cpp .st0 {color: #666666;}
.source-cpp .nu0 {color: #0000dd;}
.source-cpp .me1 {color: #00eeff;}
.source-cpp .me2 {color: #00eeff;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-csharp {line-height: normal;}
.source-csharp li, .source-csharp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for csharp
 * CSS class: source-csharp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-csharp .de1, .source-csharp .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-csharp  {}
.source-csharp .head {}
.source-csharp .foot {}
.source-csharp .imp {font-weight: bold; color: red;}
.source-csharp .ln-xtra {color: #cc0; background-color: #ffc;}
.source-csharp li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-csharp li.li2 {font-weight: bold;}
.source-csharp .kw1 {color: #0600FF;}
.source-csharp .kw2 {color: #FF8000; font-weight: bold;}
.source-csharp .kw3 {color: #008000;}
.source-csharp .kw4 {color: #FF0000;}
.source-csharp .kw5 {color: #000000;}
.source-csharp .co1 {color: #008080; font-style: italic;}
.source-csharp .co2 {color: #008080;}
.source-csharp .coMULTI {color: #008080; font-style: italic;}
.source-csharp .es0 {color: #008080; font-weight: bold;}
.source-csharp .br0 {color: #008000;}
.source-csharp .st0 {color: #808080;}
.source-csharp .nu0 {color: #FF0000;}
.source-csharp .me1 {color: #0000FF;}
.source-csharp .me2 {color: #0000FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Lambda calculus

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In mathematical logic and computer science, lambda calculus, also written as λ-calculus, is a formal system designed to investigate function definition, function application and recursion. It was introduced by Alonzo Church and Stephen Cole Kleene in the 1930s as part of an investigation into the foundations of mathematics, but has emerged as a useful tool in the investigation of problems in computability or recursion theory, and forms the basis of a paradigm of computer programming called functional programming.[1]
In the lambda calculus, functions are first-class entities: they are passed as arguments, and returned as results. Thus lambda expressions are a reification of the concept of an unnamed procedure without side effects. The lambda calculus can be thought of as an idealized, minimalistic programming language. It is capable of expressing any algorithm, and it is this fact that makes the model of functional programming an important one. Functional programs are stateless and deal exclusively with functions that accept and return data (including other functions), but they produce no side effects in 'state' and thus make no alterations to incoming data. Modern functional languages, building on the lambda calculus, include Erlang, Haskell, Lisp, ML, and Scheme, as well as more recent languages like Clojure, F#, Nemerle, and Scala.
The lambda calculus continues to play an important role in mathematical foundations, through the Curry-Howard correspondence. However, as a naïve foundation for mathematics, the untyped lambda calculus is unable to avoid set-theoretic paradoxes (see the Kleene-Rosser paradox).
This article deals with the "untyped lambda calculus" as originally conceived by Church. Most modern applications concern typed lambda calculi.




Contents


1 Informal description
2 Formal definition

2.1 Definition
2.2 Notation
2.3 Free and bound variables


3 Reduction

3.1 α-conversion

3.1.1 Substitution


3.2 β-reduction
3.3 η-conversion


4 Encoding datatypes

4.1 Arithmetic in lambda calculus
4.2 Logic and predicates
4.3 Pairs
4.4 Recursion and fixed points
4.5 Standard combinators


5 Computable functions and lambda calculus
6 Undecidability of equivalence
7 Lambda calculus and programming languages

7.1 Reduction strategies
7.2 A note about complexity
7.3 Parallelism and concurrency


8 Semantics
9 See also
10 References
11 Further reading
12 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Informal description
The key concept of lambda-calculus is a lambda expression. A lambda expression represents an anonymous function and defines the transformation that the function performs to its argument. For instance, a numeric "add-two" function, which adds 2 to its argument, can be expressed in lambda calculus as  λ x. x + 2 . The variable x is specific to this lambda expression, thus can be equivalently expressed as  λ y. y + 2;  the name of the argument is immaterial (see α-conversion). In a more conventional mathematical notation this function can be expressed as f such that  f(x) = x + 2 .
In lambda-calculus the application of this function to a number "3" can be written as  (λ x. x + 2) 3. In a more conventional mathematical notation, the application of function with the name "f" to a number "3" is expressed as f(3).
Note that part of what makes this description "informal" is that neither the number 2, nor the + operator, are part of core lambda calculus. Instead, numbers and arithmetic are fully defined in lambda calculus (see arithmetic in lambda calculus).
In lambda-calculus all functions are anonymous. A lambda expression can be used as any other expression: a lambda expression can be returned as the result of some function, or can be used as an argument to another function.
In lambda calculus, every function is a unary function, i.e. a function with only one input (known as its argument). When an expression is applied to another expression (which corresponds to a function 'call' with the other expression as its argument), it returns a single value (known as its result). Function application is left associative:  f x y = (f x) y.  Consider the function which takes a function as an argument and applies it to the number 3 as follows: λ f. f 3.  This latter function could be applied to our earlier "add-two" function as follows:  (λ f. f 3) (λ x. x + 2).  The three expressions:

(λ f. f 3) (λ x. x + 2)
(λ x. x + 2) 3
3 + 2

are equivalent.
A function of two variables is expressed in lambda calculus as a function of one argument which returns a function of one argument (see currying). For instance, the function  f(x, y) = x - y  would be written as  λ x. λ y. x - y. A common convention is to abbreviate curried functions as, in this example,  λ x y. x - y.
The following expression in the lambda calculus is particularly notable:

(λ x. x x) (λ x. x x)

This expression is an application of a lambda expression (λ x. x x) (first sub-expression) to an argument (λ x. x x) (second sub-expression). The sub-expression x x is also an application. It means that a function (represented by a variable x ) is applied to its argument (also represented by the variable x).
When the above application is evaluated (the sub-expression (λ x. x x) is substituted for the argument x in the lambda expression) it reproduces itself:

(λ x. x x) (λ x. x x)

So, the process of evaluation the above expression never terminates.
A similar situation arises with:

(λ x. x x x) (λ x. x x x)

 (λ x. x x)  is also known as the ω combinator;  ((λ x. x x) (λ x. x x))  is known as Ω,  ((λ x. x x x) (λ x. x x x))  as Ω2, etc.
Lambda calculus expressions may contain free variables, i.e. variables not bound by any λ. For example, the variable  y  is free in the expression  (λ x. y) , representing a function which always produces the result y. Occasionally, this necessitates the renaming of formal arguments. For example, in the formula below, the letter y is used first as a formal parameter, then as a free variable:

(λ x y. y x) (λ x. y).

To reduce the expression, we rename the first identifier z so that the reduction does not mix up the names:

(λ x z. z x) (λ x. y)

the reduction is then

λ z. z (λ x. y).

If one only formalizes the notion of function application and replaces the use of lambda expressions by the use of combinators, one obtains combinatory logic.

[edit] Formal definition

[edit] Definition
Lambda expressions are composed of

variables v1, v2, . . . vn
the abstraction symbols λ and .
parentheses ( )

The set of lambda expressions, Λ, can be defined recursively:

If x is a variable, then x ∈ Λ
If x is a variable and M ∈ Λ, then ( λ x . M ) ∈ Λ
If M, N ∈ Λ, then ( M N ) ∈ Λ

Instances of 2 are known as abstractions and instances of 3, applications.[2]

[edit] Notation
To keep the notation of lambda expressions uncluttered, the following conventions are usually applied.

Outermost parentheses are dropped: M N instead of (M N).
Applications are assumed to be left associative: M N P means (M N) P.
The body of an abstraction extends as far right as possible: λ x . M N means λ x . (M N) and not (λ x . M) N
A sequence of abstractions are contracted: λ x . λ y . λ z . N is abbreviated as λ x y z . N[3]


[edit] Free and bound variables
The abstraction operator, λ, is said to bind its variable wherever it occurs in the body of the abstraction. Variables that fall within the scope of a lambda are said to be bound. All other variables are called free. For example in the following expression y is a bound variable and x is free:

λ y . x x y

Also note that a variable binds to its "nearest" lambda. In the following expression one single occurrence of x is bound by the second lambda:

λ x . y (λ x . z x)

The set of free variables of a lambda expression, M, is denoted as FV(M) and is defined by recursion on the structure of the terms, as follows:

FV( x ) = {x}, where x is a variable
FV ( λ x . M ) = FV ( M ) - {x}
FV ( M N ) = FV ( M )  FV ( N )[4]

An expression which contains no free variables is said to be closed. Closed lambda expressions are also known as combinators and are equivalent to terms in combinatory logic.

[edit] Reduction
We formalize what lambda expressions mean by defining how expressions can be reduced.
There are three kinds of reduction:

α-conversion: changing bound variables;
β-conversion: applying functions to their arguments;
η-conversion: which captures a notion of extensionality.

We also speak of the resulting equivalences: two expression are β-equivalent if they can be β-converted into the same expression, and α/η-equivalence are defined similarly.

[edit] α-conversion
Alpha-conversion allows bound variable names to be changed. For example, an alpha-conversion of  λx.x  would be  λy.y . Frequently in uses of lambda calculus, terms that differ only by alpha-conversion are considered to be equivalent.
The precise rules for alpha-conversion are not completely trivial. First, when alpha-converting an abstraction, the only variable occurrences that are renamed are those that are bound to the same abstraction. For example, an alpha-conversion of  λx.λx.x  could result in  λy.λx.x , but it could not result in  λy.λx.y . The latter has a different meaning from the original.
Second, alpha-conversion is not possible if it would result in a variable getting captured by a different abstraction. For example, if we replace x with y in λx.λy.x, we get λy.λy.y, which is not at all the same.

[edit] Substitution
Substitution, written E[V := E′], is the process of replacing all occurrences of the variable V by expression E′. Substitution on terms of the λ-calculus is defined by recursion on the structure of terms, as follows.

x[x := N]        ≡ N
y[x := N]        ≡ y, if x ≠ y
(M1 M2)[x := N]  ≡ (M1[x := N]) (M2[x := N])
(λ y. M)[x := N] ≡ λ y. (M[x := N]), if x ≠ y and y∉fv(N)

To substitute into a lambda abstraction, it is sometimes necessary to α-convert the expression. For example, it is not correct for (λ x.y)[y := x] to result in (λ x.x), because the substituted x was supposed to be free but ended up being bound. The correct substitution in this case is (λ z.x), up-to α-equivalence. Notice that substitution is defined uniquely up-to α-equivalence.

[edit] β-reduction
Beta-reduction captures the idea of function application. Beta-reduction is defined in terms of substitution: the beta-reduction of  ((λ V. E) E′)  is  E[V := E′] .
For example, assuming some encoding of 2,7,*, we have the following β-reductions:  ((λ n. n*2) 7  → (n*2)[n:= 7]  →  7*2.

[edit] η-conversion
Eta-conversion expresses the idea of extensionality, which in this context is that two functions are the same if and only if they give the same result for all arguments. Eta-conversion converts between  λ x. f x  and  f  whenever x does not appear free in f.
This conversion is not always appropriate when lambda expressions are interpreted as programs. Evaluation of  λ x. f x  can terminate even when evaluation of f does not.

[edit] Encoding datatypes
Main articles: Church encoding and Mogensen-Scott encoding
The basic lambda calculus may be used to model booleans, arithmetic, data structures and recursion, as illustrated in the following sub-sections.

[edit] Arithmetic in lambda calculus
There are several possible ways to define the natural numbers in lambda calculus, but by far the most common are the Church numerals, which can be defined as follows:

0 := λ f x. x
1 := λ f x. f x
2 := λ f x. f (f x)
3 := λ f x. f (f (f x))

and so on. A Church numeral is a higher-order function—it takes a single-argument function f, and returns another single-argument function. The Church numeral n is a function that takes a function f as argument and returns the n-th composition of f, i.e. the function f composed with itself n times. This is denoted f(n) and is in fact the n-th power of f (considered as an operator); f(0) is defined to be the identity function. Such repeated compositions (of a single function f) obey the laws of exponents, which is why these numerals can be used for arithmetic. Note that 0 returns x itself, i.e. it is essentially the identity function, and 1 returns the identity function. (Also note that in Church's original lambda calculus, the formal parameter of a lambda expression was required to occur at least once in the function body, which made the above definition of 0 impossible.)
We can define a successor function, which takes a number n and returns n + 1 by adding an additional application of f:

SUCC := λ n f x. f (n f x)

Because the m-th composition of f composed with the n-th composition of f gives the m+n-th composition of f, addition can be defined as follows:

PLUS := λ m n f x. n f (m f x)

PLUS can be thought of as a function taking two natural numbers as arguments and returning a natural number; it can be verified that

PLUS 2 3    and    5

are equivalent lambda expressions. Since adding m to a number n can be accomplished by adding 1 m times, an equivalent definition is:

PLUS := λ n m. m SUCC n[5]

Similarly, multiplication can be defined as

MULT := λ m n f . m (n f)[6]

Alternatively

MULT := λ m n. m (PLUS n) 0,

since multiplying m and n is the same as repeating the "add n" function m times and then applying it to zero. The predecessor function defined by  PRED n = n - 1  for a positive integer n and  PRED 0 = 0  is considerably more difficult. The formula

PRED := λ n f x. n (λ g h. h (g f)) (λ u. x) (λ u. u) 

can be validated by showing inductively that if T denotes (λ g h. h (g f)), then T(n)(λ u. x) = (λ h. h(f(n-1)(x)) ) for n > 0. Two other definitions of PRED are given below, one using conditionals and the other using pairs. With the predecessor function, subtraction is straightforward. Defining

SUB := λ m n. n PRED m,

SUB m n yields m - n when m > n and 0 otherwise.

[edit] Logic and predicates
By convention, the following two definitions (known as Church booleans) are used for the boolean values TRUE and FALSE:

TRUE := λ x y. x
FALSE := λ x y. y

(Note that FALSE is equivalent to the Church numeral zero defined above)



Then, with these two λ-terms, we can define some logic operators (these are just possible formulations; other expressions are equally correct):

AND := λ p q. p q p
OR := λ p q. p p q
NOT := λ p a b. p b a
IFTHENELSE := λ p a b. p a b

We are now able to compute some logic functions, for example:

AND TRUE FALSE

≡ (λ p q. p q p) TRUE FALSE →β TRUE FALSE TRUE
≡ (λ x y. x) FALSE TRUE →β FALSE



and we see that AND TRUE FALSE is equivalent to FALSE.
A predicate is a function which returns a boolean value. The most fundamental predicate is ISZERO which returns TRUE if its argument is the Church numeral 0, and FALSE if its argument is any other Church numeral:

ISZERO := λ n. n (λ x. FALSE) TRUE

The following predicate tests whether the first argument is less-than-or-equal-to the second:

LEQ := λ m n. ISZERO (SUB m n),

and since m = n iff LEQ m n and LEQ n m, it is straightforward to build a predicate for numerical equality.
The availability of predicates and the above definition of TRUE and FALSE make it convenient to write "if-then-else" expressions in lambda calculus. For example, the predecessor function can be defined as' '

PRED := λ n. n (λ g k. ISZERO (g 1) k (PLUS (g k) 1) ) (λ v. 0) 0

which can be verified by showing inductively that n (λ g k. ISZERO (g 1) k (PLUS (g k) 1) ) (λ v. 0) is the "add n - 1" function for n > 0.

[edit] Pairs
A pair (2-tuple) can be defined in terms of TRUE and FALSE, by using the Church encoding for pairs. For example, PAIR encapsulates the pair (x,y), FIRST returns the first element of the pair, and SECOND returns the second.

PAIR := λ x y f. f x y
FIRST := λ p. p TRUE
SECOND := λ p. p FALSE
NIL := λ x. TRUE
NULL := λp. p (λx y.FALSE)

A linked list can be defined as either NIL for the empty list, or the PAIR of an element and a smaller list. The predicate NULL tests for the value NIL.
As an example of the use of pairs, the shift-and-increment function that maps (m, n) to (n, n+1) can be defined as

Φ := λ x. PAIR (SECOND x) (SUCC (SECOND x))

which allows us to give perhaps the most transparent version of the predecessor function:

PRED := λ n. FIRST (n Φ (PAIR 0 0))


[edit] Recursion and fixed points
Main article: Fixed point combinator
Recursion is the definition of a function using the function itself; on the face of it, lambda calculus does not allow this. However, this impression is misleading. Consider for instance the factorial function f(n) recursively defined by

f(n) = 1, if n = 0; and n·f(n-1), if n>0.

In lambda calculus, one cannot define a function which includes itself. To get around this, one may start by defining a function, here called g, which takes a function f as an argument and returns another function that takes n as an argument:

g := λ f n. (1, if n = 0; and n·f(n-1), if n>0).

The function that g returns is either the constant 1, or n times the application of the function f to n-1. Using the ISZERO predicate, and boolean and algebraic definitions described above, the function g can be defined in lambda calculus.
However, g by itself is still not recursive; in order to use g to create the recursive factorial function, the function passed to g as f must have specific properties. Namely, the function passed as f must expand to the function g called with one argument -- and that argument must be the function that was passed as f again!
In other words, f must expand to g(f). This call to g will then expand to the above factorial function and calculate down to another level of recursion. In that expansion the function f will appear again, and will again expand to g(f) and continue the recursion. This kind of function, where f = g(f), is called a fixed-point of g, and it turns out that it can be implemented in the lambda calculus using what is known as the paradoxical operator or fixed-point operator and is represented as Y -- the Y combinator:

Y = λ g. (λ x. g (x x)) (λ x. g (x x))

In the lambda calculus, Y g is a fixed-point of g, as it expands to:

Y g
λ h. ((λ x. h (x x)) (λ x. h (x x))) g
(λ x. g (x x)) (λ x. g (x x))
g ((λ x. g (x x)) (λ x. g (x x)) - Compare with the previous step
g (Y g).

Now, to complete our recursive call to the factorial function, we would simply call  g (Y g) n,  where n is the number we are calculating the factorial of.
Given n = 5, for example, this expands to:

(λ n.(1, if n = 0; and n·((Y g)(n-1)), if n>0)) 5
1, if 5 = 0; and 5·(g(Y g)(5-1)), if 5>0
5·(g(Y g) 4)
5·(λ n. (1, if n = 0; and n·((Y g)(n-1)), if n>0) 4)
5·(1, if 4 = 0; and 4·(g(Y g)(4-1)), if 4>0)
5·(4·(g(Y g) 3))
5·(4·(λ n. (1, if n = 0; and n·((Y g)(n-1)), if n>0) 3))
5·(4·(1, if 3 = 0; and 3·(g(Y g)(3-1)), if 3>0))
5·(4·(3·(g(Y g) 2)))
...

And so on, evaluating the structure of the algorithm recursively. Every recursively defined function can be seen as a fixed point of some other suitable function, and therefore, using Y, every recursively defined function can be expressed as a lambda expression. In particular, we can now cleanly define the subtraction, multiplication and comparison predicate of natural numbers recursively.

[edit] Standard combinators
Certain combinators have commonly accepted names:

 I := λ x . x
 K := λ x y . x
 S := λ x y z . (x z) (y z)


[edit] Computable functions and lambda calculus
A function F: N → N of natural numbers is a computable function if and only if there exists a lambda expression f such that for every pair of x, y in N, F(x)=y if and only if f x =β y,  where x and y are the Church numerals corresponding to x and y, respectively and =β meaning equivalence with beta reduction. This is one of the many ways to define computability; see the Church-Turing thesis for a discussion of other approaches and their equivalence.

[edit] Undecidability of equivalence
There is no algorithm which takes as input two lambda expressions and outputs TRUE or FALSE depending on whether or not the two expressions are equivalent. This was historically the first problem for which undecidability could be proven. As is common for a proof of undecidability, the proof shows that no computable function can decide the equivalence. Church's thesis is then invoked to show that no algorithm can do so.
Church's proof first reduces the problem to determining whether a given lambda expression has a normal form. A normal form is an equivalent expression which cannot be reduced any further. Then he assumes that this predicate is computable, and can hence be expressed in lambda calculus. Building on earlier work by Kleene and constructing a Gödel numbering for lambda expressions, he constructs a lambda expression e which closely follows the proof of Gödel's first incompleteness theorem. If e is applied to its own Gödel number, a contradiction results.

[edit] Lambda calculus and programming languages
As pointed out by Peter Landin's 1965 paper A Correspondence between ALGOL 60 and Church's Lambda-notation, sequential procedural programming languages can be understood in terms of the lambda calculus, which provides the basic mechanisms for procedural abstraction and procedure (subprogram) application.
Lambda calculus reifies "functions" and makes them first-class objects, which raises implementation complexity when implementing lambda calculus. A particular challenge is related to the support of higher-order functions, also known as the Funarg problem. Lambda calculus is usually implemented using a virtual machine approach. The first practical implementation of lambda calculus was provided in 1963 by Peter Landin, and is know as the SECD machine. Since then, several optimized abstract machines for lambda calculus were suggested, such as the G-machine[7] and the Categorical abstract machine.
The most prominent counterparts to lambda calculus in programming are functional programming languages, which essentially implement the calculus augmented with some constants and datatypes. Lisp uses a variant of lambda notation for defining functions, but only its purely functional subset ("Pure Lisp") is really equivalent to lambda calculus.
An example of a lambda function in Lisp:


(lambda (x) (* x x))

Above Lisp example evaluates to a first class function. The symbol lambda introduces the function. Next is a list of arguments. This function has only one argument: x. Next are expressions that are executed. Here we have one expression (* x x) which multiplies x by x.
Functional languages are not the only ones to support functions as first-class objects. Numerous imperative languages, e.g. Pascal, have long supported passing subprograms as arguments to other subprograms. In C and the C-like subset of C++ the equivalent result is obtained by passing pointers to the code of functions (subprograms). Such mechanisms are limited to subprograms written explicitly in the code, and do not directly support higher-level functions. Some imperative object-oriented languages have notations that represent functions of any order; such mechanisms are available in C++, Smalltalk and more recently in Eiffel ("agents") and C# ("delegates"). As an example, the Eiffel "inline agent" expression


agent (x: REAL): REAL do Result := x * x end

denotes an object corresponding to the lambda expression λ x . x*x (with call by value). It can be treated like any other expression, e.g. assigned to a variable or passed around to routines. If the value of square is the above agent expression, then the result of applying square to a value a (β-reduction) is expressed as square.item ([a]), where the argument is passed as a tuple.
A Python example of this uses the lambda form of functions:


func = lambda x: x ** 2

This creates a new anonymous function and names it func which can be passed to other functions, stored in variables, etc. Python can also treat any other function created with the standard def statement as first-class objects.
The same holds for Smalltalk expression


[ :x | x * x ]

This is first-class object (block closure), which can be stored in variables, passed as arguments, etc.
A similar C++ example (using the Boost.Lambda library):


std::for_each(c.begin(), c.end(), std::cout << _1 * _1 << std::endl);

Here the standard library function for_each iterates over all members of container 'c', and prints the square of each element. The _1 notation is Boost.Lambda's convention (originally derived from Boost.Bind) for representing the first placeholder element (the first argument), represented as x elsewhere.
A simple C# delegate taking a variable and returning the square. This function variable can then be passed to other methods (or function delegates)


//Declare a delegate signature
delegate double MathDelegate(double i);
//Create a delegate instance
MathDelegate f = delegate(double i) { return Math.Pow(i, 2); };



/* Passing 'f' function variable to another method, executing,
   and returning the result of the function
 */
double Execute(MathDelegate f)
{
    return f(100);
}

In C# 3.0, the language has lambda expressions in a form similar to python or lisp. The expression resolves to a delegate like in the previous example but the above can be simplified to below.


//Create a delegate instance
MathDelegate f = i => i * i;
Execute(f);
// or more simply put
Execute(i => i * i);


[edit] Reduction strategies
For more details on this topic, see Evaluation strategy.
Whether a term is normalising or not, and how much work needs to be done in normalising it if it is, depends to a large extent on the reduction strategy used. The distinction between reduction strategies relates to the distinction in functional programming languages between eager evaluation and lazy evaluation.
The following uses the term 'redex', short for 'reducible expression'. For example, (λ x. M) N is a beta-redex; λ x. M x is an eta-redex if x is not free in M. The expression to which a redex reduces is called its reduct; using the previous example, the reducts of these expressions are respectively M[x:=N] and M.

Full beta reductions
Any redex can be reduced at any time. This means essentially the lack of any particular reduction strategy — with regard to reducibility, "all bets are off".
Applicative order
The rightmost, innermost redex is always reduced first. Intuitively this means a function's arguments are always reduced before the function itself. Applicative order always attempts to apply functions to normal forms, even when this is not possible.
Most programming languages (including Lisp, ML and imperative languages like C and Java) are described as "strict", meaning that functions applied to non-normalising arguments are non-normalising. This is done essentially using applicative order, call by value reduction (see below), but usually called "eager evaluation".
Normal order
The leftmost, outermost redex is always reduced first. That is, whenever possible the arguments are substituted into the body of an abstraction before the arguments are reduced.
Call by name
As normal order, but no reductions are performed inside abstractions. For example λ x.(λ x.x)x is in normal form according to this strategy, although it contains the redex (λ x.x)x.
Call by value
Only the outermost redexes are reduced: a redex is reduced only when its right hand side has reduced to a value (variable or lambda abstraction).
Call by need
As normal order, but function applications that would duplicate terms instead name the argument, which is then reduced only "when it is needed". Called in practical contexts "lazy evaluation". In implementations this "name" takes the form of a pointer, with the redex represented by a thunk.

Applicative order is not a normalising strategy. The usual counterexample is as follows: define Ω = ωω where ω = λ x. xx. This entire expression contains only one redex, namely the whole expression; its reduct is again Ω. Since this is the only available reduction, Ω has no normal form (under any evaluation strategy). Using applicative order, the expression KIΩ = (λ x y . x)(λ x.x)Ω is reduced by first reducing Ω to normal form (since it is the rightmost redex), but since Ω has no normal form, applicative order fails to find a normal form for KIΩ.
In contrast, normal order is so called because it always finds a normalising reduction if one exists. In the above example, KIΩ reduces under normal order to I, a normal form. A drawback is that redexes in the arguments may be copied, resulting in duplicated computation (for example, (λ x.xx)((λ x.x)y) reduces to ((λx.x)y)((λx.x)y) using this strategy; now there are two redexes, so full evaluation needs two more steps, but if the argument had been reduced first, there would now be none).
The positive tradeoff of using applicative order is that it does not cause unnecessary computation if all arguments are used, because it never substitutes arguments containing redexes and hence never needs to copy them (which would duplicate work). In the above example, in applicative order (λ x.xx)((λ x.x)y) reduces first to (λ x.xx)y and then to the normal order yy, taking two steps instead of three.
Most purely functional programming languages (notably Miranda and its descendents, including Haskell), and the proof languages of theorem provers, use lazy evaluation, which is essentially the same as call by need. This is like normal order reduction, but call by need manages to avoid the duplication of work inherent in normal order reduction using sharing. In the example given above, (λ x.xx)((λ x.x)y) reduces to ((λx.x)y)((λx.x)y), which has two redexes, but in call by need they are represented using the same object rather than copied, so when one is reduced the other is too.

[edit] A note about complexity
While the idea of beta reduction seems simple enough, it is not an atomic step, in that it must have a non-trivial cost when estimating computational complexity. [8] To be precise, one must somehow find the location of all of the occurrences of the bound variable V in the expression E, implying a time cost, or one must keep track of these locations in some way, implying a space cost. A naïve search for the locations of V in E is O(n) in the length n of E. This has led to the study of systems which use explicit substitution. Sinot's director strings [9] offer a way of tracking the locations of free variables in expressions.

[edit] Parallelism and concurrency
The Church-Rosser property of the lambda calculus means that evaluation (β-reduction) can be carried out in any order, even in parallel. This means that various nondeterministic evaluation strategies are relevant. However, the lambda calculus does not offer any explicit constructs for parallelism. One can add constructs such as Futures to the lambda-calculus. Other process calculi have been developed for describing communication and concurrency.

[edit] Semantics
The fact that lambda calculus terms act as functions on other lambda calculus terms, and even on themselves, led to questions about the semantics of the lambda calculus. Could a sensible meaning be assigned to lambda calculus terms? The natural semantics was to find a set D isomorphic to the function space D → D, of functions on itself. However, no nontrivial such D can exist, by cardinality constraints because the set of all functions from D into D has greater cardinality than D.
In the 1970s, Dana Scott showed that, if only continuous functions were considered, a set or domain D with the required property could be found, thus providing a model for the lambda calculus.
This work also formed the basis for the denotational semantics of programming languages.

[edit] See also


Anonymous recursion — Definition of recursive functions without naming them
Applicative computing systems — Treatment of objects in the style of the lambda calculus
Calculus of constructions — A typed lambda calculus with types as first-class values
Cartesian closed category — A setting for lambda calculus in category theory
Categorical abstract machine — A model of computation applicable to lambda calculus
Combinatory logic — A notation for mathematical logic without variables
Curry-Howard isomorphism — The formal correspondence between programs and proofs
Domain theory — Study of certain posets giving denotational semantics for lambda calculus
Evaluation strategy — Rules for the evaluation of expressions in programming languages
Explicit substitution — The theory of substitution, as used in β-reduction
Kleene-Rosser paradox — A demonstration that some form of lambda calculus is inconsistent
Knights of the Lambda Calculus — A semi-fictional organization of LISP and Scheme hackers
Lambda cube — A framework for some extensions of typed lambda calculus
Lambda-mu calculus — An extension of the lambda calculus for treating classical logic
Rewriting — Transformation of formulæ in formal systems
SECD machine — A virtual machine designed for the lambda calculus
SKI combinator calculus — A computational system based on the S, K and I combinators
System F — A typed lambda calculus with type-variables
Typed lambda calculus — Lambda calculus with typed variables (and functions)
Unlambda — An esoteric functional programming language based on combinatory logic



[edit] References


^ Henk Barendregt, The Impact of the Lambda Calculus in Logic and Computer Science. The Bulletin of Symbolic Logic, Volume 3, Number 2, June 1997.
^ Barendregt, Hendrik Pieter (1984), The Lambda Calculus: Its Syntax and Semantics, Studies in Logic and the Foundations of Mathematics, 103 (Revised edition ed.), North Holland, Amsterdam. Corrections, ISBN 0-444-87508-5, http://www.elsevier.com/wps/find/bookdescription.cws_home/501727/description 
^ Selinger, Peter, Lecture Notes on the Lambda Calculus, Department of Mathematics and Statistics, University of Ottawa, pp. 9, http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf 
^ Barendregt, Henk; Barendsen, Erik (March 2000), Introduction to Lambda Calculus, ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf 
^ Felleisen, Matthias; Matthew Flatt (2006). Programming Languages and Lambda Calculi. pp. 26. http://www.cs.utah.edu/plt/publications/pllc.pdf. 
^ Selinger, Peter, Lecture Notes on the Lambda Calculus, Department of Mathematics and Statistics, University of Ottawa, pp. 16, http://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf 
^ Simon Peyton-Jones, Implementation of Functional Programming Languages, Prentice Hall, 1987
^ R. Statman, "The typed λ-calculus is not elementary recursive." Theoretical Computer Science, (1979) 9 pp73-81.
^ F.-R. Sinot. "Director Strings Revisited: A Generic Approach to the Efficient Representation of Free Variables in Higher-order Rewriting." Journal of Logic and Computation 15(2), pages 201-218, 2005.



[edit] Further reading

Abelson, Harold & Gerald Jay Sussman. Structure and Interpretation of Computer Programs. The MIT Press. ISBN 0-262-51087-1.
Hendrik Pieter Barendregt Introduction to Lambda Calculus.
Barendregt, Hendrik Pieter, The Type Free Lambda Calculus pp1091-1132 of Handbook of Mathematical Logic, North-Holland (1977) ISBN 0-7204-2285-X
Church, Alonzo, An unsolvable problem of elementary number theory, American Journal of Mathematics, 58 (1936), pp. 345–363. This paper contains the proof that the equivalence of lambda expressions is in general not decidable.
Kleene, Stephen, A theory of positive integers in formal logic, American Journal of Mathematics, 57 (1935), pp. 153–173 and 219–244. Contains the lambda calculus definitions of several familiar functions.
Landin, Peter, A Correspondence Between ALGOL 60 and Church's Lambda-Notation, Communications of the ACM, vol. 8, no. 2 (1965), pages 89-101. Available from the ACM site. A classic paper highlighting the importance of lambda-calculus as a basis for programming languages.
Larson, Jim, An Introduction to Lambda Calculus and Scheme. A gentle introduction for programmers.
Schalk, A. and Simmons, H. (2005) An introduction to λ-calculi and arithmetic with a decent selection of exercises. Notes for a course in the Mathematical Logic MSc at Manchester University.

Some parts of this article are based on material from FOLDOC, used with permission.

[edit] External links

Henk Barendregt, Erik Barendsen Introduction to Lambda Calculus-(PDF)
Achim Jung, A Short Introduction to the Lambda Calculus-(PDF)
David C. Keenan, To Dissect a Mockingbird: A Graphical Notation for the Lambda Calculus with Animated Reduction
Raúl Rojas, A Tutorial Introduction to the Lambda Calculus-(PDF)
Peter Selinger, Lecture Notes on the Lambda Calculus-(PDF)
L. Allison, Some executable λ-calculus examples
Chris Barker, Some executable (Javascript) simple examples, and text.
Georg P. Loczewski, The Lambda Calculus and A++
Bret Victor, Alligator Eggs: A Puzzle Game Based on Lambda Calculus
Lambda Calculus on Safalra’s Website
Lambda Calculus on PlanetMath
LCI Lambda Interpreter a simple yet powerful pure calculus interpreter
Lambda Calculus links on Lambda-the-Ultimate
Mike Thyer, Lambda Animator, a graphical Java applet demonstrating alternative reduction strategies.
An Introduction to Lambda Calculus and Scheme, by Jim Larson




Retrieved from "http://en.wikipedia.org/wiki/Lambda_calculus"
Categories: Computational models | Lambda calculus | Theoretical computer science | Formal methods | Recursion theory | Articles with example code | American inventions 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


বাংলা
Català
Česky
Deutsch
Ελληνικά
Español
Esperanto
Français
Hrvatski
Italiano
עברית
Magyar
Nederlands
日本語
Polski
Português
Русский
Simple English
Slovenčina
Svenska
Українська
中文









 This page was last modified on 3 April 2009, at 02:12.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
