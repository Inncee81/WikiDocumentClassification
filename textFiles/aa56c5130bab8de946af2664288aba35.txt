













Data Access Object - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Data_Access_Object";
		var wgTitle = "Data Access Object";
		var wgAction = "view";
		var wgArticleId = "866093";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279710644;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Data Access Object

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

This article is about the Data Access Object design pattern in object-oriented software design. For the Microsoft library of the same name, see Data Access Objects.

In computer software, a Data Access Object (DAO) is an object that provides an abstract interface to some type of database or persistence mechanism, providing some specific operations without exposing details of the database. It provides a mapping from application calls to the persistence layer. This isolation separates the concerns of what data accesses the application needs, in terms of domain-specific objects and data types (the public interface of the DAO), and how these needs can be satisfied with a specific DBMS, database schema, etc. (the implementation of the DAO).
This design pattern is equally applicable to most programming languages, most types of software with persistence needs and most types of database, but it is traditionally associated with Java EE applications and with relational databases accessed via the JDBC API because of its origin in Sun Microsystems' best practice guidelines[1] ("Core J2EE Patterns") for that platform.




Contents


1 Advantages
2 Disadvantages
3 See also
4 External links
5 Tools and Frameworks
6 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Advantages
The advantage of using data access objects is the relatively simple and rigorous separation between two important parts of an application which can and should know almost nothing of each other, and which can be expected to evolve frequently and independently. Changing business logic can rely on the same DAO interface, while changes to persistence logic does not affect DAO clients as long as the interface remains correctly implemented.
In the specific context of the Java programming language, Data Access Objects as a design concept can be implemented in a number of ways. This can range from a fairly simple interface that separates the data access parts from the application logic, to frameworks and commercial products. DAO coding paradigms can require some skill. Use of technologies like Java persistence technologies and JDO ensures to some extent that the design pattern is implemented. Technologies like EJB CMP come built into application servers and can be used in applications that use a JEE application server. Commercial products like TopLink are available based on Object-relational mapping. Popular open source products include Hibernate which is also based on ORM and iBATIS and Apache OpenJPA which is not based on ORM. The expected benefit of use of Data Access Objects in a Java scenario is

Improved efficiency and performance of the data layer since it is standard reusable software.[citation needed]
It is also expected that in case the DAO implementation were to change the other parts of the application would be unaffected.[clarification needed]
Resources are dedicated to develop and implement this layer which converts into better software in this layer.[weasel words]


[edit] Disadvantages

As with many design patterns, a design pattern increases the complexity of the application.[citation needed]
As is common in Java, there are many open source and commercial implementations of DAO available. Each of these can have potentially different implementation strategies and usage models. There is a familiarisation curve involved with each of them.[citation needed]
A certain amount of skill is required to implement a DAO design pattern or use a DAO product.


[edit] See also

Data Transfer Object
Design Patterns (book)
Object-relational mapping
Service Data Objects
Create, read, update and delete


[edit] External links

Core J2EE Patterns - Data Access Object
Inner Class strategy
Data Access Objects versus Object Relational Mapping


[edit] Tools and Frameworks

Persist ORM tool
DB Solo EJB 3.0 DAO code generator
MDAOG DAO code generator for PostgreSQL databases
CodeFutures (Firestorm/DAO) Generator for JDBC DAO, Spring DAO, Hibernate DAO
JingDAO DAO framework
PerfectJPattern Open Source Project, Provides componentized implementation of the DAO Pattern in Java (JPA, Hibernate and Spring)


[edit] References

^ "Core J2EE Patterns - Data Access Objects". Sun Microsystems Inc.. 2007-08-02. http://java.sun.com/blueprints/corej2eepatterns/Patterns/DataAccessObject.html. 




Retrieved from "http://en.wikipedia.org/wiki/Data_Access_Object"
Categories: Software design patternsHidden categories: All articles with unsourced statements | Articles with unsourced statements since March 2009 | All pages needing cleanup | Wikipedia articles needing clarification from March 2009 | Articles with specifically-marked weasel-worded phrases since March 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Français
Italiano
עברית
日本語
Polski
Português
Русский









 This page was last modified on 26 March 2009, at 01:09 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
