













Prototype JavaScript Framework - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Prototype_JavaScript_Framework";
		var wgTitle = "Prototype JavaScript Framework";
		var wgAction = "view";
		var wgArticleId = "6189087";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279862730;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-javascript .de1, .source-javascript .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-javascript  {}
.source-javascript .head {}
.source-javascript .foot {}
.source-javascript .imp {font-weight: bold; color: red;}
.source-javascript .ln-xtra {color: #cc0; background-color: #ffc;}
.source-javascript li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-javascript li.li2 {font-weight: bold;}
.source-javascript .kw1 {color: #000066; font-weight: bold;}
.source-javascript .kw2 {color: #003366; font-weight: bold;}
.source-javascript .kw3 {color: #000066;}
.source-javascript .co1 {color: #009900; font-style: italic;}
.source-javascript .coMULTI {color: #009900; font-style: italic;}
.source-javascript .es0 {color: #000099; font-weight: bold;}
.source-javascript .br0 {color: #66cc66;}
.source-javascript .st0 {color: #3366CC;}
.source-javascript .nu0 {color: #CC0000;}
.source-javascript .me1 {color: #006600;}
.source-javascript .sc0 {}
.source-javascript .sc1 {}
.source-javascript .sc2 {}
.source-javascript .sc3 {}
.source-javascript .re0 {color: #0066FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Prototype JavaScript Framework

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Prototype JavaScript Framework

Developed by
Prototype Core Team


Latest release
1.6.0.3 / 2008-09-28; 193 days ago


Type
JavaScript toolkit


License
MIT License


Website
http://prototypejs.org


The Prototype JavaScript Framework is a JavaScript framework created by Sam Stephenson which provides an Ajax framework and other utilities. It is implemented as a single file of JavaScript code, usually named prototype.js. Prototype is distributed standalone, but also as part of larger projects, such as Ruby on Rails, script.aculo.us and Rico.




Contents


1 Features
2 Sample utility functions

2.1 The $() function
2.2 The $F() function
2.3 The $$() function
2.4 The Ajax object


3 Object-oriented programming
4 References
5 See also
6 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Features
Prototype provides various functions for developing JavaScript applications. The features range from programming shortcuts to major functions for dealing with XMLHttpRequest.
Prototype also provides library functions to support classes and class-based objects[1], something the JavaScript language does not have[2][3]. In JavaScript, object creation is prototype-based instead: an object creating function can have a prototype property, and any object assigned to that property will be used as a prototype for the objects created with that function. The Prototype framework is not to be confused with this language feature.

[edit] Sample utility functions

[edit] The $() function
The dollar function, $(), can be used as shorthand for the getElementById function. To refer to an element in the DOM of an HTML page, the usual function identifying an element is:


 document.getElementById("id_of_element").style.color = "#ffffff";

The $() function reduces the code to:


   $("id_of_element").setStyle({color: '#ffffff'});


Note: Like the underscore (_), the $ character is a legal "word character" in JavaScript identifiers, and has no other significance in the language. It was added to the language at the same time as support for regular expressions, so that the Perl-like matching variables could be emulated, such as $` and $'.


[edit] The $F() function
Building on the $() function: the $F() function returns the value of the requested form element. For a 'text' input, the function will return the data contained in the element. For a 'select' input element, the function will return the currently selected value.


 $F("id_of_input_element")


[edit] The $$() function
The dollar dollar function is Prototype's CSS Selector Engine. It returns all matching elements, following the same rules as a selector in a CSS stylesheet. For example, if you want to get all <a> tags with the class "pulsate", you would use the following:


 $$("a.pulsate")

This returns a collection of elements. If you are using the Script.aculo.us extension of the core Prototype library, you can apply the "pulsate" (blink) effect as follows:


 $$("a.pulsate").each(Effect.Pulsate);


[edit] The Ajax object
In an effort to reduce the amount of code needed to run a cross-browser XMLHttpRequest function, Prototype provides the Ajax object to abstract the different browsers. It has two main methods: Ajax.Request() and Ajax.Updater(). There are two forms of the Ajax object. Ajax.Request returns the raw XML output from an AJAX call, while the Ajax.Updater will inject the return inside a specified DOM object. The Ajax.Request below finds the values of two HTML value inputs, requests a page from the server using the values as POST values, then runs a custom function called showResponse() when complete:


var url = "http://yourserver/path/server_script";
 
var myAjax = new Ajax.Request(url, {
   parameters: {
      value1: $F("name_of_id_1"),
      value2: $F("name_of_id_2")
   },
   onSuccess: showResponse,
   onFailure: showError
});


[edit] Object-oriented programming
Prototype also adds support for more traditional object-oriented programming. The Class.create() method is used to create a new class. A class is then assigned a prototype which acts as a blueprint for instances of the class.


var FirstClass = Class.create( {
   // The initialize method serves as a constructor
   initialize: function () {
       this.data = "Hello World";
   }
});

Extending another class:


Ajax.Request= Class.create( Ajax.Base, { 
  //Overwrite the initialize method
  initialize: function(url, options) { 
    this.transport = Ajax.getTransport(); 
    this.setOptions(options); 
    this.request(url); 
  }, 
  // ...more methods add ... 
});

The framework function Object.extend(dest, src) takes two objects as parameters and copies the properties of the second object to the first one simulating inheritance. The combined object is also returned as a result from the function. As in the example above, the first parameter usually creates the base object, while the second is an anonymous object used solely for defining additional properties. The entire sub-class declaration happens within the parentheses of the function call.

[edit] References


^ Defining classes and inheritance, in the Prototype documentation
^ Class-based vs prototype-based languages, in mozilla.org's JavaScript guide
^ Inheriting Properties, in mozilla.org's JavaScript guide



[edit] See also

Ajax (programming)
Comparison of JavaScript frameworks
Script.aculo.us
Archetype JavaScript Framework
Mootools JavaScript Framework


[edit] External links

Prototype Javascript Framework home page
Official Prototype API documentation
Wrox Professional JavaScript Frameworks book wiki with 6 Prototype chapters
Unofficial Prototype & Script.aculo.us wiki and FAQ created by community members
Archetype Javascript Framework runs on top of Prototype
Prototype extensions library created by community members
Prototype extensions examples








v • d • e

List of Web Application Frameworks





Actionscript

PureMVC






ASP.NET

ASP.NET MVC · BFC · DotNetNuke · MonoRail · Umbraco






ColdFusion

ColdSpring · Fusebox · Mach-II · Model-Glue · onTap






Common Lisp

ABCL-web · blow · BKNR · SymbolicWeb · UnCommon Web






Java

Apache Struts · AppFuse · Flexive · Google Web Toolkit · IT Mill Toolkit · ItsNat · JavaServer Faces · JBoss Seam · Makumba · OpenXava · Reasonable Server Faces · RIFE · Restlet · Spring · Stripes · Tapestry · WebWork · Wicket · ZK






JavaScript (client-side)

Ample SDK · Clean AJAX · CougarXML · Dojo · Echo · Ext · jQuery · midori · MochiKit · MooTools · OpenLink AJAX · Prototype JavaScript · Pyjamas · qooxdoo · Rialto · Rico · script.aculo.us · SmartClient · SproutCore · Spry · Yahoo! UI Library · Google Web Toolkit






JavaScript (server-side)

AppJet · Jaxer






Perl

Catalyst · Interchange · Mason






PHP

Akelos · CakePHP · Chisimba · CodeIgniter · Drupal · Horde · Kohana · Kolibri · KumbiaPHP · Midgard · PEAR · PHPNuke · PHPonTrax · Seagull · Simplicity · Symfony · Zend · Zoop






Python

CherryPy · Django · Karrigell · Nevow · Pyjamas · Pylons · Quixote · Spyce · TurboGears · Twisted · web2py · Zope






Ruby

Adhearsion · Camping · eRuby (RHTML) · Merb · Nitro · RubyCocoa · Ruby on Rails






Smalltalk

AIDA/Web · Seaside






Other languages

Application Express (PL/SQL) · Fusebox (ColdFusion and PHP) · OpenACS (Tcl) · Yaws (Erlang) · HAppS (Haskell) · Cappuccino (Objective-J)









Retrieved from "http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework"
Categories: JavaScript libraries | Ajax (programming) 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Español
Italiano
Română
Русский
Tiếng Việt
中文









 This page was last modified on 26 March 2009, at 20:07 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
