













Visual Basic .NET - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Visual_Basic_.NET";
		var wgTitle = "Visual Basic .NET";
		var wgAction = "view";
		var wgArticleId = "208996";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282084430;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-vb {line-height: normal;}
.source-vb li, .source-vb pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for vb
 * CSS class: source-vb, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-vb .de1, .source-vb .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-vb  {}
.source-vb .head {}
.source-vb .foot {}
.source-vb .imp {font-weight: bold; color: red;}
.source-vb .ln-xtra {color: #cc0; background-color: #ffc;}
.source-vb li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-vb li.li2 {font-weight: bold;}
.source-vb .kw1 {color: #b1b100;}
.source-vb .co1 {color: #808080;}
.source-vb .es0 {color: #000099;}
.source-vb .br0 {color: #66cc66;}
.source-vb .st0 {color: #ff0000;}
.source-vb .nu0 {color: #cc66cc;}
.source-vb .me1 {color: #66cc66;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
/*<![CDATA[*/
.source-vbnet {line-height: normal;}
.source-vbnet li, .source-vbnet pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for vbnet
 * CSS class: source-vbnet, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-vbnet .de1, .source-vbnet .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-vbnet  {}
.source-vbnet .head {}
.source-vbnet .foot {}
.source-vbnet .imp {font-weight: bold; color: red;}
.source-vbnet .ln-xtra {color: #cc0; background-color: #ffc;}
.source-vbnet li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-vbnet li.li2 {font-weight: bold;}
.source-vbnet .kw1 {color: #0600FF;}
.source-vbnet .kw2 {color: #FF8000;}
.source-vbnet .kw3 {color: #008000;}
.source-vbnet .kw4 {color: #FF0000;}
.source-vbnet .kw5 {color: #804040;}
.source-vbnet .kw6 {color: #0600FF;}
.source-vbnet .kw7 {color: #0600FF;}
.source-vbnet .kw8 {color: #0600FF;}
.source-vbnet .co1 {color: #008080; font-style: italic;}
.source-vbnet .coMULTI {color: #008080; font-style: italic;}
.source-vbnet .es0 {color: #008080; font-weight: bold;}
.source-vbnet .br0 {color: #008000;}
.source-vbnet .st0 {color: #808080;}
.source-vbnet .nu0 {color: #FF0000;}
.source-vbnet .me1 {color: #0000FF;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Visual Basic .NET

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
This article is about the Visual Basic language shipping with Microsoft Visual Studio .NET or later. For the Visual Basic language shipping with Microsoft Visual Studio 6.0 or earlier, see Visual Basic.

Visual Basic .NET




Paradigm
structured, imperative, object-oriented, declarative


Appeared in
2001 (last revised 2008)


Designed by
Microsoft Corporation


Typing discipline
dynamic, strong, both safe and unsafe[1], nominative


Major implementations
.NET Framework, Mono


Dialects
Microsoft Visual Studio .NET, .NET 2003, 2005, 2008


Visual Basic (VB), formerly called Visual Basic .NET (VB.NET), is an object-oriented computer language that can be viewed as an evolution of Microsoft's Visual Basic (VB) implemented on the Microsoft .NET framework. Its introduction has been controversial, as significant changes were made that broke backward compatibility with older versions and caused a rift within the developer community.




Contents


1 Versions of Visual Basic .NET

1.1 Visual Basic .NET (VB 7)
1.2 Visual Basic .NET 2003 (VB 7.1)
1.3 Visual Basic 2005 (VB 8.0)

1.3.1 'IsNot' operator patented
1.3.2 Visual Basic 2005 Express


1.4 Visual Basic 2008 (VB 9.0)
1.5 Visual Basic 'VBx' (VB 10.0)


2 Relation to older versions of Visual Basic (VB6 and previous)

2.1 Comparative samples
2.2 Criticism


3 Cross-platform and open-source development
4 Hello world example
5 Notes
6 See also
7 External links

7.1 Tutorials







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Versions of Visual Basic .NET
As of November 2007, there are four versions of Visual Basic .NET that were implemented by The Visual Basic Team

[edit] Visual Basic .NET (VB 7)
The original Visual Basic .NET was released alongside Visual C# and ASP.NET in 2002. C# — widely touted as Microsoft's answer to Java — received the lion's share of media attention, while VB.NET (sometimes known as VB7) was not as widely covered.[citation needed]

[edit] Visual Basic .NET 2003 (VB 7.1)
Visual Basic .NET 2003 was released with version 1.1 of the .NET Framework. New features included support for the .NET Compact Framework and a better VB upgrade wizard. Improvements were also made to the performance and reliability of the .NET IDE (particularly the background compiler) and runtime.
In addition, Visual Basic .NET 2003 was also available in the Visual Studio .NET 2003 Academic Edition (VS03AE). VS03AE is distributed to a certain number of scholars from each country for free.

[edit] Visual Basic 2005 (VB 8.0)
Visual Basic 2005 is the name used to refer to the update to Visual Basic .NET, Microsoft having decided to drop the .NET portion of the title.
For this release, Microsoft added many features, including:

Edit and Continue
Design-time expression evaluation
The My pseudo-namespace (overview, details), which provides:

easy access to certain areas of the .NET Framework that otherwise require significant code to access
dynamically-generated classes (notably My.Forms)


Improvements to the VB-to-VB.NET converter [2]
The Using keyword, simplifying the use of objects that require the Dispose pattern to free resources
Just My Code, which hides boilerplate code written by the Visual Studio .NET IDE
Data Source binding, easing database client/server development

The above functions (particularly My) are intended to reinforce Visual Basic .NET's focus as a rapid application development platform and further differentiate it from C#.
Visual Basic 2005 introduced features meant to fill in the gaps between itself and other "more powerful" .NET languages, adding:

.NET 2.0 languages features such as:

generics [3]
Partial classes, a method of defining some parts of a class in one file and then adding more definitions later; particularly useful for integrating user code with auto-generated code
Nullable Types


XML comments that can be processed by tools like NDoc to produce "automatic" documentation
Operator overloading [4]
Support for unsigned integer data types commonly used in other languages


[edit] 'IsNot' operator patented
One other feature of Visual Basic 2005 is the IsNot operator that makes 'If X IsNot Y' equivalent to 'If Not X Is Y', which gained notoriety[5] when it was found to be the subject of a Microsoft patent application.[6][7]

[edit] Visual Basic 2005 Express
As part of the Visual Studio product range, Microsoft created a set of free development environments for hobbyists and novices, the Visual Studio 2005 Express series. One edition in the series is Visual Basic 2005 Express Edition, which was succeeded by Visual Basic 2008 Express Edition in the 2008 edition of Visual Studio Express.[8]
The Express Editions are targeted specifically for people learning a language. They have a streamlined version of the user interface, and lack more advanced features of the standard versions. On the other hand, Visual Basic 2005 Express Edition does contain the Visual Basic 6.0 converter, so it is a way to evaluate feasibility of conversion from older versions of Visual Basic.

[edit] Visual Basic 2008 (VB 9.0)
Visual Basic 9.0 was released together with the Microsoft .NET Framework 3.5 on November 19, 2007.
For this release, Microsoft added many features, including:

A true conditional operator If (boolean, value, value) to replace the IIF function.
Anonymous types
Support for LINQ
Lambda expressions
XML Literals
Type Inference


[edit] Visual Basic 'VBx' (VB 10.0)
Visual Basic 10, also known as VBx, will offer support for the Dynamic Language Runtime (DLR). VB 10 is planned to be part of Silverlight 2.0.[citation needed]

[edit] Relation to older versions of Visual Basic (VB6 and previous)
Whether Visual Basic .NET should be considered as just another version of Visual Basic or a completely different language is a topic of debate. This is not obvious, as once the methods that have been moved around and that can be automatically converted are accounted for, the basic syntax of the language has not seen many "breaking" changes, just additions to support new features like structured exception handling and short-circuited expressions. Two important data type changes occurred with the move to VB.NET. Compared to VB6, the Integer data type has been doubled in length from 16 bits to 32 bits, and the Long data type has been doubled in length from 32 bits to 64 bits. This is true for all versions of VB.NET. A 16-bit integer in all versions of VB.NET is now known as a Short. Similarly, the Windows Forms GUI editor is very similar in style and function to the Visual Basic form editor.
The version numbers used for the new Visual Basic (7, 7.1, 8, 9, ...) clearly imply that it is viewed by Microsoft as still essentially the same product as the old Visual Basic.
The things that have changed significantly are the semantics — from those of an object-based programming language running on a deterministic, reference-counted  engine based on COM to a fully object-oriented language backed by the .NET Framework, which consists of a combination of the Common Language Runtime (a virtual machine using generational garbage collection and a just-in-time compilation engine) and a far larger class library. The increased breadth of the latter is also a problem that VB developers have to deal with when coming to the language, although this is somewhat addressed by the My feature in Visual Studio 2005.
The changes have altered many underlying assumptions about the "right" thing to do with respect to performance and maintainability. Some functions and libraries no longer exist; others are available, but not as efficient as the "native" .NET alternatives. Even if they compile, most converted VB6 applications will require some level of refactoring to take full advantage of the new language. Documentation is available to cover changes in the syntax, debugging applications, deployment and terminology.[9]

[edit] Comparative samples
The following simple example demonstrates similarity in syntax between VB and VB.NET. Both examples pop up a message box saying "Hello, World" with an OK button.
Classic VB example:


Private Sub Command1_Click()
    MsgBox "Hello, World"
End Sub

A VB.NET example:


Public Class Form1
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        MessageBox.Show("Hello, World")
    End Sub
End Class


Both Visual Basic 6 and Visual Basic .NET will automatically generate the Sub and End Sub statements when the corresponding button is clicked in design view. Visual Basic .NET will also generate the necessary Class and End Class statements. The developer need only add the statement to display the "Hello, World" message box.
Note that all procedure calls must be made with parentheses in VB.NET, whereas in VB6 there were different conventions for functions (parentheses required) and subs (no parentheses allowed, unless called using the keyword Call).
Also note that the names Command1 and Button1 are not obligatory. However, these are default names for a command button in VB6 and VB.NET respectively.
In VB.NET, the Handles keyword is used to make the sub Button1_Click a handler for the Click event of the object Button1. In VB6, event handler subs must have a specific name consisting of the object's name ("Command1"), an underscore ("_"), and the event's name ("Click", hence "Command1_Click").
There is a function called MsgBox in the Microsoft.VisualBasic namespace which can be used similarly to the corresponding function in VB6. There is a controversy about which function to use as a best practice (not only restricted to showing message boxes but also regarding other features of the Microsoft.VisualBasic namespace). Some programmers prefer to do things "the .NET way", since the Framework classes have more features and are less language-specific. Others argue that using language-specific features makes code more readable (for example, using int (C#) or Integer (VB.NET) instead of System.Int32).
In VB 2008, the inclusion of "Byval sender as Object, Byval e as EventArgs" has become optional.

The following example demonstrates a difference between VB6 and VB.NET. Both examples unload the active window.
Classic VB Example:


Sub cmdClose_Click()
    Unload Me
End Sub

A VB.NET example:


Sub btnClose_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnClose.Click 
    Me.Close()
End Sub

Note the 'cmd' prefix being replaced with the 'btn' prefix, conforming to the new convention previously mentioned.
Visual Basic 6 did not provide common operator shortcuts. The following are equivalent:
VB6 Example:


Sub Timer1_Timer()
    Me.Height = Me.Height - 1
End Sub

VB.NET example:


Sub Timer1_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles Timer1.Tick
    Me.Height -= 1
End Sub


[edit] Criticism
Many long-time Visual Basic users have complained [10] about Visual Basic .NET because initial versions dropped a large number of language constructs and user interface features [11] that were available in VB6 (which is now no longer sold), and changed the semantics of those that remained; for example, in VB.NET parameters are (by default) passed by value, not by reference. Detractors refer pejoratively to VB.NET as Visual Fred or DOTNOT.[12] On March 8, 2005, a petition [13] was set up in response to Microsoft's refusal to extend its mainstream support[14] for VB6.
VB.NET's supporters state that the new language is in most respects more powerful than the original, incorporating modern object oriented programming paradigms in a more natural, coherent and complete manner than was possible with earlier versions. Opponents tend not to disagree with this, instead taking the position that although VB6 has flaws in its object model, the cost in terms of redevelopment effort is too high for any benefits that might be gained by converting to VB.NET. Independent developers producing software for Internet distribution have also taken issue with the size of the runtime.[citation needed]
It is simpler to decompile languages that target Common Intermediate Language, including VB.NET, compared to languages that compile to machine code. Tools like .NET Reflector can provide a close approximation to the original code due to the large amount of metadata provided in CIL.
Microsoft supplies an automated VB6-to-VB.NET converter with Visual Studio .NET, which has improved over time, but it cannot convert all code, and almost all non-trivial programs will need some manual effort to compile. Most will need a significant level of code refactoring to work optimally. Visual Basic programs that are mainly algorithmic in nature can be migrated with few difficulties; those that rely heavily on such features as database support, graphics, unmanaged operations or on implementation details are more troublesome.
However in 2005 ArtinSoft, the company that developed the VB6-to-VB.NET converter for Microsoft that comes with Visual Studio .NET, developed a migration tool called the ArtinSoft Visual Basic Upgrade Companion. This tool expands upon the migration wizard included in Visual Studio .NET by providing some automated code refactoring, such as type inference for late-bound variables—producing explicitly typed variables—and conversion to structured error handling, among many other tweaks that improve code quality.
Using artificial intelligence algorithms, it is possible for this new tool to recognize certain code patterns that can be reorganized into more structured versions, potentially yielding a higher quality .NET code. For example, the tool is able to automatically recognize commonly used patterns of “On Error GoTo”, analyze them, and convert them to code blocks that use “Try ... Catch” instead of the legacy error handling model—in many cases with no human intervention. However, a line-by-line conversion will not be able to create the object-oriented style of programming that is at the heart of .NET programming. Other tools such as NewCode's use a model-driven approach to enable users to re-engineer the application structure on a model, prior to .NET code generation.
In addition, the required runtime libraries for VB6 programs are provided with Windows 98 SE and above, while VB.NET programs require the installation of the significantly larger .NET Framework. The framework is included with Windows Vista, Windows XP Media Center Edition, Windows XP Tablet PC Edition, Windows Server 2008 and Windows Server 2003. For other supported operating systems such as Windows 2000 or Windows XP (Home or Professional Editions), it must be separately installed.
Microsoft's response to developer dissatisfaction has focused around making it easier to move new development and shift existing codebases from VB6 to VB.NET. Their latest offering is the VBRun website, which offers code samples and articles for:

completing common tasks in VB6, like creating a print preview
integrating VB6 and VB.NET solutions (dubbed VB Fusion)


[edit] Cross-platform and open-source development
The creation of open-source tools for VB.NET development have been slow compared to C#, although the Mono development platform provides an implementation of VB.NET-specific libraries and a VB.NET 8.0 compatible compiler written in VB.NET[15], as well as standard framework libraries such as Windows Forms GUI library.
SharpDevelop and MonoDevelop are open-source alternative IDEs.

[edit] Hello world example





This section does not cite any references or sources. Please help improve this article by adding citations to reliable sources (ideally, using inline citations). Unsourced material may be challenged and removed. (December 2008)


The following is a very simple VB.NET program, a version of the classic "Hello world" example created as a console application:


Module Module1
 
    Sub Main()
        Console.WriteLine("Hello, world!")
    End Sub
 
End Module

The effect is to write the text Hello, world! to the command line. Each line serves a specific purpose, as follows:


Module Module1

This is a module definition, a division of code similar to a class, although modules can contain classes. Modules serve as containers of code that can be referenced from other parts of a program. This module matches the name of the code file: Module1.vb


Sub Main()

This is the entry point where the program begins execution. Sub is an abbreviation of "subroutine."


Console.WriteLine("Hello, world!")

This line performs the actual task of writing the output. Console is a system object, representing a command-line console where a program can input and output text. The program calls the Console method WriteLine, which causes the string passed to it to be displayed on the console. Another common method is using Message Box.

[edit] Notes


^ Option Strict can be used to switch between safe and unsafe type checking.
^ What's New with the Visual Basic Upgrade Wizard in Visual Basic 2005
^ Defining and Using Generics in Visual Basic 2005
^ Operator Overloading in Visual Basic 2005
^ Sherriff, Lucy (2005-02-22). "Real Software slams MS IsNot patent application". The Register. http://www.theregister.co.uk/2005/02/22/real_slams_ms_patent/. Retrieved on 2009-04-06. 
^ Taft, Darryl K. (2005-02-21). "Real Software Slams Microsofts Patent Effort". eWeek. http://www.eweek.com/article2/0,1759,1766949,00.asp. Retrieved on 2009-04-06. 
^ Vick, Paul A. Jr.; Barsan, Costica Corneliu; Silver, Amanda K. (2003-05-14). "United States Patent Application: 20040230959". IS NOT OPERATOR. US Patent & Trademark Office. http://appft1.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PG01&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.html&r=1&f=G&l=50&s1=%2220040230959%22.PGNR.&OS=DN/20040230959&RS=DN/20040230959. Retrieved on 2009-04-06. 
^ Microsoft Brings Programming to the Masses With Visual Studio Express: Company brings the power of code to growing community of hobbyist programmers who seek to integrate technology and software into their everyday lives
^ Migration - Upgrading from Visual Basic 6.0 MSDN - Developer Center - Visual Basic 6.0 Resource Center - Migration -
^ Karl E. Peterson. "Microsoft Basic: 1976-2001,R.I.P.". http://vb.mvps.org. http://vb.mvps.org/vfred/Trust.asp. Retrieved on 2009-03-07. 
^ Microsoft Basic: 1976-2001, R.I.P
^ Microsoft Basic: 1976-2001, R.I.P
^ Petition to Microsoft
^ Product Family Life-Cycle Guidelines for Visual Basic 6.0
^ Mono Project: VisualBasic.NET support



[edit] See also

CLR, and Platform

Common Language Runtime
Mono, an open source implementation of .NET


Environments and tools

Microsoft Visual Studio, IDE for .Net languages


Microsoft Visual Studio Express
Comparison of programming languages

Comparison of C# and Visual Basic .Net
Comparison of C# and Java (Relevant since many of the comparisons are really comparisons of the platform, and not the actual language.)


Visual Basic for Applications


[edit] External links





This article's external links may not follow Wikipedia's content policies or guidelines. Please improve this article by removing excessive or inappropriate external links.





Wikibooks has a book on the topic of
Visual Basic .NET




Microsoft's VB.NET website
Visual Basic Team
Startvbdotnet
Visual Basic 2008 Express Edition website
VBRun website - legacy VB6 resources from Microsoft


[edit] Tutorials

VB.NET Tutorial
VB @ The Movies(Free video tutorials from Microsoft)
Free Video Tutorials from MSDN








v • d • e

BASIC Programming Language





Classical

Atari BASIC · Atari ST BASIC · Dartmouth BASIC · GW-BASIC · HP BASIC for OpenVMS · Locomotive BASIC · Microsoft BASICA · MSX BASIC · Sinclair BASIC · Turbo-Basic XL · UBasic · Vilnius BASIC






Procedure-oriented

Beta BASIC · BBC BASIC · FreeBASIC ·  · Liberty BASIC · Microsoft Small Basic · PureBasic · QBasic · QuickBASIC · SuperBasic · True BASIC · Turbo Basic · XBasic · Xblite






With object extensions

BlitzMax · FreeBASIC · Gambas · PowerBasic · ProvideX · RapidQ · REALbasic · GLBasic · StarOffice Basic · Visual Basic · Visual Basic .NET













v • d • e

.NET Framework





Architecture

Base Class Library · Common Language Runtime · Code Access Security · Assembly · Metadata · COM Interop






Common Language
Infrastructure (CLI)

Common Language Infrastructure · Common Type System · Common Intermediate Language · Virtual Execution System






CLI Languages





Common1


C# · Visual Basic .NET · C++/CLI (Managed) · F#  · J#  · JScript .NET · Windows PowerShell







Other2


A# · Boo · M · Oxygene  · IronLisp · IronPython · IronRuby · IronScheme · Nemerle · Phalanger · P#









Components

ADO.NET (Entity Framework · Data Services) · ASP.NET (AJAX · MVC · Dynamic Data) · Language Integrated Query · CardSpace · ClickOnce · Communication Foundation · Dynamic Language Runtime · Forms · Presentation Foundation · Remoting · Workflow Foundation  · XAML






Other implementations

Mono · Compact Framework · XNA Framework · Micro Framework · Portable.NET · Silverlight · SSCLI






Comparisons

Java and C# · C# and Visual Basic .NET · Java and .NET platforms






Upcoming

"Acropolis" · "Jasper" · Parallel Extensions






1 Languages that are, will be, or have been included with Visual Studio or Microsoft Windows.
2 Non-academic or research languages with relatively large user-bases.












v • d • e

Microsoft development tools





Development
environments

Visual Studio (Team System · Express) · Visual Studio Tools for Office · Visual Studio Tools for Applications · Expression Web · Expression Blend






Languages and
compilers

Visual Basic (VB.NET) · Visual C++ · Visual C# · Visual J# · Visual FoxPro · IronPython · IronRuby · PowerShell · XAML · F#






Major APIs and
frameworks

Windows API / SDK · .NET Framework · Managed code frameworks (Presentation · Communication · Workflow · CardSpace) · Silverlight · XNA · ASP.NET (ASP.NET AJAX) · LINQ · ADO.NET · DirectX · Robotics Studio






Database tools
and languages





SQL Server


Express · Compact · Management Studio · Business Intelligence Development Studio · MSDE







SQL services


Analysis · Reporting · Integration · Notification







Other


Visual FoxPro · Microsoft Access · Extensible Storage Engine









Source control

Team Foundation Server · Visual SourceSafe






Driver development

Windows Driver Model · Windows Driver Foundation (KMDF · UMDF) · Windows Driver Kit · Windows Logo Kit









Retrieved from "http://en.wikipedia.org/wiki/Visual_Basic_.NET"
Categories: BASIC programming language family | Articles with example BASIC code | .NET programming languages | Microsoft Visual Studio | Microsoft BASICHidden categories: All articles with unsourced statements | Articles with unsourced statements since February 2007 | Articles with unsourced statements since May 2008 | Articles needing additional references from December 2008 | Wikipedia external links cleanup 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Dansk
Español
فارسی
Français
한국어
Bahasa Indonesia
Íslenska
Italiano
עברית
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Simple English
Svenska
ไทย
Tiếng Việt
中文









 This page was last modified on 6 April 2009, at 10:52.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
