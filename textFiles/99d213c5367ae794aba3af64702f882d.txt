













Quantum computer - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Quantum_computer";
		var wgTitle = "Quantum computer";
		var wgAction = "view";
		var wgArticleId = "25220";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281510507;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [""];
		var wgRestrictionMove = [""];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Quantum computer

From Wikipedia, the free encyclopedia

Jump to: navigation, search 




The Bloch sphere is a representation of a qubit, the fundamental building block of quantum computers.


A quantum computer is a device for computation that makes direct use of quantum mechanical phenomena, such as superposition and entanglement, to perform operations on data. The basic principle behind quantum computation is that quantum properties can be used to represent data and perform operations on these data.[1]
Although quantum computing is still in its infancy, experiments have been carried out in which quantum computational operations were executed on a very small number of qubits (quantum binary digits). Both practical and theoretical research continues with interest, and many national government and military funding agencies support quantum computing research to develop quantum computers for both civilian and national security purposes, such as cryptanalysis.[2]
If large-scale quantum computers can be built, they will be able to solve certain problems much faster than any of our current classical computers (for example Shor's algorithm). Quantum computers are different from other computers such as DNA computers and traditional computers based on transistors. Some computing architectures such as optical computers[3] may use classical superposition of electromagnetic waves. Without some specifically quantum mechanical resources such as entanglement, it is conjectured that an exponential advantage over classical computers is not possible.[4]




Contents


1 Basis
2 Bits vs. Qubits
3 Operation
4 Potential

4.1 Quantum decoherence


5 Candidates
6 Quantum computing in computational complexity theory
7 See also
8 References

8.1 General references


9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Basis
A classical computer has a memory made up of bits, where each bit holds either a one or a zero. A quantum computer maintains a sequence of qubits. A single qubit can hold a one, a zero, or, crucially, any quantum superposition of these; moreover, a pair of qubits can be in any quantum superposition of 4 states, and three qubits in any superposition of 8. In general a quantum computer with n qubits can be in an arbitrary superposition of up to 2n different states simultaneously (this compares to a normal computer that can only be in one of these 2n states at any one time). A quantum computer operates by manipulating those qubits with a fixed sequence of quantum logic gates. The sequence of gates to be applied is called a quantum algorithm.
An example of an implementation of qubits for a quantum computer could start with the use of particles with two spin states: "down" and "up" (typically written  and , or  and ). But in fact any system possessing an observable quantity A which is conserved under time evolution and such that A has at least two discrete and sufficiently spaced consecutive eigenvalues, is a suitable candidate for implementing a qubit. This is true because any such system can be mapped onto an effective spin-1/2 system.

[edit] Bits vs. Qubits




Qubits are made up of controlled particles and the means of control (e.g. devices that trap particles and switch them from one state to another).[5]


Consider first a classical computer that operates on a three-bit register. The state of the computer at any time is a probability distribution over the 23 = 8 different three-bit strings 000, 001, ..., 111—thus it is described by eight nonnegative numbers (a,b,c,d,e,f,g,h)—adding up to one.
The state of a three-qubit quantum computer is similarly described by an eight-dimensional vector (a,b,c,d,e,f,g,h), called a wavefunction. However, instead of adding to one, the sum of the squares of the coefficient magnitudes, | a | 2 + | b | 2 + ... + | h | 2, must equal one. Moreover, the coefficients are complex numbers that can be negative. The fact that the coefficients can be negative as well as positive allows for cancellation, or interference, between different computational paths, and is a key difference between quantum computing and probabilistic classical computing.[6]
If you measure the three qubits, then you will observe a three-bit string. The probability of measuring a string will equal the squared magnitude of that string's coefficients. Thus a measurement of the quantum state with coefficients (a,b,...,h) gives the classical probability distribution ( | a | 2, | b | 2,..., | h | 2). We say that the quantum state "collapses" to a classical state.
Note that an eight-dimensional vector can be specified in many different ways, depending on what basis you choose for the space. The basis of three-bit strings 000, 001, ..., 111 is known as the computational basis, and is often convenient, but other bases of unit-length, orthogonal vectors can also be used. Ket notation is often used to make explicit the choice of basis. For example, the state (a,b,c,d,e,f,g,h) in the computational basis can be written as , where, e.g.,  = (0,0,1,0,0,0,0,0). The computational basis for a single qubit (two dimensions) is  = (1,0),  = (0,1), but another common basis is the Hadamard basis of  and .
Note that although recording a classical state of n bits, a 2n-dimensional probability distribution, requires an exponential number of real numbers, practically we can always think of the system as being exactly one of the n-bit strings—we just don't know which one. Quantum mechanically, this is not the case, and all 2n complex coefficients need to be kept track of to see how the quantum system evolves. For example, a 300-qubit quantum computer has a state described by 2300 (approximately 1090) complex numbers, more than the number of atoms in the observable universe.

[edit] Operation
While a classical three-bit state and a quantum three-qubit state are both eight-dimensional vectors, they are manipulated quite differently for classical or quantum computation, respectively. For computing in either case, the system must be initialized, for example into the all-zeros string, , corresponding to the vector (1,0,0,0,0,0,0,0). In classical randomized computation, the system evolves according to the application of stochastic matrices, which preserve that the probabilities add up to one (i.e., preserve the L1 norm). In quantum computation, on the other hand, allowed operations are unitary matrices, which are effectively rotations (they preserve that the sum of the squares add up to one, the Euclidean or L2 norm). (Exactly what unitaries can be applied depend on the physics of the quantum device.) Consequently, since rotations can be undone by rotating backward, quantum computations are reversible. (Technically, quantum operations can be probabilistic combinations of unitaries, so quantum computation really does generalize classical computation. See quantum circuit for a more precise formulation.)
Finally, upon termination of the algorithm, the result needs to be read off. In the case of a classical computer, we sample from the probability distribution on the three-bit register to obtain one definite three-bit string, say 000. Quantum mechanically, we measure the three-qubit state, which is equivalent to collapsing the quantum state down to a classical distribution (with the coefficients in the classical state being the squared magnitudes of the coefficients for the quantum state, as described above) followed by sampling from that distribution. Note that this destroys the original quantum state. Many algorithms will only give the correct answer with a certain probability, however by repeatedly initializing, running and measuring the quantum computer, the probability of getting the correct answer can be increased.
For more details on the sequences of operations used for various algorithms, see universal quantum computer, Shor's algorithm, Grover's algorithm, Deutsch-Jozsa algorithm, quantum Fourier transform, quantum gate, quantum adiabatic algorithm and quantum error correction.

[edit] Potential
Integer factorization is believed to be computationally infeasible with an ordinary computer for large integers that are the product of only a few prime numbers (e.g., products of two 300-digit primes).[7] By comparison, a quantum computer could efficiently solve this problem using Shor's algorithm to find its factors. This ability would allow a quantum computer to "break" many of the cryptographic systems in use today, in the sense that there would be a polynomial time (in the number of bits of the integer) algorithm for solving the problem. In particular, most of the popular public key ciphers are based on the difficulty of factoring integers (or the related discrete logarithm problem which can also be solved by Shor's algorithm), including forms of RSA. These are used to protect secure Web pages, encrypted email, and many other types of data. Breaking these would have significant ramifications for electronic privacy and security. The only way to increase the security of an algorithm like RSA would be to increase the key size and hope that an adversary does not have the resources to build and use a powerful enough quantum computer.
A way out of this dilemma would be to use some kind of quantum cryptography. There are also some digital signature schemes that are believed to be secure against quantum computers. See for instance Lamport signatures.
Besides factorization and discrete logarithms, quantum algorithms offering a more than polynomial speedup over the best known classical algorithm have been found for several problems,[8] including the simulation of quantum physical processes from chemistry and solid state physics, the approximation of Jones polynomials, and solving Pell's equation. There is no mathematical proof that an equally fast classical algorithm cannot be discovered, although this is considered unlikely. For some problems, quantum computers offer a polynomial speedup. The most well-known example of this is quantum database search, which can be solved by Grover's algorithm using quadratically fewer queries to the database than are required by classical algorithms. In this case the advantage is provable. Several other examples of provable quantum speedups for query problems have subsequently been discovered, such as for finding collisions in two-to-one functions and evaluating NAND trees.
Consider a problem that has these four properties:

The only way to solve it is to guess answers repeatedly and check them,
There are n possible answers to check,
Every possible answer takes the same amount of time to check, and
There are no clues about which answers might be better: generating possibilities randomly is just as good as checking them in some special order.

An example of this is a password cracker that attempts to guess the password for an encrypted file (assuming that the password has a maximum possible length).
For problems with all four properties, the time for a quantum computer to solve this will be proportional to the square root of n. That can be a very large speedup, reducing some problems from years to seconds. It can be used to attack symmetric ciphers such as Triple DES and AES by attempting to guess the secret key. Regardless of whether any of these problems can be shown to have an advantage on a quantum computer, they nonetheless will always have the advantage of being an excellent tool for studying quantum mechanical interactions, which of itself is an enormous value to the scientific community.
Grover's algorithm can also be used to obtain a quadratic speed-up [over a brute-force search] for a class of problems known as NP-complete.
Since chemistry and nanotechnology rely on understanding quantum systems, and such systems are impossible to simulate in an efficient manner classically, many believe quantum simulation will be one of the most important applications of quantum computing.[9]
There are a number of practical difficulties in building a quantum computer, and thus far quantum computers have only solved trivial problems. David DiVincenzo, of IBM, listed the following requirements for a practical quantum computer:[10]

scalable physically to increase the number of qubits;
qubits can be initialized to arbitrary values;
quantum gates faster than decoherence time;
universal gate set;
qubits can be read easily.


[edit] Quantum decoherence
One of the greatest challenges is controlling or removing decoherence. This usually means isolating the system from its environment as the slightest interaction with the external world would cause the system to decohere. This effect is irreversible, as it is non-unitary, and is usually something that should be avoided, if not highly controlled. Decoherence times for candidate systems, in particular the transverse relaxation time T2 (for NMR and MRI technology, also called the dephasing time), typically range between nanoseconds and seconds at low temperature.[6]
These issues are more difficult for optical approaches as the timescales are orders of magnitude lower and an often cited approach to overcoming them is optical pulse shaping. Error rates are typically proportional to the ratio of operating time to decoherence time, hence any operation must be completed much more quickly than the decoherence time.
If the error rate is small enough, it is thought to be possible to use quantum error correction, which corrects errors due to decoherence, thereby allowing the total calculation time to be longer than the decoherence time. An often cited figure for required error rate in each gate is 10−4. This implies that each gate must be able to perform its task 10,000 times faster than the decoherence time of the system.
Meeting this scalability condition is possible for a wide range of systems. However, the use of error correction brings with it the cost of a greatly increased number of required qubits. The number required to factor integers using Shor's algorithm is still polynomial, and thought to be between L and L2, where L is the number of bits in the number to be factored; error correction algorithms would inflate this figure by an additional factor of L. For a 1000-bit number, this implies a need for about 104 qubits without error correction.[11] With error correction, the figure would rise to about 107 qubits. Note that computation time is about L2 or about 107 steps and on 1 MHz, about 10 seconds.
A very different approach to the stability-decoherence problem is to create a topological quantum computer with anyons, quasi-particles used as threads and relying on braid theory to form stable logic gates.[12][13]

[edit] Candidates
There are a number of quantum computing candidates, among those:

Superconductor-based quantum computers (including SQUID-based quantum computers)[14]
Trapped ion quantum computer
Optical lattices
Topological quantum computer
Quantum dot on surface (e.g. the Loss-DiVincenzo quantum computer)
Nuclear magnetic resonance on molecules in solution (liquid NMR)
Solid state NMR Kane quantum computers
Electrons on helium quantum computers
Cavity quantum electrodynamics (CQED)
Molecular magnet
Fullerene-based ESR quantum computer
Optic-based quantum computers (Quantum optics)
Diamond-based quantum computer[15][16][17]
Bose–Einstein condensate-based quantum computer[18]
Transistor-based quantum computer - string quantum computers with entrainment of positive holes using an electrostatic trap
Spin-based quantum computer
Adiabatic quantum computation[19]
Rare-earth-metal-ion-doped inorganic crystal based quantum computers[20][21]

The large number of candidates shows explicitly that the topic, in spite of rapid progress, is still in its infancy. But at the same time there is also a vast amount of flexibility.
In 2005, researchers at the University of Michigan built a semiconductor chip which functioned as an ion trap. Such devices, produced by standard lithography techniques, may point the way to scalable quantum computing tools.[22] An improved version was made in 2006.[citation needed]

[edit] Quantum computing in computational complexity theory




The suspected relationship of BQP to other problem spaces.[23]


This section surveys what is currently known mathematically about the power of quantum computers. It describes the known results from computational complexity theory and the theory of computation dealing with quantum computers.
The class of problems that can be efficiently solved by quantum computers is called BQP, for "bounded error, quantum, polynomial time". Quantum computers only run probabilistic algorithms, so BQP on quantum computers is the counterpart of BPP on classical computers. It is defined as the set of problems solvable with a polynomial-time algorithm, whose probability of error is bounded away from one quarter.[23] A quantum computer is said to "solve" a problem if, for every instance, its answer will be right with high probability. If that solution runs in polynomial time, then that problem is in BQP.
BQP is contained in the complexity class #P (or more precisely in the associated class of decision problems P#P),[24] which is a subclass of PSPACE.
BQP is suspected to be disjoint from NP-complete and a strict superset of P, but that is not known. Both integer factorization and discrete log are in BQP. Both of these problems are NP problems suspected to be outside BPP, and hence outside P. Both are suspected to not be NP-complete. There is a common misconception that quantum computers can solve NP-complete problems in polynomial time. That is not known to be true, and is generally suspected to be false.[24]
Quantum gates may be viewed as linear transformations. Daniel S. Abrams and Seth Lloyd have shown that if nonlinear transformations are permitted, then NP-complete problems could be solved in polynomial time. It could even do so for #P-complete problems. They do not believe that such a machine is possible.
Although quantum computers may be faster than classical computers, those described above can't solve any problems that classical computers can't solve, given enough time and memory (albeit possibly an amount that could never practically be brought to bear). A Turing machine can simulate these quantum computers, so such a quantum computer could never solve an undecidable problem like the halting problem. The existence of "standard" quantum computers does not disprove the Church–Turing thesis.[23]

[edit] See also



Wikimedia Commons has media related to: Quantum computer



List of emerging technologies
Quantum bus
Timeline of quantum computing
Chemical computer
DNA computer
Mathematical biology
Molecular computer


[edit] References


^ "Quantum Computing with Molecules" article in Scientific American by Neil Gershenfeld and Isaac L. Chuang - a generally accessible overview of quantum computing and so on.
^ Quantum Information Science and Technology Roadmap for a sense of where the research is heading.
^ One photon Grover algorithm
^ Lieven M.K. Vandersypen et al. (1999). "Separability of Very Noisy Mixed States and Implications for NMR Quantum Computing". Phys. Rev. Lett 83: 1054–1057. doi:10.1103/PhysRevLett.83.1054. 
^ Waldner, Jean-Baptiste (2007). Nanocomputers and Swarm Intelligence. London: ISTE. pp. p157. ISBN 2746215160. 
^ a b DiVincenzo (1995).
^ http://modular.fas.harvard.edu/edu/Fall2001/124/misc/arjen_lenstra_factoring.pdf
^ http://www.its.caltech.edu/~sjordan/zoo.html
^ http://www.wired.com/science/discoveries/news/2007/02/72734
^ David P. DiVincenzo, IBM (2000-04-13). "The Physical Implementation of Quantum Computation". http://arxiv.org/abs/quant-ph/0002077. Retrieved on 2006-11-17. 
^ M. I. Dyakonov, Université Montpellier (2006-10-14). "Is Fault-Tolerant Quantum Computation Really Possible?". http://arxiv.org/abs/quant-ph/0610117. Retrieved on 2007-02-16. 
^ Freedman, Michael; Alexei Kitaev, Michael Larsen, Zhenghan Wang (2002-10-20). "Topological Quantum Computation". Bulletin of the American Mathematical Society 40 (1): 31–38. doi:10.1090/S0273-0979-02-00964-3. 
^ Monroe, Don, Anyons: The breakthrough quantum computing needs?, New Scientist, 1 October 2008
^ Clarke, John; Wilhelm, Frank (June 19, 2008), "Superconducting quantum bits", Nature 453: 1031–1042, doi:10.1038/nature07128, http://www.nature.com/nature/journal/v453/n7198/full/nature07128.html 
^ Nizovtsev, A. P.; Kilin, S. Ya.; Jelezko, F.; Gaebal, T.; Popa, I.; Gruber, A.; Wrachtrup, J. (October 19, 2004), "A quantum computer based on NV centers in diamond: Optically detected nutations of single electron and nuclear spins", Optics and Spectroscopy 99 (2): 248–260, http://www.springerlink.com/content/5p6554lg35716085/ 
^ Wolfgang Gruener, TG Daily (2007-06-01). "Research indicates diamonds could be key to quantum storage". http://www.tgdaily.com/content/view/32306/118/. Retrieved on 2007-06-04. 
^ Neumann, P.; Mizuochi, N.; Rempp, F.; Hemmer, P.; Watanabe, H.; Yamasaki, S.; Jacques, V.; Gaebel, T.;  et al. (June 6, 2008), "Multipartite Entanglement Among Single Spins in Diamond", Science 320 (5881): 1326–1329, doi:10.1126/science.1157233, PMID 18535240, http://www.sciencemag.org/cgi/content/abstract/320/5881/1326 
^ Rene Millman, IT PRO (2007-08-03). "Trapped atoms could advance quantum computing". http://www.itpro.co.uk/news/121086/trapped-atoms-could-advance-quantum-computing.html. Retrieved on 2007-07-26. 
^ William M Kaminsky, MIT (Date Unknown). "Scalable Superconducting Architecture for Adiabatic Quantum Computation". http://arxiv.org/pdf/quant-ph/0403090. Retrieved on 2007-02-19. 
^ Ohlsson, N.; Mohan, R. K.; Kröll, S. (January 1, 2002), "Quantum computer hardware based on rare-earth-ion-doped inorganic crystals", Opt. Commun. 201 (1–3): 71–77, http://www.sciencedirect.com/science/article/B6TVF-44J3RM9-J/2/307aab59d157ddd2ebb8281f76f89138 
^ Longdell, J. J.; Sellars, M. J.; Manson, N. B. (September 23, 2004), "Demonstration of conditional quantum phase shift between ions in a solid", Phys. Rev. Lett. 93 (13): 130503, http://prola.aps.org/abstract/PRL/v93/i13/e130503 
^ Ann Arbor (2005-12-12). "U-M develops scalable and mass-producible quantum computer chip". http://www.umich.edu/news/index.html?Releases/2005/Dec05/r121205b. Retrieved on 2006-11-17. 
^ a b c Nielsen and Chuang (2000).
^ a b Bernstein and Vazirani, Quantum complexity theory, SIAM Journal on Computing, 26(5):1411-1473, 1997. [1]



[edit] General references


Derek Abbott, Charles R. Doering, Carlton M. Caves, Daniel M. Lidar, Howard E. Brandt, Alexander R. Hamilton, David K. Ferry, Julio Gea-Banacloche, Sergey M. Bezrukov, and Laszlo B. Kish (2003). "Dreams versus Reality: Plenary Debate Session on Quantum Computing". Quantum Information Processing 2 (6): 449–472. doi:10.1023/B:QINP.0000042203.24782.9a.  arΧiv:quant-ph/0310130.

Alternative Location (free)at Michigan university's repository Deep Blue- http://hdl.handle.net/2027.42/45526</ref>

David P. DiVincenzo (2000). "The Physical Implementation of Quantum Computation". Experimental Proposals for Quantum Computation. arΧiv:quant-ph/0002077
David P. DiVincenzo (1995). "Quantum Computation". Science 270 (5234): 255–261. doi:10.1126/science.270.5234.255.  Table 1 lists switching and dephasing times for various systems.
Richard Feynman (1982). "Simulating physics with computers". International Journal of Theoretical Physics 21: 467. doi:10.1007/BF02650179. 
Gregg Jaeger (2006). Quantum Information: An Overview. Berlin: Springer. ISBN 0-387-35725-4. OCLC 255569451.  http://www.springer.com/west/home/physics?SGWID=4-10100-22-173664707-detailsPage=ppmmedia|toc"


Michael Nielsen and Isaac Chuang (2000). Quantum Computation and Quantum Information. Cambridge: Cambridge University Press. ISBN 0-521-63503-9. OCLC 174527496. 
Stephanie Frank Singer (2005). Linearity, Symmetry, and Prediction in the Hydrogen Atom. New York: Springer. ISBN 0-387-24637-1. OCLC 253709076. 
Giuliano Benenti (2004). Principles of Quantum Computation and Information Volume 1. New Jersey: World Scientific. ISBN 9-812-38830-3. OCLC 179950736. 


David P. DiVincenzo (2000). "The Physical Implementation of Quantum Computation". Experimental Proposals for Quantum Computation. arΧiv:quant-ph/0002077.


C. Adami, N.J. Cerf. (1998). "Quantum computation with linear optics". arΧiv:quant-ph/9806048v1.


Joachim Stolze,; Dieter Suter, (2004). Quantum Computing. Wiley-VCH. ISBN 3527404384. 


Ian Mitchell, (1998). "Computing Power into the 21st Century: Moore's Law and Beyond". http://citeseer.ist.psu.edu/mitchell98computing.html. 


Rolf Landauer, (1961). "Irreversibility and heat generation in the computing process". http://www.research.ibm.com/journal/rd/053/ibmrd0503C.pdf. 


Gordon E. Moore (1965). Cramming more components onto integrated circuits. 


R.W. Keyes, (1988). Miniaturization of electronics and its limits. 


M. A. Nielsen,; E. Knill, ; R. Laamme,. "Complete Quantum Teleportation By Nuclear Magnetic Resonance". http://citeseer.ist.psu.edu/595490.html. 


Lieven M.K. Vandersypen,; Constantino S. Yannoni, ; Isaac L. Chuang, (2000). Liquid state NMR Quantum Computing. 


Imai Hiroshi,; Hayashi Masahito, (2006). Quantum Computation and Information. ISBN 3540331328. 


Andre Berthiaume, (1997). "Quantum Computation". http://citeseer.ist.psu.edu/article/berthiaume97quantum.html. 


David R. Simon, (1994). "On the Power of Quantum Computation". Institute of Electrical and Electronic Engineers Computer Society Press. http://citeseer.ist.psu.edu/simon94power.html. 


"Seminar Post Quantum Cryptology". Chair for communication security at the Ruhr-University Bochum. http://www.crypto.rub.de/its_seminar_ss08.html. 



[edit] External links

jQuantum: Java quantum circuit simulator
QCAD: Quantum circuit emulator
C++ Quantum Library
Haskell Library for Quantum computations
Video Lectures by David Deutsch
Quasi quantum computer.








v • d • e

Quantum computing





General

Qubit • Quantum computer • Quantum information • Quantum programming • Quantum virtual machine • Timeline of quantum computing • Topological computing






Quantum communication

Quantum channel • Quantum cryptography • Quantum teleportation • LOCC • Entanglement distillation






Quantum algorithms

Universal quantum simulator • Deutsch-Jozsa algorithm • Grover's search • Shor's factorization • Simon's Algorithm • (BQP)






Quantum computing models

Quantum circuit (quantum gate) • One-way quantum computer (cluster state) • Adiabatic quantum computation






Decoherence prevention

Quantum error correction • Topological quantum computer







Physical implementations






Quantum optics

Linear optics QC • Cavity QED






Ultracold atoms

Trapped ion quantum computer • Optical lattice






Spin-based

Nuclear magnetic resonance (NMR) quantum computing • Kane QC • Loss-DiVincenzo (quantum dot) QC






Other

Superconducting quantum computing (Charge qubit • Flux qubit) • Nitrogen-vacancy center









Retrieved from "http://en.wikipedia.org/wiki/Quantum_computer"
Categories: Quantum information science | Computational models | Quantum cryptography | Information theory | Computational complexity theory | Classes of computers | Theoretical computer scienceHidden categories: All articles with unsourced statements | Articles with unsourced statements since December 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Català
Česky
Dansk
Deutsch
Ελληνικά
Español
فارسی
Français
한국어
Hrvatski
Bahasa Indonesia
Italiano
עברית
ქართული
Latviešu
Lietuvių
Magyar
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Shqip
Slovenčina
Slovenščina
Suomi
Svenska
Tiếng Việt
Українська
中文









 This page was last modified on 3 April 2009, at 15:01.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
