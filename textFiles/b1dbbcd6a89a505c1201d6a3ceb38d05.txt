













Sigil (computer programming) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Sigil_(computer_programming)";
		var wgTitle = "Sigil (computer programming)";
		var wgAction = "view";
		var wgArticleId = "1492125";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 285012511;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Sigil (computer programming)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
In computer programming, a sigil (pronounced /'sɪdʒ.ɪl/ or /'sɪg.ɪl/; plural sigilia or sigils) is a symbol attached to a variable name, showing the variable's datatype or scope. The term was first applied to Perl usage by Philip Gwyn in 1999 to replace the more cumbersome "funny character in front of a variable name". The name is based on the word meaning a magical symbol (see sigil (magic)).




Contents


1 Historical context
2 Language comparison
3 Hungarian notation
4 See also





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Historical context
The use of sigils was popularized by the BASIC programming language. The best known example of a sigil in BASIC is the dollar sign (“$”) appended to the names of all strings. Many BASIC dialects use other sigils to denote integers and floating point numbers, and sometimes other types as well.
Larry Wall adopted shell scripting’s use of sigils for his scripting language Perl. However, as Perl is a dynamically typed language, the sigils specify not fine-grained data types like strings and integers, but general categories such as scalars (using a prefixed “$”), arrays (using a “@”), hashes (using a “%”), and subroutines (using a “&”). Perl 6 introduces secondary sigils, or twigils, which are used to indicate the scope of variables. Prominent examples of twigils in Perl 6 include “^”, used with self-declared formal parameters (“placeholder variables”), and “.”, used with object attribute accessors (i.e., instance variables).

[edit] Language comparison
In Unix shell scripting and other utilities such as Makefiles, the "$" is a unary operator that translates the name of a variable into its contents. Many people confuse this with a sigil, but it is properly a unary operator for lexical indirection, similar to the * indirection operator for pointers in C.
In the PHP language, which was partly inspired by Perl, “$” precedes any variable name. Names not prefixed by this are considered constants.
In the MUMPS programming language, global variables and routines (procedures or subroutines) are prefixed by an uparrow (^), and the last identifier used can be referenced indirectly by an uparrow alone, this is referred to as the "naked" identifier.
In Ruby, ordinary variables lack sigils, but “$” is prefixed to global variables, “@” is prefixed to instance variables, and “@@” is prefixed to class variables (the second “@” cannot be considered a twigil, so “@@” is just a longer sigil).
In Windows PowerShell, which was partly inspired by Unix shells and Perl, variable names are prefixed by the $ sigil.
In Transact-SQL, “@” precedes a local variable or parameter name. System variables (known as global variables) are distinguished by a “@@” prefix.
In mIRC script, identifiers have a $ sigil, while all variables have a % prefixed (regardless of local or global variables or data type). Binary variables are prefixed by an &.
In XSLT, variables and parameters have a leading $ sigil on use, although when defined in <xsl:param> or <xsl:variable> with the “name” attribute, the sigil is not included. Related to XSLT, XQuery uses the $ sigil form both in definition and in use.
In Fortran, sigils are not used, but all variables starting with the letters I, J, K, L, M and N are integers by default. Fortran refers to this as "implicit typing".
In Common Lisp, special variables (with dynamic scope) are typically surrounded with *. While this is only convention, and not enforced, the language itself adopts the practice (e.g., *standard-output*). Similarly, some programmers surround constants with +.
In CLIPS, scalar variables are prefixed with a ? sigil while multifield (i.e. a 1-level list) variables are prefixed with $?.
In C#, any variable names may be prefixed with @. This is mainly used to allow the use of variable names that would otherwise conflict with keywords. The @ sigil can also be applied to string literals, which changes the way they are interpreted (character escapes are not used and strings can extend over multiple lines).

[edit] Hungarian notation
Related to sigils is Hungarian notation, a convention for variable-naming that specifies variable type by attaching certain alphabetic prefixes to the variable name. Unlike sigils, however, Hungarian notation provides no information to the compiler; as such, explicit types must be redundantly specified for the variables and the prefixes are not enforced, permitting omission and making them prone to confusion due to accidental erroneous use.

[edit] See also

Delimiter
Identifier
Source code
String literal
Token
Tokenizing




Retrieved from "http://en.wikipedia.org/wiki/Sigil_(computer_programming)"
Categories: Source code | Variable (computer programming) | Naming conventions 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Français









 This page was last modified on 20 April 2009, at 13:44 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
