













Search algorithm - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Search_algorithm";
		var wgTitle = "Search algorithm";
		var wgAction = "view";
		var wgArticleId = "28249";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282157503;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Search algorithm

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





This article needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed.


In computer science, a search algorithm, broadly speaking, is an algorithm that takes a problem as input and returns a solution to the problem, usually after evaluating a number of possible solutions. Most of the algorithms studied by computer scientists that solve problems are kinds of search algorithms.[citation needed] The set of all possible solutions to a problem is called the search space. Brute-force search, otherwise known as na√Øve or uninformed, algorithms use the simplest method of the searching through the search space, whereas informed search algorithms use heuristic functions to apply knowledge about the structure of the search space to try to reduce the amount of time spent searching.




Contents


1 Uninformed search
2 List search
3 Tree search
4 Graph search
5 Informed search
6 Adversarial search
7 Constraint satisfaction
8 Other types
9 See also
10 References
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Uninformed search
An uninformed search algorithm is one that does not take into account the specific nature of the problem. As such, they can be implemented in general, and then the same implementation can be used in a wide range of problems due to abstraction. The drawback is that most search spaces are extremely large, and an uninformed search (especially of a tree or graph) will take a reasonable amount of time only for small examples. As such, to speed up the process, sometimes only an informed search will do.

[edit] List search
List search algorithms are perhaps the most basic kind of search algorithm. The goal is to find one element of a set by some key (perhaps containing other information related to the key). As this is a common problem in computer science, the computational complexity of these algorithms has been well studied. The simplest such algorithm is linear search, which simply examines each element of the list in order. It has expensive O(n) running time, where n is the number of items in the list, but can be used directly on any unprocessed list. A more sophisticated list search algorithm is binary search; it runs in O(log n) time. This is significantly better than linear search for large lists of data, but it requires that the list be sorted before searching (see sorting algorithm) and also be random access. Interpolation search is better than binary search for large sorted lists with fairly even distributions (O(log (log n)) complexity), but has a worst-case running time of O(n).
Grover's algorithm is a quantum algorithm that offers quadratic speedup over the classical linear search for unsorted lists. However, it requires a currently non-existent quantum computer on which to run.
Hash tables are also used for list search, requiring only constant time for search in the average case, but more space overhead and terrible O(n) worst-case search time. Another search based on specialized data structures uses self-balancing binary search trees and requires O(log n) time to search; these can be seen as extending the main ideas of binary search to allow fast insertion and removal. See associative array for more discussion of list search data structures.
Most list search algorithms, such as linear search, binary search, and self-balancing binary search trees, can be extended with little additional cost to find all values less than or greater than a given key, an operation called range search. One such exception is hash tables, which cannot perform such a search efficiently.

[edit] Tree search
Tree search algorithms are the heart of searching techniques for structured data. These search trees of nodes, whether that tree is explicit or implicit (generated on the go). The basic principle is that a node is taken from a data structure, its successors examined and added to the data structure. By manipulating the data structure, the tree is explored in different orders - for instance, level by level (breadth-first search) or reaching a leaf node first and backtracking (depth-first search). Other examples of tree-searches include iterative-deepening search, depth-limited search, bidirectional search, and uniform-cost search.
The efficiency of a tree search (compared to other search methods) is highly dependent upon the number and structure of nodes in relation to the number of items on that node. If there are a large number of items on one or more nodes, there may well be a requirement to utilize a specific different search technique for locating items within that particular set. In other words, a tree search is not mutually exclusive with any other search technique that may be used for specific sets. It is simply a method of reducing the number of relevant items to be searched (by whatever method) to those within certain branches of the tree. For example, the Greater London telephone directory may still contain entries for 20,000+ people whose surname is 'SMITH' belonging on a tree branch 'surnames beginning S'. The list of names may, or may not be, further subdivided by subscribers initials. A binary search may be appropriate to locate a particular person with forename 'Alias' and perhaps thereafter a linear search to locate a particular address.

[edit] Graph search
Many of the problems in graph theory can be solved using graph traversal algorithms, such as Dijkstra's algorithm, Kruskal's algorithm, the nearest neighbour algorithm, and Prim's algorithm. These can be seen as extensions of the tree-search algorithms.

[edit] Informed search
In an informed search, a heuristic that is specific to the problem is used as a guide. A good heuristic will make an informed search dramatically out-perform any uninformed search.
There are few prominent informed list-search algorithms. A possible member of that category is a hash table with a hashing function that is a heuristic based on the problem at hand. Most informed search algorithms explore trees[citation needed]. These include best-first search, and A*. Like the uninformed algorithms, they can be extended to work for graphs as well.

[edit] Adversarial search
In games such as chess, there is a game tree of all possible moves by both players and the resulting board configurations, and we can search this tree to find an effective playing strategy. This type of problem has the unique characteristic that we must account for any possible move our opponent might make. To account for this, game-playing computer programs, as well as other forms of artificial intelligence like machine planning, often use search algorithms like the minimax algorithm, search tree pruning, and alpha-beta pruning.

[edit] Constraint satisfaction
This is a type of search which solves constraint satisfaction problems where, rather than looking for a path, the solution is simply a set of values assigned to a set of variables. Because the variables can be processed in any order, the usual tree search algorithms are too inefficient. Methods of solving constraint problems include combinatorial search and backtracking, both of which take advantage of the freedom associated with constraint problems. Common tricks or techniques involved in backtracking is Constraint propagation, which is a general form of Forward checking. Other local search algorithms, such as generic algorithm, which minimize the conflicts, also do a good job.
In minmax algorithm first take all the minimum value then among of them take the maximum value. It's for vice versa for maxmin algorithm.

[edit] Other types

String searching algorithms search for patterns within strings; one popular data structure that makes this more efficient is the suffix tree
Genetic algorithms and Genetic programming use ideas from evolution as heuristics for reducing the search space
Sorting algorithms necessary for executing certain search algorithms
Simulated annealing is a probabilistic search algorithm
Recommender systems also use statistical methods to rank results in very large data sets
Tabu search is a technique to avoid discrete searches getting stuck in local minima
Minimax which can be highly optimized using alpha-beta pruning is an algorithm to search for good moves in zero-sum games
Ternary search


[edit] See also

Selection algorithm
No free lunch in search and optimization
Secretary problem is an online (i.e. sequentially presented) search problem with imperfect information, and a statistically optimal strategy
Odds algorithm is a general online search‚Äìselection algorithm for random input.
Princess and monster game


[edit] References

Donald Knuth. The Art of Computer Programming. Volume 3: Sorting and Searching. ISBN 0-201-89685-0.


[edit] External links

A Field Guide to Genetic Programming by Poli, Langdon, and McPhee. Available as a free PDF, or in printed form from Lulu.com.
Self-Guided Lesson on Uninformed Search Go to the Wikiversity and teach yourself to program an uninformed search solution.




Retrieved from "http://en.wikipedia.org/wiki/Search_algorithm"
Categories: Search algorithmsHidden categories: Articles needing additional references | All articles with unsourced statements | Articles with unsourced statements | Articles with unsourced statements since August 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




¬†
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨
Espa√±ol
ŸÅÿßÿ±ÿ≥€å
Fran√ßais
Bahasa Indonesia
Italiano
◊¢◊ë◊®◊ô◊™
Nederlands
Êó•Êú¨Ë™û
Portugu√™s
Suomi
Ti·∫øng Vi·ªát









 This page was last modified on 6 April 2009, at 18:15.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia¬Æ is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
