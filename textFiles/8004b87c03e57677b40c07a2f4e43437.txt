













Java Persistence API - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Java_Persistence_API";
		var wgTitle = "Java Persistence API";
		var wgAction = "view";
		var wgArticleId = "7811267";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 279121528;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Java Persistence API

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
The Java Persistence API, sometimes referred to as JPA, is a Java programming language framework that allows developers to manage relational data in Java Platform, Standard Edition and Java Platform, Enterprise Edition applications.
The Java Persistence API originated as part of the work of the JSR 220 Expert Group.
Persistence consists of three areas:

the API, defined in the javax.persistence package
the Java Persistence Query Language
object/relational metadata





Contents


1 Entities
2 The Java Persistence Query Language
3 Relationship between Java Persistence API and Enterprise JavaBeans
4 Relationship between Java Persistence API and Java Data Objects API
5 Relationship between Java Persistence API and Service Data Object API
6 Motivation for creating Java Persistence API
7 Relationship to Hibernate
8 JPA Maintenance
9 See also
10 External links
11 References





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Entities
A persistence entity is a lightweight Java class that typically represents a table in a relational database. Entity instances correspond to individual rows in the table. Entities typically have relationships with other entities, and these relationships are expressed through object/relational metadata. Object/relational metadata can be specified directly in the entity class file by using annotations, or in a separate XML descriptor file distributed with the application.

[edit] The Java Persistence Query Language
The Java Persistence Query Language (JPQL) is used to make queries against entities stored in a relational database. Queries resemble SQL queries in syntax, but operate against entity objects rather than directly with database tables.
See Wikibooks:Java persistence:JPQL.

[edit] Relationship between Java Persistence API and Enterprise JavaBeans
The Java Persistence API was defined as part of the EJB 3.0 specification, which is itself part of the Java EE 5 platform. You do not need an EJB container or a Java EE application server in order to run applications that use persistence, however. Future versions of the Java Persistence API will be defined in a separate JSR and specification rather than in the EJB JSR/specification.
The Java Persistence API replaces the persistence solution of EJB 2.0 CMP.

[edit] Relationship between Java Persistence API and Java Data Objects API
The Java Persistence API was developed in part to unify the Java Data Objects API, and the EJB 2.0 Container Managed Persistence (CMP) API. This seems to have been successful as most products supporting each of those APIs now support the Java Persistence API.
The Java Persistence API specifies only relational persistence (ORM) for Java (although there are providers that support other datastores). The Java Data Objects specification(s) provides relational persistence (ORM), as well as persistence to other types of datastores.

[edit] Relationship between Java Persistence API and Service Data Object API
The Java Persistence API is designed for relational persistence, with many of the key areas taken from object-relational mapping tools such as Hibernate and TopLink. It is generally accepted that the Java Persistence API is a significant improvement on the EJB 2.0 specification. The Service Data Objects (SDO) API (JSR 235) has a very different objective to the Java Persistence API and is considered complementary. The SDO API is designed for service-oriented architectures, multiple data formats rather than only relational data, and multiple programming languages. The Java version of the SDO API is managed via the Java Community Process and the C++ version of the SDO API is managed via OASIS.

[edit] Motivation for creating Java Persistence API
Many enterprise Java developers have been using lightweight persistent objects provided by open-source frameworks or Data Access Objects instead of entity beans because entity beans and enterprise beans were considered too heavyweight and complicated, and they could only be used in Java EE application servers. Many of the features of the third-party persistence frameworks were incorporated into the Java Persistence API, and projects like Hibernate and Open-Source Version TopLink Essentials are now implementations of the Java Persistence API.

[edit] Relationship to Hibernate
Hibernate is an Open source Object-relational mapping framework for Java. Versions 3.2 and later provide an implementation for the Java Persistence API[1].
Gavin King is the founder[2] of Hibernate. He represented JBoss on JSR220[3], the JCP expert group charged with developing JPA. This led to ongoing controversy and speculation centered around the relationship between JPA and Hibernate. Sun states [4] that ideas were drawn from several frameworks including Hibernate and JDO.

[edit] JPA Maintenance
A newer version of JPA, namely JPA 2.0, is under development in JSR 317. The greatest feature of JPA 2.0 is better support java object models mapping to relational models.

[edit] See also

JDBC
DataNucleus Access Platform
Hibernate
JPOX
OpenJPA
TopLink
EclipseLink


[edit] External links



Wikibooks has a book on the topic of
Java Persistence




General info

Sun's Persistence page
GlassFish's Persistence page
Documentation for the final version of the EJB3 spec (called JSR220)
Nabble JPA Forum


Video Tutorial

Using JPA (toplink & hibernate) with Eclipse - Portuguese (pt-BR)


Documentation

Persistence in the Java EE 5 Tutorial
Sun's Persistence FAQ
Java Persistence API Javadoc
Getting started with Java Persistence API 1.0
Wikibooks:Java Persistence


Implementations

CocoBase JPA Certified Commercial implementation for standalone and container services
DataNucleus Access Platform JPA/JDO Certified implementation of Java persistence
JPOX JPA/JDO Certified implementation of Java persistence
SAP Netweaver Application Server, Java(TM) EE 5 Edition
TopLink
EclipseLink
Hibernate
OpenJPA
Kodo
Amber (Part of Caucho Resin)
SimpleJPA
Cayenne


Frameworks

OpenXava: JPA Application Engine: For rapid development of applications from JPA entities.
Defrost: JPA-based UI Framework: generates web forms from JPA entities (still under development).


Articles

Master the New Persistence Paradigm with JPA
Persistence Pays Offs: Advanced Mapping with JPA




[edit] References


^ "hibernate.org - Java Persistence with Hibernate". JBoss. http://www.hibernate.org/397.html. Retrieved on 2008-11-17.  "Hibernate implements the Java Persistence object/relational mapping and persistence management interfaces" 
^ "Manning: Java Persistence with Hibernate". Manning. http://www.manning.com/bauer2/. Retrieved on 2008-11-17.  "Gavin King -- the founder of the Hibernate project" 
^ "JBoss.com - Industry Leadership". JBoss. http://www.jboss.com/company/leadership. Retrieved on 2008-11-17.  "JSR 220, EJB 3.0 Spec Committee, Gavin King, Bill Burke, Marc Fleury" 
^ "Java Persistence API FAQ". Sun Microsystems. http://java.sun.com/javaee/overview/faq/persistence.jsp. Retrieved on 2008-11-17.  "The Java Persistence API draws upon the best ideas from persistence technologies such as Hibernate, TopLink, and JDO" 









v • d • e

Java Persistence API






Cayenne · EasyBeans · EclipseLink · Hibernate · TopLink · OpenEJB · OpenJPA · JPOX · Datanucleus









Retrieved from "http://en.wikipedia.org/wiki/Java_Persistence_API"
Categories: Object-relational mapping | Persistence | Java enterprise platform 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Català
Deutsch
Español
Français
한국어
日本語
Polski
Українська









 This page was last modified on 23 March 2009, at 10:27 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
