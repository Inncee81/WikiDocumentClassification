













Haskell (programming language) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Haskell_(programming_language)";
		var wgTitle = "Haskell (programming language)";
		var wgAction = "view";
		var wgArticleId = "13630";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281911387;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Haskell (programming language)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Haskell




Paradigm
functional, non-strict, modular


Appeared in
1990


Designed by
Simon Peyton-Jones, Paul Hudak[1], Philip Wadler, et al.


Typing discipline
static, strong, inferred


Major implementations
GHC, Hugs, NHC, JHC, Yhc


Dialects
Helium, Gofer


Influenced by
Lisp and Scheme, ISWIM, FP, APL, Hope and Hope+, SISAL, Miranda, ML and Standard ML, Lazy ML, Orwell, Alfl, Id, Ponder


Influenced
Bluespec, Clojure, C#, CAL, Cat, Cayenne, Clean, Curry, Epigram, Escher, F#, Factor, Isabelle, Java Generics, LINQ, Mercury, Perl 6, Python, Scala, Timber, Visual Basic 9.0


OS
portable


Website
http://haskell.org/


Haskell is a standardized, purely functional programming language with non-strict semantics, named after logician Haskell Curry.




Contents


1 History
2 Features and extensions
3 Applications
4 Examples

4.1 More complex examples
4.2 Monads and Input/Output


5 Criticism
6 Implementations
7 Libraries
8 See also
9 References
10 External links

10.1 Tutorials







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
Following the release of Miranda by Research Software Ltd, in 1985, interest in lazy functional languages grew. By 1987, more than a dozen non-strict, purely functional programming languages existed. Of these, Miranda was the most widely used, but was not in the public domain. At the conference on Functional Programming Languages and Computer Architecture (FPCA '87) in Portland, Oregon, a meeting was held during which participants formed a strong consensus that a committee should be formed to define an open standard for such languages. The committee's purpose was to consolidate the existing functional languages into a common one that would serve as a basis for future research in functional-language design.[2] The first version of Haskell ("Haskell 1.0") was defined in 1990.[3] The committee's efforts resulted in a series of language definitions. In late 1997, the series culminated in Haskell 98, intended to specify a stable, minimal, portable version of the language and an accompanying standard library for teaching, and as a base for future extensions. The committee expressly welcomed the creation of extensions and variants of Haskell 98 via adding and incorporating experimental features.
In January 1999, the Haskell 98 language standard was originally published as "The Haskell 98 Report". In January 2003, a revised version was published as "Haskell 98 Language and Libraries: The Revised Report".[4] The language continues to evolve rapidly, with the GHC implementation representing the current de facto standard. In early 2006, the process of defining a successor to the Haskell 98 standard, informally named Haskell′ ("Haskell Prime"), was begun.[5] This process is intended to produce a minor revision of Haskell 98.[6]

[edit] Features and extensions
Characteristic features of Haskell include pattern matching, currying, list comprehensions [7], guards, definable operators, and single assignment. The language also supports recursive functions and algebraic data types, as well as lazy evaluation. Unique[citation needed] concepts include monads, and type classes. The combination of such features can make functions which would be difficult to write in a procedural programming language almost trivial to implement in Haskell.[citation needed]
Several variants have been developed: parallelizable versions from MIT and Glasgow University, both called Parallel Haskell; more parallel and distributed versions called Distributed Haskell (formerly Goffin) and Eden; a speculatively evaluating version called Eager Haskell and several object oriented versions: Haskell++, O'Haskell and Mondrian.
Concurrent Clean is a close relative of Haskell, whose biggest deviation from Haskell is in the use of uniqueness types for input instead of monads.

[edit] Applications
Haskell is increasingly being used in commercial situations[8]. Audrey Tang's Pugs is an implementation for the long-forthcoming Perl 6 language with an interpreter and compilers that proved useful after just a few months of its writing; similarly, GHC is often a testbed for advanced functional programming features and optimizations. Darcs is a revision control system, with several innovative features. Linspire GNU/Linux chose Haskell for system tools development.[9] Xmonad is a window manager for the X Window System, written entirely in Haskell. Bluespec SystemVerilog is a language for semiconductor design that is an extension of Haskell. Additionally, Bluespec, Inc.'s tools are implemented in Haskell.

[edit] Examples
A simple example that is often used to demonstrate the syntax of functional languages is the factorial function for non-negative integers, shown in Haskell:

factorial :: Integer -> Integer
factorial 0 = 1
factorial n | n > 0 = n * factorial (n-1)

Or in one line:

factorial n = if n > 0 then n * factorial (n-1) else 1

This describes the factorial as a recursive function, with one terminating base case. It is similar to the descriptions of factorials found in mathematics textbooks. Much of Haskell code is similar to standard mathematical notation in facility and syntax.
The first line of the factorial function describes the types of this function; while it is optional, it is considered to be good style[10] to include it. It can be read as the function factorial (factorial) has type (::) from integer to integer (Integer -> Integer). That is, it takes an integer as an argument, and returns another integer. The type of a definition is inferred automatically if the programmer didn't supply a type annotation.
The second line relies on pattern matching, an important feature of Haskell. Note that parameters of a function are not in parentheses but separated by spaces. When the function's argument is 0 (zero) it will return the integer 1 (one). For all other cases the third line is tried. This is the recursion, and executes the function again until the base case is reached.
A guard protects the third line from negative numbers for which a factorial is undefined. Without the guard this function would recurse through all negative numbers without ever reaching the base case of 0. As it is, the pattern matching is not complete: if a negative integer is passed to the factorial function as an argument, the program will fail with a runtime error. A final case could check for this error condition and print an appropriate error message instead.
The "Prelude" is a number of small functions analogous to C's standard library. Using the Prelude, we can express the factorial function as:

factorial n = product (enumFromTo 1 n)

As the name n does not really contribute to the clarity of the function, this function might be better expressed in the point-free style[11] of unspecified arguments. Using the function composition operator (expressed as a dot in Haskell) to compose the product function with the curried enumeration function, it becomes:

 factorial = product . enumFromTo 1

In the Hugs interpreter, you often need to define the function and use it on the same line separated by a where or let..in, meaning you need to enter this to test the above examples and see the output 120:

let { factorial 0 = 1; factorial n | n > 0 = n * factorial (n-1) } in factorial 5

or

factorial 5 where factorial = product . enumFromTo 1

The GHCi interpreter doesn't have this restriction and function definitions can be entered on one line and referenced later.

[edit] More complex examples
A simple Reverse Polish Notation calculator expressed with the higher-order function foldl whose argument f is defined in a where clause using pattern matching and the type class Read:

calc :: String -> [Float]
calc = foldl f [] . words
  where 
    f (x:y:zs) "+" = (y + x):zs
    f (x:y:zs) "-" = (y - x):zs
    f (x:y:zs) "*" = (y * x):zs
    f (x:y:zs) "/" = (y / x):zs
    f xs y = read y : xs

The empty list is the initial state, and f interprets one word at a time, either matching two numbers from the head of the list and pushing the result back in, or parsing the word as a floating-point number and prepending it to the list.
The following definition produces the list of Fibonacci numbers in linear time:

fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

The infinite list is produced by corecursion — the latter values of the list are computed on demand starting from the initial two items 0 and 1. This kind of a definition relies on lazy evaluation, an important feature of Haskell programming. For an example of how the evaluation evolves, the following illustrates the values of fibs and tail fibs after the computation of six items and shows how zipWith (+) has produced four items and proceeds to produce the next item:

fibs         = 0 : 1 : 1 : 2 : 3 : 5 : ...
               +   +   +   +   +   +
tail fibs    = 1 : 1 : 2 : 3 : 5 : ...
               =   =   =   =   =   =
zipWith ...  = 1 : 2 : 3 : 5 : 8 : ...
fibs = 0 : 1 : 1 : 2 : 3 : 5 : 8 : ...

The same function, written using GHC's parallel list comprehension syntax (GHC extensions must be enabled using a special command-line flag '-fglasgow-exts'; see GHC's manual for more):

fibs = 0 : 1 : [ a+b | a <- fibs | b <- tail fibs ]

The factorial we saw previously can be written as a sequence of functions:

factorial n = (foldl (.) id [\x -> x*k | k <- [1..n]]) 1

A remarkably concise function that returns the list of Hamming numbers in order:

hamming = 1 : map (2*) hamming `merge` map (3*) hamming `merge` map (5*) hamming
     where merge (x:xs) (y:ys) 
            | x < y = x : xs `merge` (y:ys)
            | x > y = y : (x:xs) `merge` ys
            | otherwise = x : xs `merge` ys

Like the various fibs solutions displayed above, this uses corecursion to produce a list of numbers on demand, starting from the base case of 1 and building new items based on the preceding part of the list.
In this case the producer merge is defined in a where clause and used as an operator by enclosing it in back-quotes. The branches of the guards define how merge merges two ascending lists into one ascending list without duplicate items.

[edit] Monads and Input/Output
As Haskell is a pure functional language, functions cannot have side effects. This is a challenge for real programs, which among other things need to interact with an environment. Haskell solves this with monadic types that leverages the type system to ensure the proper sequencing of imperative constructs. The typical example is I/O, but monads are useful for many other purposes, including mutable state, concurrency and transactional memory, exception handling, and error propagation.
Haskell provides a special syntax for monadic expressions, so that side-effecting programs can be written in a style similar to current imperative programming languages; no knowledge of the mathematics behind monadic I/O is required for this. The following program reads a name from the command line and outputs a greeting message:

main = do putStrLn "What's your name?"
          name <- getLine
          putStr ("Hello, " ++ name ++ "!\n")


The do-notation eases working with monads. This do-expression is equivalent to, but (arguably) easier to write and understand than, the de-sugared version employing the monadic operators directly:

main = putStrLn "What's your name?" >> 
             getLine >>= \ name -> 
              putStr ("Hello, " ++ name ++ "!\n")



See also wikibooks:Transwiki:List of hello world programs#Haskell for another example that prints text.


[edit] Criticism
Jan-Willem Maessen, in 2002, and Simon Peyton Jones, in 2003, discussed problems associated with lazy evaluation while also acknowledging the theoretical motivation for it[12][13], in addition to purely practical considerations such as improved performance.[14] They note that, in addition to adding some performance overhead, laziness makes it more difficult for programmers to reason about the performance of their code (specifically with regard to memory usage).
Bastiaan Heeren, Daan Leijen, and Arjan van IJzendoorn in 2003 also observed some stumbling blocks for Haskell learners, "The subtle syntax and sophisticated type system of Haskell are a double edged sword — highly appreciated by experienced programmers but also a source of frustration among beginners, since the generality of Haskell often leads to cryptic error messages."[15] To address these, they developed an advanced interpreter called Helium which improved the user-friendliness of error messages by limiting the generality of some Haskell features, and in particular removing support for type classes.

[edit] Implementations
The following all comply fully, or very nearly, with the Haskell 98 standard, and are distributed under open source licenses. There are currently no proprietary Haskell implementations.

The Glasgow Haskell Compiler (GHC) compiles to native code on a number of different architectures—as well as to ANSI C—using C-- as an intermediate language. GHC is probably the most popular Haskell compiler, and there are quite a few useful libraries (e.g. bindings to OpenGL) that will work only with GHC.
Gofer was an educational dialect of Haskell, with a feature called "constructor classes", developed by Mark Jones. It was supplanted by Hugs (see below).
HBC is another native-code Haskell compiler. It has not been actively developed for some time but is still usable.
Helium is a newer dialect of Haskell. The focus is on making it easy to learn by providing clearer error messages. It currently lacks typeclasses, rendering it incompatible with many Haskell programs.
Hugs, the Haskell User's Gofer System, is a bytecode interpreter. It offers fast compilation of programs and reasonable execution speed. It also comes with a simple graphics library. Hugs is good for people learning the basics of Haskell, but is by no means a "toy" implementation. It is the most portable and lightweight of the Haskell implementations.
Jhc is a Haskell compiler written by John Meacham emphasising speed and efficiency of generated programs as well as exploration of new program transformations. LHC, is a recent fork of Jhc.
nhc98 is another bytecode compiler, but the bytecode runs significantly faster than with Hugs. Nhc98 focuses on minimizing memory usage, and is a particularly good choice for older, slower machines.
Yhc, the York Haskell Compiler is a fork of nhc98, with the goals of being simpler, more portable and more efficient, and integrating support for Hat, the Haskell tracer. It also features a JavaScript backend allowing users to run Haskell programs in a web browser.


[edit] Libraries
Since January 2007, libraries and applications written in Haskell have been collected on "Hackage", an online database of open source Haskell software using Cabal packaging tool. By February 2009 there were some 1060 packages available.
Hackage provides a central point for the distribution of Haskell software, via Cabal, and has become a hub for new Haskell development activity. Installing new Haskell software via Hackage is possible via the cabal-install tool:

   $ cabal install xmonad

which recursively installs required dependencies if they are available on Hackage. This makes installation of Haskell code easier than had been possible previously.

[edit] See also

O'Haskell — an extension of Haskell adding object-orientation and concurrent programming support.
Pugs — a compiler and interpreter for the Perl 6 programming language
LOLITA and Darcs — large applications written in Haskell
Xmonad — a window manager written in Haskell (under 1200 lines)
Jaskell — a functional scripting programming language that runs in Java VM
Curry — a language based on Haskell
House — an operating system written using Haskell
WinHugs — Haskell interpreter for Windows


[edit] References


^ Professor Paul Hudak's Home Page
^ "Preface". Haskell 98 Language and Libraries: The Revised Report. December 2002. http://haskell.org/onlinereport/preface-jfp.html. 
^ "The History of Haskell". http://www.haskell.org/haskell-history.html. 
^ Simon Peyton Jones (editor) (December 2002). "Haskell 98 Language and Libraries: The Revised Report". http://haskell.org/onlinereport/. 
^ "Future development of Haskell". http://haskell.org/haskellwiki/Future. 
^ "Welcome to Haskell'". The Haskell' Wiki. http://hackage.haskell.org/trac/haskell-prime. 
^ list comprehension has been adopted by Python (programming language)
^ See Industrial Haskell Group for collaborative development, Commercial Users of Functional Programming for specific projects and Haskell in industry for a list of companies using Haskell commercially
^ "Linspire/Freespire Core OS Team and Haskell". Debian Haskell mailing list. May 2006. http://urchin.earth.li/pipermail/debian-haskell/2006-May/000169.html. 
^ HaskellWiki: Type signatures as good style
^ HaskellWiki: Pointfree
^ Jan-Willem Maessen. Eager Haskell: Resource-bounded execution yields efficient iteration. Proceedings of the 2002 ACM SIGPLAN workshop on Haskell.
^ Simon Peyton Jones. Wearing the hair shirt: a retrospective on Haskell. Invited talk at POPL 2003.
^ Lazy evaluation can lead to excellent performance, such as in The Computer Language Benchmarks Game[1]
^ Bastiaan Heeren, Daan Leijen, Arjan van IJzendoorn. Helium, for learning Haskell. Proceedings of the 2003 ACM SIGPLAN workshop on Haskell.



[edit] External links

HaskellWiki - The Haskell Home Page
A History of Haskell: being lazy with class - History of Haskell
Haskell Humor
Haskell vs. Ada vs. C++ vs. Awk vs. ... An Experiment in Software Prototyping Productivity (a PostScript file)
The Evolution of a Haskell Programmer - a slightly humorous overview of different programming styles available in Haskell
An Online Bibliography of Haskell Research
ePolyglot - combining Haskell, Python and Eiffel
SE-Radio Podcast with Simon Peyton Jones on Haskell
Techworld interview on innovations of Haskell
Haskell functions for Javascript
The Haskell Sequence, weekly news site for Haskell
Monad Reader, a (essentially) quarterly journal of Haskell


[edit] Tutorials



Wikibooks has a book on the topic of
Haskell




Real World Haskell - a comprehensive book for beginners to experts, published under a Creative Commons license
Yet Another Haskell Tutorial - an Haskell tutorial by Hal Daume III; assumes much less prior knowledge than the official tutorial
A Gentle Introduction to Haskell 98 (a more advanced tutorial, also available as pdf file)
Haskell Tutorial for C Programmers by Eric Etheridge
List of Tutorials at Haskell.org
Haskell Idioms
Learn You a Haskell For Great Good! - a humorous tutorial with illustrations




Retrieved from "http://en.wikipedia.org/wiki/Haskell_(programming_language)"
Categories: Haskell programming language family | Functional languages | Declarative programming languages | Articles with example Haskell code | Programming languages created in 1990 | Educational programming languagesHidden categories: All articles with unsourced statements | Articles with unsourced statements since January 2009 | Articles with unsourced statements since December 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Български
Català
Česky
Deutsch
Español
Esperanto
فارسی
Français
Galego
한국어
Hrvatski
Italiano
עברית
Magyar
Bahasa Melayu
Nederlands
日本語
Polski
Português
Română
Русский
Slovenčina
Slovenščina
Suomi
Svenska
Türkçe
Українська
中文









 This page was last modified on 5 April 2009, at 15:49.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
