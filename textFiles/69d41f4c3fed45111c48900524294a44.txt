













Lua (programming language) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Lua_(programming_language)";
		var wgTitle = "Lua (programming language)";
		var wgAction = "view";
		var wgArticleId = "46150";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281595768;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-lua {line-height: normal;}
.source-lua li, .source-lua pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for lua
 * CSS class: source-lua, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-lua .de1, .source-lua .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-lua  {}
.source-lua .head {}
.source-lua .foot {}
.source-lua .imp {font-weight: bold; color: red;}
.source-lua .ln-xtra {color: #cc0; background-color: #ffc;}
.source-lua li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-lua li.li2 {font-weight: bold;}
.source-lua .kw1 {color: #b1b100;}
.source-lua .co1 {color: #808080; font-style: italic;}
.source-lua .coMULTI {color: #808080; font-style: italic;}
.source-lua .es0 {color: #000099; font-weight: bold;}
.source-lua .br0 {color: #66cc66;}
.source-lua .st0 {color: #ff0000;}
.source-lua .nu0 {color: #cc66cc;}
.source-lua .me0 {color: #b1b100;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Lua (programming language)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Lua




Paradigm
Multi-paradigm: scripting, imperative, functional, object-oriented, prototype-based


Appeared in
1993


Designed by
Roberto Ierusalimschy
Waldemar Celes
Luiz Henrique de Figueiredo


Latest release
5.1.4/ August 22, 2008 (2008-08-22)


Typing discipline
dynamic, weak ("duck")


Major implementations
Lua, LuaJIT, LLVM-Lua, LuaCLR, Nua, Lua Alchemy, Yueliang


Dialects
LuaPlus, Metalua


Influenced by
Scheme, SNOBOL, Modula, CLU, C++


Influenced
Io, GameMonkey, Squirrel, Dao, MiniD, Potion


OS
Cross-platform


License
MIT License


Website
www.lua.org


In computing, Lua (pronounced /ˈluː.ə/ LOO-uh) is a lightweight, reflective, imperative and functional programming language, designed as a scripting language with extensible semantics as a primary goal. The name means ‘moon’ in Portuguese. Lua has a simple yet powerful C API.
Perhaps because both languages were influenced by Scheme, Lua and JavaScript feature many common semantics, despite the great differences in syntax. In its design, Lua is also similar to Icon, as both of them were influenced by SNOBOL.
Lua has enjoyed great popularity in the videogames industry. Apart from games, Lua has been used in many applications, both commercial and non-commercial.




Contents


1 History
2 Features

2.1 Example code

2.1.1 Tables

2.1.1.1 Table as structure
2.1.1.2 Table as namespace
2.1.1.3 Table as array


2.1.2 Object-oriented programming




3 Internals
4 C API

4.1 Stack
4.2 Special tables
4.3 Extension and binding


5 Applications

5.1 Video games
5.2 Other


6 Notes
7 References
8 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History
Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at PUC-Rio, the Pontifical University of Rio de Janeiro, in Brazil.
From 1977 until 1992, Brazil had a policy of strong trade barriers (called a 'market reserve') for computer hardware and software motivated by a nationalistic feeling that Brazil could and should produce its own hardware and software. In that atmosphere, Tecgraf's clients could not afford, either politically or financially, to buy customized software from abroad. Added to the natural geographical isolation of Brazil from other research and development centers, those reasons led Tecgraf to implement from scratch the basic tools it needed.[1]
Lua's historical 'father and mother' were data-description/configuration languages SOL (Simple Object Language) and DEL (data-entry language).[2] They had been independently developed at Tecgraf in 1992-1993 to add some flexibility into two different projects (both were interactive graphical programs for engineering applications at Petrobras company). There was a lack of any flow control structures in SOL and DEL, and a continuously growing need for a full programming power to them. "In 1993, the only real contender was Tcl, which had been explicitly designed to be embedded into applications. However, Tcl had unfamiliar syntax, did not offer good support for data description, and ran only on Unix platforms. We did not consider LISP or Scheme because of their unfriendly syntax. Python was still in its infancy. In the free, do-it-yourself atmosphere that then reigned in Tecgraf, it was quite natural that we should try to develop our own scripting language... Because many potential users of the language were not professional programmers, the language should avoid cryptic syntax and semantics. The implementation of the new language should be highly portable, because Tecgraf's clients had a very diverse collection of computer platforms. Finally, since we expected that other Tecgraf products would also need to embed a scripting language, the new language should follow the example of SOL and be provided as a library with a C API."[1]
So as a consequence, Lua was born. Lua 1.0 object constructors, being then slightly different from the current light and flexible style, had incorporated data-description syntax of SOL. (Hence the name Lua — sol is portuguese for sun.) Lua syntax for control structures was mostly borrowed from Modula (if, while, repeat/until), but also had taken influence from CLU (multiple assignments and multiple returns from function calls, as a simpler alternative to reference parameters or explicit pointers), C++ ("neat idea of allowing a local variable to be declared only where we need it"[1]), SNOBOL and AWK (associative arrays). In an article published in Dr. Dobb's Journal, Lua's creators also state that Lisp and Scheme with their single, ubiquitous data structure mechanism (the list) were a major influence on their decision to develop the table as the primary data structure of Lua.[3]
Current Lua semantics was gained mainly from Scheme: "Semantically, Lua has many similarities with Scheme, even though these similarities are not immediately clear because the two languages are syntactically very different. The influence of Scheme on Lua has gradually increased during Lua's evolution: initially, Scheme was just a language in the background, but later it became increasingly important as a source of inspiration, especially with the introduction of anonymous functions and full lexical scoping".[1]
Versions of Lua prior to version 5.0 were released under a license similar to the BSD license. From version 5.0 onwards, Lua has been licensed under the MIT License.

[edit] Features
Lua is commonly described as a “multi-paradigm” language, providing a small set of general features that can be extended to fit different problem types, rather than providing a more complex and rigid specification to match a single paradigm. Lua, for instance, does not contain explicit support for inheritance, but allows it to be implemented relatively easily with metatables. Similarly, Lua allows programmers to implement namespaces, classes, and other related features using its single table implementation; first-class functions allow the employment of many powerful techniques from functional programming; and full lexical scoping allows fine-grained information hiding to enforce the principle of least privilege.
In general, Lua strives to provide flexible meta-features that can be extended as needed, rather than supply a feature-set specific to one programming paradigm. As a result, the base language is light — in fact, the full reference interpreter is only about 150kB compiled — and easily adaptable to a broad range of applications.
Lua is a dynamically typed language intended for use as an extension or scripting language, and is compact enough to fit on a variety of host platforms. It supports only a small number of atomic data structures such as boolean values, numbers (double-precision floating point by default), and strings. Typical data structures such as arrays, sets, lists, and records can be represented using Lua’s single native data structure, the table, which is essentially a heterogeneous associative array.
Lua implements a small set of advanced features such as first-class functions, garbage collection, closures, proper tail calls, coercion (automatic conversion between string and number values at run time), coroutines (cooperative multitasking) and dynamic module loading.
By including only a minimum set of data types, Lua attempts to strike a balance between power and size.

[edit] Example code
The classic hello world program can be written as follows:


print("Hello World!")

-- A comment in Lua starts with a double-hyphen and runs to the end of the line. Multi-line strings & comments are adorned with double square brackets.
The factorial is an example of a recursive function:


function factorial(n)
  if n == 0 then
    return 1
  else
    return n * factorial(n - 1)
  end
end                                     
 
function factorial2(n)             -- Shorter equivalent of the above
  return n == 0 and 1 or n * factorial2(n - 1)
end

The second form of factorial function originates from Lua's short-circuit evaluation of boolean operators, which in Lua will return the value of last operand evaluated in an expression.
Lua’s treatment of functions as first-class variables is shown in the following example, where the print function’s behavior is modified:


do
  local oldprint = print           -- Store current print function as oldprint
  function print(s)                -- Redefine print function
    if s == "foo" then
      oldprint("bar")
    else 
      oldprint(s) 
    end
  end
end

Any future calls to ‘print’ will now be routed through the new function, and thanks to Lua’s lexical scoping, the old print function will only be accessible by the new, modified print.
Lua also supports closures, as demonstrated below:


function makeaddfunc(x)
  -- Return a new function that adds x to the argument
  return function(y)
    -- When we refer to the variable x, which is outside of the current
    -- scope and whose lifetime is shorter than that of this anonymous
    -- function, Lua creates a closure.
    return x + y
  end
end
plustwo = makeaddfunc(2)
print(plustwo(5)) -- Prints 7

A new closure for the variable x is created every time makeaddfunc is called, so that the anonymous function returned will always access its own x parameter. The closure is managed by Lua’s garbage collector, just like any other object.
Extensible semantics is a key feature of Lua, and the “metatable” concept allows Lua’s tables to be customized in powerful and unique ways. The following example demonstrates an “infinite” table. For any n, fibs[n] will give the nth Fibonacci number using dynamic programming and memoization.


fibs = { 1, 1 }                                -- Initial values for fibs[1] and fibs[2].
setmetatable(fibs, {                           -- Give fibs some magic behavior.
  __index = function(name, n)                  -- Call this function if fibs[n] does not exist.
    name[n] = name[n - 1] + name[n - 2]        -- Calculate and memoize fibs[n].
    return name[n]
  end
})


[edit] Tables
Tables are the most important data structure (and, by design, the only complex data structure) in Lua, and are the foundation of all user-created types.
The table is a collection of key and data pairs (known also as hashed heterogeneous associative array), where the data is referenced by key. The key (index) can be of any data type except nil. An integer key of 1 is considered distinct from a string key of "1".
Tables are created using the {} constructor syntax:


a_table = {}     -- Creates a new, empty table

Tables are always passed by reference:


-- Creates a new table, with one associated entry. The string x mapping to
-- the number 10.
a_table = {x = 10}
-- Prints the value associated with the string key,
-- in this case 10.
print(a_table["x"])
b_table = a_table
b_table["x"] = 20    -- The value in the table has been changed to 20.
print(a_table["x"])  -- Prints 20.
-- Prints 20, because a_table and b_table both refer to the same table.
print(b_table["x"])


[edit] Table as structure
Tables are often used as structures (or objects) by using strings as keys. Because such use is very common, Lua features a special syntax for accessing such fields. Example:


point = { x = 10, y = 20 }   -- Create new table
print(point["x"])            -- Prints 10
print(point.x)               -- Has exactly the same meaning as line above


[edit] Table as namespace
By using a table to store related functions, it can act as a namespace.


Point = {}
Point.new = function (x, y)
  return {x = x, y = y}
end
 
Point.set_x = function (point, x)
  point.x = x
end


[edit] Table as array
By using a numerical key, the table resembles an array data type. Lua arrays are 1-based: the first index is 1 rather than 0 as it is for many programming languages (though an explicit index of 0 is allowed).
A simple array of strings:


array = { "a", "b", "c", "d" }   -- Indices are assigned automatically.
print(array[2])                  -- Prints "b". Automatic indexing in Lua starts at 1.
print(#array)                    -- Prints 4.  # is the length operator for tables and strings.
array[0] = "z"                   -- Zero is a legal index.
print(#array)                    -- Still prints 4, as Lua arrays are 1-based.

An array of objects:


function Point(x, y)        -- "Point" object constructor
  return { x = x, y = y }   -- Creates and returns a new object (table)
end
array = { Point(10, 20), Point(30, 40), Point(50, 60) }   -- Creates array of points
print(array[2].y)                                         -- Prints 40


[edit] Object-oriented programming
Although Lua does not have a built-in concept of classes, they can be implemented using two language features: first-class functions and tables. By placing functions and related data into a table, an object is formed. Inheritance (both single and multiple) can be implemented via the “metatable” mechanism, telling the object to lookup nonexistent methods and fields in parent object(s).
There is no such concept as “class” with these techniques, rather “prototypes” are used as in the programming languages Self or JavaScript. New objects are created either with a factory method (that constructs new objects from scratch) or by cloning an existing object.
Lua provides some syntactic sugar to facilitate object orientation. To declare member functions inside a prototype table, one can use function table:func(args), which is equivalent to function table.func(self, args). Calling class methods also makes use of the colon: object:func(args) is equivalent to object.func(object, args).

[edit] Internals
Lua programs are not interpreted directly from the textual Lua file, but are compiled into bytecode which is then run on the Lua virtual machine. The compilation process is typically transparent to the user and is performed during run-time, but it can be done offline in order to increase loading performance or reduce the memory footprint of the host environment by leaving out the compiler.
Like most CPUs, and unlike most virtual machines (which are stack-based), the Lua VM is register-based, and therefore more closely resembles an actual hardware design. The register architecture both avoids excessive copying of values and reduces the total number of instructions per function. The virtual machine of Lua 5 is the first register-based VM to have a wide use.[4] Parrot (currently in development) is an another well-known register-based VM.
This example is the bytecode listing of the factorial function defined above (as shown by luac 5.1.1 compiler):[5]

function <factorial.lua:1,6> (10 instructions, 40 bytes at 003D5818)
1 param, 3 slots, 0 upvalues, 1 local, 3 constants, 0 functions
        1       [2]     EQ              0 0 -1  ; - 0
        2       [2]     JMP             2       ; to 5
        3       [3]     LOADK           1 -2    ; 1
        4       [3]     RETURN          1 2
        5       [5]     GETGLOBAL       1 -3    ; factorial
        6       [5]     SUB             2 0 -2  ; - 1
        7       [5]     CALL            1 2 2
        8       [5]     MUL             1 0 1
        9       [5]     RETURN          1 2
        10      [6]     RETURN          0 1


[edit] C API
Lua is intended to be embedded into other applications, and accordingly it provides a robust, easy to use C API. The API is divided into two parts: the Lua core, and the Lua auxiliary library.
The Lua API is fairly straightforward because its unique design eliminates the need for manual reference management in C code, unlike Python’s API. The API, like the language, is minimalistic. Advanced functionality is provided by the auxiliary library, which consists largely of preprocessor macros which make complex table operations more palatable.

[edit] Stack
The Lua API makes extensive use of a global stack which is used to pass parameters to and from Lua and C functions. Lua provides functions to push and pop most simple C data types (integers, floats, etc.) to and from the stack, as well as functions for manipulating tables through the stack. The Lua stack is somewhat different from a traditional stack; the stack can be indexed directly, for example. Negative indices indicate offsets from the top of the stack (for example, −1 is the last element), while positive indices indicate offsets from the bottom.
Marshalling data between C and Lua functions is also done using the stack. To call a Lua function, arguments are pushed onto the stack, and then the lua_call is used to call the actual function. When writing a C function to be directly called from Lua, the arguments are popped from the stack.

[edit] Special tables
The C API also provides several special tables, located at various “pseudo-indices” in the Lua stack. At LUA_GLOBALSINDEX is the globals table, _G from within Lua, which is the main namespace. There is also a registry located at LUA_REGISTRYINDEX where C programs can store Lua values for later retrieval.

[edit] Extension and binding
It is possible to write extension modules using the Lua API. Extension modules are shared objects which can be used to extend the functionality of the interpreter by providing native facilities to Lua scripts. Lua scripts may load extension modules using require.[6]
A growing collection of modules known as rocks are available through a package management system called LuaRocks, in the spirit of RubyGems. Other sources include LuaForge and the Lua Addons directory of lua-users.org wiki.
Prewritten Lua bindings exist for most popular programming languages, even for those which itself are scripting.[7] There are also some automatic binding generators such as SWIG, CPB, or tolua++.
LuaSearch is a website that intends to provide a centralized online interface for browsing Lua modules and documentation (both in POD and HTML formats), similar to Perl's search.cpan.org.

[edit] Applications





This section needs additional citations for verification. Please help improve this article by adding reliable references (ideally, using inline citations). Unsourced material may be challenged and removed. (January 2009)



[edit] Video games
In video game development, Lua is widely used as scripting language, see also game programmer. Notable games using Lua include:

Baldurs Gate and other role playing games based on Biowares Infinity Engine.
BZFlag allows plugins to be written in Lua.
Cortex Command has a built-in mod system with Lua compatibility.
Crysis and Far Cry use Lua extensively.
Dawn of War, Dawn of War II and Company of Heroes extensively use Lua for all game mechanics.
Garry's Mod and Fortress Forever, mods for Half-Life 2, use Lua scripting for tools and other sorts of things for full customization.
Grim Fandango and Escape from Monkey Island, both based on the GrimE engine. The historic “SCUMM Bar” is renovated and renamed to the "Lua Bar" as a reference.
Heroes of Might and Magic V, a turn-based strategy computer game.
Homeworld 2, a space based RTS.
Monopoly Tycoon, a game that is derived from the Monopoly board game.
Multi Theft Auto, a modification which adds multiplayer to the much popular game series Grand Theft Auto. Most recently, MTA:SA with Lua scriptable multiplayer for Grand Theft Auto: San Andreas.
PlayStation Home is programmed using Lua.
Psychonauts has more Lua aboard than C++ (400KLOC vs. 260KLOC).[8]
Ragnarok Online uses Lua to allow players to fully customize the artificial intelligence of their mercenary or homunculus (provided that they have an Alchemist to summon one) to their liking.
Ratchet & Clank Future: Tools of Destruction is scripted using Lua.
S.T.A.L.K.E.R.: Shadow of Chernobyl has all game scripts written in Lua.
Star Wars: Empire at War and Universe at War: Earth Assault.
Supreme Commander and its expansion Forged Alliance make extensive use of Lua for in-game scripting, camera control, user interfaces and game modifications
Warhammer Online: Age of Reckoning: a fantasy MMORPG based upon the popular Warhammer table-top game.
The Witcher uses Lua for game scripts.
World of Warcraft, a fantasy MMORPG. Lua is used to allow users to customize its user interface.


[edit] Other
Other applications using Lua include:

3DMLW plugin uses Lua scripting for animating 3D and handling different events.
Apache HTTP Server can use Lua anywhere in the request process (since version 2.3, via the core mod_lua module)
Adobe Photoshop Lightroom uses Lua for its user interface.
Awesome, a window manager, uses Lua as its configuration file format.
Barracuda Web Server SDK provides Lua Server Pages (LSP).
Celestia uses Lua to expand its capabilities without recompiling its source code.
Cisco uses Lua to implement Dynamic Access Policies within the Adaptive Security Appliance.
Damn Small Linux uses Lua to provide desktop-friendly interfaces for command-line utilities without sacrificing lots of disk space.
Dolphin Computer Access uses Lua scripting to make inaccessible applications accessible for visually impaired computer users with their screen reader - SuperNova.
Eyeon's Fusion compositor uses embedded Lua for internal and external scripts and also plugin prototyping.
The window manager Ion uses Lua for customization and extensibility.
lighttpd web server uses Lua for hook scripts as well as a modern replacement for the Cache Meta Language.
Version 2.01 of the profile management software for Logitech’s G15 gaming keyboard uses Lua as its scripting language.
LuaTeX, the designated successor of pdfTeX, allows extensions to be written in Lua.
Monotone version control system uses Lua for scripting hooks.
Multimedia Fusion Developer 2 has a Lua extension that allows games and applications created with it to run Lua scripts.
The network security scanner nmap uses Lua as the basis for its scripting language, called nse.
OpenWRT open source firmware distribution uses Lua to implement its web-based configuration GUI called LuCI.
New versions of SciTE allow Lua to be used to provide additional features.
VLC media player uses Lua to provide scripting support.


[edit] Notes


^ a b c d Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2007), "The evolution of Lua", Proc. of ACM HOPL III, pp. 2-1–2-26, doi:10.1145/1238844.1238846, ISBN 978-1-59593-766-X, http://www.tecgraf.puc-rio.br/~lhf/ftp://doc/hopl.pdf 
^ "The evolution of an extension language: a history of Lua". 2001. http://www.lua.org/history.html. Retrieved on 18 December 2008. 
^ Figueiredo, L. H.; Ierusalimschy, R.; Celes, W. (December 1996), "Lua: an Extensible Embedded Language. A few metamechanisms replace a host of features", Dr. Dobb's Journal 21 (12): 26–33, http://www.lua.org/ddj.html 
^ Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2005), "The implementation of Lua 5.0", J. of Universal Comp. Sci. 11 (7): 1159-1176, http://www.jucs.org/jucs_11_7/the_implementation_of_lua/jucs_11_7_1159_1176_defigueiredo.html 
^ Kein-Hong Man (2006), A No-Frills Introduction to Lua 5.1 VM Instructions, http://luaforge.net/docman/view.php/83/98/ANoFrillsIntroToLua51VMInstructions.pdf 
^ Lua 5.1 Reference Manual: Modules
^ "Binding Code To Lua", lua-users.org wiki, http://lua-users.org/wiki/BindingCodeToLua, retrieved on 2009-02-28 
^ Paul Du Bois, "Psychonauts and Lua: a case study", Lua Workshop 2005, http://www.lua.org/wshop05.html#DuBois, retrieved on 2008-12-28 



[edit] References


Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2006), Lua 5.1 Reference Manual, Lua.org, ISBN 85-903798-3-3, http://www.lua.org/manual/5.1/  (paper book)
Ierusalimschy, R. (2006), Programming in Lua (2nd ed.), Lua.org, ISBN 85-903798-2-5, http://www.inf.puc-rio.br/~roberto/pil2/  (1st ed. is available online)
Figueiredo, L. H.; Celes, W.; Ierusalimschy, R., eds. (2008), Lua Programming Gems, Lua.org, ISBN 978-85-903798-4-3, http://www.lua.org/gems/ 
Gutschmidt, T. (2003), Game Programming with Python, Lua, and Ruby, Course Technology PTR, ISBN 1592000770 
Schuytema, P.; Manyen, M. (2005), Game Development with Lua, Charles River Media, ISBN 1-58450-404-8 
Jung, K.; Brown, A. (2007), Beginning Lua Programming, Wrox, ISBN 0-470-06917-1, http://www.wrox.com/WileyCDA/WroxTitle/productCd-0470069171.html 
Lua papers and theses



[edit] External links



Wikibooks has a book on the topic of
Lua Functional Programming




Lua.org — official site.
lua-users.org — community website for and by users (and authors) of Lua.
Lua Q&A on StackOverflow.
A Look at Lua — Linux Journal.
Introducing Lua — ONLamp.com.
An Introduction to Lua — GameDev.net.
Embeddable scripting with Lua — IBM developerWorks.
Interview with Roberto Ierusalimschy on Lua — Computerworld.








v • d • e

Lua programming language





Interpreters and compilers

Lua · LuaJIT · LLVM-Lua · Parrot · LuaCLR · Nua · Yueliang · LuaPlus · Metalua






Frameworks and libraries

LuaRocks · stdlib · LuaSys · wxLua · IUP · LÖVE · Saci · Versium · Kepler · Orbit · WSAPI · mod_lua · mod_wombat






Ports and distributions

Implementations · Plua · Lua Player · Distributions






IDE

Brain Damage · CodeMAX · Decoda · LuaEdit · LuaEclipse / LunarEclipse / sKWash · Lua Studio · LuaX · SciTE · Textadept · QDE · VisualWx · VSLua / VS LuaLangPack · Zeus for Windows






Applications

Nanoki · Prosody · Sputnik · Tethys · Xavante













v • d • e

Free and open source software





General

Copyleft · Events and Awards · Free software · Free Software Definition · Gratis versus Libre · Open source software






Free software
portal









Notable packages

Apache · CUPS · Firefox · GNOME · KDE · OpenOffice.org · Thunderbird · X Window System






Operating systems

AROS · BSD · Darwin · FreeDOS · GNU · Haiku · Inferno · Linux · Mach · MINIX · OpenSolaris · Plan 9 · ReactOS · Syllable






Development

GCC · LLVM · Java · Open64 · Perl · PHP · Python · Lua · Ruby · Tcl · libJIT






History

GNU · Linux · Mozilla (Application Suite · Firefox · Thunderbird)






Organizations

Apache Software Foundation · Blender Foundation · Eclipse Foundation · FLOSS Manuals · freedesktop.org · Free Software Foundation · GNOME Foundation · GNU Project · Google Code · Linux Foundation · Mozilla Foundation · Open Source Geospatial Foundation · Open Source Initiative · SourceForge · Xiph.Org Foundation · X.Org Foundation






Licences

Apache · BSD · GNU GPL · LGPL · MIT · MPL · Permissive · Microsoft Public License · Microsoft Reciprocal License · FSF approved licenses






Challenges

Binary blob · Digital rights management · License proliferation · Mozilla software rebranding · Proprietary software · SCO-Linux controversies · Security · Software patents · Tivoization · Trusted Computing






Other topics

Alternative terms · Community · Linux distribution · Forking · Movement · Microsoft Open Specification Promise · Revolution OS · Comparison with closed source






List of open source software packages








Retrieved from "http://en.wikipedia.org/wiki/Lua_(programming_language)"
Categories: Lua programming language | Scripting languages | Object-oriented programming languages | Prototype-based programming languages | Embedded systems | Register-based virtual machines | Free compilers and interpreters | Free development toolkits and libraries | Free software programmed in C | Cross-platform softwareHidden categories: Articles needing additional references from January 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Česky
Dansk
Deutsch
Español
Esperanto
Euskara
Français
Galego
한국어
Italiano
Bahasa Melayu
Nederlands
日本語
Polski
Português
Русский
Suomi
Svenska
Tiếng Việt
Українська
中文









 This page was last modified on 3 April 2009, at 23:27.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
