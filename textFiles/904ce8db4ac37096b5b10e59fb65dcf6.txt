













Microsoft SQL Server - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Microsoft_SQL_Server";
		var wgTitle = "Microsoft SQL Server";
		var wgAction = "view";
		var wgArticleId = "13989994";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 282727457;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Microsoft SQL Server

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Microsoft SQL Server




Developed by
Microsoft


Latest release
SQL Server 2008 / 2008-8-6; 247 days ago


Operating system
Microsoft Windows


Type
RDBMS


License
Microsoft EULA


Website
www.microsoft.com/sqlserver


Microsoft SQL Server is a relational database management system (RDBMS) produced by Microsoft. Its primary query languages are T-SQL, Entity-SQL and ANSI SQL.




Contents


1 History

1.1 Genesis
1.2 SQL Server 2000
1.3 SQL Server 2005
1.4 SQL Server 2008


2 Editions
3 Architecture

3.1 Protocol layer


4 Data storage

4.1 Buffer management
4.2 Logging and Transaction
4.3 Concurrency and locking


5 Data retrieval

5.1 SQL CLR


6 Services

6.1 Service Broker
6.2 Replication Services
6.3 Analysis Services
6.4 Reporting Services
6.5 Notification Services
6.6 Integration Services
6.7 Full Text Search Service


7 Tools

7.1 SQLCMD
7.2 Visual Studio
7.3 SQL Server Management Studio
7.4 Business Intelligence Development Studio


8 Programmability

8.1 T-SQL
8.2 SQL Native Client


9 References
10 See also
11 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] History

[edit] Genesis

SQL Server Release History

Version
Year
Release Name
Codename


1.0
(OS/2)
1989
SQL Server 1.0
-


4.21
(WinNT)
1993
SQL Server 4.21
-


6.0
1995
SQL Server 6.0
SQL95


6.5
1996
SQL Server 6.5
Hydra


7.0
1998
SQL Server 7.0
Sphinx


-
1999
SQL Server 7.0
OLAP Tools
Plato


8.0
2000
SQL Server 2000
Shiloh


8.0
2003
SQL Server 2000
64-bit Edition
Liberty


9.0
2005
SQL Server 2005
Yukon


10.0
2008
SQL Server 2008
Katmai


The code base for MS SQL Server (prior to version 7.0) originated in Sybase SQL Server, and was Microsoft's entry to the enterprise-level database market, competing against Oracle, IBM, and, later, Sybase itself. Microsoft, Sybase and Ashton-Tate originally teamed up to create and market the first version named SQL Server 1.0 for OS/2 (about 1989) which was essentially the same as Sybase SQL Server 3.0 on Unix, VMS, etc. Microsoft SQL Server 4.2 was shipped around 1992 (available bundled with Microsoft OS/2 version 1.3). Later Microsoft SQL Server 4.21 for Windows NT was released at the same time as Windows NT 3.1. Microsoft SQL Server v6.0 was the first version designed for NT, and did not include any direction from Sybase.
About the time Windows NT was released, Sybase and Microsoft parted ways and each pursued their own design and marketing schemes. Microsoft negotiated exclusive rights to all versions of SQL Server written for Microsoft operating systems. Later, Sybase changed the name of its product to Adaptive Server Enterprise to avoid confusion with Microsoft SQL Server. Until 1994, Microsoft's SQL Server carried three Sybase copyright notices as an indication of its origin.
Since parting ways, several revisions have been done independently. SQL Server 7.0 was the first true GUI based database server and was a rewrite from the legacy Sybase code. It was succeeded by SQL Server 2000, which was the first edition to be launched in a variant for the IA-64 architecture.
In the eight years since release of Microsoft's previous SQL Server product (SQL Server 2000), advancements have been made in performance, the client IDE tools, and several complementary systems that are packaged with SQL Server 2005. These include: an ETL tool (SQL Server Integration Services or SSIS), a Reporting Server, an OLAP and data mining server (Analysis Services), and several messaging technologies, specifically Service Broker and Notification Services.

[edit] SQL Server 2000
Microsoft SQL Server 2000 is a RDBMS(Relational Database Management System) that offers enough administrative tools for database development, maintenance and administration.
1.Enterprise Manager is the main administrative console for SQL Server installations. It provides tree view of all of the SQL Server installations on network. We can perform high-level administrative functions that affect one or more servers, schedule common maintenance tasks or create and modify the structure of individual databases.
2.Query Analyzer is a quick method for performing queries against any of one of the SQL Server databases. It's a great way to quickly get information out of a database in response to a user request, test queries before implementing them in other applications, We can execute administration taks, create/modify Stored Procedures, Functions and Views, etc.
This is most commonly used Version by the Developers. It has all generic features for Microsoft Applications. For Microsoft Visual Studio 2003, this is having enough features. But for Microsoft Visual Studio 2005, some more features required, namely Long Text (more than 8000 chars for varchar). Any way this is acceptable for most cases.

[edit] SQL Server 2005
SQL Server 2005 (codenamed Yukon), released in October 2005, is the successor to SQL Server 2000. It included native support for managing XML data, in addition to relational data. For this purpose, it defined an xml data type that could be used either as a data type in database columns or as literals in queries. XML columns can be associated with XSD schemas; XML data being stored is verified against the schema. XML is converted to an internal binary data type before being stored in the database. Specialized indexing methods were made available for XML data. XML data is queried using XQuery; SQL Server 2005 added some extensions to the T-SQL language to allow embedding XQuery queries in T-SQL. In addition, it also defines a new extension to XQuery, called XML DML, that allows query-based modifications to XML data. SQL Server 2005 also allows a database server to be exposed over web services using TDS packets encapsulated within SOAP (protocol) requests. When the data is accessed over web services, results are returned as XML.[1]
For relational data, T-SQL has been augmented with error handling features and support for recursive queries. SQL Server 2005 has also been enhanced with new indexing algorithms and better error recovery systems. Data pages are checksummed for better error resiliency, and optimistic concurrency support has been added for better performance. Permissions and access control have been made more granular and the query processor handles concurrent execution of queries in a more efficient way. Partitions on tables and indexes are supported natively, so scaling out a database onto a cluster is easier. SQL CLR was introduced with SQL Server 2005 to let it integrate with the .NET Framework.[2]

[edit] SQL Server 2008





This article is written like an advertisement. Please help rewrite this article from a neutral point of view. For blatant advertising that would require a fundamental rewrite to become encyclopedic, use {{db-spam}} to mark for speedy deletion. (March 2009)


The current version of SQL Server, SQL Server 2008,[3] (code-named "Katmai",[4]) was released (RTM) on August 6, 2008[5] and aims to make data management self-tuning, self organizing, and self maintaining with the development of SQL Server Always On technologies, to provide near-zero downtime. SQL Server 2008 will also include support for structured and semi-structured data, including digital media formats for pictures, audio, video and other multimedia data. In current versions, such multimedia data can be stored as BLOBs (binary large objects), but they are generic bitstreams. Intrinsic awareness of multimedia data will allow specialized functions to be performed on them. According to Paul Flessner, senior Vice President, Server Applications, Microsoft Corp., SQL Server 2008 can be a data storage backend for different varieties of data: XML, email, time/calendar, file, document, spatial, etc as well as perform search, query, analysis, sharing, and synchronization across all data types.[4]
Other new data types include specialized date and time types and a Spatial data type for location-dependent data.[6] Better support for unstructured and semi-structured data is provided using the new FILESTREAM[7] data type, which can be used to reference any file stored on the file system.[8] Structured data and metadata about the file is stored in SQL Server database, whereas the unstructured component is stored in the file system. Such files can be accessed both via Win32 file handling APIs as well as via SQL Server using T-SQL; doing the latter accesses the file data as a BLOB. Backing up and restoring the database backs up or restores the referenced files as well.[9] SQL Server 2008 also natively supports hierarchical data, and includes T-SQL constructs to directly deal with them, without using recursive queries.[9]
The Full-Text Search functionality has been integrated with the database engine, which simplifies management and improves performance.[10]



Wikibooks has a book on the topic of
Geospatial Data in SQL Server



Spatial data will be stored in two types. A "Flat Earth" (GEOMETRY or planar) data type represents geospatial data which has been projected from its native, spherical, coordinate system into a plane. A "Round Earth" data type (GEOGRAPHY) uses an ellipsoidal model in which the Earth is defined as a single continuous entity which does not suffer from the singularities such as the international dateline, poles, or map projection zone "edges". Approximately 70 methods are available to represent spatial operations for the Open Geospatial Consortium Simple Features for SQL, Version 1.1[11].
SQL Server includes better compression features, which also helps in improving scalability. It also includes Resource Governor that allows reserving resources for certain users or workflows. It also includes capabilities for transparent encryption of data as well as compression of backups.[7] SQL Server 2008 supports the ADO.NET Entity Framework and the reporting tools, replication, and data definition will be built around the Entity Data Model.[12] SQL Server Reporting Services will gain charting capabilities from the integration of the data visualization products from Dundas Data Visualization Inc., which was acquired by Microsoft.[13] On the management side, SQL Server 2008 includes the Declarative Management Framework which allows configuring policies and constraints, on the entire database or certain tables, declaratively.[6] The version of SQL Server Management Studio included with SQL Server 2008 supports IntelliSense for SQL queries against a SQL Server 2008 Database Engine[14]. SQL Server 2008 also makes the databases available via Windows PowerShell providers and management functionality available as Cmdlets, so that the server and all the running instances can be managed from Windows PowerShell.[15]

[edit] Editions
Microsoft makes SQL Server available in multiple versions, with different feature sets and targeting different users. These versions are:[16][17]

SQL Server Compact Edition (SQL CE)
The compact edition is an embedded database engine. Unlike the other versions of SQL Server, the SQL CE engine is based on SQL Mobile (initially designed for use with hand-held devices) and does not share the same binaries. Due to its small size (1MB DLL footprint), it has a markedly reduced feature set compared to the other editions. For example, it supports a subset of the standard data types, does not support stored procedures or Views or multiple-statement batches (among other limitations). It is limited to 4GB maximum database size and cannot be run as a Windows service, Compact Edition must be hosted by the application using it. The 3.5 version includes considerable work that supports ADO.NET Synchronization Services.
SQL Server Developer Edition
SQL Server Developer Edition includes the same features as SQL Server Enterprise Edition, but is limited by the license to be only used as a development and test system, and not as production server. This version is available to download by students free of charge as a part of Microsoft's DreamSpark program.
SQL Server 2005 Embedded Edition (SSEE)
SQL Server 2005 Embedded Edition is a specially configured named instance of the SQL Server Express database engine which can be accessed only by certain Windows Services.
SQL Server Enterprise Edition
SQL Server Enterprise Edition is the full-featured version of SQL Server, including both the core database engine and add-on services, while including a range of tools for creating and managing a SQL Server cluster.
SQL Server Evaluation Edition
SQL Server Evaluation Edition, also known as the Trial Edition, has all the features of the Enterprise Edition, but is limited to 180 days, after which the tools will continue to run, but the server services will stop.[18]
SQL Server Express Edition
SQL Server Express Edition is a scaled down, free edition of SQL Server, which includes the core database engine. While there are no limitations on the number of databases or users supported, it is limited to using one processor, 1 GB memory and 4 GB database files. The entire database is stored in a single .mdf file, and thus making it suitable for XCOPY deployment. It is intended as a replacement for MSDE. Two additional versions provide a superset of features not in the original Express Edition. The first is SQL Server Express with Tools, which includes SQL Server Management Studio Basic. SQL Server Express with Advanced Services adds full-text search capability and reporting services. [19]
SQL Server Fast Track
SQL Server Fast Track is specifically for enterprise-scale data warehousing storage and business intelligence processing, and runs on reference-architecture hardware that is optimized for Fast Track.[20]
SQL Server Standard Edition
SQL Server Standard edition includes the core database engine, along with the stand-alone services. It differs from Enterprise edition in that it supports fewer active instances (number of nodes in a cluster) and does not include some high-availability functions such as hot-add memory (allowing memory to be added while the server is still running), and parallel indexes.
SQL Server Web Edition
SQL Server Web Edition is a low-TCO option for Web hosting.
SQL Server Workgroup Edition
SQL Server Workgroup Edition includes the core database functionality but does not include the additional services.


[edit] Architecture

[edit] Protocol layer
Protocol layer implements the external interface to SQL Server. All operations that can be invoked on SQL Server are communicated to it via a Microsoft-defined format, called Tabular Data Stream (TDS). TDS is an application layer protocol, used to transfer data between a database server and a client. Initially designed and developed by Sybase Inc. for their Sybase SQL Server relational database engine in 1984, and later by Microsoft in Microsoft SQL Server, TDS packets can be encased in other physical transport dependent protocols, including TCP/IP, Named pipes, and Shared memory. Consequently, access to SQL Server is available over these protocols. In addition, the SQL Server API is also exposed over bando web services.[17]

[edit] Data storage
The main unit of data storage is a database, which is a collection of tables with typed columns. SQL Server supports different data types, including primary types such as Integer, Float, Decimal, Char (including character strings), Varchar (variable length character strings), binary (for unstructured blobs of data), Text (for textual data) among others. It also allows user-defined composite types (UDTs) to be defined and used. SQL Server also makes server statistics available as virtual tables and views (called Dynamic Management Views or DMVs). A database can also contain other objects including views, stored procedures, indexes and constraints, in addition to tables, along with a transaction log. A SQL Server database can contain a maximum of 231 objects, and can span multiple OS-level files with a maximum file size of 220 TB.[17] The data in the database are stored in primary data files with an extension .mdf. Secondary data files, identified with an .ndf extension, are used to store optional metadata. Log files are identified with the .ldf extension.[17]
Storage space allocated to a database is divided into sequentially numbered pages, each 8 KB in size. A page is the basic unit of I/O for SQL Server operations. A page is marked with a 96-byte header which stores metadata about the page including the page number, page type, free space on the page and the ID of the object that owns it. Page type defines the data contained in the page - data stored in the database, index, allocation map which holds information about how pages are allocated to tables and indexes, change map which holds information about the changes made to other pages since last backup or logging, or contain large data types such as image or text. While page is the basic unit of an I/O operation, space is actually managed in terms of an extent which consists of 8 pages. A database object can either span all 8 pages in an extent ("uniform extent") or share an extent with up to 7 more objects ("mixed extent"). A row in a database table cannot span more than one page, so is limited to 8 KB in size. However, if the data exceeds 8 KB and the row contains Varchar or Varbinary data, the data in those columns are moved to a new page (or possibly a sequence of pages, called an Allocation unit) and replaced with a pointer to the data.[21]
For physical storage of a table, its rows are divided into a series of partitions (numbered 1 to n). The partition size is user defined; by default all rows are in a single partition. A table is split into multiple partitions in order to spread a database over a cluster. Rows in each partition are stored in either B-tree or heap structure. If the table has an associated index to allow fast retrieval of rows, the rows are stored in-order according to their index values, with a B-tree providing the index. The data is in the leaf node of the leaves, and other nodes storing the index values for the leaf data reachable from the respective nodes. If the index is non-clustered, the rows are not sorted according to the index keys. An indexed view has the same storage structure as an indexed table. A table without an index is stored in an unordered heap structure. Both heaps and B-trees can span multiple allocation units.[22]

[edit] Buffer management
SQL Server buffers pages in RAM to minimize disc I/O. Any 8 KB page can be buffered in-memory, and the set of all pages currently buffered is called the buffer cache. The amount of memory available to SQL Server decides how many pages will be cached in memory. The buffer cache is managed by the Buffer Manager. Either reading from or writing to any page copies it to the buffer cache. Subsequent reads or writes are redirected to the in-memory copy, rather than the on-disc version. The page is updated on the disc by the Buffer Manager only if the in-memory cache has not been referenced for some time. While writing pages back to disc, asynchronous I/O is used whereby the I/O operation is done in a background thread so that other operations do not have to wait for the I/O operation to complete. Each page is written along with its checksum when it is written. When reading the page back, its checksum is computed again and matched with the stored version to ensure the page has not been damaged or tampered with in the meantime.[23]

[edit] Logging and Transaction
SQL Server ensures that any change to the data is ACID-compliant, i.e., it uses transactions to ensure that any operation either totally completes or is undone if fails, but never leaves the database in an intermediate state. Using transactions, a sequence of actions can be grouped together, with the guarantee that either all actions will succeed or none will. SQL Server implements transactions using a write-ahead log. Any changes made to any page will update the in-memory cache of the page, simultaneously all the operations performed will be written to a log, along with the transaction ID which the operation was a part of. Each log entry is identified by an increasing Log Sequence Number (LSN) which ensure that no event overwrites another. SQL Server ensures that the log will be written onto the disc before the actual page is written back. This enables SQL Server to ensure integrity of the data, even if the system fails. If both the log and the page were written before the failure, the entire data is on persistent storage and integrity is ensured. If only the log was written (the page was either not written or not written completely), then the actions can be read from the log and repeated to restore integrity. If the log wasn't written then integrity is also maintained although the database state remains unchanged as if the transaction never occurred. If it was only partially written, then the actions associated with the unfinished transaction are discarded. Since the log was only partially written, the page is guaranteed to have not been written, again ensuring data integrity. Removing the unfinished log entries effectively undoes the transaction. SQL Server ensures consistency between the log and the data every time an instance is restarted.[17]

[edit] Concurrency and locking
SQL Server allows multiple clients to use the same database concurrently. As such, it needs to control concurrent access to shared data, to ensure data integrity - when multiple clients update the same data, or clients attempt to read data that is in the process of being changed by another client. SQL Server provides two modes of concurrency control: pessimistic concurrency and optimistic concurrency. When pessimistic concurrency control is being used, SQL Server controls concurrent access by using locks. Locks can be either shared or exclusive. Exclusive lock grants the user exclusive access to the data - no other user can access the data as long as the lock is held. Shared locks are used when some data is being read - multiple users can read from data locked with a shared lock, but not acquire an exclusive lock. The latter would have to wait for all shared locks to be released. Locks can be applied on different levels of granularity - on entire tables, pages, or even on a per-row basis on tables. For indexes, it can either be on the entire index or on index leaves. The level of granularity to be used is defined on a per-database basis by the database administrator. While a fine grained locking system allows more users to use the table or index simultaneously, it requires more resources. So it does not automatically turn into higher performing solution. SQL Server also includes two more lightweight mutual exclusion solutions - latches and spinlocks - which are less robust than locks but are less resource intensive. SQL Server uses them for DMVs and other resources that are usually not busy. SQL Server also monitors all worker threads that acquire locks to ensure that they do not end up in deadlocks - in case they do, SQL Server takes remedial measures, which in many cases is to kill one of the threads entangled in a deadlock and rollback the transaction it started.[17] To implement locking, SQL Server contains the Lock Manager. The Lock Manager maintains an in-memory table that manages the database objects and locks, if any, on them along with other metadata about the lock. Access to any shared object is mediated by the lock manager, which either grants access to the resource or blocks it.
SQL Server also provides the optimistic concurrency control mechanism, which is similar to the multiversion concurrency control used in other databases. The mechanism allows a new version of a row to be created whenever the row is updated, as opposed to overwriting the row, i.e., a row is additionally identified by the ID of the transaction that created the version of the row. Both the old as well as the new versions of the row are stored and maintained, though the old versions are moved out of the database into a system database identified as Tempdb. When a row is in the process of being updated, any other requests are not blocked (unlike locking) but are executed on the older version of the row. If the other request is an update statement, it will result in two different versions of the rows - both of them will be stored by the database, identified by their respective transaction IDs.[17]

[edit] Data retrieval
The main mode of retrieving data from an SQL Server database is querying for it. The query is expressed using a variant of SQL called T-SQL, a dialect Microsoft SQL Server shares with Sybase SQL Server due to its legacy. The query declaratively specifies what is to be retrieved. It is processed by the query processor, which figures out the sequence of steps that will be necessary to retrieve the requested data. The sequence of actions necessary to execute a query is called a query plan. There might be multiple ways to process the same query. For example, for a query that contains a join statement and a select statement, executing join on both the tables and then executing select on the results would give the same result as selecting from each table and then executing the join, but result in different execution plans. In such case, SQL Server chooses the plan that is supposed to yield the results in the shortest possible time. This is called query optimization and is performed by the query processor itself.[17]
SQL Server includes a cost-based query optimizer which tries to optimize on the cost, in terms of the resources it will take to execute the query. Given a query, the query optimizer looks at the database schema, the database statistics and the system load at that time. It then decides which sequence to access the tables referred in the query, which sequence to execute the operations and what access method to be used to access the tables. For example, if the table has an associated index, whether the index should be used or not - if the index is on a column which is not unique for most of the columns (low "selectivity"), it might not be worthwhile to use the index to access the data. Finally, it decides whether to execute the query concurrently or not. While a concurrent execution is more costly in terms of total processor time, because the execution is actually split to different processors might mean it will execute faster. Once a query plan is generated for a query, it is temporarily cached. For further invocations of the same query, the cached plan is used. Unused plans are discarded after some time.[17][24]
SQL Server also allows stored procedures to be defined. Stored procedures are parameterized T-SQL queries, that are stored in the server itself (and not issued by the client application as is the case with general queries). Stored procedures can accept values sent by the client as input parameters, and send back results as output parameters. They can also call other stored procedures, and can be selectively provided access to. Unlike other queries, stored procedures have an associated name, which is used at runtime to resolve into the actual queries. Also because the code need not be sent from the client every time (as it can be accessed by name), it reduces network traffic and somewhat improves performance.[25] Execution plans for stored procedures are also cached as necessary.

[edit] SQL CLR
Main article: SQL CLR
Microsoft SQL Server 2005 includes a component named SQL CLR via which it integrates with .NET Framework. Unlike most other applications that use .NET Framework, SQL Server itself hosts the .NET Framework runtime, i.e., memory, threading and resource management requirements of .NET Framework are satisfied by SQLOS itself, rather than the underlying Windows operating system. SQLOS provides deadlock detection and resolution services for .NET code as well. With SQL CLR, stored procedures and triggers can be written in any managed .NET language, including C# and VB.NET. Managed code can also be used to define UDT's (user defined types), which can persist in the database. Managed code is compiled to .NET assemblies and after being verified for type safety, registered at the database. After that, they can be invoked like any other procedure.[26] However, only a subset of the Base Class Library is available, when running code under SQL CLR. Most APIs relating to user interface functionality are not available.[26]
When writing code for SQL CLR, data stored in SQL Server databases can be accessed using the ADO.NET APIs like any other managed application that accesses SQL Server data. However, doing that creates a new database session, different from the one in which the code is executing. To avoid this, SQL Server provides some enhancements to the ADO.NET provider that allows the connection to be redirected to the same session which already hosts the running code. Such connections are called context connections and are set by setting context connection parameter to true in the connection string. SQL Server also provides several other enhancements to the ADO.NET API, including classes to work with tabular data or a single row of data as well as classes to work with internal metadata about the data stored in the database. It also provides access to the XML features in SQL Server, including XQuery support. These enhancements are also available in T-SQL Procedures in consequence of the introduction of the new XML Datatype (query,value,nodes functions). [27]

[edit] Services
SQL Server also includes an assortment of add-on services. While these are not essential for the operation of the database system, these provide value added services on top of the core database management system. These services either run as a part of some SQL Server component or out-of-process as Windows Service and presents their own API to control and interact with them.

[edit] Service Broker
The Service Broker, which runs as a part of the database engine, provides a reliable messaging and message queuing platform for SQL Server applications. Used inside an instance, it is used to provide an asynchronous programming environment. For cross instance applications, Service Broker communicates over TCP/IP and allows the different components to be synchronized together, via exchange of messages.[28]

[edit] Replication Services
SQL Server Replication Services are used by SQL Server to replicate and synchronize database objects, either in entirety or a subset of the objects present, across replication agents, which might be other database servers across the network, or database caches on the client side. Replication follows a publisher/subscriber model, i.e., the changes are sent out by one database server ("publisher") and are received by others ("subscribers"). SQL Server supports three different types of replication:[29]

Transaction replication
Each transaction made to the publisher database (master database) is synced out to subscribers, who update their databases with the transaction. Transactional replication synchronizes databases in near real time.[30]


Merge replication
Changes made at both the publisher and subscriber databases are tracked, and periodically the changes are synchronized bi-directionally between the publisher and the subscribers. If the same data has been modified differently in both the publisher and the subscriber databases, synchronization will result in a conflict which has to be resolved - either manually or by using pre-defined policies.[31]


Snapshot replication
Snapshot replication published a copy of the entire database (the then-snapshot of the data) and replicates out to the subscribers. Further changes to the snapshot are not tracked.[32]


[edit] Analysis Services
Main article: SQL Server Analysis Services
SQL Server Analysis Services adds OLAP and data mining capabilities for SQL Server databases. The OLAP engine supports MOLAP, ROLAP and HOLAP storage modes for data. Analysis Services supports the XML for Analysis standard as the underlying communication protocol. The cube data can be accessed using MDX queries.[33] Data mining specific functionality is exposed via the DMX query language. Analysis Services includes various algorithms - Decision trees, clustering algorithm, Naive Bayes algorithm, time series analysis, sequence clustering algorithm, linear and logistic regression analysis, and neural networks - for use in data mining.[34]

[edit] Reporting Services
Main article: SQL Server Reporting Services
SQL Server Reporting Services is a report generation environment for data gathered from SQL Server databases. It is administered via a web interface. Reporting services features a web services interface to support the development of custom reporting applications. Reports are created as RDL files.[35]
Reports can be designed using recent versions of Microsoft Visual Studio (including Visual Studio.NET 2003 onwards) with Business Intelligence Development Studio, installed or with the included Report Builder. Once created, RDL files can be rendered in a variety of formats[36] including Excel, PDF, CSV, XML, TIFF (and other image formats)[37], and HTML Web Archive.

[edit] Notification Services
Main article: SQL Server Notification Services
Originally introduced as a post-release add-on for SQL Server 2000[38], Notification Services was bundled as part of the Microsoft SQL Server platform for the first and only time with SQL Server 2005.[39][40] with Sql Server 2005, SQL Server Notification Services is a mechanism for generating data-driven notifications, which are sent to Notification Services subscribers. A subscriber registers for a specific event or transaction (which is registered on the database server as a trigger); when the event occurs, Notification Services can use one of three methods to send a message to the subscriber informing about the occurrence of the event. These methods include SMTP, SOAP, or by writing to a file in the filesystem. [41]

[edit] Integration Services
Main article: SQL Server Integration Services
SQL Server Integration Services is used to integrate data from different data sources. It is used for the ETL capabilities for SQL Server for data warehousing needs. Integration Services includes GUI tools to build data extraction workflows integration various functionality such as extracting data from various sources, querying data, transforming data including aggregating, duplication and merging data, and then loading the transformed data onto other sources, or sending e-mails detailing the status of the operation.[42]

[edit] Full Text Search Service
Main article: SQL Server Full Text Search




The SQL Server Full Text Search service architecture


SQL Server Full Text Search service is a specialized indexing and querying service for unstructured text stored in SQL Server databases. The full text search index can be created on any column with character based text data. It allows for words to be searched for in the text columns. While it can be performed with the SQL LIKE operator, using SQL Server Full Text Search service can be more efficient. Full Text Search (FTS) allows for inexact matching of the source string, indicated by a Rank value which can range from 0 to 1000 - a higher rank means a more accurate match. It also allows linguistic matching ("inflectional search"), i.e., linguistic variants of a word (such as a verb in a different tense) will also be a match for a given word (but with a lower rank than an exact match). Proximity searches are also supported, i.e., if the words searched for do not occur in the sequence they are specified in the query but are near each other, they are also considered a match. T-SQL exposes special operators that can be used to access the FTS capabilities.[43][44]
The Full Text Search engine is divided into two processes - the Filter Daemon process (msftefd.exe) and the Search process (msftesql.exe). These processes interact with the SQL Server. The Search process includes the indexer (that creates the full text indexes) and the full text query processor. The indexer scans through text columns in the database. It can also index through binary columns, and use iFilters to extract meaningful text from the binary blob (for example, when a Microsoft Word document is stored as an unstructured binary file in a database). The iFilters are hosted by the Filter Daemon process. Once the text is extracted, the Filter Daemon process breaks it up into a sequence of words and hands it over to the indexer. The indexer filters out noise words, i.e., words like A, And etc, which occur frequently and are not useful for search. With the remaining words, an inverted index is created, associating each word with the columns they were found in. SQL Server itself includes a Gatherer component that monitors changes to tables and invokes the indexer in case of updates.[45]
When a full text query is received by the SQL Server query processor, it is handed over to the FTS query processor in the Search process. The FTS query processor breaks up the query into the constituent words, filters out the noise words, and uses an inbuilt thesaurus to find out the linguistic variants for each word. The words are then queried against the inverted index and a rank of their accurateness is computed. The results are returned to the client via the SQL Server process.[45]

[edit] Tools

[edit] SQLCMD
SQLCMD is a command line application that comes with Microsoft SQL Server, and exposes the management features of SQL Server. It allows SQL queries to be written and executed from the command prompt. It can also act as a scripting language to create and run a set of SQL statements as a script. Such scripts are stored as a .sql file, and are used either for management of databases or to create the database schema during the deployment of a database.
SQLCMD was introduced with SQL Server 2005 and this continues with SQL Server 2008. Its predecessor for earlier versions was OSQL, which is functionally equivalent and many of the command line parameters are identical.

[edit] Visual Studio
Microsoft Visual Studio includes native support for data programming with Microsoft SQL Server. It can be used to write and debug code to be executed by SQL CLR. It also includes a data designer that can be used to graphically create, view or edit database schemas. Queries can be created either visually or using code. SSMS 2008 onwards, provides intellisense for SQL queries as well.

[edit] SQL Server Management Studio
SQL Server Management Studio is a GUI tool included with SQL Server 2005 and later for configuring, managing, and administering all components within Microsoft SQL Server. The tool includes both script editors and graphical tools that work with objects and features of the server.[46] SQL Server Management Studio replaces Enterprise Manager as the primary management interface for Microsoft SQL Server since SQL Server 2005. A version of SQL Server Management Studio is also available for SQL Server Express Edition, for which it is known as SQL Server Management Studio Express (SSMSE). [47]
A central feature of SQL Server Management Studio is the Object Explorer, which allows the user to browse, select, and act upon any of the objects within the server.[48] It can be used to visually observe and analyze query plans and optimize the database performance, among others. [49] SQL Server Management Studio can also be used to create a new database, alter any existing database schema by adding or modifying tables and indexes, or analyze performance. It includes the query windows which provide a GUI based interface to write and execute queries.[17]

[edit] Business Intelligence Development Studio
Business Intelligence Development Studio (BIDS) is the IDE from Microsoft used for developing data analysis and Business Intelligence solutions utilizing the Microsoft SQL Server Analysis Services, Reporting Services and Integration Services. It is based on the Microsoft Visual Studio development environment but customizes with the SQL Server services-specific extensions and project types, including tools, controls and projects for reports (using Reporting Services), Cubes and data mining structures (using Analysis Services).[50]

[edit] Programmability

[edit] T-SQL
Main article: T-SQL
T-SQL (Transact-SQL) is the primary means of programming and managing SQL Server. It exposes keywords for the operations that can be performed on SQL Server, including creating and altering database schemas, entering and editing data in the database as well as monitoring and managing the server itself. Client applications, both which consume data or manage the server, leverage SQL Server functionality by sending T-SQL queries and statements which are then processed by the server and results (or errors) returned to the client application. SQL Server allows it to be managed using T-SQL. For this it exposes read only tables from which server statistics can be read. Management functionality is exposed via system-defined stored procedures which can be invoked from T-SQL queries to perform the management operation.[51]

[edit] SQL Native Client
SQL Native Client is the native client side data access library for Microsoft SQL Server, version 2005 onwards. It natively implements support for the SQL Server features including the Tabular Data Stream implementation, support for mirrored SQL Server databases, full support for all data types supported by SQL Server, asynchronous operations, query notifications, encryption support, as well as receiving multiple result sets in a single database session. SQL Native Client is used under the hood by SQL Server plug-ins for other data access technologies, including ADO or OLE DB. It is also used by the native SQL Server ADO.NET provider, SqlClient. The SQL Native Client can also be directly used, bypassing the generic data access layers.[52]

[edit] References





This article cites its sources but does not provide page references. You can help to improve it by introducing citations that are more precise.




^ "Database Engine XML Enhancements". http://msdn.microsoft.com/en-us/library/ms170809.aspx. Retrieved on 2007-12-03. 
^ "Database Engine Enhancements". http://msdn.microsoft.com/en-us/library/ms170910.aspx. Retrieved on 2007-12-03. 
^ "Microsoft SQL Server 2008". http://www.microsoft.com/sql/prodinfo/futureversion/default.mspx. Retrieved on 2007-04-06. 
^ a b "ChannelWeb: Next SQL Server stop: Katmai". http://www.crn.com/storage/170702999. Retrieved on 2005-11-05. 
^ Announced to the SQL Server Special Interest Group at the ESRI 2008 User's Conference on August 6, 2008 by Ed Katibah (Spatial Program Manager at Microsoft)
^ a b "Microsoft Gives Peek At Next Version Of SQL Server". http://www.informationweek.com/software/showArticle.jhtml?articleID=199500164&subSection=Development. Retrieved on 2007-05-11. 
^ a b "One more test build to go for SQL Server 2008". http://blogs.zdnet.com/microsoft/?p=937. Retrieved on 2006-11-13. 
^ "Guest Blogger: Ted Kummert". http://blogs.msdn.com/stevengu/archive/2007/11/13/guest-blogger-ted-kummert.aspx. Retrieved on 2007-11-20. 
^ a b Christian Kleinerman. "SQL Server 2008 for developers". Channel9. http://channel9.msdn.com/Showpost.aspx?postid=387069. Retrieved on 2008-03-07. 
^ Fernando Azpeitia Lopez. "SQL Server 2008 Full-Text Search: Internals and Enhancements". http://msdn.microsoft.com/en-us/library/cc721269.aspx. 
^ "Microsoft Shares Details on SQL Server 2008 Spatial Support by Directions Staff". http://www.directionsmag.com/editorials.php?article_id=2477&trv=1. Retrieved on 2007-09-07. 
^ "SQL Server "Katmai" to Deliver Entity Data Platform and Support LINQ". http://oakleafblog.blogspot.com/2007/05/sql-server-to-deliver-entity-data.html. Retrieved on 2007-05-12. 
^ "Microsoft Details Dynamic IT Strategy at Tech-Ed 2007". http://www.earthtimes.org/articles/show/news_press_release,115898.shtml. Retrieved on 2007-06-04. 
^ "SQL Server IntelliSense". http://msdn.microsoft.com/en-us/library/ms173434.aspx. Retrieved on 2008-08-18. 
^ "SQL Server Support for PowerShell!". http://blogs.msdn.com/powershell/archive/2007/11/13/sql-server-support-for-powershell.aspx. Retrieved on 2007-12-03. 
^ "SQL Server 2005 Features Comparison". http://www.microsoft.com/sql/prodinfo/features/compare-features.mspx. Retrieved on 2007-12-03. 
^ a b c d e f g h i j Kalen Delaney. Inside Microsoft SQL Server 2005: The Storage Engine. Microsoft Press. ISBN 0-7356-2105-5. 
^ "SQL Server 2008 Trial Software". http://www.microsoft.com/sqlserver/2008/en/us/trial-software.aspx. Retrieved on 2009-03-26. 
^ "What's up with SQL Server 2008 Express editions". http://blogs.msdn.com/sqlexpress/archive/2008/08/07/what-s-up-with-sql-server-2008-express-editions.aspx. Retrieved on 2008-08-15. 
^ "Microsoft SQL Server 2008: Fast Track Data Warehouse". http://www.microsoft.com/Sqlserver/2008/en/us/fasttrack.aspx. Retrieved on 2009-03-26. 
^ "Pages and Extents". http://msdn.microsoft.com/en-us/library/ms190969.aspx. Retrieved on 2007-12-02. 
^ "Table and Index Organization". http://msdn.microsoft.com/en-us/library/ms189051.aspx. Retrieved on 2007-12-02. 
^ "Buffer Management". http://msdn.microsoft.com/en-us/library/aa337525.aspx. Retrieved on 2007-12-02. 
^ "Single SQL Statement Processing". http://msdn.microsoft.com/en-us/library/ms190623.aspx. Retrieved on 2007-12-03. 
^ "Stored Procedure Basics". http://msdn.microsoft.com/en-us/library/ms191436.aspx. Retrieved on 2007-12-03. 
^ a b "Overview of CLR integration". http://msdn.microsoft.com/en-us/library/ms131045.aspx. Retrieved on 2007-12-03. 
^ "XML Support in SQL Server". http://msdn.microsoft.com/en-us/library/ms345117(SQL.90).aspx. Retrieved on 2008-09-05. 
^ "Introducing Service Broker". http://msdn.microsoft.com/en-us/library/ms166104.aspx. Retrieved on 2007-12-03. 
^ "Types of Replication Overview". http://msdn.microsoft.com/en-us/library/ms152531.aspx. Retrieved on 2007-12-03. 
^ "Transactional Replication Overview". http://msdn.microsoft.com/en-us/library/ms151176.aspx. Retrieved on 2007-12-03. 
^ "Merge Replication Overview". http://msdn.microsoft.com/en-us/library/ms152746.aspx. Retrieved on 2007-12-03. 
^ "Snapshot replication Overview". http://msdn.microsoft.com/en-us/library/ms151832.aspx. Retrieved on 2007-12-03. 
^ "Analysis Services Architecture". http://msdn.microsoft.com/en-us/library/ms174918.aspx. Retrieved on 2007-12-03. 
^ "Data Mining Concepts". http://msdn.microsoft.com/en-us/library/ms174949.aspx. Retrieved on 2007-12-03. 
^ "SQL Server Reporting Services". http://msdn.microsoft.com/en-us/library/ms159106.aspx. Retrieved on 2007-12-03. 
^ MSDN Library: Reporting Services Render Method - See Device Information Settings
^ Image Device Information Settings - SSRS can render BMP, EMF, GIF, JPEG, PNG, and TIFF.
^ "SAn Introduction to SQL Server Notification Services". http://www.codeproject.com/KB/dotnet/sqlns.aspx. Retrieved on 2008-11-14. 
^ "SQL Server Notification Services Removed from SQL Server 2008". http://blog.desktopalert.net/blogs/da_blog/archive/2008/02/16/25.aspx. Retrieved on 2008-09-17. 
^ "Discontinued Functionality in SQL Server 2008 Reporting Services". http://technet.microsoft.com/en-us/library/ms144231.aspx. Retrieved on 2008-09-17. 
^ "Introducing SQL Server Notification Services". http://msdn.microsoft.com/en-us/library/ms166495.aspx. Retrieved on 2007-12-03. 
^ "Integration Services Overview". http://msdn.microsoft.com/en-us/library/ms141263.aspx. Retrieved on 2007-12-03. 
^ "Introduction to Full-Text Search". http://msdn.microsoft.com/en-us/library/ms142545.aspx. Retrieved on 2007-12-03. 
^ "Querying SQL Server using Full-Text Search". http://msdn.microsoft.com/en-us/library/ms142559.aspx. Retrieved on 2007-12-03. 
^ a b "Full-Text Search Architecture". http://msdn.microsoft.com/en-us/library/ms142541.aspx. Retrieved on 2007-12-03. 
^ MSDN: Introducing SQL Server Management Studio
^ SQL Server Management Studio Express
^ MSDN: Using Object Explorer
^ SQL Server 2005 Management Tools
^ "Introducing Business Intelligence Development Studio". http://msdn.microsoft.com/hi-in/library/ms173767.aspx. Retrieved on 2007-12-03. 
^ "Transact-SQL Reference". http://msdn.microsoft.com/en-us/library/ms189826.aspx. Retrieved on 2007-12-03. 
^ "Features of SQL Native Client". http://msdn.microsoft.com/en-us/library/ms131456.aspx. Retrieved on 2007-12-03. 




Lance Delano, Rajesh George et al (2005). Wrox's SQL Server 2005 Express Edition Starter Kit (Programmer to Programmer). Microsoft Press. ISBN 0764589237
Delaney, Kalen, et al (2007). Inside SQL Server 2005: Query Tuning and Optimization. Microsoft Press. ISBN 0735621969.
Ben-Gan, Itzik, et al (2006). Inside Microsoft SQL Server 2005: T-SQL Programming. Microsoft Press. ISBN 0735621977.


SQL Server 2008 is the latest version introduced and it has many new features.Most of the enterprise applications are migrated to SQL Server2008

[edit] See also

SQL Server Data Services


[edit] External links

SQL Server Official Site
Longer version of the history from a dev team member








v • d • e

Database management systems





Database models · Database normalization · Database storage · Distributed DBMS · Referential integrity · Relational algebra · Relational calculus · Relational database · Relational DBMS · Relational model · Object-relational database · Transaction processing





Concepts

Database · ACID · CRUD · Null · Candidate key · Foreign key · Primary key · Superkey · Surrogate key






Objects

Trigger · View · Table · Cursor · Log · Transaction · Index · Stored procedure · Partition






SQL

Select · Insert · Update · Merge · Delete · Join · Union · Create · Drop · Begin work · Commit · Rollback · Truncate · Alter






Components

Concurrency control · Data dictionary · JDBC · ODBC · Query language · Query optimizer · Query plan






Database products: Object-oriented (comparison) · Relational (comparison) · Document-oriented












v • d • e

Microsoft development tools





Development
environments

Visual Studio (Team System · Express) · Visual Studio Tools for Office · Visual Studio Tools for Applications · Expression Web · Expression Blend






Languages and
compilers

Visual Basic (VB.NET) · Visual C++ · Visual C# · Visual J# · Visual FoxPro · IronPython · IronRuby · PowerShell · XAML · F#






Major APIs and
frameworks

Windows API / SDK · .NET Framework · Managed code frameworks (Presentation · Communication · Workflow · CardSpace) · Silverlight · XNA · ASP.NET (ASP.NET AJAX) · LINQ · ADO.NET · DirectX · Robotics Studio






Database tools
and languages





SQL Server


Express · Compact · Management Studio · Business Intelligence Development Studio · MSDE







SQL services


Analysis · Reporting · Integration · Notification







Other


Visual FoxPro · Microsoft Access · Extensible Storage Engine









Source control

Team Foundation Server · Visual SourceSafe






Driver development

Windows Driver Model · Windows Driver Foundation (KMDF · UMDF) · Windows Driver Kit · Windows Logo Kit













v • d • e

Microsoft





Desktop software

Windows (components) · Internet Explorer · Office · Visual Studio · Expression · Dynamics · Money · Encarta · Student · Math · Works · MapPoint · Virtual PC · Forefront · Home · Flight Simulator · Bob






Server software

Windows Server · SQL Server · IIS · PWS · Exchange · BizTalk · Commerce · ISA Server · System Center · Home Server · SharePoint (WSS, MOSS, Search Server)  · OCS · Terminal Services  · Microsoft Host Integration Server






Technologies

Active Directory · DirectX · .NET · Windows Media · PlaysForSure · App-V · Hyper-V  · Silverlight · Windows Mobile · Windows Embedded · Mediaroom · HDi






Web properties

Windows Live · Office Live (Workspace) · SQL Server Data Services · MSNBC · msnbc.com · ninemsn · MSN · Hotmail · Live Messenger · Spaces · Groups · Live ID · Ignition · MSDN · Technet · Channel 9 · CodePlex · HealthVault · Microsoft adCenter · Microsoft Store






Gaming

Microsoft Game Studios · Zone · XNA · Xbox · Xbox 360 · Xbox Live (Arcade · Marketplace · Productions) · Games for Windows (LIVE) · Live Anywhere






Hardware

Surface · Zune (4 / 8 / 16 · 30 · 80 / 120) · MSN TV · Natural Keyboard · Keyboard · Mouse · LifeCam · LifeChat · SideWinder · Ultra-Mobile PC · Fingerprint · Audio System · Cordless Phone · Pocket PC · RoundTable · Response Point







Education and
recognition


MCPs · MSDNAA · MSCA · Microsoft Press · Microsoft MVP · Student Partners · Research · Studies related to Microsoft






Licensing

Client Access License · Shared Source · Licensing Services






Criticism

Windows · Windows Vista · Windows XP · Windows 2000 (section) · Windows Me (section) · Windows 9x (section) · Office (section) · Xbox 360 · Refund






Litigation

Alcatel-Lucent v. Microsoft · European Union Microsoft competition case · United States v. Microsoft · Microsoft vs. Lindows · Apple v. Microsoft · Microsoft vs. MikeRoweSoft






Board of directors

Steve Ballmer · James Cash, Jr. · Dina Dublon · Bill Gates · Raymond Gilmartin · Reed Hastings · David Marquardt · Charles Noski · Helmut Panke · Jon Shirley






Acquisitions

Altamira Software · aQuantive · Blue Ribbon Soundworks · Bungie · Calista Technologies · Colloquis · Connectix · Consumers Software · Danger · Farecast · FASA Interactive · Fast Search & Transfer · Firefly · Forethought · GIANT Company Software · Groove Networks · Hotmail · Jellyfish.com · Korea Telecom · LinkExchange · Lionhead Studios · Massive Incorporated · Onfolio · PlaceWare · Powerset · ProClarity · Rare · ScreenTonic · Teleo · Tellme Networks · Vermeer Technologies · Visio Corporation · VXtreme · WebTV Networks · Winternals · Yupi






Related

Mergers and acquisitions · Owned assets









Retrieved from "http://en.wikipedia.org/wiki/Microsoft_SQL_Server"
Categories: Database management systems | Microsoft server technology | Windows Server System | Microsoft database software | SQLHidden categories: Wikipedia articles needing style editing from March 2009 | All articles needing style editing | Articles lacking page references 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Azərbaycan
Български
Català
Česky
Deutsch
Español
فارسی
Français
한국어
Hrvatski
Bahasa Indonesia
Italiano
עברית
Монгол
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Română
Русский
Svenska
ไทย
Türkçe
Українська
中文









 This page was last modified on 9 April 2009, at 08:13 (UTC).
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
