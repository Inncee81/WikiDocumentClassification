













Tree (data structure) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Tree_(data_structure)";
		var wgTitle = "Tree (data structure)";
		var wgAction = "view";
		var wgArticleId = "30806";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281982720;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Tree (data structure)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





It has been suggested that Leaf_object be merged into this article or section. (Discuss)






A simple unordered tree; in this diagram, the node labeled 7 has two children, labeled 2 and 6, and one parent, labeled 2. The root node, at the top, has no parent.


In computer science, a tree is a widely-used data structure that emulates a hierarchical tree structure with a set of linked nodes. It is an acyclic connected graph where each node has a set of zero or more children nodes, and at most one parent node.




Contents


1 Terminology
2 Tree ordering
3 Tree representations

3.1 Trees as graphs


4 Traversal methods
5 Common operations
6 Common uses
7 See also

7.1 Popular tree data structures

7.1.1 Self balancing binary search trees
7.1.2 Other trees




8 References
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Terminology
A node is a structure which may contain a value, a condition, or represent a separate data structure (which could be a tree of its own). Each node in a tree has zero or more child nodes, which are below it in the tree (by convention, trees grow down, not up as they do in nature). A node that has a child is called the child's parent node (or ancestor node, or superior). A node has at most one parent.
Nodes at the bottommost level of the tree are called leaf nodes. Since they are at the bottommost level, they do not have any children. They are also referred to as terminal nodes.
The height of a node is the length of the longest downward path to a leaf from that node. The height of the root is the height of the tree. The depth of a node is the length of the path to its root (i.e., its root path). This is commonly needed in the manipulation of the various self balancing trees, AVL Trees in particular. Conventionally, the value -1 corresponds to a subtree with no nodes, whereas zero corresponds to a subtree with one node.
The topmost node in a tree is called the root node. Being the topmost node, the root node will not have parents. It is the node at which operations on the tree commonly begin (although some algorithms begin with the leaf nodes and work up ending at the root). All other nodes can be reached from it by following edges or links. (In the formal definition, each such path is also unique). In diagrams, it is typically drawn at the top. In some trees, such as heaps, the root node has special properties. Every node in a tree can be seen as the root node of the subtree rooted at that node.
An internal node or inner node is any node of a tree that has child nodes and is thus not a leaf node.
A subtree is a portion of a tree data structure that can be viewed as a complete tree in itself. Any node in a tree T, together with all the nodes below it, comprise a subtree of T. The subtree corresponding to the root node is the entire tree; the subtree corresponding to any other node is called is a proper subtree (in analogy to the term proper subset).

[edit] Tree ordering
There are two basic types of trees. In a recursive tree or unordered tree, a tree is a tree in a purely structural sense — that is to say, given a node, there is no order for the children of that node. A tree on which an order is imposed — for example, by assigning different natural numbers to each edge leading to a node's children — is called an edge-labeled tree or an ordered tree with data structures built upon them being called ordered tree data structures.
Ordered trees are by far the most common form of tree data structure. Binary trees are one kind of ordered tree because the children are ordered as left child node and right child node.

[edit] Tree representations
There are many different ways to represent trees; common representations represent the nodes as records allocated on the heap (not to be confused with the heap data structure) with pointers to their children, their parents, or both, or as items in an array, with relationships between them determined by their positions in the array (e.g., binary heap).

[edit] Trees as graphs
In graph theory, a tree is a connected acyclic graph. A rooted tree is such a graph with a vertex singled out as the root. In this case, any two vertices connected by an edge inherit a parent-child relationship. An acyclic graph with multiple connected components or a set of rooted trees is sometimes called a forest.

[edit] Traversal methods
Main article: Tree traversal
Stepping through the items of a tree, by means of the connections between parents and children, is called walking the tree, and the action is a walk of the tree. Often, an operation might be performed when a pointer arrives at a particular node. A walk in which each parent node is traversed before its children is called a pre-order walk; a walk in which the children are traversed before their respective parents are traversed is called a post-order walk.

[edit] Common operations

Enumerating all the items
Enumerating a section of a tree
Searching for an item
Adding a new item at a certain position on the tree
Deleting an item
Removing a whole section of a tree (called pruning)
Adding a whole section to a tree (called grafting)
Finding the root for any node


[edit] Common uses

Manipulate hierarchical data
Make information easy to search (see tree traversal)
Manipulate sorted lists of data
As a workflow for compositing digital images for visual effects


[edit] See also

Binary space partitioning
Heap
Tree (graph theory)
Tree (set theory)
Tree structure
Trie
Exponential tree
Hierarchy (mathematics)


[edit] Popular tree data structures

Binary Tree


[edit] Self balancing binary search trees
Self-balancing binary search trees:

AA tree
AVL tree
Red-black tree
Splay tree
Scapegoat tree


[edit] Other trees

B-tree (2-3 tree, B+ tree, B*-tree, UB-tree)
DSW algorithm
Dancing tree
Enfilade
Fusion tree
kd-tree
Octree
Quadtree
R-tree
Radix tree
Segment tree
Skip list
T-tree
T-pyramid
Top Trees
Van Emde Boas tree


[edit] References

Donald Knuth. The Art of Computer Programming: Fundamental Algorithms, Third Edition. Addison-Wesley, 1997. ISBN 0-201-89683-4 . Section 2.3: Trees, pp.308–423.
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7 . Section 10.4: Representing rooted trees, pp.214–217. Chapters 12–14 (Binary Search Trees, Red-Black Trees, Augmenting Data Structures), pp.253–320.


[edit] External links



Wikimedia Commons has media related to: Tree structures 



Description from the Dictionary of Algorithms and Data Structures
STL-like C++ tree class
Description of tree data structures from ideainfo.8m.com
flash actionscript 3 opensource implementation of tree and binary tree — opensource library








v • d • e

Data structures





Arrays

Associative array






Lists

Deque • Linked list • Queue • Stack






Trees

B-tree • Binary search tree • Heap









Retrieved from "http://en.wikipedia.org/wiki/Tree_(data_structure)"
Categories: Trees (structure) | Knowledge representationHidden categories: Articles to be merged since April 2009 | All articles to be merged 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Česky
Dansk
Español
فارسی
Français
Bahasa Indonesia
Italiano
Lietuvių
Македонски
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Српски / Srpski
ไทย
Tiếng Việt
Українська
中文









 This page was last modified on 5 April 2009, at 22:53.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
