













Multi-core - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Multi-core";
		var wgTitle = "Multi-core";
		var wgAction = "view";
		var wgArticleId = "3503207";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281243867;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Multi-core

From Wikipedia, the free encyclopedia

Jump to: navigation, search 





To comply with Wikipedia's guidelines, the introduction of this article may need to be rewritten. Please discuss this issue on the talk page and read the layout guide to make sure the section will be inclusive of all essential details. (October 2008)






Diagram of a generic dual core processor, with CPU-local level 1 caches, and a shared, on-die level 2 cache.






Intel Core 2 Duo E6750 is a dual core processor.






AMD Athlon X2 6400+ is a dual core processor.


A multi-core processor (or chip-level multiprocessor, CMP) combines two or more independent cores (normally a CPU) into a single package composed of a single integrated circuit (IC), called a die, or more dies packaged together. A dual-core processor contains two cores, and a quad-core processor contains four cores. A multi-core microprocessor implements multiprocessing in a single physical package. A processor with all cores on a single die is called a monolithic processor. Cores in a multicore device may share a single coherent cache at the highest on-device cache level (e.g. L2 for the Intel Core 2) or may have separate caches (e.g. current AMD dual-core processors). The processors also share the same interconnect to the rest of the system. Each "core" independently implements optimizations such as superscalar execution, pipelining, and multithreading. A system with n cores is effective when it is presented with n or more threads concurrently. The most commercially significant (or at least the most 'obvious') multi-core processors are those used in personal computers (primarily from Intel and AMD) and game consoles (e.g., the eight-core Cell processor in the PS3 and the three-core Xenon processor in the Xbox 360). In this context, "multi" typically means a relatively small number of cores. However, the technology is widely used in other technology areas, especially those of embedded processors, such as network processors and digital signal processors, and in GPUs.
The amount of performance gained by the use of a multicore processor depends on the problem being solved and the algorithms used, as well as their implementation in software (Amdahl's law). For so-called "embarrassingly parallel" problems, a dual-core processor with two cores at 2GHz may perform very nearly as quickly as a single core of 4GHz.[1] Other problems, though, may not yield so much speedup. This all assumes, however, that the software has been designed to take advantage of available parallelism. If it hasn't, there will not be any speedup at all. However, the processor will multitask better since it can run two programs at once, one on each core.




Contents


1 Terminology
2 Development

2.1 Commercial incentives
2.2 Advantages
2.3 Disadvantages


3 Hardware

3.1 Trends
3.2 Architecture


4 Software impact

4.1 Licensing


5 Embedded applications
6 Commercial examples

6.1 Hardware
6.2 Software


7 Notes
8 See also
9 References
10 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Terminology
There is some discrepancy in the semantics by which the terms multi-core and dual-core are defined. Most commonly they are used to refer to some sort of central processing unit (CPU), but are sometimes also applied to digital signal processors (DSP) and System-on-a-chip (SoC). Additionally, some use these terms to refer only to multi-core microprocessors that are manufactured on the same integrated circuit die. These people generally refer to separate microprocessor dies in the same package by another name, such as multi-chip module. This article uses both the terms "multi-core" and "dual-core" to reference microelectronic CPUs manufactured on the same integrated circuit, unless otherwise noted.
In contrast to multi-core systems, the term multi-CPU refers to multiple physically separate processing units (which often contain special circuitry to facilitate communication between each other).
The terms many-core and massively multi-core are sometimes used to describe multi-core architectures with an especially high number of cores (tens or hundreds).
Some systems use many soft microprocessor cores placed on a single FPGA. Each of "cores" can be considered a "semiconductor intellectual property core" as well as a CPU core.

[edit] Development
While manufacturing technology continues to improve, reducing the size of single gates, physical limits of semiconductor-based microelectronics have become a major design concern. Some effects of these physical limitations can cause significant heat dissipation and data synchronization problems. The demand for more capable microprocessors causes CPU designers to use various methods of increasing performance. Some instruction-level parallelism (ILP) methods like superscalar pipelining are suitable for many applications, but are inefficient for others that tend to contain difficult-to-predict code. Many applications are better suited to thread level parallelism (TLP) methods, and multiple independent CPUs is one common method used to increase a system's overall TLP. A combination of increased available space due to refined manufacturing processes and the demand for increased TLP is the logic behind the creation of multi-core CPUs.

[edit] Commercial incentives
Several business motives drive the development of dual-core architectures. Since symmetric multiprocessing (SMP) designs have long been implemented using discrete CPUs, the issues regarding implementing the architecture and supporting it in software are well known.
Additionally,

Utilizing a proven processing core design without architectural changes reduces design risk significantly.
For general-purpose processors, much of the motivation for multi-core processors comes from greatly diminished gains in processor performance from increasing the operating frequency (frequency scaling). The memory wall and the ILP wall are the culprits in why system performance has not gained as much from continued processor frequency increases as was once seen. The memory wall refers to the increasing gap between processor and memory speeds, which pushes cache sizes larger to mask the latency to memory which helps only to the extent that memory bandwidth is not the bottleneck in performance. The ILP wall refers to increasing difficulty to find enough parallelism in the instructions stream of a single process to keep higher performance processor cores busy. Finally, the often cited, power wall refers to the trend of consuming double the power with each doubling of operating frequency (which is possible to contain to just doubling only if the processor is made smaller). The power wall poses manufacturing, system design and deployment problems that have not been justified in the face of the diminished gains in performance due to the memory wall and ILP wall. Together, these three walls combine to motivate multicore processors.
In order to continue delivering regular performance improvements for general-purpose processors, manufacturers such as Intel and AMD have turned to multi-core designs, sacrificing lower manufacturing costs for higher performance in some applications and systems.
The terminology "dual-core" (and other multiples) lends itself to marketing efforts.

Multi-core architectures are being developed, but so are the alternatives. An especially strong contender for established markets is the further integration of peripheral functions into the chip.

[edit] Advantages
The proximity of multiple CPU cores on the same die allows the cache coherency circuitry to operate at a much higher clock rate than is possible if the signals have to travel off-chip. Combining equivalent CPUs on a single die significantly improves the performance of cache snoop (alternative: Bus snooping) operations. Put simply, this means that signals between different CPUs travel shorter distances, and therefore those signals degrade less. These higher quality signals allow more data to be sent in a given time period since individual signals can be shorter and do not need to be repeated as often.
The largest boost in performance will likely be noticed in improved response time while running CPU-intensive processes, like antivirus scans, ripping/burning media (requiring file conversion), or searching for folders. For example, if the automatic virus scan initiates while a movie is being watched, the application running the movie is far less likely to be starved of processor power, as the antivirus program will be assigned to a different processor core than the one running the movie playback.
Assuming that the die can fit into the package, physically, the multi-core CPU designs require much less Printed Circuit Board (PCB) space than multi-chip SMP designs. Also, a dual-core processor uses slightly less power than two coupled single-core processors, principally because of the decreased power required to drive signals external to the chip. Furthermore, the cores share some circuitry, like the L2 cache and the interface to the front side bus (FSB). In terms of competing technologies for the available silicon die area, multi-core design can make use of proven CPU core library designs and produce a product with lower risk of design error than devising a new wider core design. Also, adding more cache suffers from diminishing returns.[citation needed]

[edit] Disadvantages
In addition to operating system (OS) support, adjustments to existing software are required to maximize utilization of the computing resources provided by multi-core processors. Also, the ability of multi-core processors to increase application performance depends on the use of multiple threads within applications. The situation is improving: for example the American PC game developer Valve Corporation has stated that it will use multi core optimizations for the next version of its Source engine, shipped with Half-Life 2: Episode Two, the next installment of its Half-Life series.[2][3], and Crytek is developing similar technologies for CryEngine 2, which powers their game, Crysis. Emergent Game Technologies' Gamebryo engine includes their Floodgate technology[4] which simplifies multicore development across game platforms. See Dynamic Acceleration Technology for the Santa Rosa platform for an example of a technique to improve single-thread performance on dual-core processors.
Integration of a multi-core chip drives production yields down and they are more difficult to manage thermally than lower-density single-chip designs. Intel has partially countered this first problem by creating its quad-core designs by combining two dual-core on a single die with a unified cache, hence any two working dual-core dies can be used, as opposed to producing four cores on a single die and requiring all four to work to produce a quad-core. From an architectural point of view, ultimately, single CPU designs may make better use of the silicon surface area than multiprocessing cores, so a development commitment to this architecture may carry the risk of obsolescence. Finally, raw processing power is not the only constraint on system performance. Two processing cores sharing the same system bus and memory bandwidth limits the real-world performance advantage. If a single core is close to being memory bandwidth limited, going to dual-core might only give 30% to 70% improvement. If memory bandwidth is not a problem, a 90% improvement can be expected[citation needed]. It would be possible for an application that used two CPUs to end up running faster on one dual-core if communication between the CPUs was the limiting factor, which would count as more than 100% improvement.

[edit] Hardware

[edit] Trends
The general trend in processor development has been from multi-core to many-core: from dual-, tri-, quad-, octo-core chips to ones with tens or even hundreds of cores. In addition, multi-core chips mixed with simultaneous multithreading, memory-on-chip, and special-purpose "heterogeneous" cores promise further performance and efficiency gains, especially in processing multimedia, recognition and networking applications. There is also a trend of improving energy efficiency by focusing on performance-per-watt with advanced fine-grain or ultra fine-grain power management and dynamic voltage and frequency scaling ] (i.e. laptop computers and portable media players).

[edit] Architecture
One of the biggest areas for variety in multi-core architecture is the composition and balance of the cores themselves. Some architectures use one core design which is repeated consistently ("homogenous"), while others use a mixture of different cores, each optimized for a different role ("heterogenous").



As an example of this discussion, the article "CPU designers debate multi-core future" by Rick Merritt, EE Times 2008, includes comments:
"Chuck Moore... suggested computers should be more like cellphones, using a variety of specialty cores to run modular software scheduled by a high-level applications programming interface.
... Atsushi Hasegawa, a senior chief engineer at Renesas, generally agreed. He suggested the cellphone's use of many specialty cores working in concert is a good model for future multi-core designs.
... Anant Agarwal, founder and chief executive of startup Tilera, took the opposing view. He said multi-core chips need to be homogenous collections of general-purpose cores to keep the software model simple. "




[edit] Software impact
Software benefits from multicore architectures where code can be executed in parallel. Under most common operating systems this requires code to execute in separate threads or processes. Each application running on a system runs in its own process so multiple applications will benefit from multicore architectures. Each application may also have multiple threads but, in most cases, it must be specifically written to utilize multiple threads. Operating system software also tends to run many threads as a part of its normal operation. Running virtual machines will benefit from adoption of multiple core architectures since each virtual machine runs independently of others and can be executed in parallel.
Most application software is not written to use multiple concurrent threads intensively because of the challenge of doing so. A frequent pattern in multithreaded application design is where a single thread does the intensive work (a so called "worker thread") while other threads do much less (such as for example updating the GUI to display progress/status information or process control inputs). For example, a virus scan application may create a new thread for the scan process, while the GUI thread waits for commands from the user (e.g. cancel the scan). In such cases, multicore architecture is of little benefit for the application itself due to the single thread doing all heavy lifting and the inability to balance the work evenly across multiple cores. Programming truly multithreaded code often requires complex co-ordination of threads and can easily introduce subtle and difficult-to-find bugs due to the interleaving of processing on data shared between threads (thread-safety). Consequently, such code is much more difficult to debug than single-threaded code when it breaks. There has been a perceived lack of motivation for writing consumer-level threaded applications because of the relative rarity of consumer-level multiprocessor hardware. Although threaded applications incur little additional performance penalty on single-processor machines, the extra overhead of development has been difficult to justify due to the preponderance of single-processor machines.
Given the increasing emphasis on multicore chip design, stemming from the grave thermal and power consumption problems posed by any further significant increase in processor clock speeds, the extent to which software can be multithreaded to take advantage of these new chips is likely to be the single greatest constraint on computer performance in the future. If developers are unable to design software to fully exploit the resources provided by multiple cores, then they will ultimately reach an insurmountable performance ceiling.
The telecommunications market had been one of the first that needed a new design of parallel datapath packet processing because there was a very quick adoption of these multiple core processors for the datapath and the control plane. These MPUs are going to replace the traditional Network Processors that were based on proprietary micro- or pico-code.
Parallel programming techniques can benefit from multiple cores directly. Some existing parallel programming models such as Cilk++, OpenMP and MPI can be used on multi-core platforms. Intel introduced a new abstraction for C++ parallelism called TBB. Other research efforts include the Codeplay Sieve System, Cray's Chapel, Sun's Fortress, and IBM's X10.
Managing concurrency acquires a central role in developing parallel applications. The basic steps in designing parallel applications are:

Partitioning 
The partitioning stage of a design is intended to expose opportunities for parallel execution. Hence, the focus is on defining a large number of small tasks in order to yield what is termed a fine-grained decomposition of a problem.


Communication 
The tasks generated by a partition are intended to execute concurrently but cannot, in general, execute independently. The computation to be performed in one task will typically require data associated with another task. Data must then be transferred between tasks so as to allow computation to proceed. This information flow is specified in the communication phase of a design.


Agglomeration 
In the third stage, we move from the abstract toward the concrete. We revisit decisions made in the partitioning and communication phases with a view to obtaining an algorithm that will execute efficiently on some class of parallel computer. In particular, we consider whether it is useful to combine, or agglomerate, tasks identified by the partitioning phase, so as to provide a smaller number of tasks, each of greater size. We also determine whether it is worthwhile to replicate data and/or computation.


Mapping 
In the fourth and final stage of the parallel algorithm design process, we specify where each task is to execute. This mapping problem does not arise on uniprocessors or on shared-memory computers that provide automatic task scheduling.

On the other hand, on the server side, multicore processors are ideal because they allow many users to connect to a site simultaneously and have independent threads of execution. This allows for Web servers and application servers that have much better throughput.

[edit] Licensing
Typically, proprietary enterprise server software is licensed "per processor". In the past a CPU was a processor and most computers had only one CPU, so there was no ambiguity.
Now there is the possibility of counting cores as processors and charging a customer for multiple licenses for a multi-core CPU. However, the trend seems to be counting dual-core chips as a single processor as Microsoft, Intel, and AMD support this view. Microsoft have said they would treat a socket as a single processor[5].
Oracle counts an AMD X2 or Intel dual-core CPU as a single processor but has other numbers for other types, especially for processors with more than two cores. IBM and HP count a multi-chip module as multiple processors. If multi-chip modules count as one processor, CPU makers have an incentive to make large expensive multi-chip modules so their customers save on software licensing. So it seems that the industry is slowly heading towards counting each die (see Integrated circuit) as a processor, no matter how many cores each die has. Intel has released Paxville which is really a multi-chip module but Intel is calling it a dual-core - because it uses only one socket. It is not clear yet how licensing will work for Paxville. This is an unresolved and thorny issue for software companies and customers of proprietary software.

[edit] Embedded applications
An area of processor technology distinct from "mainstream" PCs is that of embedded computing. The same technological drivers towards multicore apply here too. Indeed, in many cases the application is a "natural" fit for multicore technologies, if the task can easily be partitioned between the different processors.
In addition, embedded software is typically developed for a specific hardware release, making issues of software portability, legacy code or supporting independent developers less critical than is the case for PC or enterprise computing. As a result, it is easier for developers to adopt new technologies and as a result there is a greater variety of multicore processing architectures and suppliers.
In network processing, it is now mainstream for devices to be multi-core, with companies such as Cavium Networks, Wintegra and Broadcom all manufacturing products with eight processors.
In digital signal processing the same trend applies: Texas Instruments has the three-core TMS320C6488, Freescale the four-core MSC8144 (and both have stated they are working on eight-core successors). Newer entries include the Storm-1 family from Stream Processors, Inc with 40 and 80 general purpose ALUs per chip, all programmable in C as a SIMD engine and Picochip with three-hundred processors on a single die, focused on communication applications.

[edit] Commercial examples

[edit] Hardware

Ageia PhysX, a multi-core physics processing unit.
Ambric Am2045, a 336-core Massively Parallel Processor Array (MPPA)
AMD

Athlon 64, Athlon 64 FX and Athlon 64 X2 family, dual-core desktop processors.
Opteron, dual- and quad-core server/workstation processors.
Phenom, triple- and quad-core desktop processors.
Sempron X2, dual-core entry level processors.
Turion 64 X2, dual-core laptop processors.
Radeon and FireStream multi-core GPU/GPGPU (10 cores, 16 5-issue wide superscalar stream processors per core)


Analog Devices Blackfin BF561, a symmetrical dual-core processor.
ARM MPCore is a fully synthesizable multicore container for ARM11 MPCore and ARM Cortex-A9 MPCore processor cores, intended for high-performance embedded and entertainment applications.
Azul Systems Vega 2, a 48-core processor.
Broadcom SiByte SB1250, SB1255 and SB1455.
Cradle Technologies CT3400 and CT3600, both multi-core DSPs.
Cavium Networks Octeon, a 16-core MIPS MPU.
Hewlett-Packard PA-8800 and PA-8900, dual core PA-RISC processors.
IBM

POWER4, the world's first non-embedded dual-core processor, released in 2001.
POWER5, a dual-core processor, released in 2004.
POWER6, a dual-core processor, released in 2007.
PowerPC 970MP, a dual-core processor, used in the Apple Power Mac G5.
Xenon, a triple-core, SMT-capable, PowerPC microprocessor used in the Microsoft Xbox 360 game console.


IBM, Sony, and Toshiba Cell processor, a nine-core processor with one general purpose PowerPC core and eight specialized SPUs (Synergystic Processing Unit) optimized for vector operations used in the Sony PlayStation 3.
Infineon Danube, a dual-core, MIPS-based, home gateway processor.
Intel

Celeron Dual-Core, the first dual-core processor for the budget/entry-level market.
Core Duo, a dual-core processor.
Core 2 Duo, a dual-core processor.
Core 2 Quad, a quad-core processor.
Core i7, a quad-core processor, the successor of the Core 2 Duo and the Core 2 Quad.
Itanium 2, a dual-core processor.
Pentium D, 2 single-core dies packaged in a multi-chip module.
Pentium Dual-Core, a dual-core processor.
Teraflops Research Chip (Polaris), a 3.16 GHz, 80-core processor prototype, which the company says will be released within the next five years[6].
Xeon dual-, quad- and hexa-core processors.


IntellaSys

SEAforth 40C18, a 40-core processor [7]
SEAforth24, a 24-core processor designed by Charles H. Moore


Nvidia

GeForce 9 multi-core GPU (8 cores, 16 scalar stream processors per core)
GeForce 200 multi-core GPU (10 cores, 24 scalar stream processors per core)
Tesla multi-core GPGPU (10 cores, 24 scalar stream processors per core)


Parallax Propeller P8X32, an eight-core microcontroller.
picoChip PC200 series 200-300 cores per device for DSP & wireless
Plurality HAL series tightly coupled 16-256 cores, L1 shared memory, hardware synchronized processor.
Rapport Kilocore KC256, a 257-core microcontroller with a PowerPC core and 256 8-bit "processing elements".
Raza Microelectronics XLR, an eight-core MIPS MPU
SiCortex "SiCortex node" has six MIPS64 cores on a single chip.
Sun Microsystems

MAJC 5200, two-core VLIW processor
UltraSPARC IV and UltraSPARC IV+, dual-core processors.
UltraSPARC T1, an eight-core, 32-thread processor.
UltraSPARC T2, an eight-core, 64-concurrent-thread processor.


Texas Instruments TMS320C80 MVP, a five-core multimedia video processor.
Tilera TILE64, a 64-core processor
University of Maryland XMT, a 64-core prototype by Uzi Vishkin's research team
XMOS Software Defined Silicon quad-core XS1-G4


[edit] Software

Commendo Voyager software service is a multi-core design running on Intel dual-core processors.
Cilk++, a simple set of extensions for C++, coupled with a powerful runtime system, to multicore-enable C++ applications.
Cmpware CMP-DK, an Eclipse-based multicore simulation and software development environment.
QNX, Real Time Operating System (RTOS) for multicore systems.
NI LabVIEW, Graphical programming language for multicore systems.
Threading Building Blocks, a template library of algorithms, memory allocators, containers and other solutions for programming for multi-core processors in C++.
Hoard, Replacement memory allocator for multicore / multiprocessor systems.
[1], Intel's Application Concurrency Audit Tool: CFinder
XMTC, a modest extension of C, coupled with a complete XMT environment
XC, an extension of a subset of C, supporting concurrency with disjointness checks, targetting multi-core platforms.
Wind River provides a multi-core software solution
Erlang A concurrent, functional programming language which transparently distributes work over multiple cores and/or multiple processors.


[edit] Notes

^  Digital signal processors, DSPs, have utilized multi-core architectures for much longer than high-end general purpose processors. A typical example of a DSP-specific implementation would be a combination of a RISC CPU and a DSP MPU. This allows for the design of products that require a general purpose processor for user interfaces and a DSP for real-time data processing; this type of design is common in mobile phones. In other applications, a growing number of companies have developed multi-core DSPs with very large numbers of processors.
^  Two types of operating systems are able to utilize a dual-CPU multiprocessor: partitioned multiprocessing and symmetric multiprocessing (SMP). In a partitioned architecture, each CPU boots into separate segments of physical memory and operate independently; in an SMP OS, processors work in a shared space, executing threads within the OS independently.


[edit] See also

Multicore Association
Multithreading (computer hardware)
Multiprocessing
Hyper-threading
Symmetric multiprocessing (SMP)
Simultaneous multithreading (SMT)
Multitasking
Parallel computing
PureMVC MultiCore - a modular programming framework
XMTC
Parallel Random Access Machine


[edit] References


^ Alienware: Understanding Processor Performance!
^ Multi-core in the Source Engine
^ AMD: dual-core not for gamers... yet
^ Gamebryo's Floodgate page
^ Multicore Processor Licensing
^ 80-core prototype from Intel
^ "40-core processor with Forth-based IDE tools unveiled"



[edit] External links

Portal for Multicore Related News, Research, and Information
Parallel Computing Research wiki: "Chip Multiprocessor Comparison Chart" (Additions welcome)
A Berkeley View on the Parallel Computing Landscape Argues for the desperate need to innovate around "manycore".
BMDFM: Binary Modular Dataflow Machine - Multi-core Runtime Environment (BMDFM)
Intel Tera-scale Computing Research Program
Multicore Programming blog
e-Book on Multicore Programming e-Book outlining multicore programming challenges, and the leading programming approaches to deal with them.
University Of Maryland's prototype PRAM
XMTC: PRAM-like Programming - Software release
Online multicore community
IEEE: Multicore Is Bad News For Supercomputers for some computing tasks, 8 cores aren't (yet) much better than 4
Multicore Community
Muticore short course at MIT








v • d • e

CPU technologies





Architecture

ISA : CISC  · EDGE  · EPIC · MISC  · OISC · RISC · VLIW · ZISC · Harvard architecture · Von Neumann architecture · 8-bit · 32-bit · 64-bit · 128-bit






Parallelism





Pipeline


Instruction pipelining · In-Order & Out-of-Order execution · Register renaming · Speculative execution







Level


Bit · Instruction · Superscalar · Data · Task







Threads


Multithreading · Simultaneous multithreading · Hyperthreading · Superthreading







Flynn's taxonomy


SISD · SIMD · MISD · MIMD









Types

Digital signal processor · Microcontroller · System-on-a-chip · Vector processor






Components

Arithmetic logic unit (ALU) · Barrel shifter · Floating-point unit (FPU) · Backside bus · Multiplexer · Demultiplexer · Registers · Memory management unit (MMU) · Translation lookaside buffer (TLB) · Cache · register file · microcode · control unit · CPU clock






Power management

APM · ACPI (states) · Dynamic frequency scaling · Dynamic voltage scaling · Clock gating









Retrieved from "http://en.wikipedia.org/wiki/Multi-core"
Categories: Computer architecture | Digital signal processing | Microprocessors | Parallel computing | Flynn's TaxonomyHidden categories: Wikipedia introduction cleanup | All pages needing cleanup | All articles with unsourced statements | Articles with unsourced statements since January 2009 | Articles with unsourced statements since December 2007 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


العربية
Català
Deutsch
Español
Français
한국어
Italiano
עברית
Қазақша
Nederlands
日本語
Português
Simple English
ไทย
Tiếng Việt
Türkçe
中文









 This page was last modified on 2 April 2009, at 06:53.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
