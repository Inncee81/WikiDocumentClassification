













Malbolge - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Malbolge";
		var wgTitle = "Malbolge";
		var wgAction = "view";
		var wgArticleId = "237720";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281731636;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Malbolge

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
This article is about the programming language. For the eighth circle of hell, which this language is named after, see Malebolge.
Malbolge is a public domain esoteric programming language invented by Ben Olmstead in 1998, named after the eighth circle of hell in Dante's Inferno, the Malebolge.
The peculiarity of Malbolge is that it was designed to be the most difficult and esoteric programming language. However, several of the tricks used to make understanding it difficult can be simplified away.




Contents


1 Programming in Malbolge
2 "Hello, world" in Malbolge
3 Simplified workings of Malbolge

3.1 Notes
3.2 Registers
3.3 Pointer notation
3.4 Memory
3.5 Instructions
3.6 Crazy operation
3.7 Encryption

3.7.1 Method 1
3.7.2 Method 2
3.7.3 Cycles in the encryption




4 Variants
5 References
6 See also
7 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Programming in Malbolge
Malbolge was so difficult to understand when it arrived that it took two years for the first Malbolge program to appear. The program was not even written by a human being: it was generated by a beam search algorithm designed by Andrew Cooke and implemented in Lisp.
Later, Lou Scheffer posted a cryptanalysis of Malbolge and provided a program to copy its input to its output.[citation needed]
Olmstead believed Malbolge to be a linear bounded automaton. There is a more interesting discussion about whether one can implement sensible loops in Malbolge — it took many years before the first non-terminating one was introduced. A correct 99 Bottles of Beer program, which deals with non-trivial loops and conditions, was not announced for eight years; the first correct one was by Hisashi Iizawa in 2007.

[edit] "Hello, world" in Malbolge
This Malbolge program displays "Hello, world", however without capitalization, as no such version has yet been found.

 (=<`:9876Z4321UT.-Q+*)M'&%$H"!~}|Bzy?=|{z]KwZY44Eq0/{mlk**
 hKs_dG5[m_BA{?-Y;;Vb'rR5431M}/.zHGwEDCAA@98\6543W10/.R,+O< 


[edit] Simplified workings of Malbolge
Malbolge is machine language for a ternary virtual machine, the Malbolge interpreter. To aid in the writing of Malbolge programs that run properly, the way the standard interpreter works will be described below.

[edit] Notes

The standard interpreter and the official specification do not match perfectly.
This is a simplified explanation of the interpreter source code: it obviates useless encryption and subtraction steps and introduces an assembly language.


[edit] Registers
Malbolge has three registers, a, c, and d, which are like variables in other languages. When a program starts, the value of all three registers is zero. c is special: it points to the current instruction.

[edit] Pointer notation
d can hold a memory address; [d] is the value stored at that address. [c] is similar.

[edit] Memory
The virtual machine has 59049 (310) memory locations that can each hold a ten-digit ternary number. Each memory location has an address from 0 to 59048 and can hold a value from 0 to 59048. Incrementing past this limit wraps back to zero.
Before a Malbolge program starts, the first part of memory is filled with the program. All whitespace in the program is ignored and, to make programming more difficult, everything else in the program must start out as one of the instructions below.
The rest of memory is filled by using the crazy operation (see below) on the previous two addresses ([m] = crz [m - 2], [m - 1]). Memory filled this way will repeat every twelve addresses (the individual ternary digits will repeat every three or four addresses, so a group of ternary digits is guaranteed to repeat every twelve).

[edit] Instructions
Malbolge has eight instructions. Malbolge figures out which instruction to execute by taking the value at [c], adding the value of c to it, and taking the remainder when this is divided by 94. The final result tells the interpreter what to do:

Instructions

Value of
([c] + c) % 94
Instruction represented
Explanation


4
jmp [d] + 1
The value at [d], plus one, is where Malbolge will jump to and start executing instructions.


5
out a
Prints the value of a, as an ASCII character, to the screen.


23
in a
Inputs a character, as an ASCII code, into a. Newlines or line feeds are both code 10. An end-of-file condition is code 59048.


39
rotr [d]
mov a, [d]
Rotates the value at [d] by one ternary digit (0002111112 becomes 2000211111). Stores the result both at [d] and in a.


40
mov d, [d]
Copies the value at [d] to d.


62
crz [d], a
mov a, [d]
Does the crazy operation (see below) with the value at [d] and the value of a. Stores the result both at [d] and in a.


68
nop
Does nothing.


81
end
Ends the Malbolge program.


Any other value does the same as 68: nothing. These other values are not allowed in a program while it is being loaded, but are allowed afterwards.


After each instruction is executed, the guilty instruction gets encrypted (see below) so that it won't do the same thing next time, unless a jump just happened. Right after a jump, Malbolge will encrypt the innocent instruction just prior to the one it jumped to instead. Then, the values of both c and d are increased by one and the next instruction is executed.

[edit] Crazy operation
For each ternary digit of both inputs, use the following table to get a ternary digit of the result. For example, crz 0001112220, 0120120120 gives 1001022211.

Crazy operation

crz
Input 2


0
1
2


Input 1
0
1
0
0


1
1
0
2


2
2
2
1



[edit] Encryption
After an instruction is executed, the value at [c] (without anything added to it) will be replaced with itself mod 94. Then, the result is encrypted with one of the following two equivalent methods.

[edit] Method 1
Find the result below. Store the ASCII code of the character below it at [c].

0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123
----------------------------------------------------------------------------------------------
9m<.TVac`uY*MK'X~xDl}REokN:#?G"i@5z]&gqtyfr$(we4{WP)H-Zn,[%\3dL+Q;>U!pJS72FhOA1CB6v^=I_0/8|jsb


[edit] Method 2
Find the result below. Store the encrypted version at [c].

Encryption table

Result
Encrypted
Result
Encrypted
Result
Encrypted
Result
Encrypted
Result
Encrypted


0
57
19
108
38
113
57
91
76
79


1
109
20
125
39
116
58
37
77
65


2
60
21
82
40
121
59
92
78
49


3
46
22
69
41
102
60
51
79
67


4
84
23
111
42
114
61
100
80
66


5
86
24
107
43
36
62
76
81
54


6
97
25
78
44
40
63
43
82
118


7
99
26
58
45
119
64
81
83
94


8
96
27
35
46
101
65
59
84
61


9
117
28
63
47
52
66
62
85
73


10
89
29
71
48
123
67
85
86
95


11
42
30
34
49
87
68
33
87
48


12
77
31
105
50
80
69
112
88
47


13
75
32
64
51
41
70
74
89
56


14
39
33
53
52
72
71
83
90
124


15
88
34
122
53
45
72
55
91
106


16
126
35
93
54
90
73
50
92
115


17
120
36
38
55
110
74
70
93
98


18
68
37
103
56
44
75
104



[edit] Cycles in the encryption
Lou Scheffer's cryptanalysis of Malbolge mentions six different cycles in the encryption. They are listed here:

33 ⇒ 53 ⇒ 45 ⇒ 119 ⇒ 78 ⇒ 49 ⇒ 87 ⇒ 48 ⇒ 123 ⇒ 71 ⇒ 83 ⇒ 94 ⇒ 57 ⇒ 91 ⇒ 106 ⇒ 77 ⇒ 65 ⇒ 59 ⇒ 92 ⇒ 115 ⇒ 82 ⇒ 118 ⇒ 107 ⇒ 75 ⇒ 104 ⇒ 89 ⇒ 56 ⇒ 44 ⇒ 40 ⇒ 121 ⇒ 35 ⇒ 93 ⇒ 98 ⇒ 84 ⇒ 61 ⇒ 100 ⇒ 97 ⇒ 46 ⇒ 101 ⇒ 99 ⇒ 86 ⇒ 95 ⇒ 109 ⇒ 88 ⇒ 47 ⇒ 52 ⇒ 72 ⇒ 55 ⇒ 110 ⇒ 126 ⇒ 64 ⇒ 81 ⇒ 54 ⇒ 90 ⇒ 124 ⇒ 34 ⇒ 122 ⇒ 63 ⇒ 43 ⇒ 36 ⇒ 38 ⇒ 113 ⇒ 108 ⇒ 39 ⇒ 116 ⇒ 69 ⇒ 112 ⇒ 68 ⇒ 33 ...
37 ⇒ 103 ⇒ 117 ⇒ 111 ⇒ 120 ⇒ 58 ⇒ 37 ...
41 ⇒ 102 ⇒ 96 ⇒ 60 ⇒ 51 ⇒ 41 ...
42 ⇒ 114 ⇒ 125 ⇒ 105 ⇒ 42 ...
50 ⇒ 80 ⇒ 66 ⇒ 62 ⇒ 76 ⇒ 79 ⇒ 67 ⇒ 85 ⇒ 73 ⇒ 50 ...
70 ⇒ 74 ⇒ 70 ...

These cycles can be used to create loops that do different things each time and that eventually become repetitive. Lou Scheffer used this idea to create a Malbolge program (included in his cryptanalysis linked below) that repeats anything the user inputs.

[edit] Variants
Malbolge is not Turing Complete, due to its memory limits. Several attempts have been made to create Turing Complete versions of Malbolge.

Malbolge-T is a theoretical version of Malbolge, which resets the input/output stream upon reaching the end, allowing for unbounded programs. Malbolge programs would be valid in Malbolge-T. [1]
Malbolge Unshackled is a Turing Complete variation, allowing for programs of any length. However, due to command variations to allow for values above 257, valid Malbolge programs will not necessarily run correctly in Malbolge Unshackled. [2]


[edit] References

^ "Introduction to Malbolge, Proving formal Turing completeness". http://www.lscheffer.com/malbolge.shtml#Turing. 
^ http://esolangs.org/wiki/Malbolge_Unshackled


[edit] See also




Free software portal




INTERCAL
Obfuscated code


[edit] External links

Malbolge interpreter (C source code)
Description of Andrew Cooke's algorithm for creating the first Malbolge program
Lou Scheffer's cryptanalysis of Malbolge
Treatise on writing Malbolge programs; takes Scheffer's analysis a bit further
"99 bottles" in Malbolge (real loop version)




Retrieved from "http://en.wikipedia.org/wiki/Malbolge"
Categories: Esoteric programming languagesHidden categories: All articles with unsourced statements | Articles with unsourced statements since March 2009 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Deutsch
Eesti
Español
Français
한국어
Italiano
Magyar
日本語
Polski
Português
Русский
Suomi









 This page was last modified on 4 April 2009, at 17:24.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
