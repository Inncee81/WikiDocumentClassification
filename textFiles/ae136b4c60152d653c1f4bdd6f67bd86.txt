













D (programming language) - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "D_(programming_language)";
		var wgTitle = "D (programming language)";
		var wgAction = "view";
		var wgArticleId = "243881";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 281743746;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
/*<![CDATA[*/
.source-d {line-height: normal;}
.source-d li, .source-d pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for d
 * CSS class: source-d, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie (http://qbnz.com/highlighter)
 */
.source-d .de1, .source-d .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;}
.source-d  {}
.source-d .head {}
.source-d .foot {}
.source-d .imp {font-weight: bold; color: red;}
.source-d .ln-xtra {color: #cc0; background-color: #ffc;}
.source-d li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;}
.source-d li.li2 {font-weight: bold;}
.source-d .kw1 {color: #b1b100;}
.source-d .kw2 {color: #000000; font-weight: bold;}
.source-d .kw3 {color: #aaaadd; font-weight: bold;}
.source-d .kw4 {color: #993333;}
.source-d .co1 {color: #808080; font-style: italic;}
.source-d .co2 {color: #a1a100;}
.source-d .coMULTI {color: #808080; font-style: italic;}
.source-d .es0 {color: #000099; font-weight: bold;}
.source-d .br0 {color: #66cc66;}
.source-d .st0 {color: #ff0000;}
.source-d .nu0 {color: #cc66cc;}
.source-d .me1 {color: #006600;}
.source-d .me2 {color: #006600;}

/*]]>*/

/*<![CDATA[*/
@import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
/*]]>*/
 <!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); D (programming language)

From Wikipedia, the free encyclopedia

Jump to: navigation, search 
For other programming languages named D, see D (disambiguation)#Computing.

D programming language

Paradigm
multi-paradigm: object-oriented, imperative, meta


Appeared in
1999 (1999)


Designed by
Walter Bright


Latest release
1.042/ March 31, 2009[1]


Latest unstable release
2.027/ March 31, 2009[2]


Typing discipline
strong, static


Major implementations
DMD (reference implementation), GDC, LDC


Influenced by
C, C++, C#, Java, Eiffel, Python, Ruby


OS
DMD: Macintosh, Linux, Windows


Website
digitalmars.com/d


 D Programming at Wikibooks


The D programming language, also known simply as D, is an object-oriented, imperative, multi-paradigm system programming language by Walter Bright of Digital Mars. It originated as a re-engineering of C++, but even though it is predominantly influenced by that language, it is not a variant of it. D has redesigned some C++ features and has been influenced by concepts used in other programming languages, such as Java, C# and Eiffel. A stable version, 1.0, was released on January 2, 2007.[3] An experimental version, 2.0, was released on June 17, 2007.[2]




Contents


1 Features

1.1 Programming paradigms

1.1.1 Imperative
1.1.2 Object oriented
1.1.3 Metaprogramming


1.2 Memory management
1.3 Interaction with other systems


2 D 2.0
3 Implementation
4 Development tools
5 Problems and controversies

5.1 Division concerning the standard library
5.2 Unfinished support for shared/dynamic libraries
5.3 String handling
5.4 Other


6 Examples

6.1 Example 1
6.2 Example 2


7 See also
8 References
9 External links





//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Features
D is being designed with lessons learned from practical C++ usage rather than from a theoretical perspective. Even though it uses many C/C++ concepts it also discards some, and as such is not strictly backward compatible with C/C++ source code. It adds to the functionality of C++ by also implementing design by contract, unit testing, true modules, garbage collection, first class arrays, associative arrays, dynamic arrays, array slicing, nested functions, inner classes, closures, anonymous functions, compile time function execution, lazy evaluation and has a reengineered template syntax. D retains C++'s ability to do low-level coding, and adds to it with support for an integrated inline assembler. C++ multiple inheritance is replaced by Java style single inheritance with interfaces and mixins. D's declaration, statement and expression syntax closely matches that of C++.
The inline assembler typifies the differences between D and application languages like Java and C#. An inline assembler lets programmers enter machine-specific assembly code within standard D code—a technique often used by system programmers to access the low-level features of the processor needed to run programs that interface directly with the underlying hardware, such as operating systems and device drivers.
D has built-in support for documentation comments, but so far only the compiler supplied by Digital Mars implements a documentation generator.

[edit] Programming paradigms
D supports three main programming paradigms—imperative, object-oriented, and metaprogramming.

[edit] Imperative
Imperative programming in D is almost identical to C. Functions, data, statements, declarations and expressions work just as in C, and the C runtime library can be accessed directly. Some notable differences between D and C in the area of imperative programming include D's foreach loop construct, which allows looping over a collection, and nested functions, which are functions that are declared inside of another and may access the enclosing function's local variables.

[edit] Object oriented
Object oriented programming in D is based on a single inheritance hierarchy, with all classes derived from class Object. D does not support multiple inheritance; instead, it uses Java-style interfaces, which are comparable to C++ pure abstract classes.

[edit] Metaprogramming
Metaprogramming is supported by a combination of templates, compile time function execution, tuples, and string mixins. The following examples demonstrate some of D's compile-time features.
Templates in D can be written in a more function-like style than those in C++. Here the use of static if, D's compile-time conditional construct, is demonstrated to construct a factorial template.


template Factorial(ulong n)
{
    static if(n <= 1)
        const Factorial = 1;
    else
        const Factorial = n * Factorial!(n - 1);
}

This is a regular function that performs the same calculation. The template version's code is similar to that of this function.


ulong factorial(ulong n)
{
    if(n <= 1)
        return 1;
    else
        return n * factorial(n - 1);
}

In the following two examples, the template and function defined above are used to compute factorials. The types of constants need not be specified explicitly as the compiler infers their types from the right-hand sides of assignments.


const fact_7 = Factorial!(7);

This is an example of compile time function execution. Ordinary functions may be used in constant, compile-time expressions provided they meet certain criteria.


const fact_9 = factorial(9);

The std.metastrings.Format template performs printf-like data formatting, and the "msg" pragma displays the result at compile time.


import std.metastrings;
pragma(msg, Format!("7! = %s", fact_7));
pragma(msg, Format!("9! = %s", fact_9));

String mixins, combined with compile-time function execution, allow generating D code using string operations at compile time. This can be used to parse domain-specific languages to D code, which will be compiled as part of the program. Example:


import FooToD; // hypothetical module which contains a function that parses Foo source code and returns equivalent D code
void main()
{
    mixin(fooToD(import("example.foo")));
}


[edit] Memory management
Memory is usually managed with garbage collection, but specific objects can be finalized immediately when they go out of scope. Explicit memory management is possible using the overloaded operators new and delete, and by simply calling C's malloc and free directly. Garbage collection can be controlled: programmers can add and exclude memory ranges from being observed by the collector, can pause and resume the collector and force a generational or a full collection cycle[4]. The manual gives many examples of how to implement different highly optimized memory management schemes for when garbage collection is inadequate in a program.

[edit] Interaction with other systems
C's application binary interface (ABI) is supported as well as all of C's fundamental and derived types, enabling direct access to existing C code and libraries. C's standard library is part of standard D. Unless you use very explicit namespaces it can be somewhat messy to access, as it is spread throughout the D modules that use it -- but the pure D standard library is usually sufficient unless interfacing with C code.
C++'s ABI is not fully supported, although D can access C++ code that is written to the C ABI, and can access C++ COM (Component Object Model) code. The D parser understands an extern (C++) calling convention for linking to C++ objects, but it is only implemented in the currently experimental D 2.0.

[edit] D 2.0



This section requires expansion.


D 2.0, a branch version of D that includes experimental features, was first released on June 17, 2007 and is still under development. Some of these features are:[5]

Support for enforcing const-correctness:

D differentiates between mutable references to immutable data, const references to mutable data, and combinations thereof
const and invariant keywords are transitive.


Limited support for linking with code written in C++.
Iteration with foreach over defined range only.
Support for "real" closures. Previously closures couldn't be safely returned from functions, because stack-allocated variables would become inaccessible.
Support for pure functions which can only access immutable data and call other pure functions. This ensures a pure function has no side effects (the same stack inputs always result in the same outputs and outputs exist only through return values). Together with real closure support this allows Functional Programming in D and also opens theoretical paths for safe automatic threading.
nothrow functions.
"safe" subset (SafeD), which can't directly access memory not belonging to process (only limited set of casts and pointer arithmetic is possible in such code).
Vector operations, i.e. a[] = b[] + c[] (element wide summation of two dynamic/static arrays), or a[] *= 3 (multiply by 3 each element of array).
Changes to standard Phobos library, including metaprogramming and functional programming additions.


[edit] Implementation
Current D implementations compile directly into machine code for efficient execution.
Even though D is still under development, changes to the language are no longer made regularly since version 1.0 of January 2, 2007. The design is currently virtually frozen, and newer releases focus on resolving existing bugs. Version 1.0 is not completely compatible with older versions of the language and compiler. The official compiler by Walter Bright defines the language itself.

DMD
The Digital Mars D compiler is the official D compiler by Walter Bright. The compiler front-end is licensed under both the Artistic License and the GNU GPL; the source code for the front-end is distributed along with the compiler binaries. The compiler back-end source code is available but not under an open source license.
GDC
A front-end for the GCC back-end, built using the open DMD compiler source code. Development snapshots also support D version 2.0.
LDC
A compiler based on the DMD front-end that uses LLVM as its compiler back-end. The first release quality version was published on January 9, 2009.


[edit] Development tools
D is still lacking support in many IDEs, which is a potential stumbling block for some users. Editors used include Entice Designer, emacs, vim, SciTE, Smultron, TextMate, Zeus, and Geany among others. Vim supports both syntax highlighting and code completion (through patched ctags). A bundle is available for TextMate, and the Code::Blocks IDE includes partial support for the language. However, standard IDE features such as code completion or refactoring are not yet available, though they do work partially in Code::Blocks (due to D's similarity to C).
There are at least two actively developed Eclipse plug-ins for D, Descent and Mmrnmhrm.
Additionally, there are open source D IDEs written in the D language itself such as Poseidon, which does feature code completion, syntax highlighting, and integrated debugging.
D applications can be debugged using any C/C++ debugger, like GDB or WinDbg, although support for various fundamental language features is extremely limited. A debugger with explicit support for D is Ddbg for Windows. The commercial ZeroBUGS debugger for Linux has experimental support for the D language. Ddbg can be used with various IDEs or from the command line; ZeroBUGS has its own GUI.

[edit] Problems and controversies

[edit] Division concerning the standard library
The standard library in D is called Phobos. Some members of the D community think Phobos is too simplistic and that it has numerous quirks and other issues, and a replacement of the library called Tango was written.[6] However, in the D 1.0 branch, Tango and Phobos are incompatible due to different runtime libraries (the garbage collector, threading support, etc). The existence of two libraries, both widely in use, has led to significant problems where some packages use Phobos and others use Tango.
This problem is being addressed in the D 2.0 branch by creating a stand-alone runtime called druntime, and porting both Phobos and Tango to druntime. As of October, 2008, Phobos has been ported to druntime in the newest alpha version of the Digital Mars compiler. Tango is in the process of being ported to D 2.0, and is expected to eventually run on top of druntime. For the foreseeable future, D will have two standard libraries, but in the D 2.0 branch, they will be compatible and usable side-by-side in the same codebase.

[edit] Unfinished support for shared/dynamic libraries
Unix's ELF shared libraries are supported to an extent using the GDC compiler. On Windows systems, DLLs are supported and allow D's garbage collector-allocated objects to be safely passed to C functions, since the garbage collector scans the stack for pointers. However, there are still limitations with DLLs in D including the fact that run-time type information of classes defined in the DLL is incompatible with those defined in the executable, and that any object created from within the DLL must be finalized before the DLL is unloaded.[7]

[edit] String handling
D has been frequently criticized for its unconventional Unicode string handling. The language has three distinct character types (char, wchar and dchar) and three string aliases (string, wstring and dstring, which are simply dynamic arrays of the former) which represent UTF-8, UTF-16 and UTF-32 code units and strings respectively. For performance reasons, string slicing and the length property operate on code units rather than characters, which frequently confuses developers.[8] Since UTF-8 and UTF-16 are variable-length character encodings, access by code point index in constant time is not possible without maintaining additional lookup tables. Code that needs fast random access to code points (characters) should convert strings to UTF-32 first, or use lookup tables.

[edit] Other
D has no built-in support for weak references, although there are some libraries that implement them.

[edit] Examples

[edit] Example 1
This example program prints its command line arguments. The main function is the entry point of a D program, and args is an array of strings representing the command line arguments. A string in D is an array of characters, represented by char[] in D 1.0, or invariant(char)[] in D 2.0 alpha. Newer versions of the language define string as an alias for char[] or invariant(char)[], however, an explicit alias definition is necessary for compatibility with older versions.


import std.stdio: writefln;
 
void main(string[] args)
{
    foreach(i, arg; args)
        writefln("args[%d] = '%s'", i, arg);
}

The foreach statement can iterate over any collection, in this case it is producing a sequence of indexes (i) and values (arg) from the array args. The index i and the value arg have their types inferred from the type of the array args.

[edit] Example 2
The following shows several capabilities of D in a very short program. It iterates the lines of a text file named words.txt that contains a different word on each line, and prints all the words that are anagrams of other words.


import std.stdio: writefln;
import std.stream: BufferedFile;
import std.string: tolower, join;
 
void main()
{
    string[][string] signature2words;
 
    foreach (string line; new BufferedFile("words.txt"))
        signature2words[line.tolower().sort] ~= line.dup; // the .dup property of arrays returns a duplicate of the array
 
    foreach (words; signature2words)
        if (words.length > 1)
            writefln(words.join(" "));
}


The type of signature2words is a built-in associative array that maps string keys to arrays of strings. It is similar to defaultdict(list) in Python.
BufferedFile yields lines lazily, without their newline, for performance the line it yields is just a view on a string, so it has to be copied with dup to have an actual string copy that can be used later.
The ~= operator appends a new string to the values of the associate array.
tolower and join are string functions that D allows to use with a method syntax, their names are often similar to Python string methods. The tolower converts an ASCII string to lower case and join(" ") joins an array of strings into a single string using a single space as separator.
The sort sorts the array in place, creating a unique signature for words that are anagrams of each other.
The second foreach iterates on the values of the associative array, it's able to infer the type of words.


[edit] See also

Ddoc


[edit] References

^ "D 1.0 changelog". http://www.digitalmars.com/d/1.0/changelog.html. Retrieved on April 1, 2009. 
^ a b "D 2.0 changelog". http://www.digitalmars.com/d/2.0/changelog.html. Retrieved on April 1, 2009. 
^ "D 1.0 changelog, older versions". http://www.digitalmars.com/d/1.0/changelog2.html. Retrieved on 11 January 2009. 
^ http://www.digitalmars.com/d/2.0/phobos/std_gc.html
^ "D 2.0 Enhancements from D 1.0". http://www.digitalmars.com/d/2.0/features2.html. Retrieved on 11 January 2009. 
^ Wiki4D: Standard Lib
^ http://www.prowiki.org/wiki4d/wiki.cgi?BestPractices/DLL
^ Keep, Daniel. "Text in D". http://www.prowiki.org/wiki4d/wiki.cgi?DanielKeep/TextInD. Retrieved on 2009-03-22. 


[edit] External links



Wikibooks has a book on the topic of
A Beginner's Guide to D






Wikibooks has a book on the topic of
D Programming




D at the Open Directory Project
Digital Mars: D programming language
D Documentation Wiki








v • d • e

C programming language





Libraries

C standard library · glibc · Dietlibc · uClibc · Newlib · more






Features

String · Syntax · Preprocessor · Variable types and declarations · Functions






Descendants

C++ · Objective-C · D · C#






C and Other Languages

C and C++ (Compatibility · Operators) · Comparison of Pascal and C · C to Java byte-code compiler






Category








Retrieved from "http://en.wikipedia.org/wiki/D_(programming_language)"
Categories: C programming language family | Class-based programming languages | Curly bracket programming languages | Multi-paradigm programming languages | Systems programming languagesHidden categories: Articles to be expanded since June 2008 | All articles to be expanded 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Български
Català
Česky
Deutsch
Español
Esperanto
Français
Galego
한국어
Bahasa Indonesia
Italiano
Magyar
Bahasa Melayu
Nederlands
日本語
Polski
Português
Русский
Slovenčina
Suomi
Svenska
Türkçe
中文









 This page was last modified on 4 April 2009, at 18:37.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
