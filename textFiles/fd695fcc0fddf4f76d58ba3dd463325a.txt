













Folding@home - Wikipedia, the free encyclopedia














/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Folding@home";
		var wgTitle = "Folding@home";
		var wgAction = "view";
		var wgArticleId = "413102";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 277284199;
		var wgVersion = "1.15alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}\x26suggest";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/
<!-- wikibits js -->



/*<![CDATA[*/
var wgNotice='';var wgNoticeLocal='';
/*]]>*/ 
<!-- site js -->






if (wgNotice != '') document.writeln(wgNotice); Folding@home

From Wikipedia, the free encyclopedia

Jump to: navigation, search 

Folding@home


The PlayStation 3 Folding@home client displays a 3D model of the protein being simulated


Design by
Vijay Pande


Developed by
Stanford University / Pande Group


Initial release
2000-10-01


Latest release
Windows:
6.23 (Uniprocessor)
6.23 (GPU)
Mac OS X:
6.20 (PPC-Uniprocessor)
6.20 (x86-SMP)
Linux:
6.02 (Uniprocessor)
6.02 (x64-SMP)
PlayStation 3: 1.4 [1]
/ 2008-11-26 (Windows 6.23)


Preview release
6.23beta (Windows SMP)
6.24beta (Linux x64-SMP)
6.24beta (Mac OS X x86-SMP)
/ 2009-01-20 (6.24betas)


Platform
Cross-platform


Available in
English


Type
Distributed computing


License
Proprietary [2]


Website
folding.stanford.edu


Folding@home (sometimes abbreviated as FAH or F@h) is a distributed computing (DC) project designed to perform computationally intensive simulations of protein folding and other molecular dynamics (MD). It was launched on October 1, 2000, and is currently managed by the Pande Group, within Stanford University's chemistry department, under the supervision of Professor Vijay Pande. Folding@home is the most powerful distributed computing cluster in the world, according to Guinness,[1] and one of the world's largest distributed computing projects.[2] The goal of the project is "to understand protein folding, misfolding, and related diseases."[3]




Contents


1 Purpose
2 Function
3 Analysis Software

3.1 Active Cores
3.2 Inactive Cores
3.3 Possible future additions


4 Participation

4.1 Google & Folding@home
4.2 Genome@home
4.3 PetaFLOPS Milestones


5 Results

5.1 2000–2001
5.2 2002
5.3 2003
5.4 2004
5.5 2005
5.6 2006
5.7 2007
5.8 2008
5.9 2009


6 High performance platforms

6.1 Graphical processing units
6.2 PlayStation 3
6.3 Multi-core processing client


7 Folding@home teams
8 Development
9 Estimated energy consumption
10 See also
11 References
12 External links

12.1 Multi-media links







//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>


[edit] Purpose
Accurate simulations of protein folding and misfolding enable the scientific community to better understand the development of many diseases, including sickle-cell disease (drepanocytosis), Alzheimer's disease, Parkinson's disease, mad cow disease, cancer, Huntington's disease, cystic fibrosis, osteogenesis imperfecta, alpha 1-antitrypsin deficiency, and other aggregation-related diseases.[4] More fundamentally, understanding the process of protein folding — how biological molecules assemble themselves into a functional state — is one of the outstanding problems of molecular biology. So far, the Folding@home project has successfully simulated folding in the 5-10 microsecond range — a time scale thousands of times longer than it was previously thought possible to model. The Pande Group goal is to refine and improve the MD and Folding@home DC methods to the level where it will become an essential tool for the MD research.[5] For that goal they collaborate with various scientific institutions.[6] As of February 19, 2009, sixty-three scientific research papers have been published using the project's work.[7] A University of Illinois at Urbana-Champaign report dated October 22, 2002 states that Folding@home distributed simulations of protein folding are demonstrably accurate.[8]

[edit] Function




Folding@home when running takes advantage of unused CPU cycles on a computer system as shown by this computer's 99% CPU usage.


Folding@home does not rely on powerful supercomputers for its data processing; instead, the primary contributors to the Folding@home project are many hundreds of thousands of personal computer users who have installed a small client program. The client will, at the user's choice, run in the background, utilizing otherwise unused CPU power, or run as a screensaver only while the user is away. In most modern personal computers, the CPU is rarely used to its full capacity at all times; the Folding@home client takes advantage of this unused processing power.
The Folding@home client periodically connects to a server to retrieve "work units", which are packets of data upon which to perform calculations. Each completed work unit is then sent back to the server. As data integrity is a major concern for all distributed computing projects, all work units are validated through the use of a 2048 bit digital signature.
Contributors to Folding@home may have user names used to keep track of their contributions. Each user may be running the client on one or more CPUs; for example, a user with two computers could run the client on both of them. Users may also contribute under one or more team names; many different users may join together to form a team. Contributors are assigned a score indicating the number and difficulty of completed work units. Rankings and other statistics are posted to the Folding@home website.

[edit] Analysis Software
The Folding@home client utilizes modified versions of five molecular simulation programs for calculation: TINKER, GROMACS, AMBER, CPMD, and SHARPEN.[9] Where possible, optimizations are used to speed the process of calculation. There are many variations on these base simulation programs, each of which is given an arbitrary identifier (Core xx):[10]

[edit] Active Cores

GROMACS (all variants of this core use SIMD optimizations including SSE, 3DNow+ or AltiVec, where available, unless otherwise specified)

Gromacs (Core 78)

Available for all Uniprocessor clients only.


DGromacs (Core 79)

Double precision Gromacs, uses SSE2 only.
Available for all Uniprocessor clients only.


DGromacsB (Core 7b)

Nominally an update of DGromacs, but is actually based on the SMP/GPU codebases (and is therefore a completely new core). As a result, both are still in use.
Double precision Gromacs, uses SSE2 only.
Available for all Uniprocessor clients only.


DGromacsC (Core 7c)

Double precision Gromacs, uses SSE2 only.
Available on Windows and Linux Uniprocessor clients only.


GBGromacs (Core 7a)

Gromacs with the Generalized Born implicit solvent model.
Available for all Uniprocessor clients only.


Gromacs SREM (Core 80)

Gromacs Serial Replica Exchange Method.
The Gromacs Serial Replica Exchange Method core, also known as GroST (Gromacs Serial replica exchange with Temperatures), uses the Replica Exchange method (also known as REMD or Replica Exchange Molecular Dynamics) in its simulations.
Available for Windows and Linux Uniprocessor clients only.


GroSimT (Core 81)

Gromacs with Simulated Tempering.
Available for Windows and Linux Uniprocessor clients only.


Gromacs 33 (Core a0)

Uses the Gromacs 3.3 codebase.
Available for all Uniprocessor clients only.


Gro-SMP (Core a1)

Symmetric MultiProcessing variant, locked to four threads (but can be run on dual core processors).
Runs only on multi-core x86 or x64 hardware, uses SSE only.
Available for all SMP clients only.


GroCVS (Core a2)

Symmetric MultiProcessing variant with scalable numbers of threads.
Runs only on multi-core x86 or x64 hardware, with four or more cores, uses SSE only.
Uses the Gromacs 4.0 codebase.
Available for Linux and Mac OS X SMP clients only.




NVIDIA GPU v2.0 r1 client for Windows..





GroGPU2 (Core 11)

Graphics Processing Unit variant for ATI CAL-enabled and nVidia CUDA-enabled GPUs.
Comes in two separate versions, one each for ATI and nVidia, but both have the same Core ID.
GPUs do not support SIMD optimizations by design, so none are used in this core.
Available for GPU2 client only.


NVIDIA-DEV (Core 13)

Graphics Processing Unit developmental core for nVidia CUDA-enabled GPUs.
Does not support SIMD optimizations.
Available for GPU2 client only.


GroGPU2-MT (Core 14)[11]

Graphics Processing Unit variant for nVidia CUDA-enabled GPUs.
Contains additional debugging code compared to the standard Core 11.
Does not support SIMD optimizations.
Released March 2, 2009.
Available for GPU2 client only.


Gro-PS3 (Does not have a known ID number, but also called SCEARD core)

PlayStation 3 variant.
No SIMD optimizations, uses SPE cores for optimization.
Available for PS3 client only.




AMBER

PMD (Core 82)[10]

No optimizations.
Available for Windows and Linux Uniprocessor clients only.






[edit] Inactive Cores

TINKER

Tinker core (Core 65)

Currently inactive, as the GBGromacs core (Core 7a) performs the same tasks much faster.
No optimizations.
Available for all Uniprocessor clients only.




GROMACS

GroGPU (Core 10)

Graphics Processing Unit variant for ATI series 1xxx GPUs.
GPUs do not have optimizations; no SIMD optimizations needed since GPU cores are explicitly designed for SIMD.
Inactive as of June 6, 2008 due to end of distribution of GPU1 client units.
Available for GPU1 client only.




CPMD

QMD (Core 96)

Currently inactive, due to QMD developer graduating from Stanford University and due to current research shifting away from Quantum MD.
Caused controversy due to SSE2 issues involving Intel libraries and AMD processors.[12]
Uses SSE2 (currently only on Intel CPUs, see above).
Available for Windows and Linux Uniprocessor clients only.




SHARPEN [13]

SHARPEN Core [14]

Currently inactive, in closed beta testing before general release.
Uses different format to standard F@H cores, as there is more than one "Work Unit" (using the normal definition) in each work packet sent to clients.






[edit] Possible future additions

ProtoMol [6]


[edit] Participation




Folding@home computing power shown - by device type - in TeraFLOPS as recorded semi-daily from November 2006 until September 2007. Note the large spike in total compute power after March 22, when the PlayStation 3 client was released.


Shortly after breaking the 200,000 active CPU count on September 20, 2005, the Folding@home project celebrated its fifth anniversary on October 1, 2005.
Interest and participation in the project has grown steadily since its launch. The number of active devices participating in the project increased substantially after receiving much publicity during the launch of their high performance clients for both ATi graphics cards and the PlayStation 3, and again following the launch of the high performance client for nVidia graphics cards.
As of February 18, 2009 the peak speed of the project overall has reached over 5.0 PFLOPS from around 400,000 active machines, and the project has received computational results from over 3.75 million devices since it first started.[2]

[edit] Google & Folding@home
There used to be cooperation between Folding@home and Google Labs in the form of Google Toolbar. Google Compute supported Folding@home during its early stage — when Folding@home had ~10,000 active CPUs. At that time, a boost of 20,000 machines was very significant. Today the project has a large number of active CPUs and the number of new clients joining Google Compute was very low (most people opted for the Folding@home client instead), so it was discontinued. The Google Compute clients also had certain limits: they could only run the TINKER core and had limited naming and team options. Folding@home is no longer supported on Google Toolbar, and even the old Google Toolbar client will not work.[15]

[edit] Genome@home
Folding@home absorbed the Genome@home project on March 8, 2004. The work which was started by the Genome@home project has since been completed using the Folding@home network (the work units without deadlines), and no new work is being distributed by this project. All donators were encouraged to download the Folding@home client (the F@h 4.xx client had a Genome@home option), and once the Genome@home work was complete these clients were asked to donate their processing power to the Folding@home project instead.

[edit] PetaFLOPS Milestones


petaFLOPS Barrier
Date Crossed


1.0
September 16, 2007


2.0
early May 2008


3.0
August 20, 2008


4.0
September 28, 2008


5.0
February 18, 2009


On September 16, 2007, the Folding@home project officially attained a sustained performance level higher than one petaFLOPS, becoming the first computing system of any kind in the world to ever do so, although it had briefly peaked above one petaFLOPS in March 2007, receiving a large amount of main stream media coverage for doing so.[16][17] In early May 2008 the project attained a sustained performance level higher than two petaFLOPS, followed by the three and four petaFLOPS milestones on August 20 and September 28, 2008 respectively. On February 18, 2009, Folding@home achieved a performance level of 5033TFLOPS, thereby becoming the first computing system of any kind to surpass 5 PFLOPS[18], just as it was for the other four milestones.
The Folding@home computing cluster currently operates at above 5 petaFLOPS at all times, with a large majority of the performance coming from GPU and PlayStation 3 clients.[2] In comparison to this, the fastest standalone supercomputer (non-distributive computing) in the world (as of November 2008, U.S. DOE's Roadrunner) peaks at approximately 1.46 petaFLOPS.[19]

[edit] Results
These peer-reviewed papers (in chronological order) all use research from the Folding@home project.[7]

[edit] 2000–2001

M. R. Shirts and V. S. Pande. (2000). "Screen Savers of the World, Unite!". Science 290: 1903–1904. doi:10.1126/science.290.5498.1903. PMID 17742054. 
Michael R. Shirts and Vijay S. Pande (2001). "Mathematical Analysis of Coupled Parallel Simulations". Physical Review Letters 86 (22): 4983-4987. doi:10.1103/PhysRevLett.86.4983. 
Bojan Zagrovic, Eric J. Sorin and Vijay Pande (2001). "b-Hairpin Folding Simulations in Atomistic Detail Using an Implicit Solvent Model". Journal of Molecular Biology 313: 151-169. doi:10.1006/jmbi.2001.5033. 


[edit] 2002

Stefan M. Larson, Christopher D. Snow, Michael R. Shirts, and Vijay S. Pande (2002) "Folding@home and Genome@home: Using distributed computing to tackle previously intractable problems in computational biology", Stefan M. Larson, Christopher D. Snow, Michael R. Shirts, and Vijay S. Pande. To appear in Computational Genomics, Richard Grant, editor, Horizon Press
Bojan Zagrovic, Christopher D. Snow, Michael R. Shirts, and Vijay S. Pande. (2002). "Simulation of Folding of a Small Alpha-helical Protein in Atomistic Detail using Worldwide distributed Computing". Journal of Molecular Biology 323: 927-937. doi:10.1016/S0022-2836(02)00997-X. 
Bojan Zagrovic, Christopher D. Snow, Siraj Khaliq, Michael R. Shirts, and Vijay S. Pande (2002). "Native-like Mean Structure in the Unfolded Ensemble of Small Proteins". Journal of Molecular Biology 323: 153-164. doi:10.1016/S0022-2836(02)00888-4. 
Christopher D. Snow, Bojan Zagrovic, and Vijay S. Pande (2002). "The Trp Cage: Folding Kinetics and Unfolded State Topology via Molecular Dynamics Simulations". Journal of the American Chemical Society 124: 14548-14549. doi:10.1021/ja028604l. 


[edit] 2003

Vijay S. Pande, Ian Baker, Jarrod Chapman, Sidney P. Elmer, Siraj Khaliq, Stefan M. Larson, Young Min Rhee, Michael R. Shirts, Christopher D. Snow, Eric J. Sorin, Bojan Zagrovic (2003). "Atomistic protein folding simulations on the submillisecond timescale using worldwide distributed computing". Biopolymers 68: 91-109. doi:10.1002/bip.10219. 
Young Min Rhee & Vijay S. Pande (2003). "Multiplexed-Replica Exchange Molecular Dynamics Method for Protein Folding Simulation". Biophysical Journal 84 (2): 775-786. 
Eric J. Sorin, Young Min Rhee, Bradley J. Nakatani & Vijay S. Pande (2003). "Insights Into Nucleic Acid Conformational Dynamics from Massively Parallel Stochastic Simulations". Biophysical Journal 85: 790-803. 
Bojan Zagrovic and Vijay S. Pande (2003). "Solvent Viscosity Dependence of the Folding Rate of a Small Protein: Distributed Computing Study". Journal of Computational Chemistry 24 (12): 1432-1436. doi:10.1002/jcc.10297. 
Michael R. Shirts, Jed W. Pitera, William C. Swope, and Vijay S. Pande (2003). "Extremely precise free energy calculations of amino acid side chain analogs: Comparison of common molecular mechanics force fields for proteins". Journal of Chemical Physics 119 (11): 5740-5761. doi:10.1063/1.1587119. 
Michael R. Shirts, Eric Bair, Giles Hooker, and Vijay S Pande (2003). "Equilibrium Free Energies from Nonequilibrium Measurements Using Maximum-Likelihood Methods". Physical Review Letters 91 (14). doi:10.1103/PhysRevLett.91.140601. 
Bojan Zagrovic & Vijay S Pande (2003). "Structural correspondence between the alpha-helix and the random-flight chain resolves how unfolded proteins can have native-like properties". Nature Structural Biology 10 (11): 955-961. doi:10.1038/nsb995. 


[edit] 2004

Eric J. Sorin, Bradley J. Nakatani, Young Min Rhee, Guha Jayachandran, V Vishal, & Vijay S Pande (2004). "Does Native State Topology Determine the RNA Folding Mechanism?". Journal of Molecular Biology 337: 789-757. doi:10.1016/j.jmb.2004.02.024. 
Christopher D. Snow, Linlin Qiu, Deguo Du, Feng Gai, Stephen J. Hagen, & Vijay S Pande (2004). "Trp zipper folding kinetics by molecular dynamics and temperature-jump spectroscopy". Proceedings of the National Academy of Sciences, USA 101 (12): 4077-4082. doi:10.1073/pnas.0305260101. 
Young Min Rhee, Eric J. Sorin, Guha Jayachandran, Erik Lindahl, & Vijay S Pande (2004). "Simulations of the role of water in the protein-folding mechanism". Proceedings of the National Academy of Sciences, USA 101 (17): 6456-6461. doi:10.1073/pnas.0307898101. 
Nina Singhal, Christopher D. Snow, and Vijay S. Pande (2004). "Using path sampling to build better Markovian state models: Predicting the folding rate and mechanism of a tryptophan zipper beta hairpin". Journal of Chemical Physics 121: 415-425. doi:10.1063/1.1738647. 
L. T. Chong, C. D. Snow, Y. M. Rhee, and V. S. Pande. (2004). "Dimerization of the p53 Oligomerization Domain: Identification of a Folding Nucleus by Molecular Dynamics Simulations". Journal of Molecular Biology 345: 869-878. doi:10.1016/j.jmb.2004.10.083. 


[edit] 2005

Eric J. Sorin, Young Min Rhee, and Vijay S. Pande (2005). "Does Water Play a Structural Role in the Folding of Small Nucleic Acids?". Biophysical Journal 88: 2516-2524. doi:10.1529/biophysj.104.055087. 
Eric J. Sorin and Vijay S. Pande (2005). "Exploring the Helix-Coil Transition via All-atom Equilibrium Ensemble Simulations". Biophysical Journal 88: 2472-2493. doi:10.1529/biophysj.104.051938. 
Eric J. Sorin and Vijay S. Pande (2005). "Empirical Force-Field Assessment: The Interplay Between Backbone Torsions and Noncovalent Term Scaling". Journal of Computational Chemistry 26: 682-690. doi:10.1002/jcc.20208. 
C. D. Snow, E. J. Sorin, Y. M. Rhee, and V. S. Pande. (2005). "How well can simulation predict protein folding kinetics and thermodynamics?". Annual Reviews of Biophysics 34: 43-69. doi:10.1146/annurev.biophys.34.040204.144447. 
Bojan Zagrovic, Jan Lipfert, Eric J. Sorin, Ian S. Millett, Wilfred F. van Gunsteren, Sebastian Doniach & Vijay S. Pande (2005). "Unusual compactness of a polyproline type II structure". Proceedings of the National Academy of Sciences, USA 102 (33): 11698-11703. doi:10.1073/pnas.0409693102. 
Michael R. Shirts & Vijay S. Pande (2005). "Comparison of efficiency and bias of free energies computed by exponential averaging, the Bennett acceptance ratio, and thermodynamic integration". Journal of Chemical Physics 122. doi:10.1063/1.1873592. 
Michael R. Shirts & Vijay S. Pande (2005). "Solvation free energies of amino acid side chain analogs for common molecular mechanics water models". Journal of Chemical Physics 122. doi:10.1063/1.1877132. 
Sidney Elmer, Sanghyun Park, & Vijay S. Pande (2005). "Foldamer dynamics expressed via Markov state models. I. Explicit solvent molecular-dynamics simulations in acetonitrile, chloroform, methanol, and water". Journal of Chemical Physics 123. doi:10.1063/1.2001648. 
Sidney Elmer, Sanghyun Park, & Vijay S. Pande (2005). "Foldamer dynamics expressed via Markov state models. II. State space decomposition". Journal of Chemical Physics 123. doi:10.1063/1.2008230. 
Sanghyun Park, Randall J. Radmer, Teri E. Klein, and Vijay S. Pande (2005). "A New Set of Molecular Mechanics Parameters for Hydroxyproline and Its Use in Molecular Dynamics Simulations of Collagen-Like Peptides". Journal of Computational Chemistry 26: 1612-1616. doi:10.1002/jcc.20301. 
Hideaki Fujutani, Yoshiaki Tanida, Masakatsu Ito, Guha Jayachandran, Christopher D. Snow, Michael R. Shirts, Eric J. Sorin, and Vijay S. Pande (2005). "Direct calculation of the binding free energies of FKBP ligands using the Fujitsu BioServer massively parallel computer". Journal of Chemical Physics 123. doi:10.1063/1.1999637. 
Nina Singhal and Vijay S. Pande (2005). "Error Analysis and efficient sampling in Markovian State Models for protein folding". Journal of Chemical Physics 123. doi:10.1063/1.2116947. 
Bojan Zagrovic, Guha Jayachandran, Ian S. Millett, Sebastian Doniach and Vijay S. Pande (2005). "How large is alpha-helix in solution? Studies of the radii of gyration of helical peptides by SAXS and MD". Journal of Chemical Physics 353: 232-241. doi:10.1016/j.jmb.2005.08.053. 


[edit] 2006

Paula Petrone and Vijay S. Pande (2006). "Can conformational change be described by only a few normal modes?". Biophysical Journal 90: 1583-1593. doi:10.1529/biophysj.105.070045. 
Eric J. Sorin, Young Min Rhee, Michael R. Shirts, and Vijay S. Pande (2006). "The solvation interface is a determining factor in peptide conformational preferences". Journal of Molecular Biology 356: 248-256. doi:10.1016/j.jmb.2005.11.058. 
Eric J. Sorin and Vijay S. Pande (2006). "Nanotube confinement denatures protein helices". Journal of the American Chemical Society 128: 6316-6317. doi:10.1021/ja060917j. 
Young Min Rhee and Vijay S. Pande (2006). "On the role of chemical detail in simulating protein folding kinetics". Chemical Physics 323: 66-77. doi:10.1016/j.chemphys.2005.08.060. 
L.T. Chong, W. C. Swope, J. W. Pitera, and V. S. Pande (2006). "A novel approach for computational alanine scanning: application to the p53 oligomerization domain". Journal of Molecular Biology 357 (3): 1039-1049. doi:10.1016/j.jmb.2005.12.083. 
I. Suydam, C. D. Snow, V. S. Pande and S. G. Boxer. (2006). "Electric Fields at the Active Site of an Enzyme: Direct Comparison of Experiment with Theory". Science 313 (5784): 200-204. doi:10.1126/science.1127159. 
P. Kasson, N. Kelley, N. Singhal, M. Vrjlic, A. Brunger, and V. S. Pande (2006). "Ensemble molecular dynamics yields submillisecond kinetics and intermediates of membrane fusion". Proceedings of the National Academy of Sciences, USA 103 (32): 11916-11921. doi:10.1073/pnas.0601597103. 
Guha Jayachandran, V. Vishal, and V. S. Pande (2006). "Folding Simulations of the Villin Headpiece in All-Atom Detail". Journal of Chemical Physics 124. doi:10.1063/1.2186317. 
Guha Jayachandran, M. R. Shirts, S. Park, and V. S. Pande (2006). "Parallelized Over Parts Computation of Absolute Binding Free Energy with Docking and Molecular Dynamics". Journal of Chemical Physics 125. doi:10.1063/1.2221680. 
C. Snow and V. S. Pande (2006). "Kinetic Definition of Protein Folding Transition State Ensembles and Reaction Coordinates". Biophysical Journal 91: 14-24. doi:10.1529/biophysj.105.075689. 
S. Park and V. S. Pande (2006). "A Bayesian Update Method for Adaptive Weighted Sampling". Physical Review 74 (6). doi:10.1103/PhysRevE.74.066703. 
P. Kasson and V. S. Pande (2006). "Predicting structure and dynamics of loosely-ordered protein complexes: influenza hemagglutinin fusion peptide". PSB. doi:10.1142/9789812772435_0005. PMID 17992744. 
Erich Elsen, Mike Houston, V. Vishal, Eric Darve, Pat Hanrahan, and Vijay Pande (2006). "N-Body simulation on GPUs". Proceedings of the 2006 ACM/IEEE conference on Supercomputing. doi:10.1145/1188455.1188649. 


[edit] 2007

Guha Jayachandran, V. Vishal, Angel E. Garcıa and V. S. Pande (2007). "Local structure formation in simulations of two small proteins". Journal of Structural Biology 157 (3): 491-499. doi:10.1016/j.jsb.2006.10.001. 
Adam L Beberg and Vijay S. Pande (2007). "Storage@home: Petascale Distributed Storage". IPDPS. doi:10.1109/IPDPS.2007.370672. 
J. Chodera, N. Singhal, V. S. Pande, K. Dill, and W. Swope (2007). "Automatic discovery of metastable states for the construction of Markov models of macromolecular conformational dynamics". Journal of Chemical Physics 126 (15). PMID 17461665. 
D. Lucent, V. Vishal, V. S. Pande (2007). "Protein folding under confinement: a role for solvent". Proceedings of the National Academy of Sciences, USA 104 (25): 10430-10434. doi:10.1073/pnas.0608256104. 
P. M. Kasson, A. Zomorodian, S. Park, N. Singhal, L. J. Guibas, and V. S. Pande (2007). "Persistent voids: a new structural metric for membrane fusion". Bioinformatics. doi:10.1093/bioinformatics/btm250. 
P. M. Kasson and V. S. Pande (2007). "Control of Membrane Fusion Mechanism by Lipid Composition: Predictions from Ensemble Molecular Dynamics". PLoS Computational Biology 3 (11). doi:10.1371/journal.pcbi.0030220. 
D. Ensign, P. M. Kasson, and V. S. Pande (2007). "Heterogeneity Even at the Speed Limit of Folding: Large-scale Molecular Dynamics Study of a Fast-folding Variant of the Villin Headpiece". Journal of Molecular Biology 374 (3): 806-816. doi:10.1016/j.jmb.2007.09.069. 
Alex Robertson, Edgar Luttmann, Vijay S. Pande (2007). "Effects of long-range electrostatic forces on simulated protein folding kinetics". Journal of Computational Chemistry 29 (5): 694-700. doi:10.1002/jcc.20828. 
Nina Singhal Hinrichs and Vijay S. Pande (2007). "Calculation of the distribution of eigenvalues and eigenvectors in Markovian state models for molecular dynamics". Journal of Chemical Physics 126. doi:10.1063/1.2740261. 


[edit] 2008

Xuhui Huang, Gregory R. Bowman,and Vijay S. Pande (2008). "Convergence of folding free energy landscapes via application of enhanced sampling methods in a distributed computing environment". Journal of Chemical Physics 128 (20). PMID 18513049. 
Gregory R. Bowman, Xuhui Huang, Yuan Yao, Jian Sun, Gunnar Carlsson, Leonidas J. Guibas, and Vijay S. Pande (2008). "Structural Insight into RNA Hairpin Folding Intermediates". Journal of the American Chemical Society 130 (30): 9676-9678. doi:10.1021/ja8032857. 
Nicholas W. Kelley, V. Vishal, Grant A. Krafft, and Vijay S. Pande. (2008). "Simulating oligomerization at experimental concentrations and long timescales: A Markov state model approach.". Journal of Chemical Physics 129 (21). doi:10.1063/1.3010881. 
Paula M. Petrone, Christopher D. Snow, Del Lucent, and Vijay S. Pande (2008). "Side-chain recognition and gating in the ribosome exit tunnel". Proceedings of the National Academy of Sciences, USA 105 (43): 16549-16554. doi:10.1073/pnas.0801795105. 
Edgar Luttmann, Daniel L. Ensign, Vishal Vaidyanathan, Mike Houston, Noam Rimon, Jeppe Øland, Guha Jayachandran, Mark Friedrichs, Vijay S. Pande (2008). "Accelerating Molecular Dynamic Simulation on the Cell processor and PlayStation 3". Journal of Computational Chemistry 30 (2): 268-274. doi:10.1002/jcc.21054. 


[edit] 2009

Peter M. Kasson and Vijay S. Pande (2009). "Combining Mutual Information with Structural Analysis to Screen for Functionally Important Residues in Influenza Hemagglutinin". Pacific Symposium on Biocomputing 14: 492-503. PMID 19209725. 
Nicholas W. Kelley, Xuhui Huang, Stephen Tam, Christoph Spiess, Judith Frydman and Vijay S. Pande (2009). "The predicted structure of the headpiece of the Huntingtin protein and its implications on Huntingtin aggregation". Journal of Molecular Biology. doi:10.1016/j.jmb.2009.01.032. 
M. S. Friedrichs, P. Eastman, V. Vaidyanathan, M. Houston, S. LeGrand, A. L. Beberg, D. L. Ensign, C. M. Bruns, V. S. Pande (2009). "Accelerating molecular dynamic simulation on graphics processing units". Journal of Computational Chemistry. doi:10.1002/jcc.21209. PMID 19191337. 


[edit] High performance platforms

[edit] Graphical processing units
On October 2, 2006, the Folding@home Windows GPU client was released to the public as a beta test. After 9 days of processing from the Beta client the Folding@home project had received 31 teraFLOPs of computational performance from just 450 ATI Radeon X1900 GPUs, averaging at over 70x the performance of current CPU submissions, and the GPU clients remain the most powerful clients available in terms of performance per client (as of March 11, 2009, GPU clients accounted for over 60% of the entire project's throughput at an approximate ratio of 9 clients per teraFLOP—nVidia clients currently lead ATI clients in overall contribution and in performance per client).[2] On April 10, 2008, the second generation Windows GPU client was released to open beta testing, supporting ATI/AMD's Radeon HD 2000 and HD 3000 series, and also debuting a new core (GROGPU2 - Core 11). Inaccuracies with DirectX were cited as the main reason for the migration to the new version (the original GPU client was officially retired June 6, 2008[20]), which uses AMD/ATI's CAL. On June 17, 2008, a version of the second-generation Windows GPU client for CUDA enabled Nvidia GPUs was also released for public beta testing.[21] The GPU clients proved reliable enough to be promoted out of the beta phase and were officially released August 1, 2008.[22]
While the only officially released GPU v2.0 client is for Windows, this client can be run on Linux under Wine with NVIDIA graphics cards.[23] The client can operate on both 32- and 64-bit Linux platforms, but in either case the 32-bit CUDA toolkit is required. This configuration is not officially supported, though initial results have shown comparable performance to that of the native client and no problems with the scientific results have been found[citation needed]. An unofficial installation guide has been published.[23]

[edit] PlayStation 3




The PlayStation 3's Life With PlayStation client replaced the Folding@home application on 18 September 2008.


Stanford announced in August 2006 that a folding client was available to run on the Sony PlayStation 3.[24] The intent was that gamers would be able to contribute to the project by merely "contributing electricity", leaving their PlayStation 3 consoles running the client while not playing games. PS3 firmware version 1.6 (released on Thursday, March 22, 2007) allows for Folding@home software, a 50 MB download, to be used on the PS3.[2] A peak output of the project at 990 teraFLOPS was achieved on 25 March 2007, at which time the number of FLOPS from each PS3 as reported by Stanford fell, reducing the overall speed rating of those machines by 50%. This had the effect of bumping down the overall project speed to the mid 700 range and increasing the number of active PS3s required to achieve a petaFLOPS level to around 60,000.
On April 26, 2007, Sony released a new version of Folding@home which improved folding performance drastically, such that the updated PS3 clients produced 1500 teraFLOPS with 52,000 clients versus the previous 400 teraFLOPS by around 24,000 clients.[25] Lately, the console accounts for around 26% of all teraFLOPS at an approximate ratio of 35½ PS3 clients per teraFLOPS.
On December 19, 2007, Sony again updated the Folding@home client to version 1.3 to allow users to run music stored on their hard drives while contributing. Another feature of the 1.3 update allows users to automatically shut down their console after current work is done or after a limited period of time (for example 3 or 4 hours). Also, the software update added the Generalized Born implicit solvent model, so the FAH PS3 client gained more broad computing capabilities.[26][27] Shortly afterward, 1.3.1 was released to solve a mishandling of protocol resulting in difficulties sending and receiving Work Units due to heavy server loads stemming from the fault.
On 18 September 2008 the Folding@home client became Life With PlayStation. In addition to the existing functionality, the application also provides the user with access to information "channels", the first of which being the Live Channel which offers news headlines and weather through a 3D globe. The user can rotate and zoom in to any part of the world to access information provided by Google News and The Weather Channel, among other sources, all running whilst folding in the background. This update also provided more advanced simulation of protein folding and a new ranking system.[28]

[edit] Multi-core processing client




Folding@home SMP Client set to use 95% of a quad core processor.


As more modern CPUs are being released, the migration to multiple cores is becoming more adopted by the public, and the Pande Group is adding symmetric multiprocessing (SMP) support to the Folding@home client in the hopes of capturing the additional processing power. The SMP support is being achieved by utilizing Message Passing Interface protocols. In current state it is being confined inside a single node by hard coded usage of the localhost.
On November 13, 2006, the beta SMP Folding@home clients for x86-64 Linux and x86 Mac OS X were released. The beta win32 SMP Folding@home client is out as well, and a 32-bit Linux client is currently in development.[29]

[edit] Folding@home teams
A typical Folding@home user, running the client on a single PC, will likely not be ranked high on the list of contributors. However, if the user were to join a team, they would add the points they receive to a larger collective. Teams work by using the combined score of all their members. Thus, teams are ranked much higher than individual submitters. Rivalries between teams create friendly competition that benefits the folding community. Many teams publish their own stats, so members can have intra-team competitions for top spots.[30] Some teams offer prizes in an attempt to increase participation in the project.[31]

[edit] Development
The Folding@home project does not make the project source code available to the public, citing security and integrity concerns.[32][33] At the same time, the majority of the scientific codes used by the FAH (ex. Cosm, GROMACS, TINKER, AMBER, CPMD, BrookGPU) are largely Open-source software or under similar licenses.
A development version of Folding@home once ran on the open source BOINC framework; however, this version remained unreleased.[34]

[edit] Estimated energy consumption
A PlayStation 3 has a maximum power rating of 380 watts. As Folding@home is a CPU intensive application, it causes 100% utilization. However, according to Stanford's PS3 FAQ, "We expect the PS3 to use about 200W while running Folding@home."[35] As of December 27, 2008, there are 55,291 PS3s providing 1,559,000,000 MFlops of processing power. This amounts to 28,196 MFlops/PS3, and with Stanford's estimate of 200W per PS3 (for original units manufactured on the 90nm process), 140.98 MFlops/watt.[2] This would put the PS3 portion of Folding@home at 95th on the November 2008 Green500 list.[36] The Cell processors used in current units of the PlayStation 3 utilize 65nm technology (lowering power consumption to around 115W per PS3), with another upgrade to 45nm planned (further dropping consumption to around 80W/PS3). This will further increase the power efficiency of the contribution from PlayStation 3 units.
The total power consumption required to produce the processing power required by the project can be estimated based upon the average FLOPS per watt. As of November 2008, according to the Green500 list, the most efficient computer - also based on a version of the Cell BE - runs at 536.24 MFLOPS/watt.[37] One petaFLOPS equals 1,000,000,000 MFLOPSs. Therefore, the current Folding@home project, if it were theoretically using the most efficient CPUs currently available, would use at least 2.8 megawatts of power per petaFLOPS, slightly more than the world's first and only petaflop system, the Cell-based Roadrunner which uses 2.345MW. This is equivalent to the power needed to light approximately 40,000 standard house light bulbs (between 60 and 100 watts each), or the equivalent of 0.5-3 electrical wind mills depending on their size.[38]
Estimates of power usage per time period are more difficult than estimates of power usage per processing instruction. This is because Folding@home clients are often run on computers that would be powered-on even in the absence of the Folding@home client, and that run other programs simultaneously. While Folding@home increases processor utilization, and thus (usually) power consumption, the extent to which it does so is dependent on the client processor's normal operating load, and its ability to reduce clock speeds when presented with less-than-full utilization (a process known as dynamic frequency scaling). Consequently, the total power usage of the Folding@home client on a temporal basis is probably less than the figure that could be calculated by summing the peak power consumption of each of the project's component processors.

[edit] See also

Blue Gene
Grid computing
List of distributed computing projects
Rosetta@Home
Software for molecular modeling
Molecular modeling on GPU


[edit] References


^ Engadget, among other sites, announces that Guinness has recognized FAH as the most powerful distributed cluster, October 31, 2007. Retrieved November 5, 2007
^ a b c d e f "Client Statistics by OS". Folding@home distributed computing. Stanford University. 2006-11-12 (updated automatically). http://fah-web.stanford.edu/cgi-bin/main.py?qtype=osstats. Retrieved on 2008-01-05. 
^ Vijay Pande (2006). "Folding@home distributed computing home page". Stanford University. http://folding.stanford.edu. Retrieved on 2006-11-12. 
^ "Folding@home diseases studied FAQ". Stanford University. http://folding.stanford.edu/FAQ-diseases.html. 
^ "Futures in Biotech 27: Folding@home at 1.3 Petaflops" (Interview, webcast). http://twit.tv/fib27. 
^ a b "Folding@home - About" (FAQ). http://folding.stanford.edu/English/About. 
^ a b Vijay Pande and the Folding@home team (2009). "Folding@home - Papers". Folding@home distributed computing. Stanford University. http://folding.stanford.edu/English/Papers. Retrieved on 2009-02-19. 
^ C. Snow, H. Nguyen, V. S. Pande, and M. Gruebele. (2002). "Absolute comparison of simulated and experimental protein-folding dynamics". Nature 420 (6911): 102–106. doi:10.1038/nature01160. PMID 12422224. 
^ Vijay Pande (2005-10-16). "Folding@home with QMD core FAQ" (FAQ). Stanford University. http://folding.stanford.edu/QMD.html. Retrieved on 2006-12-03.  The site indicates that Folding@home uses a modification of CPMD allowing it to run on the supercluster environment.
^ a b "Cores - FaHWiki" (FAQ). http://fahwiki.net/index.php/Cores. Retrieved on 2007-11-06. 
^ "Folding Forum: Announcing project 5900 and Core_14 on advmethods". 2009. http://foldingforum.org/viewtopic.php?f=52&t=8734&start=0. Retrieved on 2009-03-02. 
^ "FAH & QMD & AMD64 & SSE2" (FAQ). http://fahwiki.net/index.php/FAH_&_QMD_&_AMD64_&_SSE2. 
^ "SHARPEN: Systematic Hierarchical Algorithms for Rotamers and Proteins on an Extended Network" (About). http://p450.caltech.edu/sharpen/sharpenabout.html. 
^ "SHARPEN". http://p450.caltech.edu/sharpen/sharpenprojects.html. 
^ "What is the state of Google Compute client?" (Blog). Folding@home support forum. Stanford University. http://forum.folding-community.org/fpost151025.html. Retrieved on 2006-11-12. 
^ Folding@home: Crossing the petaFLOPS barrier
^ Folding@home: Post petaflop
^ "Folding@home passes the 5 petaflop mark" from the official Folding@home blog
^ "TOP500 Roadrunner Performance Data". http://www.top500.org/system/performance/9707. Retrieved on 2008-12-27. 
^ "Folding@home: GPU1 has been retired, GPU2 for NVIDIA release nearing". http://folding.typepad.com/news/2008/06/gpu1-has-been-retired-gpu2-for-nvidia-release-nearing.html. 
^ "Folding@home: GPU2 beta client for NVIDIA now released". http://folding.typepad.com/news/2008/06/gpu2-beta-client-for-nvidia-now-released.html. 
^ "Folding@home: New clients are out (6.20)". http://folding.typepad.com/news/2008/08/new-clients-are-out-620.html. 
^ a b "Folding@Home GPU v2.0 Windows Client on Linux Wiki". 2008-08-23. http://gpu2.twomurs.com/index.php?title=Main_Page. Retrieved on 2008-11-06. 
^ Vijay Pande (2006-10-22). "PS3 FAQ". Stanford University. http://folding.stanford.edu/FAQ-PS3.html. Retrieved on 2006-11-13. 
^ "PS3 Folding Kicking Ass, Getting Update". http://kotaku.com/gaming/folding%40home/ps3-folding-kicking-ass-getting-update-255086.php. 
^ "Folding@home for PLAYSTATION3 Version 1.3". http://www.scei.co.jp/folding/en/update.html. Retrieved on 2007-12-31. 
^ Rimon, Noam (2007-12-18). "New Folding@home Features Coming". http://blog.us.playstation.com/2007/12/18/new-foldinghome-features-coming/. Retrieved on 2007-12-31. 
^ "Life With PlayStation out now". Kotaku. http://kotaku.com/5051551/life-with-playstation-out-now. 
^ Vijay Pande (2006-11-13). "Folding@home SMP Client FAQ". Stanford University. http://folding.stanford.edu/FAQ-SMP.html. Retrieved on 2006-11-13. 
^ [http://forum.folding-community.org/viewtopic.php?t=8846 Folding-community: why have teams?
^ "The Mprize-". http://www.mprize.org/index.php?ctype=news&pagename=blogdetaildisplay&BID=2008032-20053630&detaildisplay=Y. 
^ "Why not OpenSource?". http://folding-community.org/viewtopic.php?p=178218&highlight=#178218. 
^ "Folding@home Open Source FAQ". http://folding.stanford.edu/English/FAQ-OpenSource. 
^ "FAH on BOINC". Folding@home high performance client FAQ. http://folding.stanford.edu/English/FAQ-highperformance. 
^ "PS3 FAQ" (FAQ). http://www.stanford.edu/group/pandegroup/folding/FAQ-PS3.html. 
^ "Green 500". http://green500.org/lists/listdisplay.php?month=11&year=2008&list=green500_200811.csv&start=1&line=101. 
^ "The Green500 List". http://green500.org/lists/2008/11/list.php. Retrieved on 2008-12-27. 
^ "Windmill - Wikipedia, the free encyclopedia". http://en.wikipedia.org/wiki/Windmill#Modern_Windmills. 



[edit] External links

Folding@home project homepage
Folding@home Results (published papers)
FAH blog
FAH Forum
Folding@home Wiki
Official Folding@home Stats
Extreme OC Folding@home Stats
Kakao Folding@home Stats
Wikipedia team
Massive folding farm Pics of a dedicated contributor's installation
FoldWatcher A Folding@Home monitoring application


[edit] Multi-media links

Talk given by Folding@home author Vijay Pande at the PARC forum
Folding@home Instructional Video on YouTube
Interview of Vijay Pande about Folding@Home Project




Retrieved from "http://en.wikipedia.org/wiki/Folding@home"
Categories: Protein folds | Protein structure | Distributed computing projects | Windows software | Linux software | Mac OS X software | PlayStation 3 software | Cross-platform softwareHidden categories: All articles with unsourced statements | Articles with unsourced statements since November 2008 






Views


Article
Discussion
Edit this page
History 



Personal tools


Log in / create account






 if (window.isMSIE55) fixalpha(); 

Navigation


Main page
Contents
Featured content
Current events
Random article




Search




 
				




Interaction


About Wikipedia
Community portal
Recent changes
Contact Wikipedia
Donate to Wikipedia
Help




Toolbox


What links here
Related changes
Upload file
Special pages
Printable version Permanent linkCite this page 



Languages


Беларуская
Беларуская (тарашкевіца)
Català
Dansk
Deutsch
Español
Suomi
Français
Italiano
עברית
Lietuvių
Nederlands
日本語
‪Norsk (bokmål)‬
Polski
Português
Русский
Slovenčina
Tiếng Việt
Türkçe
Українська
粵語
中文









 This page was last modified on 14 March 2009, at 23:32.
All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)  Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S. registered 501(c)(3) tax-deductible nonprofit charity.
Privacy policy
About Wikipedia
Disclaimers



if (window.runOnloadHook) runOnloadHook();
